{
  "$schema": "http://json-schema.org/draft-07/schema#",

  "type": "object",
  "required": [
    "$schema",
    "kind",
    "name",
    "type",
    "description",
    "long_name",
    "versions"
  ],
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri-reference",
      "const": "ext_schema.json#",
      "description": "Path to schema, relative to <UDB ROOT>/schemas"
    },
    "kind": {
      "type": "string",
      "const": "extension",
      "description": "Object type"
    },
    "name": { "$ref": "schema_defs.json#/$defs/extension_name" },
    "long_name": {
      "type": "string",
      "description": "One line description for the extension"
    },
    "description": {
      "$ref": "schema_defs.json#/$defs/spec_text",
      "description": "Full documentation of the extension"
    },
    "rvi_jira_issue": {
      "type": "string",
      "description": "JIRA issue number for the RVI issue that tracks this extension"
    },
    "company": {
      "description": "The company that developed this extension",
      "$ref": "schema_defs.json#/$defs/company"
    },
    "doc_license": {
      "$ref": "schema_defs.json#/$defs/license"
    },
    "type": {
      "enum": ["unprivileged", "privileged"],
      "description": "Either unprivileged or privileged"
    },
    "conflicts_with": {
      "description": "Condition represeting all the conflicts with this extension. If the condition is true, the extension cannot be implemented",
      "$ref": "schema_defs.json#/$defs/condition"
    },
    "requirements": {
      "description": "Condition represeting requirements of this extension. If the condition is false, the extension cannot be implemented",
      "$ref": "schema_defs.json#/$defs/condition"
    },
    "versions": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["version", "state"],
        "if": {
          "properties": {
            "state": {
              "const": "ratified"
            }
          }
        },
        "then": {
          "required": ["ratification_date"]
        },
        "properties": {
          "version": {
            "$ref": "schema_defs.json#/$defs/extension_version"
          },
          "state": {
            "$ref": "schema_defs.json#/$defs/spec_state",
            "description": "Current state of this version"
          },
          "repositories": {
            "description": "Repositories associated with this extension",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "branch": {
                  "type": "string",
                  "description": "Branch/tag where the work is done"
                }
              },
              "additionalProperties": false
            }
          },
          "ratification_date": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^20[0-9][0-9]-(0[1-9]|1[0-2])$",
                "$comment": "When ratification date is known",
                "description": "A specific year and month in YYYY-MM format",
                "examples": ["2019-01", "2024-12"]
              },
              {
                "type": "string",
                "pattern": "^unknown$",
                "$comment": "When ratification date is unknown"
              },
              { "type": "null", "$comment": "When version isn't ratified" }
            ]
          },
          "changes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Changes since last version"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Link to ratified document"
          },
          "required_extensions": {
            "description": "Extension(s) required by this extension",
            "$ref": "schema_defs.json#/$defs/extension_requirement_list"
          },
          "contributors": {
            "description": "List of contributors to this version of the extension",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Contributor name, in 'GIVEN_NAME SURNAME' format"
                },
                "company": {
                  "type": "string",
                  "description": "Company the contributor worked for, or 'Individual'"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "E-mail address for the contributor"
                }
              }
            }
          }
        },
        "additionalProperties": false
      }
    },
    "exception_codes": {
      "type": "array",
      "items": {
        "type": "object",
        "description": "Exceptions defined by this extension",
        "required": ["num", "name", "var"],
        "properties": {
          "num": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "Long-form name (can have special characters)"
          },
          "var": {
            "type": "string",
            "description": "Field name for the InterruptCode enum in IDL"
          },
          "when": {
            "$ref": "schema_defs.json#/$defs/condition"
          }
        },
        "additionalProperties": false
      }
    },
    "interrupt_codes": {
      "type": "array",
      "items": {
        "type": "object",
        "description": "Interrupts defined by this extension",
        "properties": {
          "num": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "Long-form name (can have special characters)"
          },
          "var": {
            "type": "string",
            "description": "Field name for the InterruptCode enum in IDL"
          }
        },
        "additionalProperties": false
      }
    },
    "$source": {
      "type": "string",
      "description": "Source file where this extension was defined"
    },
    "cert_normative_rules": {
      "$ref": "schema_defs.json#/$defs/cert_normative_rules"
    },
    "cert_test_procedures": {
      "$ref": "schema_defs.json#/$defs/cert_test_procedures"
    }
  },
  "additionalProperties": false
}
