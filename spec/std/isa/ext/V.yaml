# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../schemas/ext_schema.json

$schema: "ext_schema.json#"
kind: extension
name: V
type: unprivileged
long_name: Variable-length vector
versions:
  - version: "1.0.0"
    state: ratified
    ratification_date: null
description: |
  TODO
params:
  MUTABLE_MISA_V:
    description: |
      Indicates whether or not the `V` extension can be disabled with the `misa.V` bit.
    schema:
      type: boolean
  HW_MSTATUS_VS_DIRTY_UPDATE:
    description: |
      Indicates whether or not hardware will write to `mstatus.VS`

      Values are:
      [separator="!"]
      !===
      h! never  ! Hardware never writes `mstatus.VS`
      h! precise  ! Hardware writes `mstatus.VS` to the Dirty (3) state precisely when V registers are modified
      h! imprecise ! Hardware writes `mstatus.VS` imprecisely. This will result in a call to unpredictable() on any attempt to read `mstatus` or write vector state.
      !===
    schema:
      type: string
      enum: ["never", "precise", "imprecise"]
  MSTATUS_VS_LEGAL_VALUES:
    description: |
      The set of values that mstatus.VS will accept from a software write.
    schema:
      type: array
      items:
        type: integer
        enum: [0, 1, 2, 3]
      maxItems: 4
      uniqueItems: true
    also_defined_in: S
    extra_validation: |
      assert MSTATUS_VS_LEGAL_VALUES.include?(0) && MSTATUS_VS_LEGAL_VALUES.include?(3) if ext?(:V)

      # if HW is writing VS, then Dirty (3) better be a supported value
      assert MSTATUS_VS_LEGAL_VALUES.include?(3) if ext?(:V) && (HW_MSTATUS_VS_DIRTY_UPDATE != "never")
  RVV_VL_WHEN_AVL_LT_DOUBLE_VLMAX:
    description: |
      The value assigned to VL when AVL < 2*VLMAX.
    schema:
      type: string
      enum: ["ceil(AVL/2)", "VLMAX", "custom"]
  FOLLOW_VTYPE_RESET_RECOMMENDATION:
    description: |
      It is recommended that at reset, vtype.vill is set, the remaining bits in vtype are zero, and vl is set to zero.
      If this parameter is set to true, this recommendation is followed. If it is false, at reset the respective fields will be "UNDEFINED_LEGAL".
    schema:
      type: boolean
  VLEN:
    description: |
      The number of bits in a single vector register.
    schema:
      type: integer
#    requirements:
#      idl(): |
#        -> (VLEN >= ELEN) && (VLEN <='h10000) && (popcount(VLEN) == 1);
#      reason: VLEN >= ELEN, which must be a power of 2, and must be no greater than 2^16.
  ELEN:
    description: |
      The maximum size in bits of a vector element that any operation can produce or consume.
    schema:
      type: integer
#    requirements:
#      idl(): |
#        -> (ELEN >='h8) && (popcount(ELEN) == 1);
#      reason: ELEN >= 8, which must be a power of 2.
