# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../schemas/ext_schema.json

$schema: "ext_schema.json#"
kind: extension
name: I
type: unprivileged
long_name: Base integer ISA (RV32I or RV64I)
versions:
  - version: "2.1.0"
    state: ratified
    ratification_date: 2019-06
    changes:
      - ratified RVWMO memory model and exclusion of FENCE.I, counters, and CSR instructions that were in previous base ISA
description: |
  Base integer instructions -- TODO

normative_rules:
  - name: R-type_ops
    type: extension
    description: R-type instruction source and destination operands
    doc_links: ["norm:basegrp:all:R-type_operands"]
    coverage_points: [cp_rs1, cp_rs2, cp_rd, cp_rs1_edges]

  - name: x0eq0
    type: extension
    description: All X0eq0
    doc_links: ["norm:basegrp:all:x0eq0"]
    coverage_points: [cp_rs1, cp_rs2, cp_rd]

  - name: imm_always_sex
    type: extension
    description: place holder
    doc_links: ["norm:basegrp:all:imm_always_sex"]
    coverage_points: [cp_imm_edges]

  - name: pcreg
    type: extension
    description: All PCREG
    doc_links: ["norm:basegrp:all:pcreg"]
    coverage_points: [cp_imm_edges]

  - name: rv32_xregwidth
    type: extension
    description: rv32 xregwidth
    doc_links: ["norm:basegrp:rv32:xregwidth"]
    # TODO: add "when" statement saying XLEN == 32

  - name: rv32i_rv64i_other_xregs
    type: extension
    description: Registers x1 to x31
    doc_links: ["norm:bases:rv32i_rv64i:other-xregs"]

  #cti and LS

  - name: taken_cti_misaligned_exc
    type: instruction
    description: CTI misaligned execution
    doc_links: ["norm:instgrp:taken_cti:ia_misaligned_exc"]
    # TODO: add "when" statement referencing the taken CTI instruction group

  - name: addr_misaligned_or_access_fault_exc
    type: instruction
    description: LS addr misaligned or access fault ex
    doc_links: ["norm:instgrp:load_store:addr_misaligned_or_access_fault_exc"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: atomicity_for_aligned
    type: instruction
    description: LS atomicity for aligned
    doc_links: ["norm:instgrp:load_store:atomicity_for_aligned"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: big_endian_op
    type: instruction
    description: LS big endian operation
    doc_links: ["norm:instgrp:load_store:big_endian_operation"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: ls_effective_addr
    type: instruction
    description: LS effective address
    doc_links: ["norm:instgrp:load_store:ea"]
    coverage_points: [cp_imm_edges]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: endian_byte_invariant
    type: instruction
    description: LS endian byte invariant
    doc_links: ["norm:instgrp:load_store:endian_byte_invariant"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: endian_byte_op
    type: instruction
    description: LS endian byte operation
    doc_links: ["norm:instgrp:load_store:endian_byte_operation"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: little_endian_op
    type: instruction
    description: LS little endian operation
    doc_links: ["norm:instgrp:load_store:little_endian_operation"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: ls_no_exc_aligned
    type: instruction
    description: LS no exc aligned
    doc_links: ["norm:instgrp:load_store:no_exc_aligned"]
    # TODO: add "when" statement referencing the load/store instruction group

  - name: ld_exc_x0
    type: instruction
    description: Load to x0 exc
    doc_links: ["norm:instgrp:load:exc_x0"]
    # TODO: add "when" statement referencing the load instruction group

  - name: ld_op
    type: instruction
    description: Load operation
    doc_links: ["norm:instgrp:load:operation"]
    coverage_points: [cp_rd]
    # TODO: add "when" statement referencing the load instruction group

  - name: st_op
    type: instruction
    description: Store operation
    doc_links: ["norm:instgrp:store:operation"]
    coverage_points: [cp_rs2]
    # TODO: add "when" statement referencing the store instruction group

  - name: add_sub_overflow
    type: instruction
    description: Treatment of overflow
    doc_links: ["norm:insts:add_sub:overflow"]
    # TODO: add "when" statement listing the add/sub instructions (what about 16-bit compressed inst and RV64I add/sub?)

  - name: br_target
    type: instruction
    description: Target address
    doc_links: ["norm:instgrp:branch:target"]
    # TODO: add "when" statement listing the branch instruction group

  - name: bge_bgeu_op
    type: instruction
    description: Basic operation
    doc_links: ["norm:insts:bge_bgeu:operation"]
    # TODO: add "when" statement listing the bge and bgeu instructions

# not included in initial spreadsheet.

  - name: cond_br_no_ia_misaligned_exc_not_taken
    type: instruction
    description: No IA misaligned exc on not taken
    doc_links: ["norm:instgrp:cond_branch:no_ia_misaligned_exc_not_taken"]

  - name: cti_ia_fault_exc_on_target
    type: instruction
    description: CTI IA fault exc on target
    doc_links: ["norm:instgrp:cti:ia_fault_exc_on_target"]

  - name: no_cti_delay_slots
    type: instruction
    description: no CTI delay slots
    doc_links: ["norm:instgrp:cti:no_cti_delay_slots"]

# params - TODO: Match existing parameter names defined by UDB.

  - name: endianness_little_or_big
    type: parameter
    description: Param Little or big endian
    doc_links: ["norm:param:I:endianness:little_or_big"]

  - name: misaligned_ldst_contained_or_fatal_trap
    type: parameter
    description: misaligned Ldst contained or fatal trap
    doc_links: ["norm:param:I:misaligned_ldst:contained_or_fatal_trap"]

  - name: misaligned_ldst_eei_dependent_behavior
    type: parameter
    description: misaligned ldst eei dependent behavior
    doc_links: ["norm:param:I:misaligned_ldst:eei_dependent_behavior"]

  - name: misaligned_ldst_fully_hw_supported
    type: parameter
    description: misaligned ldst fully hw supported
    doc_links: ["norm:param:I:misaligned_ldst:fully_hw_supported"]

  - name: misaligned_ldst_fully_hw_supported_or_visible_trap
    type: parameter
    description: Misaligned ldst fully hw supported or visible trap
    doc_links: ["norm:param:I:misaligned_ldst:fully_hw_supported_or_visible_trap"]

  - name: misaligned_ldst_hw_or_invisible_trap_func_of_addr
    type: parameter
    description: Misaligned ldst hw or invisible trap func of addr
    doc_links: ["norm:param:I:misaligned_ldst:hw_or_invisible_trap_func_of_addr"]

  - name: misaligned_ldst_invisible_trap
    type: parameter
    description: Misaligned ldst invisible trap
    doc_links: ["norm:param:I:misaligned_ldst:invisible_trap"]

# Basic unprivileged coverage points
# TODO: Add "when" statements listing instructions or instruction groups that apply to each coverage point.
coverage_points:
  - name: cp_asm_count
    bins: 1
    description: Number of times the instruction is executed in the test, must be greater than 0.
  - name: cp_rs1
    bins: 32
    description: The rs1 register number used in the instruction.
  - name: cp_rs2
    bins: 32
    description: The rs2 register number used in the instruction.
  - name: cp_rd
    bins: 32
    description: The rd register number used in the instruction.
  - name: cp_rs1_edges
    bins: 16
    description: Edge values for rs1 (see <<t-integer-edge-definitions>>).
  - name: cp_rs2_edges
    bins: 16
    description: Edge values for rs2 (see <<t-integer-edge-definitions>>).
  - name: cp_imm_edges
    bins: 16
    description: Edge values for 12-bit immediates (see <<t-immediate-edge-definitions>>).
  - name: cr_rs1_imm_edges
    bins: 16*20
    description: Cross-product of rs1 and 12-bit immediate edges (see <<t-immediate-edge-definitions>>).
  - name: cr_rs1_rs2_edges
    bins: 16*16
    description: Cross-product of rs1 and rs2 edges, used for instructions with two source registers.
  - name: cmp_rs1_rs2
    bins: 32
    description: The rs1 and rs2 registers have the same register number.
  - name: cmp_rd_rs1
    bins: 32
    description: The rd register has the same register number as the rs1 register.
  - name: cmp_rd_rs2
    bins: 32
    description: The rd register has the same register number as the rs2 register.
  - name: cmp_rd_rs1_rs2
    bins: 32
    description: The rd register has the same register number as both the rs1 and rs2 registers.
  - name: cp_offset
    bins: 2
    description: A branch or jalr instruction has a positive and negative offset.
  - name: cp_uimm
    bins: XLEN
    description: Exercise all XLEN unsigned immediate values, such as shift amounts.
  - name: cp_align
    bins: â‰¤ 8
    description: Alignment of naturally-aligned sub-doubleword load/store operand within doubleword
  - name: cp_gpr_hazard
    bins: 4
    description: "General-purpose register hazard detection: RAW, WAR, WAW, and no hazard."

# Modified coverage points for the I extension
# TODO: Add "when" statements listing instructions or instruction groups that apply to each coverage point.
  - name: cp_rs1_nx0
    bins: 31
    description: |
      The rs1 register number used in the instruction, excluding x0.  x0 is hardwired to 0, which
      results in potentially access faults for loads, stores, and jalr.
  - name: cmp_rd_rs1_nx0
    bins: 31
    description: "See cp_rs1_nx0"
  - name: cp_offset_jalr
    bins: 6
    description: "cp_offset + 2*2 combinations of rs1_val[0] and imm[0] affecting lsb of jalr address"
  - name: cp_uimm_5
    bins: 32
    description: "5-bit unsigned immediate shift amount for {slliw/srliw/sraiw}"
  - name: cp_imm_edges_20bit
    bins: 27
    description: "20-bit variant of <<t-immediate-edge-definitions>> for `lui` and `auipc`."
  - name: cp_imm_edges_jal
    bins: 23
    description: |
      20-bit positive and negative jump offsets for `jal`.
      Note that testing the full 20-bit range takes a large amount of program memory,
      so tests may cover a subset of this range.
  - name: cp_gpr_hazard_r
    bins: 2
    description: "RAR and no hazard for instructions that only write a register"
  - name: cp_gpr_hazard_w
    bins: 3
    description: "WAW, WAR and no hazard for instructions that only write a register"
  - name: cp_gpr_hazard_rw
    bins: 4
    description: "RAW, WAW, WAR and no hazard for instructions that read and write registers"
  - name: cp_align_{byte/hword/word}
    bins: 8/4/2
    description: "Alignment of naturally-aligned load/store operand within doubleword in memory"
  - name: cp_custom_fence
    bins: 3
    description: "Test that fence, fence rw,rw, and fence.tso all execute without trapping."
