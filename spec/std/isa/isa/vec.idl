# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

%version: 1.0

# - test suite?
# - Vector params (there will be many)
# - Vector state
# - Order (might be dictated somewhat by test suite)
#   - vset*
#   - integer arith (vadd/vsub/vrsub(.vv,.vx,.vi), compare, min, max)
#   - integer widening arith ()

# the vector register file
Bits<VLEN> v[32];

enum VectorLmulType {
  Divide
  Multiply
}

struct VectorState {
  Bits<7> sew;
  Bits<3> log2_sew;
  VectorLmulType lmul_type;
  Bits<2> log2_lmul;
}

function vector_state {
  returns VectorState
  description {
    Get the current vector state from CSRs
  }
  body {
    VectorState state;

    state.log2_sew = 3 + CSR[vtype].VSEW;
    state.sew = 7'b1 << state.log2_sew;

    Bits<3> vlmul = CSR[vtype].VLMUL;
    state.lmul_type = CSR[vtype].VLMUL[2] == 1'b1 ? VectorLmulType::Divide : VectorLmulType::Multiply;
    state.log2_lmul = CSR[vtype].VLMUL[1:0];
    if (vlmul == 3'b101) {
      state.log2_lmul = 3;
    } else if (vlmul == 3'b110) {
      state.log2_lmul = 2;
    } else if (vlmul == 3'b111) {
      state.log2_lmul = 1;
    } else if (vlmul == 3'b100) {
      unpredictable("VLMUL value 0b100 is reserved");
    }

    return state;
  }
}
