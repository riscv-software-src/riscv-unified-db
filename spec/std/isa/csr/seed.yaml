# Copyright (c) Qualcomm Technologies, Inc.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../schemas/csr_schema.json

$schema: "csr_schema.json#"
kind: csr
name: seed
long_name: Physical Entropy Seed Register
address: 0x015
type: unprivileged
priv_mode: U
length: XLEN
definedBy: Zkr
description:
  - id: csr-seed-purpose
    normative: true
    text: |
      The `seed` register is an XLEN-bit WARL read-only CSR that provides up to 16 bits of physical entropy.
      Software can read this CSR to obtain entropy for cryptographic use. If no entropy is available, the value
      may return 0 or an undefined pattern. Reading from `seed` may have side effects, depending on implementation.
  - id: csr-seed-behavior
    normative: false
    text: |
      The entropy value returned by `seed` may change between reads. Some implementations may repeat values,
      return zero if entropy is not available, or exhibit other implementation-defined behavior.
      The returned value must never cause traps or undefined instruction behavior.
      Only bits [15:0] are guaranteed to contain valid entropy.

fields:
  SEED:
    location_rv64: 63-0
    location_rv32: 31-0
    description: |
      Contains the physical entropy bits. Bits [15:0] are valid entropy; upper bits are zero or undefined.
      This field is read-only. Reading it may consume entropy.
    type(): return CsrFieldType::RO;
    reset_value: UNDEFINED_LEGAL
    sw_write(_): raise(ExceptionCode::IllegalInstruction, mode(), $encoding);

sw_read(): |
  if (!implemented?(ExtensionName::Zkr)) {
    raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  # Provide only the entropy bits in [15:0], rest are zero/undefined
  return entropy_device.read() & ((1 << ZKR_SEED_WIDTH) - 1);
