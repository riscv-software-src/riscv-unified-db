# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../schemas/csr_schema.json

$schema: "csr_schema.json#"
kind: csr
name: stimecmph
long_name: Supervisor Timer Compare High
address: 0x15D
writable: true
priv_mode: S
length: 32
base: 32
definedBy: Sstc
description: |
  The `stimecmph` CSR is the upper 32 bits of the supervisor timer compare register for RV32.
  Together with `stimecmp`, this forms a 64-bit timer compare value.

  When the 64-bit `time` CSR reaches or exceeds the 64-bit value formed by concatenating
  `stimecmph` and `stimecmp` (`{stimecmph, stimecmp}`), a supervisor timer interrupt is triggered.

  This CSR is available when the Sstc extension is implemented and `menvcfg.STCE` is set.
  When `menvcfg.STCE` is clear, accessing this CSR will cause an `IllegalInstruction` exception.

sw_read(): |
  if (implemented?(ExtensionName::S) && implemented?(ExtensionName::Sstc) && CSR[menvcfg].STCE == 0) {
    raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
  }
  if (virtual_mode?() && CSR[henvcfg].STCE == 0) {
    raise(ExceptionCode::VirtualInstruction, mode(), $encoding);
  }
  if (virtual_mode?()) {
    return CSR[vstimecmph].VALUE;
  } else {
    return CSR[stimecmph].VALUE;
  }

fields:
  VALUE:
    location: 31-0
    alias: stimecmp.VALUE[63:32]
    description: |
      Timer Compare High Value

      Upper 32 bits of the 64-bit supervisor timer compare value.
      The full compare value is `{stimecmph.VALUE, stimecmp.VALUE}`.
    type: RW
    reset_value: 0
    definedBy: Sstc
    sw_write(csr_value): |
      if (implemented?(ExtensionName::S) && implemented?(ExtensionName::Sstc) && CSR[menvcfg].STCE == 0) {
        raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
      }
      if (virtual_mode?() && CSR[henvcfg].STCE == 0) {
        raise(ExceptionCode::VirtualInstruction, mode(), $encoding);
      }
      if (virtual_mode?()) {
        CSR[vstimecmph].VALUE = csr_value.VALUE;
        return CSR[stimecmph].VALUE;
      } else {
        return csr_value.VALUE;
      }
