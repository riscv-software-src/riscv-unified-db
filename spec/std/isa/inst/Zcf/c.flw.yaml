# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: c.flw
long_name: Load single-precision
description: |
  Loads a single precision floating-point value from memory into register fd.
  It computes an effective address by adding the zero-extended offset, scaled by 4,
  to the base address in register xs1.
  It expands to `flw` `fd, offset(xs1)`.
definedBy:
  anyOf:
    - allOf:
        - C
        - F
    - Zcf
assembly: fd, imm(xs1)
base: 32
encoding:
  match: 011-----------00
  variables:
    - name: imm
      location: 5|12-10|6
      left_shift: 2
    - name: fd
      location: 4-2
    - name: xs1
      location: 9-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  if (implemented?(ExtensionName::C) && (CSR[misa].C == 1'b0)) {
    raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  XReg virtual_address = X[creg2reg(xs1)] + imm;

  X[creg2reg(fd)] = sext(read_memory<32>(virtual_address, $encoding), 32);
