# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hana` gem.
# Please instead update this file by running `bin/tapioca gem hana`.


# source://hana//lib/hana.rb#3
module Hana; end

# source://hana//lib/hana.rb#56
class Hana::Patch
  # @return [Patch] a new instance of Patch
  #
  # source://hana//lib/hana.rb#88
  def initialize(is); end

  # source://hana//lib/hana.rb#94
  def apply(doc); end

  private

  # @raise [MissingTargetException]
  #
  # source://hana//lib/hana.rb#107
  def add(ins, doc); end

  # source://hana//lib/hana.rb#223
  def add_op(dest, key, obj); end

  # @raise [ObjectOperationOnArrayException]
  #
  # source://hana//lib/hana.rb#214
  def check_index(obj, key); end

  # @raise [MissingTargetException]
  #
  # source://hana//lib/hana.rb#144
  def copy(ins, doc); end

  # source://hana//lib/hana.rb#202
  def get_path(ins); end

  # @raise [MissingTargetException]
  #
  # source://hana//lib/hana.rb#128
  def move(ins, doc); end

  # source://hana//lib/hana.rb#193
  def remove(ins, doc); end

  # source://hana//lib/hana.rb#180
  def replace(ins, doc); end

  # source://hana//lib/hana.rb#232
  def rm_op(obj, key); end

  # source://hana//lib/hana.rb#170
  def test(ins, doc); end
end

# source://hana//lib/hana.rb#57
class Hana::Patch::Exception < ::StandardError; end

# source://hana//lib/hana.rb#104
Hana::Patch::FROM = T.let(T.unsafe(nil), String)

# source://hana//lib/hana.rb#60
class Hana::Patch::FailedTestException < ::Hana::Patch::Exception
  # @return [FailedTestException] a new instance of FailedTestException
  #
  # source://hana//lib/hana.rb#63
  def initialize(path, value); end

  # Returns the value of attribute path.
  #
  # source://hana//lib/hana.rb#61
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://hana//lib/hana.rb#61
  def path=(_arg0); end

  # Returns the value of attribute value.
  #
  # source://hana//lib/hana.rb#61
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://hana//lib/hana.rb#61
  def value=(_arg0); end
end

# source://hana//lib/hana.rb#79
class Hana::Patch::IndexError < ::Hana::Patch::Exception; end

# source://hana//lib/hana.rb#76
class Hana::Patch::InvalidObjectOperationException < ::Hana::Patch::Exception; end

# source://hana//lib/hana.rb#85
class Hana::Patch::InvalidPath < ::Hana::Patch::Exception; end

# source://hana//lib/hana.rb#82
class Hana::Patch::MissingTargetException < ::Hana::Patch::Exception; end

# source://hana//lib/hana.rb#73
class Hana::Patch::ObjectOperationOnArrayException < ::Hana::Patch::Exception; end

# source://hana//lib/hana.rb#70
class Hana::Patch::OutOfBoundsException < ::Hana::Patch::Exception; end

# source://hana//lib/hana.rb#92
Hana::Patch::VALID = T.let(T.unsafe(nil), Hash)

# source://hana//lib/hana.rb#105
Hana::Patch::VALUE = T.let(T.unsafe(nil), String)

# source://hana//lib/hana.rb#6
class Hana::Pointer
  include ::Enumerable

  # @return [Pointer] a new instance of Pointer
  #
  # source://hana//lib/hana.rb#15
  def initialize(path); end

  # source://hana//lib/hana.rb#19
  def each(&block); end

  # source://hana//lib/hana.rb#21
  def eval(object); end

  class << self
    # source://hana//lib/hana.rb#27
    def eval(list, object); end

    # source://hana//lib/hana.rb#39
    def parse(path); end
  end
end

# source://hana//lib/hana.rb#25
Hana::Pointer::ESC = T.let(T.unsafe(nil), Hash)

# source://hana//lib/hana.rb#9
class Hana::Pointer::Exception < ::StandardError; end

# source://hana//lib/hana.rb#12
class Hana::Pointer::FormatError < ::Hana::Pointer::Exception; end

# source://hana//lib/hana.rb#4
Hana::VERSION = T.let(T.unsafe(nil), String)
