# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `Ascii85` gem.
# Please instead update this file by running `bin/tapioca gem Ascii85`.


# source://Ascii85//lib/ascii85.rb#15
module Ascii85
  class << self
    # Searches through a String and decodes the first substring enclosed by '<~' and '~>'.
    #
    # @example Decoding Ascii85 content
    #   Ascii85.decode("<~;KZGo~>")
    #   # => "Ruby"
    # @example Decoding with multiple Ascii85 blocks present (ignores all but the first)
    #   Ascii85.decode("Foo<~;KZGo~>Bar<~87cURDZ~>Baz")
    #   # => "Ruby"
    # @example When no delimiters are found
    #   Ascii85.decode("No delimiters")
    #   # => ""
    # @example Decoding to an IO object
    #   output = StringIO.new
    #   Ascii85.decode("<~;KZGo~>", out: output)
    #   # => output (with "Ruby" written to it)
    # @note This method only accepts a String, not an IO-like object, as the entire input
    #   needs to be available to ensure validity.
    # @param str [String] The String containing Ascii85-encoded content
    # @param out [IO, nil] An optional IO-like object to write the output to
    # @raise [Ascii85::DecodingError] When malformed input is encountered
    # @return [String, IO] The decoded String (in ASCII-8BIT encoding) or the output IO object (if it was provided)
    #
    # source://Ascii85//lib/ascii85.rb#198
    def decode(str, out: T.unsafe(nil)); end

    # Decodes the given raw Ascii85-encoded String or IO-like object.
    #
    # @example Decoding a raw Ascii85 String
    #   Ascii85.decode_raw(";KZGo")
    #   # => "Ruby"
    # @example Decoding from an IO-like object
    #   input = StringIO.new(";KZGo")
    #   Ascii85.decode_raw(input)
    #   # => "Ruby"
    # @example Decoding to an IO object
    #   output = StringIO.new
    #   Ascii85.decode_raw(";KZGo", out: output)
    #   # => output (with "Ruby" written to it)
    # @note The input must not be enclosed in '<~' and '~>' delimiters.
    # @param str_or_io [String, IO] The Ascii85-encoded input to decode
    # @param out [IO, nil] An optional IO-like object to write the output to
    # @raise [Ascii85::DecodingError] When malformed input is encountered
    # @return [String, IO] The decoded String (in ASCII-8BIT encoding) or the output IO object (if it was provided)
    #
    # source://Ascii85//lib/ascii85.rb#228
    def decode_raw(str_or_io, out: T.unsafe(nil)); end

    # Encodes the bytes of the given String or IO-like object as Ascii85.
    #
    # @example Encoding a simple String
    #   Ascii85.encode("Ruby")
    #   # => <~;KZGo~>
    # @example Encoding with line wrapping
    #   Ascii85.encode("Supercalifragilisticexpialidocious", 15)
    #   # => <~;g!%jEarNoBkD
    #   #    BoB5)0rF*),+AU&
    #   #    0.@;KXgDe!L"F`R
    #   #    ~>
    # @example Encoding without line wrapping
    #   Ascii85.encode("Supercalifragilisticexpialidocious", false)
    #   # => <~;g!%jEarNoBkDBoB5)0rF*),+AU&0.@;KXgDe!L"F`R~>
    # @example Encoding from an IO-like object
    #   input = StringIO.new("Ruby")
    #   Ascii85.encode(input)
    #   # => "<~;KZGo~>"
    # @example Encoding to an IO object
    #   output = StringIO.new
    #   Ascii85.encode("Ruby", out: output)
    #   # => output (with "<~;KZGo~>" written to it)
    # @param str_or_io [String, IO] The input to encode
    # @param wrap_lines [Integer, false] The line length for wrapping, or +false+ for no wrapping
    # @param out [IO, nil] An optional IO-like object to write the output to
    # @return [String, IO] The encoded String or the output IO object that was passed in
    #
    # source://Ascii85//lib/ascii85.rb#56
    def encode(str_or_io, wrap_lines = T.unsafe(nil), out: T.unsafe(nil)); end

    # Searches through a String and extracts the first substring enclosed by '<~' and '~>'.
    #
    # @example Extracting Ascii85 content
    #   Ascii85.extract("Foo<~;KZGo~>Bar<~z~>Baz")
    #   # => ";KZGo"
    # @example When no delimiters are found
    #   Ascii85.extract("No delimiters")
    #   # => ""
    # @note This method only accepts a String, not an IO-like object, as the entire input
    #   needs to be available to ensure validity.
    # @param str [String] The String to search through
    # @return [String] The extracted substring, or an empty String if no valid delimiters are found
    #
    # source://Ascii85//lib/ascii85.rb#152
    def extract(str); end

    private

    # @return [Integer] Buffer size for encoded output
    #
    # source://Ascii85//lib/ascii85.rb#453
    def encoded_chunk_size; end

    # Check if an object is IO-like
    #
    # @private
    # @return [Boolean]
    #
    # source://Ascii85//lib/ascii85.rb#440
    def io_like?(obj); end

    # @return [Integer] Buffer size for to-be-encoded input
    #
    # source://Ascii85//lib/ascii85.rb#447
    def unencoded_chunk_size; end

    # Copies the given String and forces the encoding of the returned copy to
    # be Encoding::ASCII_8BIT.
    #
    # source://Ascii85//lib/ascii85.rb#318
    def unfrozen_binary_copy(str); end
  end
end

# Error raised when Ascii85 encounters problems while decoding the input.
#
# This error is raised for the following issues:
# * An invalid character (valid characters are '!'..'u' and 'z')
# * A 'z' character inside a 5-tuple ('z' is only valid on its own)
# * An invalid 5-tuple that decodes to >= 2**32
# * The last tuple consisting of a single character. Valid tuples always have
#   at least two characters.
#
# source://Ascii85//lib/ascii85.rb#468
class Ascii85::DecodingError < ::StandardError; end
