# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prawn-svg` gem.
# Please instead update this file by running `bin/tapioca gem prawn-svg`.


# Prawn::SVG::Interface makes a Prawn::SVG::Document instance, uses that object to parse the supplied
# SVG into Prawn-compatible method calls, and then calls the Prawn methods.
#
# source://prawn-svg//lib/prawn/svg/version.rb#1
module Prawn
  private

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug; end

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug=(_arg0); end

  # source://prawn/2.4.0/lib/prawn.rb#41
  def verify_options(accepted, actual); end

  class << self
    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug; end

    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug=(_arg0); end

    # source://prawn/2.4.0/lib/prawn/image_handler.rb#12
    def image_handler; end

    # source://prawn/2.4.0/lib/prawn.rb#41
    def verify_options(accepted, actual); end
  end
end

class Prawn::Document
  include ::Prawn::SVG::Extensions::AdditionalGradientTransforms
  include ::PDF::Core::Text
  include ::Prawn::Text::Formatted
  include ::Prawn::Graphics::BlendMode
  include ::Prawn::Graphics::Color
  include ::Prawn::Graphics::Dash
  include ::Prawn::Graphics::CapStyle
  include ::Prawn::Graphics::JoinStyle
  include ::Prawn::Graphics::Transparency
  include ::Prawn::Graphics::Transformation
  include ::Prawn::Graphics::Patterns
end

# source://prawn-svg//lib/prawn/svg/version.rb#2
module Prawn::SVG; end

# source://prawn-svg//lib/prawn/svg/attributes.rb#1
module Prawn::SVG::Attributes; end

# source://prawn-svg//lib/prawn/svg/attributes/clip_path.rb#1
module Prawn::SVG::Attributes::ClipPath
  # source://prawn-svg//lib/prawn/svg/attributes/clip_path.rb#2
  def parse_clip_path_attribute_and_call; end
end

# source://prawn-svg//lib/prawn/svg/attributes/opacity.rb#1
module Prawn::SVG::Attributes::Opacity
  # source://prawn-svg//lib/prawn/svg/attributes/opacity.rb#2
  def parse_opacity_attributes_and_call; end
end

# source://prawn-svg//lib/prawn/svg/attributes/space.rb#1
module Prawn::SVG::Attributes::Space
  # source://prawn-svg//lib/prawn/svg/attributes/space.rb#2
  def parse_xml_space_attribute; end
end

# source://prawn-svg//lib/prawn/svg/attributes/stroke.rb#1
module Prawn::SVG::Attributes::Stroke
  # source://prawn-svg//lib/prawn/svg/attributes/stroke.rb#5
  def parse_stroke_attributes_and_call; end
end

# source://prawn-svg//lib/prawn/svg/attributes/stroke.rb#2
Prawn::SVG::Attributes::Stroke::CAP_STYLE_TRANSLATIONS = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/attributes/stroke.rb#3
Prawn::SVG::Attributes::Stroke::JOIN_STYLE_TRANSLATIONS = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/attributes/transform.rb#1
module Prawn::SVG::Attributes::Transform
  # source://prawn-svg//lib/prawn/svg/attributes/transform.rb#2
  def parse_transform_attribute_and_call; end
end

# source://prawn-svg//lib/prawn/svg/css/font_family_parser.rb#1
module Prawn::SVG::CSS; end

# source://prawn-svg//lib/prawn/svg/css/font_family_parser.rb#2
class Prawn::SVG::CSS::FontFamilyParser
  class << self
    # source://prawn-svg//lib/prawn/svg/css/font_family_parser.rb#3
    def parse(string); end
  end
end

# source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#2
class Prawn::SVG::CSS::SelectorParser
  class << self
    # source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#3
    def parse(selector); end

    # source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#37
    def tokenise_css_selector(selector); end
  end
end

# source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#35
class Prawn::SVG::CSS::SelectorParser::Attribute < ::Struct
  # Returns the value of attribute key
  #
  # @return [Object] the current value of key
  def key; end

  # Sets the attribute key
  #
  # @param value [Object] the value to set the attribute key to.
  # @return [Object] the newly set value
  def key=(_); end

  # Returns the value of attribute operator
  #
  # @return [Object] the current value of operator
  def operator; end

  # Sets the attribute operator
  #
  # @param value [Object] the value to set the attribute operator to.
  # @return [Object] the newly set value
  def operator=(_); end

  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#34
class Prawn::SVG::CSS::SelectorParser::Combinator < ::Struct
  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#32
class Prawn::SVG::CSS::SelectorParser::Identifier < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#33
class Prawn::SVG::CSS::SelectorParser::Modifier < ::Struct
  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/css/selector_parser.rb#31
Prawn::SVG::CSS::SelectorParser::VALID_CSS_IDENTIFIER_CHAR = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#2
class Prawn::SVG::CSS::Stylesheets
  # @return [Stylesheets] a new instance of Stylesheets
  #
  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#7
  def initialize(css_parser, root, media = T.unsafe(nil)); end

  # Returns the value of attribute css_parser.
  #
  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#5
  def css_parser; end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#13
  def load; end

  # Returns the value of attribute media.
  #
  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#5
  def media; end

  # Returns the value of attribute root.
  #
  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#5
  def root; end

  private

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#56
  def associate_xpath_styles_with_elements(xpath_styles); end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#143
  def calculate_specificity(selector); end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#72
  def css_selector_to_xpath(selector); end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#33
  def gather_xpath_styles; end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#26
  def load_style_elements; end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#22
  def load_user_agent_stylesheet; end

  # source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#68
  def xpath_quote(value); end
end

# source://prawn-svg//lib/prawn/svg/css/stylesheets.rb#3
Prawn::SVG::CSS::Stylesheets::USER_AGENT_STYLESHEET = T.let(T.unsafe(nil), String)

# source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#1
module Prawn::SVG::Calculators; end

# source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#2
module Prawn::SVG::Calculators::ArcToBezierCurve
  protected

  # Convert the elliptical arc to a cubic bÃ©zier curve using this algorithm:
  # http://www.spaceroots.org/documents/ellipse/elliptical-arc.pdf
  #
  # source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#7
  def calculate_bezier_curve_points_for_arc(cx, cy, a, b, lambda_1, lambda_2, theta); end

  private

  # source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#88
  def calculate_curve_approximation_error(a, b, eta1, eta2); end

  # source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#102
  def calculate_eta_from_lambda(a, b, lambda_1, lambda_2); end
end

# source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#58
Prawn::SVG::Calculators::ArcToBezierCurve::ERROR_COEFFICIENTS_A = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/calculators/arc_to_bezier_curve.rb#73
Prawn::SVG::Calculators::ArcToBezierCurve::ERROR_COEFFICIENTS_B = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#2
class Prawn::SVG::Calculators::AspectRatio
  # @return [AspectRatio] a new instance of AspectRatio
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#6
  def initialize(value, container_dimensions, object_dimensions); end

  # Returns the value of attribute align.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#3
  def align; end

  # Returns the value of attribute defer.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#3
  def defer; end

  # Returns the value of attribute height.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#4
  def height; end

  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#54
  def inspect; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#50
  def meet?; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#46
  def slice?; end

  # Returns the value of attribute width.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#4
  def width; end

  # Returns the value of attribute x.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#4
  def x; end

  # Returns the value of attribute y.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/aspect_ratio.rb#4
  def y; end
end

# source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#2
class Prawn::SVG::Calculators::DocumentSizing
  # @return [DocumentSizing] a new instance of DocumentSizing
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/calculators/document_sizing.rb#4
  def initialize(*_args); end

  # Returns the value of attribute bounds.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#8
  def bounds; end

  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#24
  def calculate; end

  # Sets the attribute document_height
  #
  # @param value the value to set the attribute document_height to.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#5
  def document_height=(_arg0); end

  # Sets the attribute document_width
  #
  # @param value the value to set the attribute document_width to.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#5
  def document_width=(_arg0); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#87
  def invalid?; end

  # Returns the value of attribute output_height.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#10
  def output_height; end

  # Returns the value of attribute output_width.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#10
  def output_width; end

  # Sets the attribute preserve_aspect_ratio
  #
  # @param value the value to set the attribute preserve_aspect_ratio to.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#6
  def preserve_aspect_ratio=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#100
  def requested_height=(value); end

  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#96
  def requested_width=(value); end

  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#17
  def set_from_attributes(attributes); end

  # Sets the attribute view_box
  #
  # @param value the value to set the attribute view_box to.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#6
  def view_box=(_arg0); end

  # Returns the value of attribute viewport_diagonal.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#10
  def viewport_diagonal; end

  # Returns the value of attribute viewport_height.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#10
  def viewport_height; end

  # Returns the value of attribute viewport_width.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#10
  def viewport_width; end

  # Returns the value of attribute x_offset.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#9
  def x_offset; end

  # Returns the value of attribute x_scale.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#9
  def x_scale; end

  # Returns the value of attribute y_offset.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#9
  def y_offset; end

  # Returns the value of attribute y_scale.
  #
  # source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#9
  def y_scale; end
end

# source://prawn-svg//lib/prawn/svg/calculators/document_sizing.rb#3
Prawn::SVG::Calculators::DocumentSizing::DEFAULT_ASPECT_RATIO = T.let(T.unsafe(nil), String)

# source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#1
module Prawn::SVG::Calculators::Pixels
  protected

  # source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#41
  def pixels(value); end

  # source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#31
  def x(value); end

  # source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#45
  def x_pixels(value); end

  # source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#35
  def y(value); end

  # source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#49
  def y_pixels(value); end
end

# source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#2
class Prawn::SVG::Calculators::Pixels::Measurement
  extend ::Prawn::Measurements

  class << self
    # source://prawn-svg//lib/prawn/svg/calculators/pixels.rb#5
    def to_pixels(value, axis_length = T.unsafe(nil), font_size: T.unsafe(nil)); end
  end
end

# source://prawn-svg//lib/prawn/svg/color.rb#1
class Prawn::SVG::Color
  class << self
    # source://prawn-svg//lib/prawn/svg/color.rb#220
    def clamp(value, min_value, max_value); end

    # source://prawn-svg//lib/prawn/svg/color.rb#213
    def css_color_to_prawn_color(color); end

    # source://prawn-svg//lib/prawn/svg/color.rb#224
    def default_color(color_mode); end

    # source://prawn-svg//lib/prawn/svg/color.rb#228
    def hex_color(hex, color_mode); end

    # source://prawn-svg//lib/prawn/svg/color.rb#163
    def parse(color_string, gradients = T.unsafe(nil), color_mode = T.unsafe(nil)); end
  end
end

# source://prawn-svg//lib/prawn/svg/color.rb#3
class Prawn::SVG::Color::CMYK < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/color.rb#6
Prawn::SVG::Color::CMYK_DEFAULT_COLOR = T.let(T.unsafe(nil), Prawn::SVG::Color::CMYK)

# source://prawn-svg//lib/prawn/svg/color.rb#160
Prawn::SVG::Color::CMYK_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/color.rb#8
Prawn::SVG::Color::HTML_COLORS = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/color.rb#2
class Prawn::SVG::Color::RGB < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/color.rb#5
Prawn::SVG::Color::RGB_DEFAULT_COLOR = T.let(T.unsafe(nil), Prawn::SVG::Color::RGB)

# source://prawn-svg//lib/prawn/svg/color.rb#159
Prawn::SVG::Color::RGB_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/color.rb#161
Prawn::SVG::Color::URL_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/color.rb#158
Prawn::SVG::Color::VALUE_REGEXP = T.let(T.unsafe(nil), String)

# source://prawn-svg//lib/prawn/svg/document.rb#1
class Prawn::SVG::Document
  # @return [Document] a new instance of Document
  # @yield [_self]
  # @yieldparam _self [Prawn::SVG::Document] the object that the method was called on
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#19
  def initialize(data, bounds, options, font_registry: T.unsafe(nil), css_parser: T.unsafe(nil), attribute_overrides: T.unsafe(nil)); end

  # source://prawn-svg//lib/prawn/svg/document.rb#55
  def calculate_sizing(requested_width: T.unsafe(nil), requested_height: T.unsafe(nil)); end

  # Returns the value of attribute color_mode.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def color_mode; end

  # Returns the value of attribute element_styles.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def element_styles; end

  # Returns the value of attribute elements_by_id.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def elements_by_id; end

  # Returns the value of attribute fallback_font_name.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def fallback_font_name; end

  # Returns the value of attribute font_registry.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def font_registry; end

  # Returns the value of attribute gradients.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def gradients; end

  # Returns the value of attribute root.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def root; end

  # Returns the value of attribute sizing.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def sizing; end

  # Returns the value of attribute url_loader.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#10
  def url_loader; end

  # An +Array+ of warnings that occurred while parsing the SVG data.
  #
  # source://prawn-svg//lib/prawn/svg/document.rb#8
  def warnings; end

  private

  # source://prawn-svg//lib/prawn/svg/document.rb#63
  def load_color_mode; end
end

# source://prawn-svg//lib/prawn/svg/document.rb#5
Prawn::SVG::Document::DEFAULT_FALLBACK_FONT_NAME = T.let(T.unsafe(nil), String)

# source://prawn-svg//lib/prawn/svg/document.rb#2
class Prawn::SVG::Document::Error < ::StandardError; end

# source://prawn-svg//lib/prawn/svg/document.rb#3
class Prawn::SVG::Document::InvalidSVGData < ::Prawn::SVG::Document::Error; end

# source://prawn-svg//lib/prawn/svg/elements.rb#1
module Prawn::SVG::Elements; end

# source://prawn-svg//lib/prawn/svg/elements/base.rb#1
class Prawn::SVG::Elements::Base
  include ::Prawn::SVG::Elements::CallDuplicator
  include ::Prawn::SVG::Calculators::Pixels
  include ::Prawn::SVG::Attributes::Transform
  include ::Prawn::SVG::Attributes::Opacity
  include ::Prawn::SVG::Attributes::ClipPath
  include ::Prawn::SVG::Attributes::Stroke
  include ::Prawn::SVG::Attributes::Space
  include ::Prawn::SVG::TransformParser
  extend ::Forwardable

  # @return [Base] a new instance of Base
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#30
  def initialize(document, source, parent_calls, state); end

  # Returns the value of attribute attributes.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def attributes; end

  # Returns the value of attribute base_calls.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def base_calls; end

  # Returns the value of attribute calls.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#25
  def calls; end

  # Sets the attribute calls
  #
  # @param value the value to set the attribute calls to.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#25
  def calls=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def computed_properties(*args, **_arg1, &block); end

  # Returns the value of attribute document.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def document; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#67
  def name; end

  # Returns the value of attribute parent_calls.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def parent_calls; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#52
  def parse_and_apply; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#47
  def process; end

  # Returns the value of attribute properties.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def properties; end

  # Returns the value of attribute source.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def source; end

  # Returns the value of attribute state.
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#24
  def state; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def warnings(*args, **_arg1, &block); end

  protected

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#94
  def add_call(name, *arguments, **kwarguments); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#98
  def add_call_and_enter(name, *arguments, **kwarguments); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#116
  def add_calls_from_element(other); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#112
  def append_calls_to_parent; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#76
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#152
  def apply_calls_from_standard_attributes; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#182
  def apply_colors; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#161
  def apply_drawing_call; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#79
  def bounding_box; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#216
  def clamp(value, min_value, max_value); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#278
  def clone_element_source(source); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#82
  def container?; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#86
  def drawable?; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#220
  def extract_attributes_and_properties; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#264
  def extract_element_from_url_id_reference(value, expected_type = T.unsafe(nil)); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#270
  def href_attribute; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#120
  def new_call_context_from_base; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/base.rb#274
  def overflow_hidden?; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#73
  def parse; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#238
  def parse_css_declarations(declarations); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#90
  def parse_standard_attributes; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#108
  def pop_call_position; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#127
  def process_child_elements; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#103
  def push_call_position; end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#251
  def require_attributes(*names); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#258
  def require_positive_value(*args); end

  # source://prawn-svg//lib/prawn/svg/elements/base.rb#144
  def svg_child_elements; end
end

# source://prawn-svg//lib/prawn/svg/elements/base.rb#17
Prawn::SVG::Elements::Base::COMMA_WSP_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/base.rb#22
class Prawn::SVG::Elements::Base::MissingAttributesError < ::Prawn::SVG::Elements::Base::SkipElementError; end

# source://prawn-svg//lib/prawn/svg/elements/base.rb#16
Prawn::SVG::Elements::Base::PAINT_TYPES = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/elements/base.rb#18
Prawn::SVG::Elements::Base::SVG_NAMESPACE = T.let(T.unsafe(nil), String)

# source://prawn-svg//lib/prawn/svg/elements/base.rb#21
class Prawn::SVG::Elements::Base::SkipElementError < ::StandardError; end

# source://prawn-svg//lib/prawn/svg/elements/base.rb#20
class Prawn::SVG::Elements::Base::SkipElementQuietly < ::StandardError; end

# source://prawn-svg//lib/prawn/svg/elements.rb#2
Prawn::SVG::Elements::COMMA_WSP_REGEXP = T.let(T.unsafe(nil), Regexp)

# Unfortunately, prawn mutates arguments passed in to it.
# When we make a copy of one of the call stacks, we need to make a deep
# duplicate of it so that the first time prawn mutates the arguments, it
# won't affect the subsequent calls.
#
# source://prawn-svg//lib/prawn/svg/elements/call_duplicator.rb#7
module Prawn::SVG::Elements::CallDuplicator
  private

  # source://prawn-svg//lib/prawn/svg/elements/call_duplicator.rb#18
  def duplicate_array(array); end

  # source://prawn-svg//lib/prawn/svg/elements/call_duplicator.rb#14
  def duplicate_call(call); end

  # source://prawn-svg//lib/prawn/svg/elements/call_duplicator.rb#10
  def duplicate_calls(calls); end

  # source://prawn-svg//lib/prawn/svg/elements/call_duplicator.rb#28
  def duplicate_hash(hash); end
end

# source://prawn-svg//lib/prawn/svg/elements/circle.rb#1
class Prawn::SVG::Elements::Circle < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/circle.rb#14
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/circle.rb#22
  def bounding_box; end

  # source://prawn-svg//lib/prawn/svg/elements/circle.rb#4
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements/circle.rb#2
Prawn::SVG::Elements::Circle::USE_NEW_CIRCLE_CALL = T.let(T.unsafe(nil), TrueClass)

# source://prawn-svg//lib/prawn/svg/elements/clip_path.rb#1
class Prawn::SVG::Elements::ClipPath < ::Prawn::SVG::Elements::Base
  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/clip_path.rb#8
  def container?; end

  # source://prawn-svg//lib/prawn/svg/elements/clip_path.rb#2
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements/container.rb#1
class Prawn::SVG::Elements::Container < ::Prawn::SVG::Elements::Base
  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/container.rb#7
  def container?; end

  # source://prawn-svg//lib/prawn/svg/elements/container.rb#2
  def parse; end

  private

  # source://prawn-svg//lib/prawn/svg/elements/container.rb#13
  def set_display_none; end
end

# source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#1
class Prawn::SVG::Elements::DepthFirstBase < ::Prawn::SVG::Elements::Base
  # @return [DepthFirstBase] a new instance of DepthFirstBase
  #
  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#2
  def initialize(document, source, parent_calls, state); end

  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#15
  def parse_and_apply; end

  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#7
  def process; end

  protected

  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#47
  def apply_child_elements; end

  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#28
  def apply_step(calls); end

  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#35
  def parse_child_elements; end

  # source://prawn-svg//lib/prawn/svg/elements/depth_first_base.rb#21
  def parse_step; end
end

# source://prawn-svg//lib/prawn/svg/elements/ellipse.rb#1
class Prawn::SVG::Elements::Ellipse < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/ellipse.rb#15
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/ellipse.rb#19
  def bounding_box; end

  # source://prawn-svg//lib/prawn/svg/elements/ellipse.rb#4
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements/ellipse.rb#2
Prawn::SVG::Elements::Ellipse::USE_NEW_ELLIPSE_CALL = T.let(T.unsafe(nil), TrueClass)

# source://prawn-svg//lib/prawn/svg/elements/gradient.rb#1
class Prawn::SVG::Elements::Gradient < ::Prawn::SVG::Elements::Base
  # Returns the value of attribute cx.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def cx; end

  # Returns the value of attribute cy.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def cy; end

  # Returns the value of attribute fx.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def fx; end

  # Returns the value of attribute fy.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def fy; end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#26
  def gradient_arguments(element); end

  # Returns the value of attribute parent_gradient.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#2
  def parent_gradient; end

  # @raise [SkipElementQuietly]
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#10
  def parse; end

  # Returns the value of attribute radius.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def radius; end

  # Returns the value of attribute stops.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def stops; end

  # Returns the value of attribute transform_matrix.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def transform_matrix; end

  # Returns the value of attribute units.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def units; end

  # Returns the value of attribute x1.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def x1; end

  # Returns the value of attribute x2.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def x2; end

  # Returns the value of attribute y1.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def y1; end

  # Returns the value of attribute y2.
  #
  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#3
  def y2; end

  private

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#82
  def assert_compatible_prawn_version; end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#100
  def load_coordinates; end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#88
  def load_gradient_configuration; end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#133
  def load_stops; end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#167
  def parse_zero_to_one(string, default = T.unsafe(nil)); end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#39
  def specific_gradient_arguments(element); end

  # source://prawn-svg//lib/prawn/svg/elements/gradient.rb#78
  def type; end
end

# source://prawn-svg//lib/prawn/svg/elements/gradient.rb#5
Prawn::SVG::Elements::Gradient::TAG_NAME_TO_TYPE = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/elements/ignored.rb#1
class Prawn::SVG::Elements::Ignored < ::Prawn::SVG::Elements::Base
  # @raise [SkipElementQuietly]
  #
  # source://prawn-svg//lib/prawn/svg/elements/ignored.rb#2
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements/image.rb#1
class Prawn::SVG::Elements::Image < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/image.rb#55
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/image.rb#74
  def bounding_box; end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/elements/image.rb#12
  def find_image_handler(data); end

  # @raise [SkipElementQuietly]
  #
  # source://prawn-svg//lib/prawn/svg/elements/image.rb#16
  def parse; end

  protected

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/image.rb#107
  def potentially_svg?(data); end

  # source://prawn-svg//lib/prawn/svg/elements/image.rb#80
  def process_image(data, width, height, preserveAspectRatio); end

  # @raise [SkipElementError]
  #
  # source://prawn-svg//lib/prawn/svg/elements/image.rb#111
  def raise_invalid_image_type; end
end

# source://prawn-svg//lib/prawn/svg/elements/image.rb#2
class Prawn::SVG::Elements::Image::FakeIO
  # @return [FakeIO] a new instance of FakeIO
  #
  # source://prawn-svg//lib/prawn/svg/elements/image.rb#3
  def initialize(data); end

  # source://prawn-svg//lib/prawn/svg/elements/image.rb#7
  def read; end

  # source://prawn-svg//lib/prawn/svg/elements/image.rb#11
  def rewind; end
end

# source://prawn-svg//lib/prawn/svg/elements/image.rb#14
class Prawn::SVG::Elements::Image::ImageData < ::Struct
  # Returns the value of attribute dimensions
  #
  # @return [Object] the current value of dimensions
  def dimensions; end

  # Sets the attribute dimensions
  #
  # @param value [Object] the value to set the attribute dimensions to.
  # @return [Object] the newly set value
  def dimensions=(_); end

  # Returns the value of attribute document
  #
  # @return [Object] the current value of document
  def document; end

  # Sets the attribute document
  #
  # @param value [Object] the value to set the attribute document to.
  # @return [Object] the newly set value
  def document=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/elements/line.rb#1
class Prawn::SVG::Elements::Line < ::Prawn::SVG::Elements::Base
  include ::Prawn::SVG::Pathable

  # source://prawn-svg//lib/prawn/svg/elements/line.rb#14
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/line.rb#4
  def parse; end

  protected

  # source://prawn-svg//lib/prawn/svg/elements/line.rb#21
  def commands; end
end

# source://prawn-svg//lib/prawn/svg/elements/marker.rb#1
class Prawn::SVG::Elements::Marker < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/marker.rb#11
  def apply_marker(element, point: T.unsafe(nil), angle: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/marker.rb#7
  def container?; end

  # source://prawn-svg//lib/prawn/svg/elements/marker.rb#2
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements/path.rb#1
class Prawn::SVG::Elements::Path < ::Prawn::SVG::Elements::Base
  include ::Prawn::SVG::Calculators::ArcToBezierCurve
  include ::Prawn::SVG::Pathable

  # source://prawn-svg//lib/prawn/svg/elements/path.rb#57
  def apply; end

  # Returns the value of attribute commands.
  #
  # source://prawn-svg//lib/prawn/svg/elements/path.rb#34
  def commands; end

  # @raise [SkipElementError]
  #
  # source://prawn-svg//lib/prawn/svg/elements/path.rb#36
  def parse; end

  protected

  # regexp must start with ^
  #
  # source://prawn-svg//lib/prawn/svg/elements/path.rb#288
  def match_all(string, regexp); end

  # source://prawn-svg//lib/prawn/svg/elements/path.rb#64
  def parse_path_command(command, values); end

  # source://prawn-svg//lib/prawn/svg/elements/path.rb#298
  def push_command(command); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/path.rb#284
  def within_float_delta?(a, b); end
end

# source://prawn-svg//lib/prawn/svg/elements/path.rb#11
Prawn::SVG::Elements::Path::A_PARAMETERS_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#17
Prawn::SVG::Elements::Path::COMMAND_MATCH_MAP = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#9
Prawn::SVG::Elements::Path::COMMAND_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#8
Prawn::SVG::Elements::Path::FLAG_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#32
Prawn::SVG::Elements::Path::FLOAT_ERROR_DELTA = T.let(T.unsafe(nil), Float)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#14
Prawn::SVG::Elements::Path::FOUR_PARAMETER_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#7
Prawn::SVG::Elements::Path::INSIDE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#5
Prawn::SVG::Elements::Path::INSIDE_SPACE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#12
Prawn::SVG::Elements::Path::ONE_PARAMETER_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#6
Prawn::SVG::Elements::Path::OUTSIDE_SPACE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#30
Prawn::SVG::Elements::Path::PARAMETERLESS_COMMANDS = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#15
Prawn::SVG::Elements::Path::SIX_PARAMETER_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/path.rb#13
Prawn::SVG::Elements::Path::TWO_PARAMETER_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://prawn-svg//lib/prawn/svg/elements/polygon.rb#1
class Prawn::SVG::Elements::Polygon < ::Prawn::SVG::Elements::Base
  include ::Prawn::SVG::Pathable

  # source://prawn-svg//lib/prawn/svg/elements/polygon.rb#9
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/polygon.rb#4
  def parse; end

  protected

  # source://prawn-svg//lib/prawn/svg/elements/polygon.rb#16
  def commands; end
end

# source://prawn-svg//lib/prawn/svg/elements/polyline.rb#1
class Prawn::SVG::Elements::Polyline < ::Prawn::SVG::Elements::Base
  include ::Prawn::SVG::Pathable

  # source://prawn-svg//lib/prawn/svg/elements/polyline.rb#9
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/polyline.rb#4
  def parse; end

  protected

  # source://prawn-svg//lib/prawn/svg/elements/polyline.rb#16
  def commands; end
end

# source://prawn-svg//lib/prawn/svg/elements/rect.rb#1
class Prawn::SVG::Elements::Rect < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/rect.rb#21
  def apply; end

  # source://prawn-svg//lib/prawn/svg/elements/rect.rb#30
  def bounding_box; end

  # source://prawn-svg//lib/prawn/svg/elements/rect.rb#2
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements/root.rb#1
class Prawn::SVG::Elements::Root < ::Prawn::SVG::Elements::Base
  # @return [Root] a new instance of Root
  #
  # source://prawn-svg//lib/prawn/svg/elements/root.rb#2
  def initialize(document, source = T.unsafe(nil), parent_calls = T.unsafe(nil), state = T.unsafe(nil)); end

  # source://prawn-svg//lib/prawn/svg/elements/root.rb#10
  def apply; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/root.rb#19
  def container?; end

  # source://prawn-svg//lib/prawn/svg/elements/root.rb#6
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/elements.rb#12
Prawn::SVG::Elements::TAG_CLASS_MAPPING = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/elements/text.rb#1
class Prawn::SVG::Elements::Text < ::Prawn::SVG::Elements::DepthFirstBase
  private

  # source://prawn-svg//lib/prawn/svg/elements/text.rb#18
  def apply_step(calls); end

  # source://prawn-svg//lib/prawn/svg/elements/text.rb#59
  def apportion_leading_and_trailing_spaces(printables); end

  # source://prawn-svg//lib/prawn/svg/elements/text.rb#37
  def built_printable_queue(queue, component); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/text.rb#24
  def drawable?; end

  # This class doesn't represent an element in the SVG document; it's here
  # to hold together text information.  Because of this, we overload the
  # parse_step and apply_step methods, and bypass all the normal processing
  # of the element, delegating it to our root text component.
  #
  # source://prawn-svg//lib/prawn/svg/elements/text.rb#9
  def parse_step; end

  # source://prawn-svg//lib/prawn/svg/elements/text.rb#28
  def reintroduce_trailing_and_leading_whitespace; end

  # source://prawn-svg//lib/prawn/svg/elements/text.rb#53
  def remove_printables_that_are_completely_empty(printables); end

  # source://prawn-svg//lib/prawn/svg/elements/text.rb#48
  def remove_whitespace_only_printables_and_start_and_end(printables); end
end

# source://prawn-svg//lib/prawn/svg/elements/text_component.rb#1
class Prawn::SVG::Elements::TextComponent < ::Prawn::SVG::Elements::DepthFirstBase
  # @raise [SkipElementQuietly]
  #
  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#42
  def apply; end

  # Returns the value of attribute commands.
  #
  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#2
  def commands; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#7
  def parse; end

  protected

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#100
  def append_child(child); end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#87
  def append_text(child); end

  # overridden, we don't want to call fill/stroke as draw_text does this for us
  #
  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#244
  def apply_drawing_call; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#219
  def apply_font(font); end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#109
  def apply_text(text, opts); end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#238
  def calculate_character_spacing; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#223
  def calculate_text_rendering_mode; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#196
  def find_referenced_element; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#247
  def normalize_length(length); end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#205
  def select_font; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#177
  def svg_text_children; end

  # source://prawn-svg//lib/prawn/svg/elements/text_component.rb#187
  def text_children; end
end

# source://prawn-svg//lib/prawn/svg/elements/text_component.rb#4
class Prawn::SVG::Elements::TextComponent::Printable < ::Struct
  # Returns the value of attribute element
  #
  # @return [Object] the current value of element
  def element; end

  # Sets the attribute element
  #
  # @param value [Object] the value to set the attribute element to.
  # @return [Object] the newly set value
  def element=(_); end

  # Returns the value of attribute leading_space?
  #
  # @return [Object] the current value of leading_space?
  def leading_space?; end

  # Returns the value of attribute text
  #
  # @return [Object] the current value of text
  def text; end

  # Sets the attribute text
  #
  # @param value [Object] the value to set the attribute text to.
  # @return [Object] the newly set value
  def text=(_); end

  # Returns the value of attribute trailing_space?
  #
  # @return [Object] the current value of trailing_space?
  def trailing_space?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/elements/text_component.rb#5
class Prawn::SVG::Elements::TextComponent::TextState < ::Struct
  # Returns the value of attribute dx
  #
  # @return [Object] the current value of dx
  def dx; end

  # Sets the attribute dx
  #
  # @param value [Object] the value to set the attribute dx to.
  # @return [Object] the newly set value
  def dx=(_); end

  # Returns the value of attribute dy
  #
  # @return [Object] the current value of dy
  def dy; end

  # Sets the attribute dy
  #
  # @param value [Object] the value to set the attribute dy to.
  # @return [Object] the newly set value
  def dy=(_); end

  # Returns the value of attribute length_adjust
  #
  # @return [Object] the current value of length_adjust
  def length_adjust; end

  # Sets the attribute length_adjust
  #
  # @param value [Object] the value to set the attribute length_adjust to.
  # @return [Object] the newly set value
  def length_adjust=(_); end

  # Returns the value of attribute mode
  #
  # @return [Object] the current value of mode
  def mode; end

  # Sets the attribute mode
  #
  # @param value [Object] the value to set the attribute mode to.
  # @return [Object] the newly set value
  def mode=(_); end

  # Returns the value of attribute parent
  #
  # @return [Object] the current value of parent
  def parent; end

  # Sets the attribute parent
  #
  # @param value [Object] the value to set the attribute parent to.
  # @return [Object] the newly set value
  def parent=(_); end

  # Returns the value of attribute rotation
  #
  # @return [Object] the current value of rotation
  def rotation; end

  # Sets the attribute rotation
  #
  # @param value [Object] the value to set the attribute rotation to.
  # @return [Object] the newly set value
  def rotation=(_); end

  # Returns the value of attribute spacing
  #
  # @return [Object] the current value of spacing
  def spacing; end

  # Sets the attribute spacing
  #
  # @param value [Object] the value to set the attribute spacing to.
  # @return [Object] the newly set value
  def spacing=(_); end

  # Returns the value of attribute text_length
  #
  # @return [Object] the current value of text_length
  def text_length; end

  # Sets the attribute text_length
  #
  # @param value [Object] the value to set the attribute text_length to.
  # @return [Object] the newly set value
  def text_length=(_); end

  # Returns the value of attribute x
  #
  # @return [Object] the current value of x
  def x; end

  # Sets the attribute x
  #
  # @param value [Object] the value to set the attribute x to.
  # @return [Object] the newly set value
  def x=(_); end

  # Returns the value of attribute y
  #
  # @return [Object] the current value of y
  def y; end

  # Sets the attribute y
  #
  # @param value [Object] the value to set the attribute y to.
  # @return [Object] the newly set value
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/elements/use.rb#1
class Prawn::SVG::Elements::Use < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/use.rb#47
  def apply; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/use.rb#43
  def container?; end

  # @raise [SkipElementError]
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/elements/use.rb#5
  def parse; end

  # source://prawn-svg//lib/prawn/svg/elements/use.rb#53
  def process_child_elements; end

  # Returns the value of attribute referenced_element_class.
  #
  # source://prawn-svg//lib/prawn/svg/elements/use.rb#2
  def referenced_element_class; end

  # Returns the value of attribute referenced_element_source.
  #
  # source://prawn-svg//lib/prawn/svg/elements/use.rb#2
  def referenced_element_source; end
end

# source://prawn-svg//lib/prawn/svg/elements/viewport.rb#1
class Prawn::SVG::Elements::Viewport < ::Prawn::SVG::Elements::Base
  # source://prawn-svg//lib/prawn/svg/elements/viewport.rb#14
  def apply; end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/elements/viewport.rb#28
  def container?; end

  # source://prawn-svg//lib/prawn/svg/elements/viewport.rb#2
  def parse; end
end

# source://prawn-svg//lib/prawn/svg/extension.rb#3
module Prawn::SVG::Extension
  # Draws an SVG document into the PDF.
  #
  # +options+ must contain the key :at, which takes a tuple of x and y co-ordinates.
  #
  # +options+ can optionally contain the key :width or :height.  If both are
  # specified, only :width will be used.  If neither are specified, the resolution
  # given in the SVG will be used.
  #
  # Example usage:
  #
  #   svg IO.read("example.svg"), :at => [100, 300], :width => 600
  #
  # source://prawn-svg//lib/prawn/svg/extension.rb#17
  def svg(data, options = T.unsafe(nil), &block); end
end

# source://prawn-svg//lib/prawn/svg/extensions/additional_gradient_transforms.rb#1
module Prawn::SVG::Extensions; end

# source://prawn-svg//lib/prawn/svg/extensions/additional_gradient_transforms.rb#2
module Prawn::SVG::Extensions::AdditionalGradientTransforms
  # source://prawn-svg//lib/prawn/svg/extensions/additional_gradient_transforms.rb#3
  def gradient_coordinates(gradient); end
end

# source://prawn-svg//lib/prawn/svg/font.rb#1
class Prawn::SVG::Font
  # @return [Font] a new instance of Font
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#23
  def initialize(name, weight, style, font_registry: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#34
  def installed?; end

  # Returns the value of attribute name.
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#10
  def name; end

  # Returns the value of attribute style.
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#10
  def style; end

  # Construct a subfamily name, ensuring that the subfamily is a valid one for the font.
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#40
  def subfamily; end

  # Returns the value of attribute weight.
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#10
  def weight; end

  private

  # Construct a subfamily name from the weight and style information.
  # Note that this name might not actually exist in the font.
  #
  # source://prawn-svg//lib/prawn/svg/font.rb#56
  def subfamily_name; end

  class << self
    # source://prawn-svg//lib/prawn/svg/font.rb#12
    def weight_for_css_font_weight(weight); end
  end
end

# source://prawn-svg//lib/prawn/svg/font.rb#2
Prawn::SVG::Font::GENERIC_CSS_FONT_MAPPING = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/font_registry.rb#1
class Prawn::SVG::FontRegistry
  # @return [FontRegistry] a new instance of FontRegistry
  #
  # source://prawn-svg//lib/prawn/svg/font_registry.rb#12
  def initialize(font_families); end

  # source://prawn-svg//lib/prawn/svg/font_registry.rb#21
  def correctly_cased_font_name(name); end

  # source://prawn-svg//lib/prawn/svg/font_registry.rb#16
  def installed_fonts; end

  # source://prawn-svg//lib/prawn/svg/font_registry.rb#26
  def load(family, weight = T.unsafe(nil), style = T.unsafe(nil)); end

  private

  # source://prawn-svg//lib/prawn/svg/font_registry.rb#37
  def merge_external_fonts; end

  class << self
    # Returns the value of attribute external_font_families.
    #
    # source://prawn-svg//lib/prawn/svg/font_registry.rb#50
    def external_font_families; end

    # Returns the value of attribute font_path.
    #
    # source://prawn-svg//lib/prawn/svg/font_registry.rb#50
    def font_path; end

    # source://prawn-svg//lib/prawn/svg/font_registry.rb#52
    def load_external_fonts; end

    private

    # source://prawn-svg//lib/prawn/svg/font_registry.rb#67
    def external_font_paths; end
  end
end

# source://prawn-svg//lib/prawn/svg/font_registry.rb#2
Prawn::SVG::FontRegistry::DEFAULT_FONT_PATHS = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/gradients.rb#2
class Prawn::SVG::Gradients
  # @return [Gradients] a new instance of Gradients
  #
  # source://prawn-svg//lib/prawn/svg/gradients.rb#3
  def initialize(document); end

  # source://prawn-svg//lib/prawn/svg/gradients.rb#8
  def [](id); end

  # source://prawn-svg//lib/prawn/svg/gradients.rb#19
  def []=(id, gradient); end

  private

  # source://prawn-svg//lib/prawn/svg/gradients.rb#30
  def create_gradient_element(raw_element); end

  # source://prawn-svg//lib/prawn/svg/gradients.rb#34
  def find_raw_element_by_id(id); end

  # source://prawn-svg//lib/prawn/svg/gradients.rb#25
  def find_raw_gradient_element_by_id(id); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/gradients.rb#38
  def gradient_element?(raw_element); end

  # source://prawn-svg//lib/prawn/svg/gradients.rb#43
  def new_state; end
end

# source://prawn-svg//lib/prawn/svg/interface.rb#7
class Prawn::SVG::Interface
  # Creates a Prawn::SVG object.
  #
  # +data+ is the SVG data to convert.  +prawn+ is your Prawn::Document object.
  #
  # See README.md for the options that can be passed to this method.
  #
  # @return [Interface] a new instance of Interface
  #
  # source://prawn-svg//lib/prawn/svg/interface.rb#27
  def initialize(data, prawn, options, &block); end

  # Returns the value of attribute data.
  #
  # source://prawn-svg//lib/prawn/svg/interface.rb#18
  def data; end

  # Returns the value of attribute document.
  #
  # source://prawn-svg//lib/prawn/svg/interface.rb#18
  def document; end

  # Draws the SVG to the Prawn::Document object.
  #
  # source://prawn-svg//lib/prawn/svg/interface.rb#47
  def draw; end

  # Returns the value of attribute options.
  #
  # source://prawn-svg//lib/prawn/svg/interface.rb#18
  def options; end

  # source://prawn-svg//lib/prawn/svg/interface.rb#59
  def position; end

  # Returns the value of attribute prawn.
  #
  # source://prawn-svg//lib/prawn/svg/interface.rb#18
  def prawn; end

  # source://prawn-svg//lib/prawn/svg/interface.rb#55
  def resize(width: T.unsafe(nil), height: T.unsafe(nil)); end

  # source://prawn-svg//lib/prawn/svg/interface.rb#51
  def sizing; end

  class << self
    # backwards support for when the font_path used to be stored on this class
    #
    # source://prawn-svg//lib/prawn/svg/interface.rb#63
    def font_path; end
  end
end

# source://prawn-svg//lib/prawn/svg/interface.rb#13
Prawn::SVG::Interface::INHERITABLE_OPTIONS = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/interface.rb#8
Prawn::SVG::Interface::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# Load a file from disk.
#
# WINDOWS
# =======
# Windows is supported, but must use URLs in the modern structure like:
#   file:///x:/path/to/the/file.png
# or as a relative path:
#   directory/file.png
# or as an absolute path from the current drive:
#   /path/to/the/file.png
#
# Ruby's URI parser does not like backslashes, nor can it handle filenames as URLs starting
# with a drive letter as it thinks you're giving it a scheme.
#
# URL ENCODING
# ============
# This module assumes the URL that is passed in has been URL-encoded.  If for some reason
# you're passing in a filename that hasn't been taken from an XML document's attribute,
# you will want to URL encode it before you pass it in.
#
# FILES READ AS BINARY
# ====================
# At the moment, prawn-svg uses this class only to load graphical files, which are binary.
# This class therefore uses IO.binread to read file data.  If it is ever used in the future
# to load text files, it will have to be taught about what kind of file it's expecting to
# read, and adjust the file read function accordingly.
#
# source://prawn-svg//lib/prawn/svg/loaders/data.rb#1
module Prawn::SVG::Loaders; end

# source://prawn-svg//lib/prawn/svg/loaders/data.rb#2
class Prawn::SVG::Loaders::Data
  # source://prawn-svg//lib/prawn/svg/loaders/data.rb#5
  def from_url(url); end
end

# source://prawn-svg//lib/prawn/svg/loaders/file.rb#32
class Prawn::SVG::Loaders::File
  # @raise [ArgumentError]
  # @return [File] a new instance of File
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/loaders/file.rb#6
  def initialize(root_path); end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/loaders/file.rb#17
  def assert_valid_path!(path); end

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#45
  def from_url(url); end

  # Returns the value of attribute root_path.
  #
  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#33
  def root_path; end

  private

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#95
  def assert_file_exists!(path); end

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#89
  def assert_valid_file_uri!(uri); end

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#85
  def build_absolute_and_expand_path(path); end

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#68
  def build_uri(url); end

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#101
  def fix_windows_path(path); end

  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#60
  def load_file(path); end

  # @return [Boolean]
  #
  # source://prawn-svg//lib/prawn/svg/loaders/file.rb#109
  def windows?; end
end

# source://prawn-svg//lib/prawn/svg/loaders/web.rb#4
class Prawn::SVG::Loaders::Web
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/loaders/web.rb#8
  def from_url(url); end

  private

  # source://prawn-svg//lib/prawn/svg/loaders/web.rb#15
  def build_uri(url); end

  # source://prawn-svg//lib/prawn/svg/loaders/web.rb#22
  def perform_request(uri); end
end

# source://prawn-svg//lib/prawn/svg/pathable.rb#1
module Prawn::SVG::Pathable
  # source://prawn-svg//lib/prawn/svg/pathable.rb#7
  def bounding_box; end

  protected

  # source://prawn-svg//lib/prawn/svg/pathable.rb#50
  def angles; end

  # source://prawn-svg//lib/prawn/svg/pathable.rb#17
  def apply_commands; end

  # source://prawn-svg//lib/prawn/svg/pathable.rb#34
  def apply_markers; end

  # @raise [Prawn::SVG::Elements::Base::SkipElementQuietly]
  #
  # source://prawn-svg//lib/prawn/svg/pathable.rb#113
  def parse_points(points_string); end

  # source://prawn-svg//lib/prawn/svg/pathable.rb#131
  def translate(point); end

  private

  # source://prawn-svg//lib/prawn/svg/pathable.rb#137
  def select_non_equal_point(base, point_a, point_b, point_c); end
end

# source://prawn-svg//lib/prawn/svg/pathable.rb#3
class Prawn::SVG::Pathable::Close < ::Struct
  # Returns the value of attribute destination
  #
  # @return [Object] the current value of destination
  def destination; end

  # Sets the attribute destination
  #
  # @param value [Object] the value to set the attribute destination to.
  # @return [Object] the newly set value
  def destination=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/pathable.rb#5
class Prawn::SVG::Pathable::Curve < ::Struct
  # Returns the value of attribute destination
  #
  # @return [Object] the current value of destination
  def destination; end

  # Sets the attribute destination
  #
  # @param value [Object] the value to set the attribute destination to.
  # @return [Object] the newly set value
  def destination=(_); end

  # Returns the value of attribute point1
  #
  # @return [Object] the current value of point1
  def point1; end

  # Sets the attribute point1
  #
  # @param value [Object] the value to set the attribute point1 to.
  # @return [Object] the newly set value
  def point1=(_); end

  # Returns the value of attribute point2
  #
  # @return [Object] the current value of point2
  def point2; end

  # Sets the attribute point2
  #
  # @param value [Object] the value to set the attribute point2 to.
  # @return [Object] the newly set value
  def point2=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/pathable.rb#4
class Prawn::SVG::Pathable::Line < ::Struct
  # Returns the value of attribute destination
  #
  # @return [Object] the current value of destination
  def destination; end

  # Sets the attribute destination
  #
  # @param value [Object] the value to set the attribute destination to.
  # @return [Object] the newly set value
  def destination=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/pathable.rb#2
class Prawn::SVG::Pathable::Move < ::Struct
  # Returns the value of attribute destination
  #
  # @return [Object] the current value of destination
  def destination; end

  # Sets the attribute destination
  #
  # @param value [Object] the value to set the attribute destination to.
  # @return [Object] the newly set value
  def destination=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/properties.rb#1
class Prawn::SVG::Properties
  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def clip_path; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def clip_path=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def color; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def color=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#90
  def compute_properties(other); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def display; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def display=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def dominant_baseline; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def dominant_baseline=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def fill; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def fill=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def fill_opacity; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def fill_opacity=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def fill_rule; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def fill_rule=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_family; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_family=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_size; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_size=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_style; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_style=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_variant; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_variant=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_weight; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def font_weight=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def letter_spacing; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def letter_spacing=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#56
  def load_default_stylesheet; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#86
  def load_hash(hash); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def marker_end; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def marker_end=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def marker_mid; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def marker_mid=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def marker_start; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def marker_start=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#104
  def numerical_font_size; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def opacity; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def opacity=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def overflow; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def overflow=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#64
  def set(name, value); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stop_color; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stop_color=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_dasharray; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_dasharray=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_linecap; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_linecap=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_linejoin; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_linejoin=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_opacity; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_opacity=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_width; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def stroke_width=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def text_anchor; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def text_anchor=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def text_decoration; end

  # source://prawn-svg//lib/prawn/svg/properties.rb#54
  def text_decoration=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/properties.rb#80
  def to_h; end

  private

  # source://prawn-svg//lib/prawn/svg/properties.rb#111
  def compute_font_size_property(value); end
end

# source://prawn-svg//lib/prawn/svg/properties.rb#52
Prawn::SVG::Properties::ATTR_NAMES = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/properties.rb#2
class Prawn::SVG::Properties::Config < ::Struct
  # Returns the value of attribute attr
  #
  # @return [Object] the current value of attr
  def attr; end

  # Sets the attribute attr
  #
  # @param value [Object] the value to set the attribute attr to.
  # @return [Object] the newly set value
  def attr=(_); end

  # Returns the value of attribute default
  #
  # @return [Object] the current value of default
  def default; end

  # Sets the attribute default
  #
  # @param value [Object] the value to set the attribute default to.
  # @return [Object] the newly set value
  def default=(_); end

  # Returns the value of attribute inheritable?
  #
  # @return [Object] the current value of inheritable?
  def inheritable?; end

  # Returns the value of attribute ivar
  #
  # @return [Object] the current value of ivar
  def ivar; end

  # Sets the attribute ivar
  #
  # @param value [Object] the value to set the attribute ivar to.
  # @return [Object] the newly set value
  def ivar=(_); end

  # Returns the value of attribute keyword_restricted?
  #
  # @return [Object] the current value of keyword_restricted?
  def keyword_restricted?; end

  # Returns the value of attribute keywords
  #
  # @return [Object] the current value of keywords
  def keywords; end

  # Sets the attribute keywords
  #
  # @param value [Object] the value to set the attribute keywords to.
  # @return [Object] the newly set value
  def keywords=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prawn-svg//lib/prawn/svg/properties.rb#4
Prawn::SVG::Properties::EM = T.let(T.unsafe(nil), Integer)

# source://prawn-svg//lib/prawn/svg/properties.rb#5
Prawn::SVG::Properties::FONT_SIZES = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/properties.rb#51
Prawn::SVG::Properties::NAMES = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/properties.rb#15
Prawn::SVG::Properties::PROPERTIES = T.let(T.unsafe(nil), Hash)

# source://prawn-svg//lib/prawn/svg/properties.rb#50
Prawn::SVG::Properties::PROPERTY_CONFIGS = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/renderer.rb#3
class Prawn::SVG::Renderer
  # Creates a Prawn::SVG object.
  #
  # +data+ is the SVG data to convert.  +prawn+ is your Prawn::Document object.
  #
  # See README.md for the options that can be passed to this method.
  #
  # @return [Renderer] a new instance of Renderer
  #
  # source://prawn-svg//lib/prawn/svg/renderer.rb#13
  def initialize(prawn, document, options); end

  # Returns the value of attribute document.
  #
  # source://prawn-svg//lib/prawn/svg/renderer.rb#4
  def document; end

  # Draws the SVG to the Prawn::Document object.
  #
  # source://prawn-svg//lib/prawn/svg/renderer.rb#22
  def draw; end

  # Returns the value of attribute options.
  #
  # source://prawn-svg//lib/prawn/svg/renderer.rb#4
  def options; end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#49
  def position; end

  # Returns the value of attribute prawn.
  #
  # source://prawn-svg//lib/prawn/svg/renderer.rb#4
  def prawn; end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#45
  def sizing; end

  private

  # source://prawn-svg//lib/prawn/svg/renderer.rb#226
  def clip_rectangle(x, y, width, height); end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#222
  def inheritable_options; end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#91
  def issue_prawn_command(prawn, calls); end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#87
  def proc_creator(prawn, calls); end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#116
  def rewrite_call_arguments(prawn, call, arguments, kwarguments); end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#55
  def x_based_on_requested_alignment; end

  # source://prawn-svg//lib/prawn/svg/renderer.rb#70
  def y_based_on_requested_alignment; end
end

# source://prawn-svg//lib/prawn/svg/state.rb#1
class Prawn::SVG::State
  # @return [State] a new instance of State
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#8
  def initialize; end

  # Returns the value of attribute computed_properties.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def computed_properties; end

  # Sets the attribute computed_properties
  #
  # @param value the value to set the attribute computed_properties to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def computed_properties=(_arg0); end

  # source://prawn-svg//lib/prawn/svg/state.rb#19
  def disable_drawing; end

  # Returns the value of attribute fill_opacity.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def fill_opacity; end

  # Sets the attribute fill_opacity
  #
  # @param value the value to set the attribute fill_opacity to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def fill_opacity=(_arg0); end

  # Returns the value of attribute inside_clip_path.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def inside_clip_path; end

  # Sets the attribute inside_clip_path
  #
  # @param value the value to set the attribute inside_clip_path to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def inside_clip_path=(_arg0); end

  # Returns the value of attribute inside_use.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def inside_use; end

  # Sets the attribute inside_use
  #
  # @param value the value to set the attribute inside_use to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def inside_use=(_arg0); end

  # Returns the value of attribute preserve_space.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def preserve_space; end

  # Sets the attribute preserve_space
  #
  # @param value the value to set the attribute preserve_space to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def preserve_space=(_arg0); end

  # Returns the value of attribute stroke_opacity.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def stroke_opacity; end

  # Sets the attribute stroke_opacity
  #
  # @param value the value to set the attribute stroke_opacity to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def stroke_opacity=(_arg0); end

  # Returns the value of attribute stroke_width.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def stroke_width; end

  # Sets the attribute stroke_width
  #
  # @param value the value to set the attribute stroke_width to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def stroke_width=(_arg0); end

  # Returns the value of attribute text.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def text; end

  # Sets the attribute text
  #
  # @param value the value to set the attribute text to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def text=(_arg0); end

  # Returns the value of attribute viewport_sizing.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def viewport_sizing; end

  # Sets the attribute viewport_sizing
  #
  # @param value the value to set the attribute viewport_sizing to.
  #
  # source://prawn-svg//lib/prawn/svg/state.rb#2
  def viewport_sizing=(_arg0); end

  private

  # source://prawn-svg//lib/prawn/svg/state.rb#15
  def initialize_dup(other); end
end

# source://prawn-svg//lib/prawn/svg/ttf.rb#1
class Prawn::SVG::TTF
  # @return [TTF] a new instance of TTF
  #
  # source://prawn-svg//lib/prawn/svg/ttf.rb#8
  def initialize(filename); end

  # Returns the value of attribute family.
  #
  # source://prawn-svg//lib/prawn/svg/ttf.rb#6
  def family; end

  # Returns the value of attribute subfamily.
  #
  # source://prawn-svg//lib/prawn/svg/ttf.rb#6
  def subfamily; end

  private

  # source://prawn-svg//lib/prawn/svg/ttf.rb#14
  def load_data_from_file(filename); end
end

# English, US English
#
# source://prawn-svg//lib/prawn/svg/ttf.rb#3
Prawn::SVG::TTF::LANGUAGE_IDS = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/ttf.rb#2
Prawn::SVG::TTF::SFNT_VERSION_STRINGS = T.let(T.unsafe(nil), Array)

# Unicode, Microsoft
#
# source://prawn-svg//lib/prawn/svg/ttf.rb#4
Prawn::SVG::TTF::UTF_16BE_PLATFORM_IDS = T.let(T.unsafe(nil), Array)

# source://prawn-svg//lib/prawn/svg/transform_parser.rb#1
module Prawn::SVG::TransformParser
  # source://prawn-svg//lib/prawn/svg/transform_parser.rb#2
  def parse_transform_attribute(transform); end

  private

  # source://prawn-svg//lib/prawn/svg/transform_parser.rb#65
  def parse_css_method_calls(string); end
end

# source://prawn-svg//lib/prawn/svg/url_loader.rb#1
class Prawn::SVG::UrlLoader
  # @return [UrlLoader] a new instance of UrlLoader
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-svg/url_loader.rb#4
  def initialize(enable_cache: T.unsafe(nil), enable_web: T.unsafe(nil), enable_file_with_root: T.unsafe(nil)); end

  # source://prawn-svg//lib/prawn/svg/url_loader.rb#20
  def add_to_cache(url, data); end

  # Returns the value of attribute enable_cache.
  #
  # source://prawn-svg//lib/prawn/svg/url_loader.rb#4
  def enable_cache; end

  # source://prawn-svg//lib/prawn/svg/url_loader.rb#16
  def load(url); end

  # Returns the value of attribute loaders.
  #
  # source://prawn-svg//lib/prawn/svg/url_loader.rb#4
  def loaders; end

  # source://prawn-svg//lib/prawn/svg/url_loader.rb#24
  def retrieve_from_cache(url); end

  private

  # source://prawn-svg//lib/prawn/svg/url_loader.rb#36
  def perform(url); end

  # source://prawn-svg//lib/prawn/svg/url_loader.rb#30
  def perform_and_cache(url); end

  # source://prawn-svg//lib/prawn/svg/url_loader.rb#40
  def try_each_loader(url); end
end

# source://prawn-svg//lib/prawn/svg/url_loader.rb#2
class Prawn::SVG::UrlLoader::Error < ::StandardError; end

# source://prawn-svg//lib/prawn/svg/version.rb#3
Prawn::SVG::VERSION = T.let(T.unsafe(nil), String)

# backwards compatibility
#
# source://prawn-svg//lib/prawn-svg.rb#39
Prawn::Svg = Prawn::SVG
