# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `asciidoctor-diagram` gem.
# Please instead update this file by running `bin/tapioca gem asciidoctor-diagram`.


# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#1
module Asciidoctor
  class << self
    # source://asciidoctor/2.0.23/lib/asciidoctor.rb#529
    def const_missing(name); end

    # source://asciidoctor/2.0.23/lib/asciidoctor/convert.rb#34
    def convert(input, options = T.unsafe(nil)); end

    # source://asciidoctor/2.0.23/lib/asciidoctor/convert.rb#189
    def convert_file(filename, options = T.unsafe(nil)); end

    # source://asciidoctor/2.0.23/lib/asciidoctor/load.rb#17
    def load(input, options = T.unsafe(nil)); end

    # source://asciidoctor/2.0.23/lib/asciidoctor/load.rb#115
    def load_file(filename, options = T.unsafe(nil)); end

    # source://asciidoctor/2.0.23/lib/asciidoctor/convert.rb#34
    def render(input, options = T.unsafe(nil)); end

    # source://asciidoctor/2.0.23/lib/asciidoctor/convert.rb#189
    def render_file(filename, options = T.unsafe(nil)); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#2
module Asciidoctor::Diagram; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#12
class Asciidoctor::Diagram::ActDiagBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#7
class Asciidoctor::Diagram::ActDiagBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#8
class Asciidoctor::Diagram::ActDiagConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#42
Asciidoctor::Diagram::ActDiagConverter::TOOL = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#17
class Asciidoctor::Diagram::ActDiagInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/extension.rb#10
class Asciidoctor::Diagram::AsciiToSvgBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/extension.rb#6
class Asciidoctor::Diagram::AsciiToSvgBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/converter.rb#8
class Asciidoctor::Diagram::AsciiToSvgConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/converter.rb#26
  def convert(source, format, options); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/converter.rb#59
  def native_scaling?; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/a2s/extension.rb#14
class Asciidoctor::Diagram::AsciiToSvgInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#35
class Asciidoctor::Diagram::BarcodeBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor
  include ::Asciidoctor::Diagram::BarcodeProcessor
  include ::Asciidoctor::Diagram::BarcodeMacroProcessor
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#30
class Asciidoctor::Diagram::BarcodeBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor
  include ::Asciidoctor::Diagram::BarcodeProcessor
end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/converter.rb#7
class Asciidoctor::Diagram::BarcodeConverter
  include ::Asciidoctor::Diagram::DiagramConverter

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/converter.rb#33
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/converter.rb#48
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/converter.rb#29
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/converter.rb#8
Asciidoctor::Diagram::BarcodeConverter::BARCODE_TYPES = T.let(T.unsafe(nil), Array)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/dependencies.rb#3
module Asciidoctor::Diagram::BarcodeDependencies; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/dependencies.rb#7
Asciidoctor::Diagram::BarcodeDependencies::ALL_DEPENDENCIES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/dependencies.rb#4
Asciidoctor::Diagram::BarcodeDependencies::BARCODE_DEPENDENCIES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/dependencies.rb#5
Asciidoctor::Diagram::BarcodeDependencies::PNG_DEPENDENCIES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/dependencies.rb#6
Asciidoctor::Diagram::BarcodeDependencies::QRCODE_DEPENDENCIES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#41
class Asciidoctor::Diagram::BarcodeInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor
  include ::Asciidoctor::Diagram::BarcodeProcessor
  include ::Asciidoctor::Diagram::BarcodeMacroProcessor
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#19
module Asciidoctor::Diagram::BarcodeMacroProcessor
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#20
  def create_source(parent, target, attributes); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#6
module Asciidoctor::Diagram::BarcodeProcessor
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#13
  def initialize(name = T.unsafe(nil), config = T.unsafe(nil)); end

  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/barcode/extension.rb#7
    def check_config(config = T.unsafe(nil)); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/base64.rb#3
module Asciidoctor::Diagram::Base64
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/base64.rb#11
    def urlsafe_decode(str); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/base64.rb#4
    def urlsafe_encode(bin, padding: T.unsafe(nil)); end
  end
end

# Base class for diagram source implementations that uses an md5 checksum of the source code of a diagram to
# determine if it has been updated or not.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#173
class Asciidoctor::Diagram::BasicSource
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::DiagramSource

  # @return [BasicSource] a new instance of BasicSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#178
  def initialize(block_processor, parent_block, attributes); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#200
  def attr(name, default_value = T.unsafe(nil), inherit = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#176
  def attributes; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#229
  def checksum; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#192
  def config; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#225
  def create_image_metadata; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#184
  def diagram_type; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#196
  def image_name; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#188
  def resolve_path(target, start = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#221
  def should_process?(image_file, image_metadata); end

  protected

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#235
  def resolve_diagram_subs; end

  private

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#245
  def compute_checksum(code); end
end

# Helper class to read binary values from a String
#
# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#5
class Asciidoctor::Diagram::BinaryIO
  # @return [BinaryIO] a new instance of BinaryIO
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#6
  def initialize(string); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#35
  def read_string(length, encoding = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#11
  def read_uint16_be; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#17
  def read_uint16_le; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#23
  def read_uint32_be; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#29
  def read_uint32_le; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/binaryio.rb#41
  def skip(length); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#12
class Asciidoctor::Diagram::BlockDiagBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#7
class Asciidoctor::Diagram::BlockDiagBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#8
class Asciidoctor::Diagram::BlockDiagConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#42
Asciidoctor::Diagram::BlockDiagConverter::TOOL = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#17
class Asciidoctor::Diagram::BlockDiagInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/extension.rb#10
class Asciidoctor::Diagram::BpmnBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/extension.rb#6
class Asciidoctor::Diagram::BpmnBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/converter.rb#9
class Asciidoctor::Diagram::BpmnConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/converter.rb#18
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/converter.rb#27
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/converter.rb#14
  def supported_formats; end

  private

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/converter.rb#44
  def run_bpmnjs(bpmnjs, source, format, options = T.unsafe(nil)); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/bpmn/extension.rb#14
class Asciidoctor::Diagram::BpmnInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/bytefield/extension.rb#10
class Asciidoctor::Diagram::BytefieldBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/bytefield/extension.rb#6
class Asciidoctor::Diagram::BytefieldBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/bytefield/converter.rb#8
class Asciidoctor::Diagram::BytefieldConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/bytefield/converter.rb#17
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/bytefield/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/bytefield/extension.rb#14
class Asciidoctor::Diagram::BytefieldInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli.rb#4
module Asciidoctor::Diagram::Cli
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli.rb#80
    def run(*args); end
  end
end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#8
module Asciidoctor::Diagram::CliGenerator
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#37
  def generate_file(tool, input_ext, output_ext, code); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#59
  def generate_file_stdout(tool, input_ext, code); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#11
  def generate_stdin(tool, format, code); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#23
  def generate_stdin_file(tool, code, target_file_path); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#28
  def generate_stdin_stdout(tool, code); end

  private

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#74
  def generate(opts, target_file, open3_opts = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/cli_generator.rb#101
  def read_result(target_file, out_file = T.unsafe(nil)); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/extension.rb#10
class Asciidoctor::Diagram::D2BlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/extension.rb#6
class Asciidoctor::Diagram::D2BlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/converter.rb#8
class Asciidoctor::Diagram::D2Converter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/converter.rb#29
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/d2/extension.rb#14
class Asciidoctor::Diagram::D2InlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/dbml/extension.rb#10
class Asciidoctor::Diagram::DbmlBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/dbml/extension.rb#6
class Asciidoctor::Diagram::DbmlBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/dbml/converter.rb#8
class Asciidoctor::Diagram::DbmlConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/dbml/converter.rb#17
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/dbml/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/dbml/extension.rb#14
class Asciidoctor::Diagram::DbmlInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# Base class for diagram block macro processors.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#403
class Asciidoctor::Diagram::DiagramBlockMacroProcessor < ::Asciidoctor::Extensions::BlockMacroProcessor
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::DiagramProcessor
  extend ::Asciidoctor::Extensions::ProcessorDsl
  extend ::Asciidoctor::Extensions::SyntaxProcessorDsl
  extend ::Asciidoctor::Extensions::MacroProcessorDsl
  extend ::Asciidoctor::Diagram::DiagramProcessor::ClassMethods

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#411
  def apply_target_subs(parent, target); end

  # Creates a FileSource using target as the file name.
  #
  # @return [FileSource] a FileSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#422
  def create_source(parent, target, attributes); end

  class << self
    # @private
    #
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#406
    def inherited(subclass); end
  end
end

# Base class for diagram block processors.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#384
class Asciidoctor::Diagram::DiagramBlockProcessor < ::Asciidoctor::Extensions::BlockProcessor
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::DiagramProcessor
  extend ::Asciidoctor::Extensions::ProcessorDsl
  extend ::Asciidoctor::Extensions::SyntaxProcessorDsl
  extend ::Asciidoctor::Extensions::BlockProcessorDsl
  extend ::Asciidoctor::Diagram::DiagramProcessor::ClassMethods

  # Creates a ReaderSource from the given reader.
  #
  # @return [ReaderSource] a ReaderSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#397
  def create_source(parent_block, reader, attributes); end

  class << self
    # @private
    #
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#387
    def inherited(subclass); end
  end
end

# This module describes the duck-typed interface that diagram converters must implement. Implementations
# may include this module but it is not required.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#5
module Asciidoctor::Diagram::DiagramConverter
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#14
  def collect_options(source); end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#18
  def convert(source, format, options); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#22
  def native_scaling?; end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#6
  def supported_formats; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_converter.rb#10
  def wrap_source(source); end
end

# Base class for diagram inline macro processors.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#428
class Asciidoctor::Diagram::DiagramInlineMacroProcessor < ::Asciidoctor::Extensions::InlineMacroProcessor
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::DiagramProcessor
  extend ::Asciidoctor::Extensions::ProcessorDsl
  extend ::Asciidoctor::Extensions::SyntaxProcessorDsl
  extend ::Asciidoctor::Extensions::MacroProcessorDsl
  extend ::Asciidoctor::Extensions::InlineMacroProcessorDsl
  extend ::Asciidoctor::Diagram::DiagramProcessor::ClassMethods

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#435
  def apply_target_subs(parent, target); end

  # Creates a FileSource using target as the file name.
  #
  # @return [FileSource] a FileSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#468
  def create_source(parent, target, attributes); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#63
  def generate_block(parent, reader_or_target, attributes); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#445
  def process(parent, reader_or_target, attributes); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#461
  def supported_formats(converter); end

  class << self
    # @private
    #
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#431
    def inherited(subclass); end
  end
end

# Mixin that provides the basic machinery for image generation.
# When this module is included it will include the FormatRegistry into the singleton class of the target class.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#20
module Asciidoctor::Diagram::DiagramProcessor
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  mixes_in_class_methods ::Asciidoctor::Diagram::DiagramProcessor::ClassMethods

  # Processes the diagram block or block macro by converting it into an image or literal block.
  #
  # @param parent [Asciidoctor::AbstractBlock] the parent asciidoc block of the block or block macro being processed
  # @param reader_or_target [Asciidoctor::Reader, String] a reader that provides the contents of a block or the
  #   target value of a block macro
  # @param attributes [Hash] the attributes of the block or block macro
  # @return [Asciidoctor::AbstractBlock] a new block that replaces the original block or block macro
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#63
  def process(parent, reader_or_target, attributes); end

  protected

  # Creates a DiagramSource object for the block or block macro being processed. Classes using this
  # mixin must implement this method.
  #
  # @abstract
  # @param parent_block [Asciidoctor::AbstractBlock] the parent asciidoc block of the block or block macro being processed
  # @param reader_or_target [Asciidoctor::Reader, String] a reader that provides the contents of a block or the
  #   target value of a block macro
  # @param attributes [Hash] the attributes of the block or block macro
  # @raise [NotImplementedError]
  # @return [DiagramSource] an object that implements the interface described by DiagramSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#146
  def create_source(parent_block, reader_or_target, attributes); end

  private

  # Returns the cache directory as an absolute path
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#332
  def cache_dir(source, parent); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#169
  def create_image_block(parent, source, format, converter); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#357
  def create_literal_block(parent, source, format, converter); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#368
  def doc_option(document, key); end

  # Returns the image output directory as an absolute path
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#319
  def image_output_dir(parent); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#156
  def normalise_attribute_name(k); end

  # Returns the general output directory for Asciidoctor as an absolute path
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#343
  def output_dir(parent); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#347
  def resolve_path(parent, path, base_dir = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#308
  def scale(size, factor); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#152
  def supported_formats(converter); end

  class << self
    # @private
    #
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#29
    def included(host_class); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#23
module Asciidoctor::Diagram::DiagramProcessor::ClassMethods
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#24
  def use_converter(converter_type); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#167
Asciidoctor::Diagram::DiagramProcessor::DIGIT_CHAR_RANGE = T.let(T.unsafe(nil), Range)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#34
Asciidoctor::Diagram::DiagramProcessor::IMAGE_PARAMS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_processor.rb#53
Asciidoctor::Diagram::DiagramProcessor::TEXT_FORMATS = T.let(T.unsafe(nil), Array)

# This module describes the duck-typed interface that diagram sources must implement. Implementations
# may include this module but it is not required.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#8
module Asciidoctor::Diagram::DiagramSource
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  # Get the value for the specified attribute. First look in the attributes on
  # this document and return the value of the attribute if found. Otherwise, if
  # this document is a child of the Document document, look in the attributes of the
  # Document document and return the value of the attribute if found. Otherwise,
  # return the default value, which defaults to nil.
  #
  # @abstract
  # @param name [String, Symbol, Array] the name(s) of the attribute to lookup
  # @param default_value [Object] the value to return if the attribute is not found
  # @raise [NotImplementedError]
  # @return the value of the attribute or the default value if the attribute is not found in the attributes of this node or the document node
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#54
  def attr(name, default_value = T.unsafe(nil), inherit = T.unsafe(nil)); end

  # @abstract
  # @return [String] the base directory against which relative paths in this diagram should be resolved
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#60
  def base_dir; end

  # @abstract
  # @return [String] the String representation of the source code for the diagram
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#21
  def code; end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#88
  def config; end

  # Creates an image metadata Hash that will be stored to disk alongside the generated image file. The contents
  # of this Hash are reread during subsequent document processing and then passed to the should_process? method
  # where it can be used to determine if the diagram should be regenerated or not.
  # The default implementation returns an empty Hash.
  #
  # @return [Hash] a Hash containing metadata
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#84
  def create_image_metadata; end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#11
  def diagram_type; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#150
  def ensure_gem(name, version); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#92
  def find_command(cmd, options = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#33
  def global_attr(name, default_value = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#29
  def global_opt(opt); end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#15
  def image_name; end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#25
  def load_code; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#37
  def opt(opt); end

  # @raise [NotImplementedError]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#166
  def resolve_path(target, start = T.unsafe(nil)); end

  # Determines if the diagram should be regenerated or not. The default implementation of this method simply
  # returns true.
  #
  # @param image_file [String] the path to the previously generated version of the image
  # @param image_metadata [Hash] the image metadata Hash that was stored during the previous diagram generation pass
  # @return [Boolean] true if the diagram should be regenerated; false otherwise
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#75
  def should_process?(image_file, image_metadata); end

  # Alias for code
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#65
  def to_s; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagrams/extension.rb#10
class Asciidoctor::Diagram::DiagramsBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagrams/extension.rb#6
class Asciidoctor::Diagram::DiagramsBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagrams/converter.rb#8
class Asciidoctor::Diagram::DiagramsConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagrams/converter.rb#17
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagrams/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagrams/extension.rb#14
class Asciidoctor::Diagram::DiagramsInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/extension.rb#10
class Asciidoctor::Diagram::DitaaBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/extension.rb#6
class Asciidoctor::Diagram::DitaaBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#10
class Asciidoctor::Diagram::DitaaConverter
  include ::Asciidoctor::Diagram::DiagramConverter

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#48
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#63
  def convert(source, format, options); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#59
  def native_scaling?; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#44
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#27
Asciidoctor::Diagram::DitaaConverter::CLASSPATH_ENV = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#28
Asciidoctor::Diagram::DitaaConverter::DITAA_JARS = T.let(T.unsafe(nil), Array)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/converter.rb#13
Asciidoctor::Diagram::DitaaConverter::OPTIONS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/ditaa/extension.rb#14
class Asciidoctor::Diagram::DitaaInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/dpic/extension.rb#10
class Asciidoctor::Diagram::DpicBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/dpic/extension.rb#6
class Asciidoctor::Diagram::DpicBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/dpic/converter.rb#8
class Asciidoctor::Diagram::DpicConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/dpic/converter.rb#17
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/dpic/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/dpic/extension.rb#14
class Asciidoctor::Diagram::DpicInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/erd/extension.rb#10
class Asciidoctor::Diagram::ErdBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/erd/extension.rb#6
class Asciidoctor::Diagram::ErdBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/erd/converter.rb#8
class Asciidoctor::Diagram::ErdConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/erd/converter.rb#17
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/erd/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/erd/extension.rb#14
class Asciidoctor::Diagram::ErdInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# A diagram source that retrieves the code for a diagram from an external source file.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#271
class Asciidoctor::Diagram::FileSource < ::Asciidoctor::Diagram::BasicSource
  # @return [FileSource] a new instance of FileSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#272
  def initialize(block_processor, parent_block, file_name, attributes); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#277
  def base_dir; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#285
  def image_name; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#299
  def load_code; end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#295
  def should_process?(image_file, image_metadata); end

  private

  # Prepare the source data for parsing.
  #
  # Encodes the data to UTF-8 and removes any trailing
  # whitespace from every line.
  #
  # data - the source data to prepare
  #
  # returns a String Array of prepared lines
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#323
  def prepare_source_array(data); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#313
Asciidoctor::Diagram::FileSource::BOM_BYTES_UTF_16BE = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#312
Asciidoctor::Diagram::FileSource::BOM_BYTES_UTF_16LE = T.let(T.unsafe(nil), String)

# Raw binary strings for UTF-* Byte Order Marks
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#311
Asciidoctor::Diagram::FileSource::BOM_BYTES_UTF_8 = T.let(T.unsafe(nil), String)

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/gif.rb#6
module Asciidoctor::Diagram::GIF
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/gif.rb#10
    def post_process_image(data, optimise); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/gif.rb#7
Asciidoctor::Diagram::GIF::GIF87A_SIGNATURE = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/gif.rb#8
Asciidoctor::Diagram::GIF::GIF89A_SIGNATURE = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/extension.rb#10
class Asciidoctor::Diagram::GnuplotBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/extension.rb#6
class Asciidoctor::Diagram::GnuplotBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/converter.rb#8
class Asciidoctor::Diagram::GnuplotConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/converter.rb#17
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/converter.rb#29
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/gnuplot/extension.rb#14
class Asciidoctor::Diagram::GnuplotInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/extension.rb#10
class Asciidoctor::Diagram::GraphvizBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/extension.rb#6
class Asciidoctor::Diagram::GraphvizBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/converter.rb#8
class Asciidoctor::Diagram::GraphvizConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/converter.rb#20
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz/extension.rb#14
class Asciidoctor::Diagram::GraphvizInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/extension.rb#10
class Asciidoctor::Diagram::GraphvizPyBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/extension.rb#6
class Asciidoctor::Diagram::GraphvizPyBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/converter.rb#8
class Asciidoctor::Diagram::GraphvizPyConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/converter.rb#23
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/graphviz_py/extension.rb#14
class Asciidoctor::Diagram::GraphvizPyInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#12
class Asciidoctor::Diagram::HttpConverter
  include ::Asciidoctor::Diagram::DiagramConverter

  # @return [HttpConverter] a new instance of HttpConverter
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#17
  def initialize(base_uri, type, converter); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#27
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#35
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#23
  def supported_formats; end

  private

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#87
  def get_uri(uri, post_data = T.unsafe(nil), post_content_type = T.unsafe(nil), attempt = T.unsafe(nil)); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/http/converter.rb#13
Asciidoctor::Diagram::HttpConverter::DEFAULT_MAX_GET_SIZE = T.let(T.unsafe(nil), Integer)

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#6
module Asciidoctor::Diagram::Java
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#7
    def classpath; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#87
    def create_error(prefix_msg, response); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#11
    def environment_variable(key); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#109
    def find_java; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#13
    def format_request(req, io); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#52
    def instance; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#103
    def java; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#151
    def java_exe(java_home); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#43
    def load; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#66
    def parse_body(io); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#48
    def parse_response(io); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#120
    def path_to(java_home, java_binary); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#146
    def registry_any; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#136
    def registry_current(key); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#132
    def registry_lookup; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#161
    def registry_query(key, value = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#64
    def send_request(req); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#11
Asciidoctor::Diagram::Java::CRLF = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#15
class Asciidoctor::Diagram::Java::CommandServer
  # @return [CommandServer] a new instance of CommandServer
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#16
  def initialize(java, classpath); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#32
  def io; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java_socket.rb#36
  def shutdown; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#129
Asciidoctor::Diagram::Java::JDK_KEY = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#130
Asciidoctor::Diagram::Java::JRE_KEY = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/java.rb#46
Asciidoctor::Diagram::Java::STATUS_LINE = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/extension.rb#10
class Asciidoctor::Diagram::LilypondBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/extension.rb#6
class Asciidoctor::Diagram::LilypondBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/converter.rb#8
class Asciidoctor::Diagram::LilypondConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/converter.rb#27
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/converter.rb#33
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/converter.rb#23
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/converter.rb#12
Asciidoctor::Diagram::LilypondConverter::EXTRA_PATH = T.let(T.unsafe(nil), Array)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/lilypond/extension.rb#14
class Asciidoctor::Diagram::LilypondInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/extension.rb#14
class Asciidoctor::Diagram::MemeBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor
  include ::Asciidoctor::Diagram::MemeProcessor
end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/converter.rb#9
class Asciidoctor::Diagram::MemeConverter
  include ::Asciidoctor::Diagram::DiagramConverter

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/converter.rb#18
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/converter.rb#62
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/converter.rb#13
  def supported_formats; end

  private

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/converter.rb#147
  def prepare_label(label, noupcase); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/extension.rb#20
class Asciidoctor::Diagram::MemeInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor
  include ::Asciidoctor::Diagram::MemeProcessor
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/extension.rb#6
module Asciidoctor::Diagram::MemeProcessor
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/meme/extension.rb#7
  def create_source(parent, target, attributes); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/extension.rb#10
class Asciidoctor::Diagram::MermaidBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/extension.rb#6
class Asciidoctor::Diagram::MermaidBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#9
class Asciidoctor::Diagram::MermaidConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#22
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#42
  def convert(source, format, options); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#18
  def native_scaling?; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#14
  def supported_formats; end

  private

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#173
  def run_mermaid(mermaid, source, format, options = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/converter.rb#100
  def run_mmdc(mmdc, source, format, options = T.unsafe(nil)); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/mermaid/extension.rb#14
class Asciidoctor::Diagram::MermaidInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/extension.rb#10
class Asciidoctor::Diagram::MscBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/extension.rb#6
class Asciidoctor::Diagram::MscBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/extension.rb#14
class Asciidoctor::Diagram::MscInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/converter.rb#8
class Asciidoctor::Diagram::MscgenConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/converter.rb#17
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/converter.rb#21
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/msc/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/nomnoml/extension.rb#10
class Asciidoctor::Diagram::NomnomlBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/nomnoml/extension.rb#6
class Asciidoctor::Diagram::NomnomlBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/nomnoml/converter.rb#8
class Asciidoctor::Diagram::NomnomlConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/nomnoml/converter.rb#18
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/nomnoml/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/nomnoml/extension.rb#14
class Asciidoctor::Diagram::NomnomlInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#12
class Asciidoctor::Diagram::NwDiagBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#7
class Asciidoctor::Diagram::NwDiagBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#8
class Asciidoctor::Diagram::NwDiagConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#42
Asciidoctor::Diagram::NwDiagConverter::TOOL = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#17
class Asciidoctor::Diagram::NwDiagInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/pdf.rb#4
module Asciidoctor::Diagram::PDF
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/pdf.rb#5
    def post_process_image(data, optimise); end
  end
end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/png.rb#6
module Asciidoctor::Diagram::PNG
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/png.rb#9
    def post_process_image(data, optimise); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/png.rb#7
Asciidoctor::Diagram::PNG::PNG_SIGNATURE = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#12
class Asciidoctor::Diagram::PacketDiagBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#7
class Asciidoctor::Diagram::PacketDiagBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#8
class Asciidoctor::Diagram::PacketDiagConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#42
Asciidoctor::Diagram::PacketDiagConverter::TOOL = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#17
class Asciidoctor::Diagram::PacketDiagInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/extension.rb#10
class Asciidoctor::Diagram::PenroseBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/extension.rb#6
class Asciidoctor::Diagram::PenroseBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/converter.rb#8
class Asciidoctor::Diagram::PenroseConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/converter.rb#24
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/penrose/extension.rb#14
class Asciidoctor::Diagram::PenroseInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/pikchr/extension.rb#10
class Asciidoctor::Diagram::PikchrBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/pikchr/extension.rb#6
class Asciidoctor::Diagram::PikchrBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/pikchr/converter.rb#8
class Asciidoctor::Diagram::PikchrConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/pikchr/converter.rb#17
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/pikchr/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/pikchr/extension.rb#14
class Asciidoctor::Diagram::PikchrInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/extension.rb#10
class Asciidoctor::Diagram::PintoraBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/extension.rb#6
class Asciidoctor::Diagram::PintoraBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/converter.rb#9
class Asciidoctor::Diagram::PintoraConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/converter.rb#18
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/converter.rb#29
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/converter.rb#14
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/pintora/extension.rb#14
class Asciidoctor::Diagram::PintoraInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#180
class Asciidoctor::Diagram::PlantUMLPreprocessedSource < ::SimpleDelegator
  # @return [PlantUMLPreprocessedSource] a new instance of PlantUMLPreprocessedSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#181
  def initialize(source, converter); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#186
  def code; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#190
  def load_code; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/extension.rb#10
class Asciidoctor::Diagram::PlantUmlBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/extension.rb#6
class Asciidoctor::Diagram::PlantUmlBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#9
class Asciidoctor::Diagram::PlantUmlConverter
  include ::Asciidoctor::Diagram::DiagramConverter

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#57
  def add_common_headers(headers, source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#77
  def add_size_limit_header(headers, limit); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#73
  def add_theme_header(headers, theme); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#38
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#81
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#53
  def should_preprocess(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#34
  def supported_formats; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#30
  def wrap_source(source); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#12
Asciidoctor::Diagram::PlantUmlConverter::CLASSPATH_ENV = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#13
Asciidoctor::Diagram::PlantUmlConverter::LIB_DIR = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#14
Asciidoctor::Diagram::PlantUmlConverter::PLANTUML_JARS = T.let(T.unsafe(nil), Array)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/extension.rb#14
class Asciidoctor::Diagram::PlantUmlInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#7
module Asciidoctor::Diagram::Platform
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#16
    def file_separator; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#20
    def host_os_file_separator; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#81
    def host_os_path(path); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#28
    def host_os_path_separator; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#70
    def native_path(path); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#8
    def os; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#32
    def os_info; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#12
    def os_variant; end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/platform.rb#24
    def path_separator; end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#12
class Asciidoctor::Diagram::RackDiagBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#7
class Asciidoctor::Diagram::RackDiagBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#8
class Asciidoctor::Diagram::RackDiagConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#42
Asciidoctor::Diagram::RackDiagConverter::TOOL = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#17
class Asciidoctor::Diagram::RackDiagInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# A diagram source that retrieves the code for the diagram from the contents of a block.
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#257
class Asciidoctor::Diagram::ReaderSource < ::Asciidoctor::Diagram::BasicSource
  # @return [ReaderSource] a new instance of ReaderSource
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#260
  def initialize(block_processor, parent_block, reader, attributes); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/diagram_source.rb#265
  def load_code; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#8
class Asciidoctor::Diagram::Renderers
  # @return [Renderers] a new instance of Renderers
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#16
  def initialize(name); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#38
  def get_renderer(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#23
  def renderer(renderer_type); end

  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#42
    def get_renderer_type(source); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#45
    def mime_type(renderer_type); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#9
Asciidoctor::Diagram::Renderers::D2 = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#14
Asciidoctor::Diagram::Renderers::DEFAULT_RENDERER = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#10
Asciidoctor::Diagram::Renderers::GRAPHVIZ = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#11
Asciidoctor::Diagram::Renderers::MERMAID = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#13
Asciidoctor::Diagram::Renderers::PLANTUML = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/renderers.rb#12
Asciidoctor::Diagram::Renderers::PLANTUML_C4 = T.let(T.unsafe(nil), String)

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#7
module Asciidoctor::Diagram::SVG
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#8
    def post_process_image(data, optimise); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#55
    def remove_comments(parent); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#72
    def to_numeric(text); end

    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#83
    def to_px_factor(unit); end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#81
Asciidoctor::Diagram::SVG::VIEWBOX_REGEX = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/svg.rb#80
Asciidoctor::Diagram::SVG::WIDTH_HEIGHT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/extension.rb#22
class Asciidoctor::Diagram::SaltBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/extension.rb#18
class Asciidoctor::Diagram::SaltBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#174
class Asciidoctor::Diagram::SaltConverter < ::Asciidoctor::Diagram::PlantUmlConverter
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#175
    def tag; end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/extension.rb#26
class Asciidoctor::Diagram::SaltInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#12
class Asciidoctor::Diagram::SeqDiagBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#7
class Asciidoctor::Diagram::SeqDiagBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#8
class Asciidoctor::Diagram::SeqDiagConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/converter.rb#42
Asciidoctor::Diagram::SeqDiagConverter::TOOL = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/blockdiag/extension.rb#17
class Asciidoctor::Diagram::SeqDiagInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/shaape/extension.rb#10
class Asciidoctor::Diagram::ShaapeBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/shaape/extension.rb#6
class Asciidoctor::Diagram::ShaapeBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/shaape/converter.rb#8
class Asciidoctor::Diagram::ShaapeConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/shaape/converter.rb#18
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/shaape/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/shaape/extension.rb#14
class Asciidoctor::Diagram::ShaapeInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/extension.rb#10
class Asciidoctor::Diagram::SmcatBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/extension.rb#6
class Asciidoctor::Diagram::SmcatBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/converter.rb#8
class Asciidoctor::Diagram::SmcatConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/converter.rb#17
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/converter.rb#24
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/smcat/extension.rb#14
class Asciidoctor::Diagram::SmcatInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#34
class Asciidoctor::Diagram::StructurizrBlockMacroProcessor < ::Asciidoctor::Extensions::BlockMacroProcessor
  extend ::Asciidoctor::Extensions::ProcessorDsl
  extend ::Asciidoctor::Extensions::SyntaxProcessorDsl
  extend ::Asciidoctor::Extensions::MacroProcessorDsl

  # @return [StructurizrBlockMacroProcessor] a new instance of StructurizrBlockMacroProcessor
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#37
  def initialize(name = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#43
  def process(parent, target, attributes); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#12
class Asciidoctor::Diagram::StructurizrBlockProcessor < ::Asciidoctor::Extensions::BlockProcessor
  extend ::Asciidoctor::Extensions::ProcessorDsl
  extend ::Asciidoctor::Extensions::SyntaxProcessorDsl
  extend ::Asciidoctor::Extensions::BlockProcessorDsl

  # @return [StructurizrBlockProcessor] a new instance of StructurizrBlockProcessor
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#15
  def initialize(name = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#21
  def process(parent, reader, attributes); end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#30
class Asciidoctor::Diagram::StructurizrConvertBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/extension.rb#8
class Asciidoctor::Diagram::StructurizrConvertBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#11
class Asciidoctor::Diagram::StructurizrConverter
  include ::Asciidoctor::Diagram::DiagramConverter

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#34
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#41
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#30
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#14
Asciidoctor::Diagram::StructurizrConverter::CLASSPATH_ENV = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#15
Asciidoctor::Diagram::StructurizrConverter::CLI_HOME_ENV = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/structurizr/converter.rb#16
Asciidoctor::Diagram::StructurizrConverter::STRUCTURIZR_JARS = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/extension.rb#10
class Asciidoctor::Diagram::SvgBobBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/extension.rb#6
class Asciidoctor::Diagram::SvgBobBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/extension.rb#14
class Asciidoctor::Diagram::SvgBobInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/converter.rb#8
class Asciidoctor::Diagram::SvgbobConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/converter.rb#28
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/converter.rb#40
  def convert(source, format, options); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/converter.rb#17
  def native_scaling?; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/svgbob/converter.rb#21
Asciidoctor::Diagram::SvgbobConverter::OPTIONS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/symbolator/extension.rb#10
class Asciidoctor::Diagram::SymbolatorBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/symbolator/extension.rb#6
class Asciidoctor::Diagram::SymbolatorBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/symbolator/converter.rb#8
class Asciidoctor::Diagram::SymbolatorConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/symbolator/converter.rb#16
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/symbolator/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/symbolator/extension.rb#14
class Asciidoctor::Diagram::SymbolatorInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/extension.rb#10
class Asciidoctor::Diagram::SyntraxBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/extension.rb#6
class Asciidoctor::Diagram::SyntraxBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#8
class Asciidoctor::Diagram::SyntraxConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#37
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#46
  def convert(source, format, options); end

  # @return [Boolean]
  #
  # source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#108
  def native_scaling?; end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#33
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#12
Asciidoctor::Diagram::SyntraxConverter::CLASSPATH_ENV = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#13
Asciidoctor::Diagram::SyntraxConverter::CLI_HOME_ENV = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/converter.rb#14
Asciidoctor::Diagram::SyntraxConverter::JSYNTRAX_JARS = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/syntrax/extension.rb#14
class Asciidoctor::Diagram::SyntraxInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/extension.rb#10
class Asciidoctor::Diagram::TikZBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/extension.rb#6
class Asciidoctor::Diagram::TikZBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/converter.rb#8
class Asciidoctor::Diagram::TikZConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/converter.rb#16
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/converter.rb#22
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/tikz/extension.rb#14
class Asciidoctor::Diagram::TikZInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#168
class Asciidoctor::Diagram::UmlConverter < ::Asciidoctor::Diagram::PlantUmlConverter
  class << self
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/plantuml/converter.rb#169
    def tag; end
  end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/umlet/extension.rb#10
class Asciidoctor::Diagram::UmletBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/umlet/extension.rb#6
class Asciidoctor::Diagram::UmletBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/umlet/converter.rb#9
class Asciidoctor::Diagram::UmletConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/umlet/converter.rb#18
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/umlet/converter.rb#14
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/umlet/extension.rb#14
class Asciidoctor::Diagram::UmletInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/version.rb#3
Asciidoctor::Diagram::VERSION = T.let(T.unsafe(nil), String)

# source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/extension.rb#10
class Asciidoctor::Diagram::VegaBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/extension.rb#6
class Asciidoctor::Diagram::VegaBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/converter.rb#8
class Asciidoctor::Diagram::VegaConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/converter.rb#18
  def collect_options(source); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/converter.rb#24
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/converter.rb#13
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/vega/extension.rb#14
class Asciidoctor::Diagram::VegaInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/wavedrom/extension.rb#10
class Asciidoctor::Diagram::WavedromBlockMacroProcessor < ::Asciidoctor::Diagram::DiagramBlockMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/wavedrom/extension.rb#6
class Asciidoctor::Diagram::WavedromBlockProcessor < ::Asciidoctor::Diagram::DiagramBlockProcessor; end

# @private
#
# source://asciidoctor-diagram//lib/asciidoctor-diagram/wavedrom/converter.rb#8
class Asciidoctor::Diagram::WavedromConverter
  include ::Asciidoctor::Diagram::DiagramConverter
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Diagram::CliGenerator

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/wavedrom/converter.rb#16
  def convert(source, format, options); end

  # source://asciidoctor-diagram//lib/asciidoctor-diagram/wavedrom/converter.rb#12
  def supported_formats; end
end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/wavedrom/extension.rb#14
class Asciidoctor::Diagram::WavedromInlineMacroProcessor < ::Asciidoctor::Diagram::DiagramInlineMacroProcessor; end

# source://asciidoctor-diagram//lib/asciidoctor-diagram/util/which.rb#3
module Asciidoctor::Diagram::Which
  class << self
    # @private
    #
    # source://asciidoctor-diagram//lib/asciidoctor-diagram/util/which.rb#5
    def which(cmd, options = T.unsafe(nil)); end
  end
end
