# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prawn-table` gem.
# Please instead update this file by running `bin/tapioca gem prawn-table`.


# source://prawn-table//lib/prawn/table/column_width_calculator.rb#3
module Prawn
  private

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug; end

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug=(_arg0); end

  # source://prawn/2.4.0/lib/prawn.rb#41
  def verify_options(accepted, actual); end

  class << self
    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug; end

    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug=(_arg0); end

    # source://prawn/2.4.0/lib/prawn/image_handler.rb#12
    def image_handler; end

    # source://prawn/2.4.0/lib/prawn.rb#41
    def verify_options(accepted, actual); end
  end
end

# source://prawn-table//lib/prawn/table/cell.rb#11
class Prawn::Document
  include ::PDF::Core::Text
  include ::Prawn::Text::Formatted
  include ::Prawn::Graphics::BlendMode
  include ::Prawn::Graphics::Color
  include ::Prawn::Graphics::Dash
  include ::Prawn::Graphics::CapStyle
  include ::Prawn::Graphics::JoinStyle
  include ::Prawn::Graphics::Transparency
  include ::Prawn::Graphics::Transformation
  include ::Prawn::Graphics::Patterns

  # source://prawn/2.4.0/lib/prawn/document.rb#204
  def initialize(options = T.unsafe(nil), &block); end

  # source://prawn/2.4.0/lib/prawn/document/bounding_box.rb#158
  def bounding_box(point, *args, &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#440
  def bounds; end

  # source://prawn/2.4.0/lib/prawn/document.rb#456
  def bounds=(bounding_box); end

  # source://prawn/2.4.0/lib/prawn/document/bounding_box.rb#172
  def canvas(&block); end

  # Instantiates and draws a cell on the document.
  #
  #   cell(:content => "Hello world!", :at => [12, 34])
  #
  # See Prawn::Table::Cell.make for full options.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#21
  def cell(options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document/column_box.rb#30
  def column_box(*args, &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#361
  def cursor; end

  # source://prawn/2.4.0/lib/prawn/grid.rb#22
  def define_grid(options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#319
  def delete_page(index); end

  # source://prawn/2.4.0/lib/prawn/font.rb#237
  def find_font(name, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#384
  def float; end

  # source://prawn/2.4.0/lib/prawn/font.rb#48
  def font(name = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#171
  def font_families; end

  # source://prawn/2.4.0/lib/prawn/font.rb#258
  def font_registry; end

  # source://prawn/2.4.0/lib/prawn/font.rb#95
  def font_size(points = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#105
  def font_size=(size); end

  # source://prawn/2.4.0/lib/prawn/document.rb#346
  def go_to_page(page_number); end

  # source://prawn/2.4.0/lib/prawn/grid.rb#34
  def grid(*args); end

  # source://prawn/2.4.0/lib/prawn/document.rb#625
  def group(*_arguments); end

  # source://prawn/2.4.0/lib/prawn/document.rb#527
  def indent(left, right = T.unsafe(nil), &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#681
  def initialize_first_page(options); end

  # Set up, but do not draw, a cell. Useful for creating cells with
  # formatting options to be inserted into a Table. Call +draw+ on the
  # resulting Cell to ink it.
  #
  # See the documentation on Prawn::Cell for details on the arguments.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#33
  def make_cell(content, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#107
  def margin_box; end

  # source://prawn/2.4.0/lib/prawn/document.rb#107
  def margin_box=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#108
  def margins; end

  # source://prawn/2.4.0/lib/prawn/document.rb#669
  def mask(*fields); end

  # source://prawn/2.4.0/lib/prawn/document.rb#367
  def move_cursor_to(new_y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#470
  def move_down(amount); end

  # source://prawn/2.4.0/lib/prawn/document.rb#463
  def move_up(amount); end

  # source://prawn/2.4.0/lib/prawn/document.rb#570
  def number_pages(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/outline.rb#10
  def outline; end

  # source://prawn/2.4.0/lib/prawn/document.rb#509
  def pad(y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#495
  def pad_bottom(y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#482
  def pad_top(y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#695
  def page; end

  # source://prawn/2.4.0/lib/prawn/document.rb#337
  def page_count; end

  # source://prawn/2.4.0/lib/prawn/document.rb#652
  def page_match?(page_filter, page_number); end

  # source://prawn/2.4.0/lib/prawn/document.rb#109
  def page_number; end

  # source://prawn/2.4.0/lib/prawn/document.rb#109
  def page_number=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#447
  def reference_bounds; end

  # source://prawn/2.4.0/lib/prawn/document.rb#395
  def render(*arguments, &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#408
  def render_file(filename); end

  # source://prawn/2.4.0/lib/prawn/repeater.rb#78
  def repeat(page_filter, options = T.unsafe(nil), &block); end

  # source://prawn/2.4.0/lib/prawn/repeater.rb#17
  def repeaters; end

  # source://prawn/2.4.0/lib/prawn/font.rb#209
  def save_font; end

  # source://prawn/2.4.0/lib/prawn/font.rb#201
  def set_font(font, size = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document/span.rb#29
  def span(width, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#255
  def start_new_page(options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#692
  def state; end

  # source://prawn/2.4.0/lib/prawn/document.rb#692
  def state=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#113
  def text_formatter; end

  # source://prawn/2.4.0/lib/prawn/document.rb#113
  def text_formatter=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#634
  def transaction; end

  # source://prawn/2.4.0/lib/prawn/font.rb#129
  def width_of(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#108
  def y; end

  # source://prawn/2.4.0/lib/prawn/document.rb#353
  def y=(new_y); end

  private

  # source://prawn/2.4.0/lib/prawn/document.rb#737
  def apply_margin_options(options); end

  # source://prawn/2.4.0/lib/prawn/document.rb#756
  def font_metric_cache; end

  # source://prawn/2.4.0/lib/prawn/document.rb#712
  def generate_margin_box; end

  # source://prawn/2.4.0/lib/prawn/document/bounding_box.rb#187
  def init_bounding_box(user_block, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document/column_box.rb#39
  def init_column_box(user_block, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/grid.rb#318
  def multi_box(box1, box2); end

  # source://prawn/2.4.0/lib/prawn/grid.rb#314
  def single_box(rows, columns); end

  # source://prawn/2.4.0/lib/prawn/document.rb#703
  def use_graphic_settings(override_settings = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#264
  def width_of_inline_formatted_string(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#274
  def width_of_string(string, options = T.unsafe(nil)); end

  class << self
    # source://prawn/2.4.0/lib/prawn/document.rb#95
    def extensions; end

    # source://prawn/2.4.0/lib/prawn/document.rb#144
    def generate(filename, options = T.unsafe(nil), &block); end

    # source://prawn/2.4.0/lib/prawn/document.rb#100
    def inherited(base); end
  end
end

# source://prawn-table//lib/prawn/table.rb#21
module Prawn::Errors; end

# This error is raised when an empty or nil table is rendered
#
# source://prawn-table//lib/prawn/table.rb#28
class Prawn::Errors::EmptyTable < ::StandardError; end

# This error is raised when table data is malformed
#
# source://prawn-table//lib/prawn/table.rb#24
class Prawn::Errors::InvalidTableData < ::StandardError; end

# Next-generation table drawing for Prawn.
#
# = Data
#
# Data, for a Prawn table, is a two-dimensional array of objects that can be
# converted to cells ("cellable" objects). Cellable objects can be:
#
# String::
#   Produces a text cell. This is the most common usage.
# Prawn::Table::Cell::
#   If you have already built a Cell or have a custom subclass of Cell you
#   want to use in a table, you can pass through Cell objects.
# Prawn::Table::
#   Creates a subtable (a table within a cell). You can use
#   Prawn::Document#make_table to create a table for use as a subtable
#   without immediately drawing it. See examples/table/bill.rb for a
#   somewhat complex use of subtables.
# Array::
#   Creates a simple subtable. Create a Table object using make_table (see
#   above) if you need more control over the subtable's styling.
#
# = Options
#
# Prawn/Layout provides many options to control style and layout of your
# table. These options are implemented with a uniform interface: the +:foo+
# option always sets the +foo=+ accessor. See the accessor and method
# documentation for full details on the options you can pass. Some
# highlights:
#
# +cell_style+::
#   A hash of style options to style all cells. See the documentation on
#   Prawn::Table::Cell for all cell style options.
# +header+::
#   If set to +true+, the first row will be repeated on every page. If set
#   to an Integer, the first +x+ rows will be repeated on every page. Row
#   numbering (for styling and other row-specific options) always indexes
#   based on your data array. Whether or not you have a header, row(n) always
#   refers to the nth element (starting from 0) of the +data+ array.
# +column_widths+::
#   Sets widths for individual columns. Manually setting widths can give
#   better results than letting Prawn guess at them, as Prawn's algorithm
#   for defaulting widths is currently pretty boneheaded. If you experience
#   problems like weird column widths or CannotFit errors, try manually
#   setting widths on more columns.
# +position+::
#   Either :left (the default), :center, :right, or a number. Specifies the
#   horizontal position of the table within its bounding box. If a number is
#   provided, it specifies the distance in points from the left edge.
#
# = Initializer Block
#
# If a block is passed to methods that initialize a table
# (Prawn::Table.new, Prawn::Document#table, Prawn::Document#make_table), it
# will be called after cell setup but before layout. This is a very flexible
# way to specify styling and layout constraints. This code sets up a table
# where the second through the fourth rows (1-3, indexed from 0) are each one
# inch (72 pt) wide:
#
#   pdf.table(data) do |table|
#     table.rows(1..3).width = 72
#   end
#
# As with Prawn::Document#initialize, if the block has no arguments, it will
# be evaluated in the context of the object itself. The above code could be
# rewritten as:
#
#   pdf.table(data) do
#     rows(1..3).width = 72
#   end
#
# source://prawn-table//lib/prawn/table/column_width_calculator.rb#4
class Prawn::Table
  # Set up a table on the given document. Arguments:
  #
  # +data+::
  #   A two-dimensional array of cell-like objects. See the "Data" section
  #   above for the types of objects that can be put in a table.
  # +document+::
  #   The Prawn::Document instance on which to draw the table.
  # +options+::
  #   A hash of attributes and values for the table. See the "Options" block
  #   above for details on available options.
  #
  # @return [Table] a new instance of Table
  #
  # source://prawn-table//lib/prawn/table.rb#137
  def initialize(data, document, options = T.unsafe(nil), &block); end

  # Specify a callback to be called before each page of cells is rendered.
  # The block is passed a Cells object containing all cells to be rendered on
  # that page. You can change styling of the cells in this block, but keep in
  # mind that the cells have already been positioned and sized.
  #
  # source://prawn-table//lib/prawn/table.rb#179
  def before_rendering_page(&block); end

  # Sets styles for all cells.
  #
  #   pdf.table(data, :cell_style => { :borders => [:left, :right] })
  #
  # source://prawn-table//lib/prawn/table.rb#234
  def cell_style=(style_hash); end

  # Returns a Prawn::Table::Cells object representing all of the cells in
  # this table.
  #
  # source://prawn-table//lib/prawn/table.rb#172
  def cells; end

  # Selects the given columns (0-based) for styling. Returns a Cells object
  # -- see the documentation on Cells for things you can do with cells.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#22
  def column(col_spec); end

  # Number of columns in the table.
  #
  # source://prawn-table//lib/prawn/table.rb#158
  def column_length; end

  # Calculate and return the constrained column widths, taking into account
  # each cell's min_width, max_width, and any user-specified constraints on
  # the table or column size.
  #
  # Because the natural widths can be silly, this does not always work so well
  # at guessing a good size for columns that have vastly different content. If
  # you see weird problems like CannotFit errors or shockingly bad column
  # sizes, you should specify more column widths manually.
  #
  # source://prawn-table//lib/prawn/table.rb#327
  def column_widths; end

  # Sets column widths for the table. The argument can be one of the following
  # types:
  #
  # +Array+::
  #   <tt>[w0, w1, w2, ...]</tt> (specify a width for each column)
  # +Hash+::
  #   <tt>{0 => w0, 1 => w1, ...}</tt> (keys are column names, values are
  #   widths)
  # +Numeric+::
  #   +72+ (sets width for all columns)
  #
  # source://prawn-table//lib/prawn/table.rb#200
  def column_widths=(widths); end

  # Selects the given columns (0-based) for styling. Returns a Cells object
  # -- see the documentation on Cells for things you can do with cells.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#22
  def columns(col_spec); end

  # Draws the table onto the document at the document's current y-position.
  #
  # source://prawn-table//lib/prawn/table.rb#259
  def draw; end

  # If +true+, designates the first row as a header row to be repeated on
  # every page. If an integer, designates the number of rows to be treated
  # as a header Does not change row numbering -- row numbers always index
  # into the data array provided, with no modification.
  #
  # source://prawn-table//lib/prawn/table.rb#224
  def header=(_arg0); end

  # Returns the height of the table in PDF points.
  #
  # source://prawn-table//lib/prawn/table.rb#215
  def height; end

  # Determine whether we're at the top of the current bounds (margin box or
  # bounding box). If we're at the top, we couldn't gain any more room by
  # breaking to the next page -- this means, in particular, that if the
  # first row is taller than the margin box, we will only move to the next
  # page if we're below the top. Some floating-point tolerance is added to
  # the calculation.
  #
  # Note that we use the actual bounds, not the reference bounds. This is
  # because even if we are in a stretchy bounding box, flowing to the next
  # page will not buy us any space if we are at the top.
  #
  # @return [Integer] 0 (already at the top OR created a new page) or -1 (enough space)
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-table.rb#6
  def initial_row_on_initial_page; end

  # Position (:left, :right, :center, or a number indicating distance in
  # points from the left edge) of the table within its parent bounds.
  #
  # source://prawn-table//lib/prawn/table.rb#167
  def position=(_arg0); end

  # Selects the given rows (0-based) for styling. Returns a Cells object --
  # see the documentation on Cells for things you can do with cells.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#14
  def row(row_spec); end

  # Accepts an Array of alternating row colors to stripe the table.
  #
  # source://prawn-table//lib/prawn/table.rb#228
  def row_colors=(_arg0); end

  # Returns an array with the height of each row.
  #
  # source://prawn-table//lib/prawn/table.rb#365
  def row_heights; end

  # Number of rows in the table.
  #
  # source://prawn-table//lib/prawn/table.rb#154
  def row_length; end

  # Selects the given rows (0-based) for styling. Returns a Cells object --
  # see the documentation on Cells for things you can do with cells.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#14
  def rows(row_spec); end

  # Allows generic stylable content. This is an alternate syntax that some
  # prefer to the attribute-based syntax. This code using style:
  #
  #   pdf.table(data) do
  #     style(row(0), :background_color => 'ff00ff')
  #     style(column(0)) { |c| c.border_width += 1 }
  #   end
  #
  # is equivalent to:
  #
  #   pdf.table(data) do
  #     row(0).style :background_color => 'ff00ff'
  #     column(0).style { |c| c.border_width += 1 }
  #   end
  #
  # source://prawn-table//lib/prawn/table.rb#253
  def style(stylable, style_hash = T.unsafe(nil), &block); end

  # Returns the width of the table in PDF points.
  #
  # source://prawn-table//lib/prawn/table.rb#185
  def width; end

  # Manually set the width of the table.
  #
  # source://prawn-table//lib/prawn/table.rb#162
  def width=(_arg0); end

  protected

  # source://prawn-table//lib/prawn/table.rb#571
  def add_header(row_number, cells_this_page); end

  # Add the header row(s) to the given array of cells at the given y-position.
  # Number the row with the given +row+ index, so that the header appears (in
  # any Cells built for this page) immediately prior to the first data row on
  # this page.
  #
  # Return the height of the header.
  #
  # source://prawn-table//lib/prawn/table.rb#591
  def add_one_header_row(page_of_cells, x_offset, y, row, row_of_header = T.unsafe(nil)); end

  # Raises an error if the data provided cannot be converted into a valid
  # table.
  #
  # source://prawn-table//lib/prawn/table.rb#613
  def assert_proper_table_data(data); end

  # do we have enough room to fit a given height on to the current page?
  #
  # @return [Boolean]
  #
  # source://prawn-table//lib/prawn/table.rb#489
  def fits_on_page?(needed_height, use_reference_bounds = T.unsafe(nil)); end

  # return the header rows
  #
  # @api private
  #
  # source://prawn-table//lib/prawn/table.rb#500
  def header_rows; end

  # ink cells and then draw them
  #
  # source://prawn-table//lib/prawn/table.rb#423
  def ink_and_draw_cells(cells_this_page, draw_cells = T.unsafe(nil)); end

  # ink and draw cells, then start a new page
  #
  # source://prawn-table//lib/prawn/table.rb#429
  def ink_and_draw_cells_and_start_new_page(cells_this_page, cell); end

  # Ink all cells on the current page
  #
  # source://prawn-table//lib/prawn/table.rb#452
  def ink_cells(cells_this_page); end

  # Converts the array of cellable objects given into instances of
  # Prawn::Table::Cell, and sets up their in-table properties so that they
  # know their own position in the table.
  #
  # source://prawn-table//lib/prawn/table.rb#512
  def make_cells(data); end

  # Returns an array of each column's natural (unconstrained) width.
  #
  # source://prawn-table//lib/prawn/table.rb#628
  def natural_column_widths; end

  # Returns the "natural" (unconstrained) width of the table. This may be
  # extremely silly; for example, the unconstrained width of a paragraph of
  # text is the width it would assume if it were not wrapped at all. Could be
  # a mile long.
  #
  # source://prawn-table//lib/prawn/table.rb#637
  def natural_width; end

  # number of rows of the header
  #
  # @return [Integer] the number of rows of the header
  #
  # source://prawn-table//lib/prawn/table.rb#401
  def number_of_header_rows; end

  # Set each cell's position based on the widths and heights of cells
  # preceding it.
  #
  # source://prawn-table//lib/prawn/table.rb#662
  def position_cells; end

  # sets the background color (if necessary) for the given cell
  #
  # source://prawn-table//lib/prawn/table.rb#386
  def set_background_color(cell, started_new_page_at_row); end

  # Assigns the calculated column widths to each cell. This ensures that each
  # cell in a column is the same width. After this method is called,
  # subsequent calls to column_widths and width should return the finalized
  # values that will be used to ink the table.
  #
  # source://prawn-table//lib/prawn/table.rb#646
  def set_column_widths; end

  # Assigns the row heights to each cell. This ensures that every cell in a
  # row is the same height.
  #
  # source://prawn-table//lib/prawn/table.rb#655
  def set_row_heights; end

  # should we start a new page? (does the current row fail to fit on this page)
  #
  # @return [Boolean]
  #
  # source://prawn-table//lib/prawn/table.rb#414
  def start_new_page?(cell, offset, ref_bounds); end

  # Sets up a bounding box to position the table according to the specified
  # :position option, and yields.
  #
  # source://prawn-table//lib/prawn/table.rb#678
  def with_position; end
end

# A Cell is a rectangular area of the page into which content is drawn. It
# has a framework for sizing itself and adding padding and simple styling.
# There are several standard Cell subclasses that handle things like text,
# Tables, and (in the future) stamps, images, and arbitrary content.
#
# Cells are a basic building block for table support (see Prawn::Table).
#
# Please subclass me if you want new content types! I'm designed to be very
# extensible. See the different standard Cell subclasses in
# lib/prawn/table/cell/*.rb for a template.
#
# source://prawn-table//lib/prawn/table/cell.rb#52
class Prawn::Table::Cell
  # Sets up a cell on the document +pdf+, at the given x/y location +point+,
  # with the given +options+. Cell, like Table, follows the "options set
  # accessors" paradigm (see "Options" under the Table documentation), so
  # any cell accessor <tt>cell.foo = :bar</tt> can be set by providing the
  # option <tt>:foo => :bar</tt> here.
  #
  # @return [Cell] a new instance of Cell
  #
  # source://prawn-table//lib/prawn/table/cell.rb#208
  def initialize(pdf, point, options = T.unsafe(nil)); end

  # Min-width of the span divided by the number of columns.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#83
  def avg_spanned_min_width; end

  # The background color, if any, for this cell. Specified in HTML RGB
  # format, e.g., "ccffff". The background is drawn under the whole cell,
  # including any padding.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#142
  def background_color; end

  # The background color, if any, for this cell. Specified in HTML RGB
  # format, e.g., "ccffff". The background is drawn under the whole cell,
  # including any padding.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#142
  def background_color=(_arg0); end

  # source://prawn-table//lib/prawn/table/cell.rb#568
  def border_bottom_color; end

  # source://prawn-table//lib/prawn/table/cell.rb#572
  def border_bottom_color=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#694
  def border_bottom_line; end

  # source://prawn-table//lib/prawn/table/cell.rb#698
  def border_bottom_line=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#626
  def border_bottom_width; end

  # source://prawn-table//lib/prawn/table/cell.rb#630
  def border_bottom_width=(val); end

  # Sets border colors on this cell. The argument can be one of:
  #
  # * an integer (sets all colors)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-table/cell.rb#6
  def border_color=(color); end

  # HTML RGB-format ("ccffff") border colors: [top, right, bottom, left].
  #
  # source://prawn-table//lib/prawn/table/cell.rb#126
  def border_colors; end

  # Sets border colors on this cell. The argument can be one of:
  #
  # * an integer (sets all colors)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#533
  def border_colors=(color); end

  # source://prawn-table//lib/prawn/table/cell.rb#576
  def border_left_color; end

  # source://prawn-table//lib/prawn/table/cell.rb#580
  def border_left_color=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#702
  def border_left_line; end

  # source://prawn-table//lib/prawn/table/cell.rb#706
  def border_left_line=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#634
  def border_left_width; end

  # source://prawn-table//lib/prawn/table/cell.rb#638
  def border_left_width=(val); end

  # Sets border line style on this cell. The argument can be one of:
  #
  # Possible values are: :solid, :dashed, :dotted
  #
  # * one value (sets all lines)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#659
  def border_line=(line); end

  # Line style
  #
  # source://prawn-table//lib/prawn/table/cell.rb#130
  def border_lines; end

  # Sets border line style on this cell. The argument can be one of:
  #
  # Possible values are: :solid, :dashed, :dotted
  #
  # * one value (sets all lines)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#659
  def border_lines=(line); end

  # source://prawn-table//lib/prawn/table/cell.rb#560
  def border_right_color; end

  # source://prawn-table//lib/prawn/table/cell.rb#564
  def border_right_color=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#686
  def border_right_line; end

  # source://prawn-table//lib/prawn/table/cell.rb#690
  def border_right_line=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#618
  def border_right_width; end

  # source://prawn-table//lib/prawn/table/cell.rb#622
  def border_right_width=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#552
  def border_top_color; end

  # source://prawn-table//lib/prawn/table/cell.rb#556
  def border_top_color=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#678
  def border_top_line; end

  # source://prawn-table//lib/prawn/table/cell.rb#682
  def border_top_line=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#610
  def border_top_width; end

  # source://prawn-table//lib/prawn/table/cell.rb#614
  def border_top_width=(val); end

  # Sets border widths on this cell. The argument can be one of:
  #
  # * an integer (sets all widths)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#591
  def border_width=(width); end

  # Width, in PDF points, of the cell's borders: [top, right, bottom, left].
  #
  # source://prawn-table//lib/prawn/table/cell.rb#122
  def border_widths; end

  # Sets border widths on this cell. The argument can be one of:
  #
  # * an integer (sets all widths)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#591
  def border_widths=(width); end

  # Specifies which borders to enable. Must be an array of zero or more of:
  # <tt>[:left, :right, :top, :bottom]</tt>.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#118
  def borders; end

  # Specifies which borders to enable. Must be an array of zero or more of:
  # <tt>[:left, :right, :top, :bottom]</tt>.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#118
  def borders=(_arg0); end

  # Number of columns this cell spans. Defaults to 1.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#146
  def colspan; end

  # Indicates the number of columns that this cell is to span. Defaults to
  # 1.
  #
  # This must be provided as part of the table data, like so:
  #
  #   pdf.table([["foo", {:content => "bar", :colspan => 2}]])
  #
  # Setting colspan from the initializer block is invalid because layout
  # has already run. For example, this will NOT work:
  #
  #   pdf.table([["foo", "bar"]]) { cells[0, 1].colspan = 2 }
  #
  # source://prawn-table//lib/prawn/table/cell.rb#365
  def colspan=(span); end

  # Specifies the content for the cell. Must be a "cellable" object. See the
  # "Data" section of the Prawn::Table documentation for details on cellable
  # objects.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#136
  def content; end

  # Specifies the content for the cell. Must be a "cellable" object. See the
  # "Data" section of the Prawn::Table documentation for details on cellable
  # objects.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#136
  def content=(_arg0); end

  # Returns the height of the bare content in the cell, excluding padding.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#331
  def content_height; end

  # Returns the width of the bare content in the cell, excluding padding.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#281
  def content_width; end

  # Draws the cell onto the document. Pass in a point [x,y] to override the
  # location at which the cell is drawn.
  #
  # If drawing a group of cells at known positions, look into
  # Cell.draw_cells, which ensures that the backgrounds, borders, and
  # content are all drawn in correct order so as not to overlap.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#403
  def draw(pt = T.unsafe(nil)); end

  # Draws the cell's background color.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#712
  def draw_background(pt); end

  # Draws borders around the cell. Borders are centered on the bounds of
  # the cell outside of any padding, so the caller is responsible for
  # setting appropriate padding to ensure the border does not overlap with
  # cell content.
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-table/cell.rb#18
  def draw_borders(pt); end

  # Draws the cell's content at the point provided.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#425
  def draw_bounded_content(pt); end

  # Draws cell content within the cell's bounding box. Must be implemented
  # in subclasses.
  #
  # @raise [NotImplementedError]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#776
  def draw_content; end

  # Array of SpanDummy cells (if any) that represent the other cells in
  # this span group. They know their own width / height, but do not draw
  # anything.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#156
  def dummy_cells; end

  # Returns the cell's height in points, inclusive of padding. If the cell
  # is the master cell of a rowspan, returns the width of the entire span
  # group.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#316
  def height; end

  # Manually specify the cell's height.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#113
  def height=(_arg0); end

  # Returns the cell's height in points, inclusive of padding, in its first
  # row only.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#306
  def height_ignoring_span; end

  # Maximum width of the entire span group this cell controls.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#97
  def max_width; end

  # If provided, the maximum width that this cell can be drawn in, within
  # its column.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#90
  def max_width_ignoring_span; end

  # Minimum width of the entire span group this cell controls.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#68
  def min_width; end

  # If provided, the minimum width that this cell in its column will permit.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#61
  def min_width_ignoring_span; end

  # Returns the height this cell would naturally take on, absent
  # constraints. Must be implemented in subclasses.
  #
  # @raise [NotImplementedError]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#348
  def natural_content_height; end

  # Returns the width this cell would naturally take on, absent other
  # constraints. Must be implemented in subclasses.
  #
  # @raise [NotImplementedError]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#298
  def natural_content_width; end

  # Amount of dead space (in PDF points) inside the borders but outside the
  # content. Padding defaults to 5pt.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#57
  def padding; end

  # Sets padding on this cell. The argument can be one of:
  #
  # * an integer (sets all padding)
  # * a two-element array [vertical, horizontal]
  # * a three-element array [top, horizontal, bottom]
  # * a four-element array [top, right, bottom, left]
  #
  # source://prawn-table//lib/prawn/table/cell.rb#476
  def padding=(pad); end

  # source://prawn-table//lib/prawn/table/cell.rb#510
  def padding_bottom; end

  # source://prawn-table//lib/prawn/table/cell.rb#514
  def padding_bottom=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#518
  def padding_left; end

  # source://prawn-table//lib/prawn/table/cell.rb#522
  def padding_left=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#502
  def padding_right; end

  # source://prawn-table//lib/prawn/table/cell.rb#506
  def padding_right=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#494
  def padding_top; end

  # source://prawn-table//lib/prawn/table/cell.rb#498
  def padding_top=(val); end

  # source://prawn-table//lib/prawn/table/cell.rb#447
  def relative_x; end

  # source://prawn-table//lib/prawn/table/cell.rb#465
  def relative_y(offset = T.unsafe(nil)); end

  # Number of rows this cell spans. Defaults to 1.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#150
  def rowspan; end

  # Indicates the number of rows that this cell is to span. Defaults to 1.
  #
  # This must be provided as part of the table data, like so:
  #
  #   pdf.table([["foo", {:content => "bar", :rowspan => 2}], ["baz"]])
  #
  # Setting rowspan from the initializer block is invalid because layout
  # has already run. For example, this will NOT work:
  #
  #   pdf.table([["foo", "bar"], ["baz"]]) { cells[0, 1].rowspan = 2 }
  #
  # source://prawn-table//lib/prawn/table/cell.rb#386
  def rowspan=(span); end

  # Sets the cell's minimum and maximum width. Deferred until requested
  # because padding and size can change.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#645
  def set_width_constraints; end

  # Height of the entire span group.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#341
  def spanned_content_height; end

  # Width of the entire span group.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#291
  def spanned_content_width; end

  # Supports setting multiple properties at once.
  #
  #   cell.style(:padding => 0, :border_width => 2)
  #
  # is the same as:
  #
  #   cell.padding = 0
  #   cell.border_width = 2
  #
  # source://prawn-table//lib/prawn/table/cell.rb#236
  def style(options = T.unsafe(nil), &block); end

  # Returns the cell's width in points, inclusive of padding. If the cell is
  # the master cell of a colspan, returns the width of the entire span
  # group.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#259
  def width; end

  # Manually sets the cell's width, inclusive of padding.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#275
  def width=(w); end

  # Returns the width of the cell in its first column alone, ignoring any
  # colspans.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#249
  def width_ignoring_span; end

  # x-position of the cell within the parent bounds.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#437
  def x; end

  # Set the x-position of the cell within the parent bounds.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#443
  def x=(val); end

  # y-position of the cell within the parent bounds.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#455
  def y; end

  # Set the y-position of the cell within the parent bounds.
  #
  # source://prawn-table//lib/prawn/table/cell.rb#461
  def y=(val); end

  class << self
    # Given an array of pairs [cell, pt], draws each cell at its
    # corresponding pt, making sure all backgrounds are behind all borders
    # and content.
    #
    # source://prawn-table//lib/prawn/table/cell.rb#411
    def draw_cells(cells); end

    # Instantiates a Cell based on the given options. The particular class of
    # cell returned depends on the :content argument. See the Prawn::Table
    # documentation under "Data" for allowable content types.
    #
    # source://prawn-table//lib/prawn/table/cell.rb#162
    def make(pdf, content, options = T.unsafe(nil)); end
  end
end

# A small amount added to the bounding box width to cover over floating-
# point errors when round-tripping from content_width to width and back.
# This does not change cell positioning; it only slightly expands each
# cell's bounding box width so that rounding error does not prevent a cell
# from rendering.
#
# source://prawn-table//lib/prawn/table/cell.rb#200
Prawn::Table::Cell::FPTolerance = T.let(T.unsafe(nil), Integer)

# @private
#
# source://prawn-table//lib/prawn/table/cell/image.rb#13
class Prawn::Table::Cell::Image < ::Prawn::Table::Cell
  # @return [Image] a new instance of Image
  #
  # source://prawn-table//lib/prawn/table/cell/image.rb#15
  def initialize(pdf, point, options = T.unsafe(nil)); end

  # Draw the image on the page.
  #
  # source://prawn-table//lib/prawn/table/cell/image.rb#62
  def draw_content; end

  # source://prawn-table//lib/prawn/table/cell/image.rb#32
  def fit=(f); end

  # source://prawn-table//lib/prawn/table/cell/image.rb#24
  def image=(file); end

  # source://prawn-table//lib/prawn/table/cell/image.rb#36
  def image_height=(h); end

  # source://prawn-table//lib/prawn/table/cell/image.rb#40
  def image_width=(w); end

  # source://prawn-table//lib/prawn/table/cell/image.rb#56
  def natural_content_height; end

  # source://prawn-table//lib/prawn/table/cell/image.rb#52
  def natural_content_width; end

  # source://prawn-table//lib/prawn/table/cell/image.rb#44
  def position=(p); end

  # source://prawn-table//lib/prawn/table/cell/image.rb#28
  def scale=(s); end

  # source://prawn-table//lib/prawn/table/cell/image.rb#48
  def vposition=(vp); end
end

# This module extends Cell objects when they are used in a table (as
# opposed to standalone). Its properties apply to cells-in-tables but not
# cells themselves.
#
# @private
#
# source://prawn-table//lib/prawn/table/cell/in_table.rb#19
module Prawn::Table::Cell::InTable
  # Column number (0-based).
  #
  # source://prawn-table//lib/prawn/table/cell/in_table.rb#27
  def column; end

  # Column number (0-based).
  #
  # source://prawn-table//lib/prawn/table/cell/in_table.rb#27
  def column=(_arg0); end

  # Row number (0-based).
  #
  # source://prawn-table//lib/prawn/table/cell/in_table.rb#23
  def row; end

  # Row number (0-based).
  #
  # source://prawn-table//lib/prawn/table/cell/in_table.rb#23
  def row=(_arg0); end
end

# A Cell object used to represent all but the topmost cell in a span
# group.
#
# @private
#
# source://prawn-table//lib/prawn/table/cell/span_dummy.rb#16
class Prawn::Table::Cell::SpanDummy < ::Prawn::Table::Cell
  # @return [SpanDummy] a new instance of SpanDummy
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#17
  def initialize(pdf, master_cell); end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#35
  def avg_spanned_min_width; end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#73
  def background_color; end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#61
  def border_bottom_color=(val); end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#69
  def border_bottom_width=(val); end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#57
  def border_right_color=(val); end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#65
  def border_right_width=(val); end

  # Dummy cells have nothing to draw.
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#41
  def draw_borders(pt); end

  # Dummy cells have nothing to draw.
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#46
  def draw_bounded_content(pt); end

  # By default, a span dummy will never increase the height demand.
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#25
  def natural_content_height; end

  # By default, a span dummy will never increase the width demand.
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#31
  def natural_content_width; end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#53
  def padding_bottom=(val); end

  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#49
  def padding_right=(val); end

  private

  # Are we on the bottom border of the span?
  #
  # @return [Boolean]
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#87
  def bottommost?; end

  # Are we on the right border of the span?
  #
  # @return [Boolean]
  #
  # source://prawn-table//lib/prawn/table/cell/span_dummy.rb#81
  def rightmost?; end
end

# A Cell that contains another table.
#
# @private
#
# source://prawn-table//lib/prawn/table/cell/subtable.rb#15
class Prawn::Table::Cell::Subtable < ::Prawn::Table::Cell
  # @return [Subtable] a new instance of Subtable
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#19
  def initialize(pdf, point, options = T.unsafe(nil)); end

  # Draws the subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#59
  def draw_content; end

  # Proxied to subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#47
  def max_width; end

  # Proxied to subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#41
  def min_width; end

  # Proxied to subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#53
  def natural_content_height; end

  # Proxied to subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#35
  def natural_content_width; end

  # Returns the value of attribute subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#17
  def subtable; end

  # Sets the text color of the entire subtable.
  #
  # source://prawn-table//lib/prawn/table/cell/subtable.rb#29
  def text_color=(color); end
end

# A Cell that contains text. Has some limited options to set font family,
# size, and style.
#
# @private
#
# source://prawn-table//lib/prawn/table/cell/text.rb#16
class Prawn::Table::Cell::Text < ::Prawn::Table::Cell
  # @return [Text] a new instance of Text
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#29
  def initialize(pdf, point, options = T.unsafe(nil)); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def align; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def align=(v); end

  # Draws the text content into its bounding box.
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-table/cell/text.rb#10
  def draw_content; end

  # Returns the font that will be used to draw this cell.
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#36
  def font; end

  # Sets the attribute font
  #
  # @param value the value to set the attribute font to.
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#27
  def font=(_arg0); end

  # Sets the style of the font in use. Equivalent to the Text::Box
  # +style+ option, but we already have a style method.
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#43
  def font_style=(style); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def inline_format; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def inline_format=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def kerning; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def kerning=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def leading; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def leading=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def min_font_size; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def min_font_size=(v); end

  # Returns the natural height of this block of text, wrapped to the
  # preset width.
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#57
  def natural_content_height; end

  # Returns the width of this text with no wrapping. This will be far off
  # from the final width if the text is long.
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#50
  def natural_content_width; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def overflow; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def overflow=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def rotate; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def rotate=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def rotate_around; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def rotate_around=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#78
  def set_width_constraints; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def single_line; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def single_line=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def size; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def size=(v); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def skip_encoding; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def skip_encoding=(v); end

  # Returns the width of +text+ under the given text options.
  #
  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn-table/cell/text.rb#27
  def styled_width_of(text); end

  # Sets the attribute text_color
  #
  # @param value the value to set the attribute text_color to.
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#27
  def text_color=(_arg0); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#24
  def valign; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#23
  def valign=(v); end

  protected

  # source://prawn-table//lib/prawn/table/cell/text.rb#117
  def text_box(extra_options = T.unsafe(nil)); end

  # source://prawn-table//lib/prawn/table/cell/text.rb#91
  def with_font; end

  # source://prawn-table//lib/prawn/table/cell/text.rb#103
  def with_text_color; end

  private

  # Returns the greatest possible width of any single character
  #   under the given text options.
  # (We use this to determine the minimum width of a table cell)
  # (Although we currently determine this by measuring "M", it should really
  #   use whichever character is widest under the current font)
  #
  # source://prawn-table//lib/prawn/table/cell/text.rb#148
  def styled_width_of_single_character; end
end

# source://prawn-table//lib/prawn/table/cell/text.rb#18
Prawn::Table::Cell::Text::TextOptions = T.let(T.unsafe(nil), Array)

# Represents a selection of cells to be styled. Operations on a CellProxy
# can be chained, and cell properties can be set one-for-all on the proxy.
#
# To set vertical borders only:
#
#   table.cells.borders = [:left, :right]
#
# To highlight a rectangular area of the table:
#
#   table.rows(1..3).columns(2..4).background_color = 'ff0000'
#
# source://prawn-table//lib/prawn/table/cells.rb#38
class Prawn::Table::Cells < ::Array
  # Retrieves a cell based on its 0-based row and column. Returns an
  # individual Cell, not a Cells collection.
  #
  #   table.cells[0, 0].content # => "First cell content"
  #
  # source://prawn-table//lib/prawn/table/cells.rb#109
  def [](row, col); end

  # Puts a cell in the collection at the given position. Internal use only.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#122
  def []=(row, col, cell); end

  # Limits selection to the given column or columns. +col_spec+ can be
  # anything that responds to the === operator selecting a set of 0-based
  # column numbers; most commonly a number or a range.
  #
  #   table.column(0)     # selects first column
  #   table.columns(3..4) # selects columns four and five
  #
  # source://prawn-table//lib/prawn/table/cells.rb#79
  def column(col_spec); end

  # Returns the number of columns in the list.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#90
  def column_count; end

  # Limits selection to the given column or columns. +col_spec+ can be
  # anything that responds to the === operator selecting a set of 0-based
  # column numbers; most commonly a number or a range.
  #
  #   table.column(0)     # selects first column
  #   table.columns(3..4) # selects columns four and five
  #
  # source://prawn-table//lib/prawn/table/cells.rb#79
  def columns(col_spec); end

  # Allows you to filter the given cells by arbitrary properties.
  #
  #   table.column(4).filter { |cell| cell.content =~ /Yes/ }.
  #     background_color = '00ff00'
  #
  # source://prawn-table//lib/prawn/table/cells.rb#100
  def filter(&block); end

  # @return [Boolean]
  #
  # source://prawn-table//lib/prawn/table/cells.rb#40
  def fits_on_current_page?(offset, ref_bounds); end

  # Returns the total height of all rows in the selected set.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#180
  def height; end

  # Returns the total height of all rows in the selected set
  # including spanned cells if the cell is the master cell
  #
  # source://prawn-table//lib/prawn/table/cells.rb#187
  def height_with_span; end

  # Returns maximum width that can contain cells in the set.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#174
  def max_width; end

  # Supports setting arbitrary properties on a group of cells.
  #
  #   table.cells.row(3..6).background_color = 'cc0000'
  #
  # source://prawn-table//lib/prawn/table/cells.rb#195
  def method_missing(id, *args, &block); end

  # Returns minimum width required to contain cells in the set.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#168
  def min_width; end

  # Limits selection to the given row or rows. +row_spec+ can be anything
  # that responds to the === operator selecting a set of 0-based row
  # numbers; most commonly a number or a range.
  #
  #   table.row(0)     # selects first row
  #   table.rows(3..4) # selects rows four and five
  #
  # source://prawn-table//lib/prawn/table/cells.rb#56
  def row(row_spec); end

  # Returns the number of rows in the list.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#67
  def row_count; end

  # Limits selection to the given row or rows. +row_spec+ can be anything
  # that responds to the === operator selecting a set of 0-based row
  # numbers; most commonly a number or a range.
  #
  #   table.row(0)     # selects first row
  #   table.rows(3..4) # selects rows four and five
  #
  # source://prawn-table//lib/prawn/table/cells.rb#56
  def rows(row_spec); end

  # Supports setting multiple properties at once.
  #
  #   table.cells.style(:padding => 0, :border_width => 2)
  #
  # is the same as:
  #
  #   table.cells.padding = 0
  #   table.cells.border_width = 2
  #
  # You can also pass a block, which will be called for each cell in turn.
  # This allows you to set more complicated properties:
  #
  #   table.cells.style { |cell| cell.border_width += 12 }
  #
  # source://prawn-table//lib/prawn/table/cells.rb#153
  def style(options = T.unsafe(nil), &block); end

  # Returns the total width of all columns in the selected set.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#162
  def width; end

  protected

  # Sum up a min/max value over rows or columns in the cells selected.
  # Takes the min/max (per +aggregate+) of the result of sending +meth+ to
  # each cell, grouped by +row_or_column+.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#236
  def aggregate_cell_values(row_or_column, meth, aggregate); end

  # Defers indexing until rows() or columns() is actually called on the
  # Cells object. Without this, we would needlessly index the leaf nodes of
  # the object graph, the ones that are only there to be iterated over.
  #
  # Make sure to call this before using @rows or @columns.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#211
  def index_cells; end

  # Transforms +spec+, a column / row specification, into an object that
  # can be compared against a row or column number using ===. Normalizes
  # negative indices to be positive, given a total size of +total+. The
  # first row/column is indicated by +first+; this value is considered row
  # or column 0.
  #
  # source://prawn-table//lib/prawn/table/cells.rb#246
  def transform_spec(spec, first, total); end
end

# @private
#
# source://prawn-table//lib/prawn/table/column_width_calculator.rb#6
class Prawn::Table::ColumnWidthCalculator
  # @return [ColumnWidthCalculator] a new instance of ColumnWidthCalculator
  #
  # source://prawn-table//lib/prawn/table/column_width_calculator.rb#7
  def initialize(cells); end

  # get column widths (either min or max depending on meth)
  # used in cells.rb
  #
  # @param row_or_column - you may call this on either rows or columns
  # @param meth - min/max
  # @param aggregate - functions from cell.rb to be used to aggregate e.g. avg_spanned_min_width
  #
  # source://prawn-table//lib/prawn/table/column_width_calculator.rb#123
  def aggregate_cell_values(row_or_column, meth, aggregate); end

  # helper method
  # column widths are stored in the values array
  # a cell may span cells whose value is only partly given
  # this function handles this special case
  #
  # @param values - The columns widths calculated up until now
  # @param cell - The current cell
  # @param index - The current column
  # @param meth - Meth (min/max); used to calculate values to be filled
  #
  # source://prawn-table//lib/prawn/table/column_width_calculator.rb#37
  def fill_values_if_needed(values, cell, index, meth); end

  # does this row include a Cell:SpanDummy?
  #
  # @param row - the row that should be checked for Cell:SpanDummy elements
  # @return [Boolean]
  #
  # source://prawn-table//lib/prawn/table/column_width_calculator.rb#23
  def has_a_span_dummy?(row); end

  # source://prawn-table//lib/prawn/table/column_width_calculator.rb#72
  def natural_widths; end
end

# source://prawn-table//lib/prawn/table.rb#102
module Prawn::Table::Interface
  # Set up, but do not draw, a table. Useful for creating subtables to be
  # inserted into another Table. Call +draw+ on the resulting Table to ink it.
  #
  # See the documentation on Prawn::Table for details on the arguments.
  #
  # source://prawn-table//lib/prawn/table.rb#121
  def make_table(data, options = T.unsafe(nil), &block); end

  # Set up and draw a table on this document. A block can be given, which will
  # be run after cell setup but before layout and drawing.
  #
  # See the documentation on Prawn::Table for details on the arguments.
  #
  # source://prawn-table//lib/prawn/table.rb#110
  def table(data, options = T.unsafe(nil), &block); end
end
