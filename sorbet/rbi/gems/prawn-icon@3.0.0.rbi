# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prawn-icon` gem.
# Please instead update this file by running `bin/tapioca gem prawn-icon`.


# source://prawn-icon//lib/prawn/icon/version.rb#9
module Prawn
  private

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug; end

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug=(_arg0); end

  # source://prawn/2.4.0/lib/prawn.rb#41
  def verify_options(accepted, actual); end

  class << self
    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug; end

    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug=(_arg0); end

    # source://prawn/2.4.0/lib/prawn/image_handler.rb#12
    def image_handler; end

    # source://prawn/2.4.0/lib/prawn.rb#41
    def verify_options(accepted, actual); end
  end
end

# Easy icon font usage within Prawn. Currently
# supported icon fonts include: FontAwesome,
# Zurb Foundicons and PaymentFont.
#
# = Icon Keys
#
# Icon keys must be supplied to most +Prawn::Icon+
# methods. Keys map directly to a unicode character
# within the font that produces a given icon. As a
# rule, included icon keys should match the keys from
# the font provider. The icon key mapping is specified
# in the font's +legend_file+, which is a +YAML+ file
# located in {Prawn::Icon.configuration.font_directory}/font/font.yml.
#
# Prawn::Icon::
#   Houses the methods and interfaces necessary for
#   rendering icons to the Prawn::Document.
#
# Prawn::Icon::FontData::
#   Used to store various information about an icon font,
#   including the key-to-unicode mapping information.
#   Also houses methods to cache and lazily load the
#   requested font data on a document basis.
#
# Prawn::Icon::Parser::
#   Used to initially parse icons that are used with the
#   inline_format: true option. The input string is parsed
#   once for <icon></icon> tags, then the output is provided
#   to Prawn's internal formatted text parser.
#
# source://prawn-icon//lib/prawn/icon/version.rb#10
class Prawn::Icon
  # @return [Icon] a new instance of Icon
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#211
  def initialize(key, document, opts = T.unsafe(nil)); end

  # source://prawn-icon//lib/prawn/icon/interface.rb#220
  def format_hash; end

  # source://prawn-icon//lib/prawn/icon/interface.rb#228
  def render; end

  # Returns the value of attribute set.
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#209
  def set; end

  # Returns the value of attribute unicode.
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#209
  def unicode; end

  private

  # source://prawn-icon//lib/prawn/icon/interface.rb#236
  def strip_specifier_from_key(key); end

  class << self
    # source://prawn-icon//lib/prawn/icon/base.rb#17
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://prawn-icon//lib/prawn/icon/base.rb#15
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://prawn-icon//lib/prawn/icon/base.rb#21
    def configure; end
  end
end

# source://prawn-icon//lib/prawn/icon/base.rb#26
module Prawn::Icon::Base; end

# @deprecated Use {Prawn::Icon.configuration.font_directory} instead
#
# source://prawn-icon//lib/prawn/icon/base.rb#28
Prawn::Icon::Base::FONTDIR = T.let(T.unsafe(nil), String)

# source://prawn-icon//lib/prawn/icon/compatibility.rb#11
class Prawn::Icon::Compatibility
  # @return [Compatibility] a new instance of Compatibility
  #
  # source://prawn-icon//lib/prawn/icon/compatibility.rb#30
  def initialize(opts = T.unsafe(nil)); end

  # Returns the value of attribute key.
  #
  # source://prawn-icon//lib/prawn/icon/compatibility.rb#28
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://prawn-icon//lib/prawn/icon/compatibility.rb#28
  def key=(_arg0); end

  # source://prawn-icon//lib/prawn/icon/compatibility.rb#34
  def translate(io = T.unsafe(nil)); end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/prawn/extensions.rb#7
  def warning(*_args); end

  private

  # source://prawn-icon//lib/prawn/icon/compatibility.rb#46
  def map; end

  class << self
    # source://prawn-icon//lib/prawn/icon/compatibility.rb#21
    def shims; end
  end
end

# @deprecated Use {Prawn::Icon::Compatibility.shims} instead
#
# source://prawn-icon//lib/prawn/icon/compatibility.rb#13
Prawn::Icon::Compatibility::SHIMS = T.let(T.unsafe(nil), Hash)

# source://prawn-icon//lib/prawn/icon/configuration.rb#11
class Prawn::Icon::Configuration
  # source://prawn-icon//lib/prawn/icon/configuration.rb#16
  def font_directory; end

  # source://prawn-icon//lib/prawn/icon/configuration.rb#12
  def font_directory=(path); end

  private

  # source://prawn-icon//lib/prawn/icon/configuration.rb#22
  def default_font_directory; end

  # source://prawn-icon//lib/prawn/icon/configuration.rb#34
  def failsafe_gem_path; end

  # :nocov:
  #
  # source://prawn-icon//lib/prawn/icon/configuration.rb#27
  def gem_path; end
end

# source://prawn-icon//lib/prawn/icon/errors.rb#11
module Prawn::Icon::Errors; end

# Error raised when an icon key is not provided
#
# source://prawn-icon//lib/prawn/icon/errors.rb#18
class Prawn::Icon::Errors::IconKeyEmpty < ::StandardError; end

# Error raised when an icon glyph is not found
#
# source://prawn-icon//lib/prawn/icon/errors.rb#14
class Prawn::Icon::Errors::IconNotFound < ::StandardError; end

# @deprecated Use {Prawn::Icon.configuration.font_directory} instead
#
# source://prawn-icon//lib/prawn/icon/interface.rb#42
Prawn::Icon::FONTDIR = T.let(T.unsafe(nil), String)

# source://prawn-icon//lib/prawn/icon/font_data.rb#13
class Prawn::Icon::FontData
  # @return [FontData] a new instance of FontData
  #
  # source://prawn-icon//lib/prawn/icon/font_data.rb#47
  def initialize(document, opts = T.unsafe(nil)); end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#52
  def font_version; end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#92
  def keys; end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#56
  def legend_path; end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#60
  def load_fonts(document); end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#65
  def path; end

  # Returns the value of attribute set.
  #
  # source://prawn-icon//lib/prawn/icon/font_data.rb#45
  def set; end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#79
  def specifier; end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#83
  def unicode(key); end

  # source://prawn-icon//lib/prawn/icon/font_data.rb#97
  def yaml; end

  class << self
    # Font data lazy-loader that will initialize
    # icon fonts by document.
    #
    # source://prawn-icon//lib/prawn/icon/font_data.rb#17
    def load(document, set); end

    # Release all font references if requested.
    #
    # source://prawn-icon//lib/prawn/icon/font_data.rb#25
    def release_data; end

    # source://prawn-icon//lib/prawn/icon/font_data.rb#35
    def specifier_from_key(key); end

    # source://prawn-icon//lib/prawn/icon/font_data.rb#29
    def unicode_from_key(document, key); end
  end
end

# source://prawn-icon//lib/prawn/icon/interface.rb#44
module Prawn::Icon::Interface
  # Initialize a formatted icon box from an icon-conatining
  # string. Content is not directly rendered to the document,
  # instead a +Prawn::Text::Formatted::Box+ instance is returned
  # that responds to the +render+ method.
  #
  # == Parameters:
  # text::
  #   Input text to be parsed initially for <icon>
  #   tags, then passed to Prawn's formatted text
  #   parser.
  #
  # opts::
  #   A hash of options that may be supplied to the
  #   underlying text call.
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#128
  def formatted_icon_box(text, opts = T.unsafe(nil)); end

  # Set up and draw an icon on this document. This
  # method operates much like +Prawn::Text::Box+.
  #
  # == Parameters:
  # key::
  #   Contains the key to a particular icon within
  #   a font family. If :inline_format is true,
  #   then key may contain formatted text marked
  #   with <icon></icon> tags and any tag supported
  #   by Prawn's parser.
  #
  # opts::
  #   A hash of options that may be supplied to
  #   the underlying +text+ method call.
  #
  # == Examples:
  #   pdf.icon 'fas-beer'
  #   pdf.icon '<icon color="0099FF">fas-user-circle</icon>',
  #   inline_format: true
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#65
  def icon(key, opts = T.unsafe(nil)); end

  # Render formatted icon content to the document from
  # a string containing icons. Content will correctly
  # transition to a new page when necessary.
  #
  # == Parameters:
  # text::
  #   Input text to be parsed initially for <icon>
  #   tags, then passed to Prawn's formatted text
  #   parser.
  #
  # opts::
  #   A hash of options that may be supplied to the
  #   underlying text call.
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#107
  def inline_icon(text, opts = T.unsafe(nil)); end

  # Initialize a new icon object.
  #
  # == Parameters:
  # key::
  #   Contains the key to a particular icon within
  #   a font family. If :inline_format is true,
  #   then key may contain formatted text marked
  #   with <icon></icon> tags and any tag supported
  #   by Prawn's parser.
  #
  # opts::
  #   A hash of options that may be supplied to
  #   the underlying text method call.
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#84
  def make_icon(key, opts = T.unsafe(nil)); end

  # Initialize a new Prawn::Icon, but don't render
  # the icon to a document. Intended to be used as
  # an entry of a data array when combined with
  # Prawn::Table.
  #
  # == Parameters:
  # key::
  #   Contains the key to a particular icon within
  #   a font family. The key may contain a string
  #   with format tags if +inline_format: true+ in
  #   the +opts+ hash.
  #
  # opts::
  #   A hash of options that may be supplied to the
  #   underlying text call.
  #
  # == Returns:
  #   A Hash containing +font+ and +content+ keys
  #   that match the data necessary for the
  #   specified icon.
  #
  #   eg. { font: 'fas', content: "\uf2b9" }
  #
  #   Note that the +font+ key will not be set
  #   if +inline_format: true+.
  #
  # == Examples:
  #   require 'prawn/table'
  #
  #   data = [
  #     # Explicit brackets must be used here
  #     [pdf.table_icon('fas-coffee'), 'Cell 1'],
  #     ['Cell 2', 'Cell 3']
  #   ]
  #
  #   pdf.table(data) => (2 x 2 table)
  #
  # source://prawn-icon//lib/prawn/icon/interface.rb#182
  def table_icon(key, opts = T.unsafe(nil)); end

  private

  # source://prawn-icon//lib/prawn/icon/interface.rb#198
  def icon_box(content, opts = T.unsafe(nil)); end

  # source://prawn-icon//lib/prawn/icon/interface.rb#194
  def translate_key(key); end
end

# Provides the necessary methods to enable the parsing
# of <icon> tags from input text.
#
# = Supported Tags:
# <icon></icon>::
#   Place an icon key between the tags and the output
#   will be translated into: <font name="fa">unicode</font>.
#
# = Supported Attributes:
#
# Various attributes will be extracted from +<icon>+ tags:
#
# color::
#   The hex representation of a color that the icon should
#   be rendered as. If left nil, the document's fill color
#   will be used.
#
# size::
#   The font size of a particular icon. If left nil, the
#   document's font size will be used.
#
# source://prawn-icon//lib/prawn/icon/parser.rb#32
class Prawn::Icon::Parser
  class << self
    # source://prawn-icon//lib/prawn/icon/parser.rb#55
    def config_from_tokens(tokens); end

    # source://prawn-icon//lib/prawn/icon/parser.rb#45
    def format(document, string); end

    # source://prawn-icon//lib/prawn/icon/parser.rb#72
    def icon_tags(icons); end

    # source://prawn-icon//lib/prawn/icon/parser.rb#99
    def keys_to_unicode(document, content, config); end

    private

    # source://prawn-icon//lib/prawn/icon/parser.rb#118
    def attr_hash(value); end
  end
end

# source://prawn-icon//lib/prawn/icon/parser.rb#42
Prawn::Icon::Parser::ATTR_REGEX = T.let(T.unsafe(nil), Regexp)

# source://prawn-icon//lib/prawn/icon/parser.rb#38
Prawn::Icon::Parser::CONTENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://prawn-icon//lib/prawn/icon/parser.rb#33
Prawn::Icon::Parser::PARSER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://prawn-icon//lib/prawn/icon/parser.rb#40
Prawn::Icon::Parser::TAG_REGEX = T.let(T.unsafe(nil), Regexp)

# source://prawn-icon//lib/prawn/icon/version.rb#11
Prawn::Icon::VERSION = T.let(T.unsafe(nil), String)
