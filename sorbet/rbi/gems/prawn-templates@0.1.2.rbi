# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prawn-templates` gem.
# Please instead update this file by running `bin/tapioca gem prawn-templates`.


# source://prawn-templates//lib/pdf/core/document_state.rb#1
module PDF; end

# source://prawn-templates//lib/pdf/core/document_state.rb#2
module PDF::Core
  private

  # source://prawn/2.4.0/lib/prawn/security.rb#221
  def encrypted_pdf_object(obj, key, id, gen, in_content_stream = T.unsafe(nil)); end

  # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#51
  def pdf_object(obj, in_content_stream = T.unsafe(nil)); end

  # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#15
  def real(num); end

  # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#19
  def real_params(array); end

  # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#31
  def string_to_hex(str); end

  # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#23
  def utf8_to_utf16(str); end

  class << self
    # source://prawn/2.4.0/lib/prawn/security.rb#221
    def encrypted_pdf_object(obj, key, id, gen, in_content_stream = T.unsafe(nil)); end

    # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#51
    def pdf_object(obj, in_content_stream = T.unsafe(nil)); end

    # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#15
    def real(num); end

    # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#19
    def real_params(array); end

    # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#31
    def string_to_hex(str); end

    # source://pdf-core/0.9.0/lib/pdf/core/pdf_object.rb#23
    def utf8_to_utf16(str); end
  end
end

# source://prawn-templates//lib/pdf/core/document_state.rb#3
class PDF::Core::DocumentState
  # @return [DocumentState] a new instance of DocumentState
  #
  # source://prawn-templates//lib/pdf/core/document_state.rb#5
  def initialize(options); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#63
  def before_render_actions(_doc); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#32
  def before_render_callbacks; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#32
  def before_render_callbacks=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def compress; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def compress=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def encrypt; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def encrypt=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def encryption_key; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def encryption_key=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#53
  def insert_page(page, page_number); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#45
  def normalize_metadata(options); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#59
  def on_page_create_action(doc); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#32
  def on_page_create_callback; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#32
  def on_page_create_callback=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def page; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def page=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#67
  def page_count; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def pages; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def pages=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#34
  def populate_pages_from_store(document); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#71
  def render_body(output); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def skip_encoding; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def skip_encoding=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def store; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def store=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def trailer; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def trailer=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def version; end

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#31
  def version=(_arg0); end

  private

  # source://pdf-core/0.9.0/lib/pdf/core/document_state.rb#6
  def __initialize(options); end
end

# source://prawn-templates//lib/pdf/core/errors.rb#3
module PDF::Core::Errors; end

# This error is raised when object store fails to load a template file
#
# source://prawn-templates//lib/pdf/core/errors.rb#5
class PDF::Core::Errors::TemplateError < ::StandardError; end

# source://prawn-templates//lib/pdf/core/object_store.rb#3
class PDF::Core::ObjectStore
  include ::Prawn::Templates::ObjectStoreExtensions

  # @return [ObjectStore] a new instance of ObjectStore
  #
  # source://prawn-templates//lib/pdf/core/object_store.rb#5
  def initialize(opts = T.unsafe(nil)); end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#54
  def <<(*args, &block); end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#75
  def [](id); end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#69
  def each; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#34
  def info; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#79
  def length; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#14
  def min_version; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#94
  def object_id_for_page(page); end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#46
  def page_count; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#42
  def pages; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#54
  def push(*args, &block); end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#30
  def ref(data, &block); end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#38
  def root; end

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#79
  def size; end

  # @return [Boolean]
  #
  # source://prawn-templates//lib/pdf/core/object_store.rb#22
  def utf8?(str); end

  private

  # source://pdf-core/0.9.0/lib/pdf/core/object_store.rb#16
  def __initialize(opts = T.unsafe(nil)); end
end

# source://prawn-templates//lib/pdf/core/page.rb#3
class PDF::Core::Page
  # @return [Page] a new instance of Page
  #
  # source://prawn-templates//lib/pdf/core/page.rb#5
  def initialize(document, options = T.unsafe(nil)); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#151
  def __dimensions; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#165
  def art_box; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def art_indents; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def art_indents=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#175
  def bleed_box; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def bleeds; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def bleeds=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#100
  def content; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#16
  def content=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#185
  def crop_box; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def crops; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def crops=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#104
  def dictionary; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#16
  def dictionary=(_arg0); end

  # source://prawn-templates//lib/pdf/core/page.rb#63
  def dimensions; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def document; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def document=(_arg0); end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/pdf-core/page.rb#13
  def empty?; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#133
  def ext_gstates; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#141
  def finalize; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#117
  def fonts; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#60
  def graphic_state; end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/pdf-core/page.rb#19
  def imported; end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/pdf-core/page.rb#19
  def imported_page; end

  # @return [Boolean]
  #
  # source://prawn-templates//lib/pdf/core/page.rb#57
  def imported_page?; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#79
  def in_stamp_stream?; end

  # source://prawn-templates//lib/pdf/core/page.rb#86
  def init_from_object(options); end

  # source://prawn-templates//lib/pdf/core/page.rb#102
  def init_new_page(options); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#64
  def layout; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def margins; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def margins=(_arg0); end

  # As per the PDF spec, each page can have multiple content streams. This
  # will add a fresh, empty content stream this the page, mainly for use in
  # loading template files.
  #
  # source://prawn-templates//lib/pdf/core/page.rb#47
  def new_content_stream; end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/pdf-core/page.rb#27
  def reset_content; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#109
  def resources; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#75
  def size; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def stack; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def stack=(_arg0); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#83
  def stamp_stream(dictionary); end

  # source://asciidoctor-pdf/2.3.19/lib/asciidoctor/pdf/ext/pdf-core/page.rb#7
  def tare_content_stream; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#195
  def trim_box; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def trims; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#15
  def trims=(_arg0); end

  # Prepend a content stream containing 'q',
  # and append a content stream containing 'Q'.
  # This ensures that prawn has a pristine graphics state
  # before it starts adding content.
  #
  # source://prawn-templates//lib/pdf/core/page.rb#29
  def wrap_graphics_state; end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#125
  def xobjects; end

  private

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#25
  def __initialize(document, options = T.unsafe(nil)); end

  # source://pdf-core/0.9.0/lib/pdf/core/page.rb#215
  def inherited_dictionary_value(key, local_dict = T.unsafe(nil)); end
end

# source://prawn-templates//lib/prawn/text.rb#1
module Prawn
  private

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug; end

  # source://prawn/2.4.0/lib/prawn.rb#34
  def debug=(_arg0); end

  # source://prawn/2.4.0/lib/prawn.rb#41
  def verify_options(accepted, actual); end

  class << self
    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug; end

    # source://prawn/2.4.0/lib/prawn.rb#34
    def debug=(_arg0); end

    # source://prawn/2.4.0/lib/prawn/image_handler.rb#12
    def image_handler; end

    # source://prawn/2.4.0/lib/prawn.rb#41
    def verify_options(accepted, actual); end
  end
end

# source://prawn-templates//lib/prawn/document/internals.rb#2
class Prawn::Document
  include ::PDF::Core::Text
  include ::Prawn::Text::Formatted
  include ::Prawn::Graphics::BlendMode
  include ::Prawn::Graphics::Color
  include ::Prawn::Graphics::Dash
  include ::Prawn::Graphics::CapStyle
  include ::Prawn::Graphics::JoinStyle
  include ::Prawn::Graphics::Transparency
  include ::Prawn::Graphics::Transformation
  include ::Prawn::Graphics::Patterns

  # source://prawn/2.4.0/lib/prawn/document.rb#204
  def initialize(options = T.unsafe(nil), &block); end

  # source://prawn/2.4.0/lib/prawn/document/bounding_box.rb#158
  def bounding_box(point, *args, &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#440
  def bounds; end

  # source://prawn/2.4.0/lib/prawn/document.rb#456
  def bounds=(bounding_box); end

  # source://prawn/2.4.0/lib/prawn/document/bounding_box.rb#172
  def canvas(&block); end

  # source://prawn-table/0.2.2/lib/prawn/table/cell.rb#21
  def cell(options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document/column_box.rb#30
  def column_box(*args, &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#361
  def cursor; end

  # source://prawn/2.4.0/lib/prawn/grid.rb#22
  def define_grid(options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#319
  def delete_page(index); end

  # source://prawn/2.4.0/lib/prawn/font.rb#237
  def find_font(name, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#384
  def float; end

  # source://prawn/2.4.0/lib/prawn/font.rb#48
  def font(name = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#171
  def font_families; end

  # source://prawn/2.4.0/lib/prawn/font.rb#258
  def font_registry; end

  # source://prawn/2.4.0/lib/prawn/font.rb#95
  def font_size(points = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#105
  def font_size=(size); end

  # source://prawn/2.4.0/lib/prawn/document.rb#346
  def go_to_page(page_number); end

  # source://prawn/2.4.0/lib/prawn/grid.rb#34
  def grid(*args); end

  # source://prawn/2.4.0/lib/prawn/document.rb#625
  def group(*_arguments); end

  # source://prawn/2.4.0/lib/prawn/document.rb#527
  def indent(left, right = T.unsafe(nil), &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#681
  def initialize_first_page(options); end

  # source://prawn-table/0.2.2/lib/prawn/table/cell.rb#33
  def make_cell(content, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#107
  def margin_box; end

  # source://prawn/2.4.0/lib/prawn/document.rb#107
  def margin_box=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#108
  def margins; end

  # source://prawn/2.4.0/lib/prawn/document.rb#669
  def mask(*fields); end

  # source://prawn/2.4.0/lib/prawn/document.rb#367
  def move_cursor_to(new_y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#470
  def move_down(amount); end

  # source://prawn/2.4.0/lib/prawn/document.rb#463
  def move_up(amount); end

  # source://prawn/2.4.0/lib/prawn/document.rb#570
  def number_pages(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/outline.rb#10
  def outline; end

  # source://prawn/2.4.0/lib/prawn/document.rb#509
  def pad(y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#495
  def pad_bottom(y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#482
  def pad_top(y); end

  # source://prawn/2.4.0/lib/prawn/document.rb#695
  def page; end

  # source://prawn/2.4.0/lib/prawn/document.rb#337
  def page_count; end

  # source://prawn/2.4.0/lib/prawn/document.rb#652
  def page_match?(page_filter, page_number); end

  # source://prawn/2.4.0/lib/prawn/document.rb#109
  def page_number; end

  # source://prawn/2.4.0/lib/prawn/document.rb#109
  def page_number=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#447
  def reference_bounds; end

  # source://prawn/2.4.0/lib/prawn/document.rb#395
  def render(*arguments, &block); end

  # source://prawn/2.4.0/lib/prawn/document.rb#408
  def render_file(filename); end

  # source://prawn/2.4.0/lib/prawn/repeater.rb#78
  def repeat(page_filter, options = T.unsafe(nil), &block); end

  # source://prawn/2.4.0/lib/prawn/repeater.rb#17
  def repeaters; end

  # source://prawn/2.4.0/lib/prawn/font.rb#209
  def save_font; end

  # source://prawn/2.4.0/lib/prawn/font.rb#201
  def set_font(font, size = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document/span.rb#29
  def span(width, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#255
  def start_new_page(options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#692
  def state; end

  # source://prawn/2.4.0/lib/prawn/document.rb#692
  def state=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#113
  def text_formatter; end

  # source://prawn/2.4.0/lib/prawn/document.rb#113
  def text_formatter=(_arg0); end

  # source://prawn/2.4.0/lib/prawn/document.rb#634
  def transaction; end

  # source://prawn/2.4.0/lib/prawn/font.rb#129
  def width_of(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document.rb#108
  def y; end

  # source://prawn/2.4.0/lib/prawn/document.rb#353
  def y=(new_y); end

  private

  # source://prawn/2.4.0/lib/prawn/document.rb#737
  def apply_margin_options(options); end

  # source://prawn/2.4.0/lib/prawn/document.rb#756
  def font_metric_cache; end

  # source://prawn/2.4.0/lib/prawn/document.rb#712
  def generate_margin_box; end

  # source://prawn/2.4.0/lib/prawn/document/bounding_box.rb#187
  def init_bounding_box(user_block, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/document/column_box.rb#39
  def init_column_box(user_block, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/grid.rb#318
  def multi_box(box1, box2); end

  # source://prawn/2.4.0/lib/prawn/grid.rb#314
  def single_box(rows, columns); end

  # source://prawn/2.4.0/lib/prawn/document.rb#703
  def use_graphic_settings(override_settings = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#264
  def width_of_inline_formatted_string(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/font.rb#274
  def width_of_string(string, options = T.unsafe(nil)); end

  class << self
    # source://prawn/2.4.0/lib/prawn/document.rb#95
    def extensions; end

    # source://prawn/2.4.0/lib/prawn/document.rb#144
    def generate(filename, options = T.unsafe(nil), &block); end

    # source://prawn/2.4.0/lib/prawn/document.rb#100
    def inherited(base); end
  end
end

# source://prawn-templates//lib/prawn/document/internals.rb#3
module Prawn::Document::Internals
  # source://forwardable/1.3.3/forwardable.rb#231
  def add_content(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def compression_enabled?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def deref(*args, **_arg1, &block); end

  # wraps existing content streams with two new streams
  # containing just 'q' and 'Q'. This ensures that prawn
  # has a pristine graphics context before it starts adding content.
  #
  # adds a new, empty content stream to each page. Used in templating so
  # that imported content streams can be left pristine
  #
  # source://prawn-templates//lib/prawn/document/internals.rb#13
  def fresh_content_streams(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def graphic_state(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def names(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def on_page_create(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def open_graphics_state(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ref(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ref!(*args, **_arg1, &block); end

  # source://prawn/2.4.0/lib/prawn/document/internals.rb#62
  def renderer; end

  # source://prawn/2.4.0/lib/prawn/document/internals.rb#36
  def restore_graphics_state; end

  # source://prawn/2.4.0/lib/prawn/document/internals.rb#31
  def save_graphics_state(state = T.unsafe(nil), &block); end
end

# source://prawn-templates//lib/prawn/templates.rb#275
Prawn::Document::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# @private
#
# source://prawn-templates//lib/prawn/templates.rb#15
module Prawn::Templates
  # source://prawn-templates//lib/prawn/templates.rb#16
  def initialize_first_page(options); end

  # source://prawn-templates//lib/prawn/templates.rb#87
  def merge_template_options(page_options, options); end

  # FIXME: This is going to be terribly brittle because
  # it copy-pastes the start_new_page method. But at least
  # it should only run when templates are used.
  #
  # source://prawn-templates//lib/prawn/templates.rb#26
  def start_new_page(options = T.unsafe(nil)); end
end

# source://prawn-templates//lib/prawn/templates.rb#95
module Prawn::Templates::ObjectStoreExtensions
  # imports all objects required to render a page from another PDF. The
  # objects are added to the current object store, but NOT linked
  # anywhere.
  #
  # The object ID of the root Page object is returned, it's up to the
  # calling code to link that into the document structure somewhere. If
  # this isn't done the imported objects will just be removed when the
  # store is compacted.
  #
  # Imports nothing and returns nil if the requested page number doesn't
  # exist. page_num is 1 indexed, so 1 indicates the first page.
  #
  # source://prawn-templates//lib/prawn/templates.rb#108
  def import_page(input, page_num); end

  private

  # returns a nested array of object IDs for all pages in this object store.
  #
  # source://prawn-templates//lib/prawn/templates.rb#187
  def get_page_objects(obj); end

  # An index for the read object hash of a pdf template so that the
  # object hash does not need to be parsed multiple times when using
  # different pages of the pdf as page templates
  #
  # source://prawn-templates//lib/prawn/templates.rb#166
  def hash_index; end

  # indexes the identifier for a page from a template
  #
  # source://prawn-templates//lib/prawn/templates.rb#159
  def index_template(input, page_number, id); end

  # reads and indexes a new IO for a template
  # if the IO has been indexed already then the parsed object hash
  # is returned directly
  #
  # source://prawn-templates//lib/prawn/templates.rb#173
  def indexed_hash(input, io); end

  # returns the indexed object graph identifier for a template page if
  # it exists
  #
  # source://prawn-templates//lib/prawn/templates.rb#153
  def indexed_template(input, page_number); end

  # the index key for the input.
  # uses object_id so that both a string filename or an IO stream can be
  # indexed and reused provided the same object gets used in multiple page
  # template calls.
  #
  # source://prawn-templates//lib/prawn/templates.rb#181
  def indexing_key(input); end

  # takes a source PDF and uses it as a template for this document.
  #
  # source://prawn-templates//lib/prawn/templates.rb#197
  def load_file(template); end

  # recurse down an object graph from a source PDF, importing all the
  # indirect objects we find.
  #
  # hash is the PDF::Reader::ObjectHash to extract objects from, object is
  # the object to extract.
  #
  # source://prawn-templates//lib/prawn/templates.rb#237
  def load_object_graph(hash, object); end

  # An index for page templates so that their loaded object graph
  # can be reused without multiple loading
  #
  # source://prawn-templates//lib/prawn/templates.rb#147
  def template_index; end
end

# source://prawn-templates//lib/prawn/text.rb#2
module Prawn::Text
  # source://prawn/2.4.0/lib/prawn/text.rb#276
  def draw_text(text, options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#291
  def draw_text!(text, options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#190
  def formatted_text(array, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/text.rb#322
  def height_of(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/text.rb#336
  def height_of_formatted(array, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/text.rb#152
  def text(string, options = T.unsafe(nil)); end

  # source://prawn/2.4.0/lib/prawn/text/box.rb#106
  def text_box(string, options = T.unsafe(nil)); end

  # source://prawn-templates//lib/prawn/text.rb#3
  def text_rendering_mode(mode = T.unsafe(nil)); end

  private

  # source://prawn/2.4.0/lib/prawn/text.rb#364
  def draw_indented_formatted_line(string, options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#355
  def draw_remaining_formatted_text_on_new_pages(remaining_text, options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#377
  def fill_formatted_text_box(text, options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#406
  def inspect_options_for_draw_text(options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#421
  def inspect_options_for_text(options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#390
  def merge_text_box_positioning_options(options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#443
  def move_text_position(amount); end

  # source://prawn/2.4.0/lib/prawn/text.rb#433
  def process_final_gap_option(options); end

  # source://prawn/2.4.0/lib/prawn/text.rb#438
  def process_indent_paragraphs_option(options); end
end
