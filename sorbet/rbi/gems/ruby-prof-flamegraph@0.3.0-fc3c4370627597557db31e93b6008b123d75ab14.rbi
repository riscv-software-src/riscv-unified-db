# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-prof-flamegraph` gem.
# Please instead update this file by running `bin/tapioca gem ruby-prof-flamegraph`.


# source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#4
module RubyProf
  class << self
    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#32
    def _deprecated_exclude_threads; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#37
    def _deprecated_exclude_threads=(value); end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#14
    def _deprecated_measure_mode; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#27
    def _deprecated_measure_mode=(value); end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#49
    def _deprecated_pause; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#78
    def _deprecated_profile(options = T.unsafe(nil), &block); end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#64
    def _deprecated_resume; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#55
    def _deprecated_running?; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#42
    def _deprecated_start; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#70
    def _deprecated_stop; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#96
    def ensure_not_running!; end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#92
    def ensure_running!; end

    def exclude_threads(*args, **_arg1, &block); end
    def exclude_threads=(*args, **_arg1, &block); end

    # source://ruby-prof/1.7.1/lib/ruby-prof.rb#36
    def figure_measure_mode; end

    def measure_mode(*args, **_arg1, &block); end
    def measure_mode=(*args, **_arg1, &block); end
    def pause(*args, **_arg1, &block); end
    def profile(*args, **_arg1, &block); end
    def resume(*args, **_arg1, &block); end
    def running?(*args, **_arg1, &block); end
    def start(*args, **_arg1, &block); end

    # source://ruby-prof/1.7.1/lib/ruby-prof/compatibility.rb#85
    def start_script(script); end

    def stop(*args, **_arg1, &block); end
  end
end

class RubyProf::Allocation
  def _dump_data; end
  def _load_data(_arg0); end
  def count; end
  def klass_flags; end
  def klass_name; end
  def line; end
  def memory; end
  def source_file; end
end

class RubyProf::CallTrees
  def _dump_data; end
  def _load_data(_arg0); end
  def call_trees; end
  def callees; end
  def callers; end
  def min_depth; end
end

# wow much flame graph many stack wow!!
#
# source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#8
class RubyProf::FlameGraphPrinter < ::RubyProf::AbstractPrinter
  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#22
  def min_time; end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#40
  def name(call_info); end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#45
  def number(x); end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#10
  def print(output = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-prof-flamegraph//lib/ruby-prof/printers/flame_graph_printer.rb#26
  def print_stack(output, call_tree, overall_time, prefix); end
end

module RubyProf::Measure; end
class RubyProf::Measure::Allocations; end
class RubyProf::Measure::ProcessTime; end
class RubyProf::Measure::WallTime; end
