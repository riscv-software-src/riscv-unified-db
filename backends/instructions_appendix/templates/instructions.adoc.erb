<%
# Helper to substitute problematic entity strings with proper Unicode characters.
def fix_entities(text)
  text.to_s.gsub("&ne;", "≠")
           .gsub("&pm;", "±")
           .gsub("-&infin;", "−∞")
           .gsub("+&infin;", "+∞")
end

# Custom JSON converter for wavedrom that handles hexadecimal literals
def json_dump_with_hex_literals(data)
  # First convert to standard JSON
  json_string = JSON.dump(data)

  # Replace string hex values with actual hex literals
  json_string.gsub(/"0x([0-9a-fA-F]+)"/) do |match|
    # Remove the quotes, leaving just the hex literal
    "0x#{$1}"
  end.gsub(/"name":/, '"name": ') # Add space after colon for name field
end

# Helper to process wavedrom data
def process_wavedrom(json_data)
  result = json_data.dup

  # Process reg array if it exists
  if result["reg"].is_a?(Array)
    result["reg"].each do |item|
      # For fields that are likely opcodes or immediates (type 2)
      if item["type"] == 2
        # Convert to number first (if it's a string)
        if item["name"].is_a?(String)
          if item["name"].start_with?("0x")
            # Already hexadecimal
            numeric_value = item["name"].to_i(16)
          elsif item["name"] =~ /^[01]+$/
            # Binary string without prefix
            numeric_value = item["name"].to_i(2)
          elsif item["name"] =~ /^\d+$/
            # Decimal
            numeric_value = item["name"].to_i
          else
            # Not a number, leave it alone
            next
          end
        else
          # Already a number
          numeric_value = item["name"]
        end

        # Convert to hexadecimal string
        hex_str = numeric_value.to_s(16).downcase

        # Set the name to a specially formatted string that will be converted
        # to a hex literal in our custom JSON converter
        item["name"] = "0x" + hex_str
      end

      # Ensure bits is a number
      if item["bits"].is_a?(String) && item["bits"] =~ /^\d+$/
        item["bits"] = item["bits"].to_i
      end
    end
  end

  result
end
%>
= Instruction Appendix
:doctype: book
:wavedrom: <%= $root %>/node_modules/.bin/wavedrom-cli
// Now the document header is complete and the wavedrom attribute is active.

<% instructions.sort_by(&:name).each do |inst| %>
<%= anchor_for_inst(inst.name) %>
== <%= inst.name %>

Synopsis::
<%= inst.long_name %>

Encoding::
<%- if inst.multi_encoding? -%>
[NOTE]
This instruction has different encodings in RV32 and RV64

RV32::
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= fix_entities(json_dump_with_hex_literals(process_wavedrom(inst.wavedrom_desc(32)))) %>
....

RV64::
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= fix_entities(json_dump_with_hex_literals(process_wavedrom(inst.wavedrom_desc(64)))) %>
....
<%- else -%>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= fix_entities(json_dump_with_hex_literals(process_wavedrom(inst.wavedrom_desc(inst.base.nil? ? 64 : inst.base)))) %>
....
<%- end -%>

Description::
<%= fix_entities(inst.description) %>

Decode Variables::
<%- if inst.multi_encoding? ? (inst.decode_variables(32).empty? && inst.decode_variables(64).empty?) : inst.decode_variables(inst.base.nil? ? 64 : inst.base).empty? -%>
<%= inst.name %> has no decode variables.
<%- else -%>
<%- if inst.multi_encoding? -%>
<%- unless inst.decode_variables(32).empty? -%>
*RV32:*

[width="100%", cols="1,2", options="header"]
|===
|Variable Name |Location
<%- inst.decode_variables(32).each do |d| -%>
|<%= d.name %> |<%= d.extract %>
<%- end -%>
|===
<%- end -%>
<%- unless inst.decode_variables(64).empty? -%>

*RV64:*

[width="100%", cols="1,2", options="header"]
|===
|Variable Name |Location
<%- inst.decode_variables(64).each do |d| -%>
|<%= d.name %> |<%= d.extract %>
<%- end -%>
|===
<%- end -%>
<%- else -%>
[width="100%", cols="1,2", options="header"]
|===
|Variable Name |Location
<%- inst.decode_variables(inst.base.nil? ? 64 : inst.base).each do |d| -%>
|<%= d.name %> |<%= d.extract %>
<%- end -%>
|===
<%- end -%>
<%- end -%>

Included in::
<%- if inst.defined_by_condition.flat? -%>
[options="autowrap,autowidth"]
|===
| Extension | Version
<% inst.defined_by_condition.flat_versions.each do |r| %>
| *<%= r.name %>* | <%= fix_entities(r.requirement_specs_to_s) %>
<% end %>
|===
<%- else -%>
<%= fix_entities(inst.defined_by_condition.to_asciidoc) %>
<%- end -%>

<<<
<% end %>
