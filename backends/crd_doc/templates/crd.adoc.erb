// Number heading sections (e.g., 1.0, 1.1, etc.)
:sectnums:  

// Add a table of contents for HTML (and VSCode adoc preview)
:toc: left

// Include headings up to 3 levels deep (don't know why 5 gives you this).
:toclevels: 5

//
// Stuff to generate nice wavedrom drawings of instruction and CSR fields
//
:wavedrom: <%= $root %>/node_modules/.bin/wavedrom-cli

// TODO: needs to be changed
:imagesoutdir: images

<% arch_def = crd.arch_def   # Set local Ruby variables -%>

= <%= crd.name %> Certification Requirements Document

[Preface]
== <%= crd.family.name %> Family Revision History

Contains documentation changes that apply to all releases of the family.

[cols="1,1,5"]
|===
| Date | Revision | Changes

<% crd.family.revisions.each do |rev| -%>
| <%= rev.date %> 
| <%= rev.version %>
a| <% rev.changes.each do |change| %>
* <%= change %>
<% end -%>
<% end -%>
|===

[Preface]
== Typographic Conventions

CSR field colors::

* Grey fields are reserved (WPRI)
* Green fields are present
* Red fields are defined by the RISC-V ISA but not present

CSR field types::

[%autowidth]
|===
| Abbreviation | Description

<% CsrField::TYPE_DESC_MAP.each do |abbreviation, description| -%>
| <%= abbreviation %>
| <%= description %>
<% end -%>
|===

== Introduction

<%= crd.family.introduction %>

=== Naming Scheme

<%= crd.family.naming_scheme %>

=== <%= crd.name %> Description

<%= crd.description %>

=== Related Specifications

[cols="2,2,3,3,3"]
|===
| MC Version | TSC Profile | Unpriv ISA Manual | Priv ISA Manual | Debug Manual

| <%= crd.name %>
| <%= crd.tsc_profile.nil? ? "No profile" : crd.tsc_profile.marketing_name %>
| <%= crd.unpriv_isa_manual_revision %>
| <%= crd.priv_isa_manual_revision %>
| <%= crd.debug_manual_revision %>
|===

=== Privileged Modes

|===
| M | S | U | VS | VU

| <% if crd.family.mandatory_priv_modes.include?('M') -%> MANDATORY <% else -%> OUT-OF-SCOPE <% end -%>
| <% if crd.family.mandatory_priv_modes.include?('S') -%> MANDATORY <% else -%> OUT-OF-SCOPE <% end -%>
| <% if crd.family.mandatory_priv_modes.include?('U') -%> MANDATORY <% else -%> OUT-OF-SCOPE <% end -%>
| <% if crd.family.mandatory_priv_modes.include?('VS') -%> MANDATORY <% else -%> OUT-OF-SCOPE <% end -%>
| <% if crd.family.mandatory_priv_modes.include?('VU') -%> MANDATORY <% else -%> OUT-OF-SCOPE <% end -%>

|===

== Extensions

Any RISC-V extension not listed in this section is OUT-OF-SCOPE so the <%= crd.name %>
certificate doesn't cover its associated behaviors.

<% ["mandatory","optional"].each do |presence| -%>

=== <%= presence.capitalize %> Extensions

<% ext_reqs = crd.in_scope_ext_reqs(presence) -%>
<% if ext_reqs.empty? -%>
None
<% else -%>
[%autowidth]
|===
| Requirement ID | Extension | Version | Long Name | Note

<% ext_reqs.sort.each do |ext_req| -%>
<% ext_db = crd.extension_from_db(ext_req.name) -%>
| <%= ext_req.req_id %> 
| <<ext-<%= ext_req.name %>-def,<%= ext_req.name %>>> 
| <%= ext_req.version_requirement %>
| <%= ext_db.nil? ? "" : ext_db.long_name %>
| <%= ext_req.note.nil? ? "" : ext_req.note %>
<% end -%>
|===
<% end # if table -%>
<% end # do ext_reqs -%>

== Implementation-dependencies

RISC-V standards support many implementation-defined parameters. In many cases, there
are no names associated with these parameters. Names are defined in this section when
not provided in the associated standard.

=== IN-SCOPE Parameters

These implementation-dependent options defined by MANDATORY or OPTIONAL extensions are IN-SCOPE. 
An implementation must abide by the "Allowed Value(s)" to obtain a certificate.
If the "Allowed Value(s)" is "Any" then any value allowed by the type is acceptable.

<% if crd.all_in_scope_ext_params.empty? -%>
None
<% else -%>
[cols="4,2,1,1,2"]
|===
| Parameter | Type | Allowed Value(s) | Extension(s) | Note

<% crd.all_in_scope_ext_params.sort.each do |in_scope_ext_param| -%>
<% param_db = in_scope_ext_param.param_db -%>
<% exts_db = crd.all_in_scope_exts_with_param(param_db) -%>
| <%= param_db.name_potentially_with_link(exts_db) %>
| <%= param_db.schema_type %>
| <%= in_scope_ext_param.allowed_values %>
| <% exts_db.sort.each do |ext_db| -%><<ext-<%= ext_db.name %>-param-<%= param_db.name %>-def,<%= ext_db.name %>>> <% end # do ext_db -%>
a| <%= in_scope_ext_param.note %>
<% end # do -%>
|===
<% end # if table -%>

=== OUT-OF-SCOPE Parameters

These implementation-dependent options defined by MANDATORY or OPTIONAL extensions are OUT-OF-SCOPE. 
There are no restrictions on their values for certification purposes because the certificate 
doesn't cover the behavior of the associated RISC-V standard as a function of these parameters.

<% if crd.all_out_of_scope_params.empty? -%>
None
<% else -%>
[%autowidth]
|===
| Parameters | Type | Extension(s)

<% crd.all_out_of_scope_params.sort.each do |param_db| -%>
<% exts_db = crd.all_in_scope_exts_without_param(param_db) -%>
| <%= param_db.name_potentially_with_link(exts_db) %>
| <%= param_db.schema_type %>
| <% exts_db.sort.each do |ext_db| -%><<ext-<%= ext_db.name %>-param-<%= param_db.name %>-def,<%= ext_db.name %>>> <% end # do ext_db -%>

<% end # do -%>
|===
<% end # if table -%>

== Instruction Summary

<%
  insts = crd.in_scope_extensions.map { |ext_crd| ext_crd.instructions }.flatten.uniq
  insts.sort_by!(&:name)
-%>

[%autowidth]
|===
| Name | Long Name

<% insts.each do |inst| -%>
| <%= link_to_inst(inst.name) %>
| <%= inst.long_name %>
<% end # do -%>
|===

== CSR Summary

<%
  csrs = crd.in_scope_ext_reqs.map { |ext_crd_req| ext_crd_req.csrs(crd.arch_def) }.flatten.uniq
-%>

=== By Name

[%autowidth]
|===
| Name | Long Name | Address | Mode | Primary Extension

<% csrs.sort_by!(&:name).each do |csr| -%>
| <<csr-<%= csr.name %>-def,<%= csr.name %>>>
| <%= csr.long_name %>
| <%= "0x#{csr.address.to_s(16)}" %>
| <%= csr.priv_mode %>
| <%= csr.primary_defined_by %>
<% end # do -%>
|===

=== By Address

[%autowidth]
|===
| Address | Mode | Name | Long Name | Primary Extension

<% csrs.sort_by!(&:address).each do |csr| -%>
| <%= "0x#{csr.address.to_s(16)}" %>
| <%= csr.priv_mode %>
| <<csr-<%= csr.name %>-def,<%= csr.name %>>>
| <%= csr.long_name %>
| <%= csr.primary_defined_by %>
<% end # do -%>
|===

<% unless crd.requirement_groups.empty? -%>
== Additional Requirements

This section contains requirements in addition to those already specified related to extensions and parameters.
These additional requirements are organized as groups of related requirements.

<% crd.requirement_groups.each do |group| -%>
=== <%= group.name %>

<%= group.description %>

<% unless group.when.nil? -%>
[IMPORTANT]
<%= group.name %> requirements only apply when <%= group.when_pretty %>.
<% end -%>

[%autowidth]
|===
| Req Number | Description

<% group.requirements.each do |req| -%>
| <%= req.name %>
a| <%= req.description %>
<% unless req.when.nil? -%>
[IMPORTANT]
Requirement <%= req.name %> only apply when <%= req.when_pretty %>.
<% end -%>
<% end -%>
|===

<% end -%>
<% end # unless requirement_groups.empty? -%>

[appendix]
== Extension Details
<% crd.in_scope_ext_reqs.sort.each do |ext_req| -%>
<% ext_db = crd.extension_from_db(ext_req.name) -%>

[[ext-<%= ext_req.name %>-def]]
=== Extension <%= ext_req.name %> +
<%= ext_db.nil? ? "" : "*Long Name*: " + ext_db.long_name + " +" %>

*Version Requirement*: <%= ext_req.version_requirement %> +

<% ext_db.versions.each do |v| -%>
<%= v["version"] %>::
  State:::
    <%= v["state"] %>
  <% if v["state"] == "ratified" -%>
  Ratification date:::
    <%= v["ratification_date"] %>
  <% end # if %>
  <% if v.key?("changes") -%>
  Changes:::

    <% v["changes"].each do |c| -%>
    * <%= c %>  
    <% end -%>

  <% end -%>
  <% if v.key?("url") -%>
  Ratification document:::
    <%= v["url"] %>
  <% end -%>
  <% if v.key?("implies") -%>
  Implies:::
    <% implications = v["implies"][0].is_a?(Array) ? v["implies"] : [v["implies"]] -%>
    <% implications.each do |i| -%>
    * `<%= i[0] %>` version <%= i[1] %>
    <% end -%>
  <% end -%>
<% end -%>

==== Synopsis

:leveloffset: +3

<%= ext_db.description %>

:leveloffset: -3

<% unless ext_req.note.nil? -%>
[NOTE]
--
<%= ext_req.note %>
--
<% end -%>

// TODO: GitHub issue 92: Use version specified by each profile.
<% insts = arch_def.instructions.select { |i| i.defined_by?(ext_db.name,ext_db.min_version) } -%>
<% unless insts.empty? -%>
==== Instructions

The following instructions are added by this extension:

[cols="1,3"]
|===
<% insts.each do |inst| -%>
| <%= link_to_inst(inst.name) %>
| *<%= inst.long_name %>*
<% end -%>
|===
<% end -%>

<% unless crd.in_scope_ext_params(ext_req).empty? -%>
==== IN-SCOPE Parameters

<% crd.in_scope_ext_params(ext_req).sort.each do |ext_param| -%>
[[ext-<%= ext_req.name %>-param-<%= ext_param.name %>-def]]
<%= ext_param.name %> &#8658; <%= ext_param.param_db.schema_type %>::
+
--
<%= ext_param.param_db.desc %>
--
<% end # do ext_param -%>
<% end # unless table -%>

<% unless crd.out_of_scope_params(ext_req.name).empty? -%>
==== OUT-OF-SCOPE Parameters

<% crd.out_of_scope_params(ext_req.name).sort.each do |param_db| -%>
[[ext-<%= ext_req.name %>-param-<%= param_db.name %>-def]]
<%= param_db.name %> &#8658; <%= param_db.schema_type %>::
+
--
<%= param_db.desc %>
--
<% end # do param_db -%>
<% end # unless table -%>
<% end # do ext_req -%>

[appendix]
== Instruction Details

<%=
  insts = crd.in_scope_extensions.map { |ext_crd| ext_crd.instructions }.flatten.uniq
  insts.sort_by!(&:name)
-%>

<% insts.each do |inst| -%>
<<<
<%= anchor_for_inst(inst.name) %>
=== <%= inst.name %>

*<%= inst.long_name %>*

This instruction is defined by:

<%= inst.defined_by.to_asciidoc %>

==== Encoding

<% if inst.multi_encoding? -%>
[NOTE]
This instruction has different encodings in RV32 and RV64.

====
RV32::
+
[wavedrom, ,svg,subs='attributes',width="100%"]
....  
<%= JSON.dump inst.wavedrom_desc(32) %>
....

RV64::
+
[wavedrom, ,svg,subs='attributes',width="100%"]
....  
<%= JSON.dump inst.wavedrom_desc(64) %>
....
====
<% else -%>
[wavedrom, ,svg,subs='attributes',width="100%"]
....  
<%= JSON.dump inst.wavedrom_desc(inst.base.nil? ? 32 : inst.base) %>
....
<% end -%>

==== Synopsis

<%= inst.description %>

==== Access
<% if crd.in_scope_extensions.any? { |e| e.name == "H" } -%>
[cols="^,^,^,^,^"]
<% else -%>
[cols="^,^,^"]
<% end -%>
|===
| M | <% if crd.in_scope_extensions.any? { |e| e.name == "H" } -%>HS<% else -%>S<% end -%> | U <% if crd.in_scope_extensions.any? { |e| e.name == "H" } -%> | VS | VU <% end -%>

| [.access-always]#Always#
| [.access-<%=inst.access['s']%>]#<%= inst.access['s'].capitalize %>#
| [.access-<%=inst.access['u']%>]#<%= inst.access['u'].capitalize %>#
<% if crd.in_scope_extensions.any? { |e| e.name == "H" } %>
| [.access-<%=inst.access['vs']%>]#<%= inst.access['vs'].capitalize %>#
| [.access-<%=inst.access['vu']%>]#<%= inst.access['vu'].capitalize %>#
<% end %>
|===

<% if inst.access_detail? -%>
<%= inst.access_detail %>
<% end -%>

==== Decode Variables

<% if inst.multi_encoding? -%>
====
RV32::
+
[source.idl]
----
<% inst.decode_variables(32).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<% end -%>
----

RV64::
+
[source,idl]
----
<% inst.decode_variables(64).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<% end -%>
----
====
<% else -%>
[source,idl]
----
<% inst.decode_variables(inst.base.nil? ? 32 : inst.base).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<% end -%>
----
<% end -%>

==== Execution

<% xlens = inst.base.nil? ? [32, 64] : [inst.base] -%>

<% if inst.key?("operation()") -%>
[source,idl,subs="specialchars,macros"]
----
<%= inst.operation_ast(arch_def.symtab).gen_adoc %>
----
<% end -%>

==== Exceptions

<%- exception_list = inst.reachable_exceptions_str(arch_def.symtab) -%>
<%- if exception_list.empty? -%>
This instruction does not generate synchronous exceptions.
<%- else -%>
This instruction may result in the following synchronous exceptions:

  <%- exception_list.sort.each do |etype| -%>
  * <%= etype %>
  <%- end -%>

<%- end -%>


<% end -%>

[appendix]
== CSR Details

<%
  csrs = crd.in_scope_ext_reqs.map { |ext_crd_req| ext_crd_req.csrs(crd.arch_def) }.flatten.uniq
  csrs.sort_by!(&:name)
-%>

<% csrs.each do |csr| -%>
<<<
[[csr-<%= csr.name %>-def]]
=== <%= csr.name %>

*<%= csr.long_name %>*

<% unless csr.base.nil? -%>
[NOTE]
--
`<%= csr.name %>` is only defined in RV<%= csr.base %>.
--
<% end -%>

<%= csr.description %>

==== Attributes
[%autowidth]
|===
h| CSR Address    | <%= "0x#{csr.address.to_s(16)}" %>
<% if csr.priv_mode == 'VS' -%>
h| Virtual CSR Address    | <%= "0x#{csr.virtual_address.to_s(16)}" %>
<% end -%>
h| Defining extension a| <%= csr.defined_by.to_asciidoc %>
<% if csr.dynamic_length?(arch_def) -%>
h| Length         | <%= csr.length_pretty(arch_def) %>
<% else -%>
h| Length         | <%= csr.length_pretty(arch_def) %>
<% end -%>
h| Privilege Mode | <%= csr.priv_mode %>
|===


==== <%= crd.name %> Format
<% unless csr.dynamic_length?(crd.arch_def) || csr.implemented_fields(arch_def).any? { |f| f.dynamic_location?(crd.arch_def) } -%>
<%# CSR has a known static length, so there is only one format to display -%>
.<%= csr.name %> format
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(arch_def, csr.base.nil? ? 32 : csr.base, optional_type: 2) %>
....
<% else -%>
<%# CSR has a dynamic length, or a field has a dynamic location,
    so there is more than one format to display -%>
This CSR format changes dynamically with XLEN.

.<%= csr.name %> Format when <%= csr.length_cond32 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(arch_def, 32, optional_type: 2) %>
....

.<%= csr.name %> Format when <%= csr.length_cond64 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(arch_def, 64, optional_type: 2) %>
....


<% end # unless dynamic length -%>

==== <%= crd.name %> Field Summary

// use @ as a separator since IDL code can contain |
[%autowidth,separator=@,float="center",align="center",cols="^,<,<,<",options="header",role="stretch"]
|===
@ Name @ Location @ Type @ Reset Value

<%- csr.implemented_fields(arch_def).each do |field| -%>
@ xref:<%=csr.name%>-<%=field.name%>-def[`<%= field.name %>`]
a@
<%- if field.dynamic_location?(arch_def) -%>

[when,"<%= field.location_cond32 %>"]
--
<%= field.location_pretty(arch_def, 32) %>
--

[when,"<%= field.location_cond64 %>"]
--
<%= field.location_pretty(arch_def, 64) %>
--

<%- else -%>
<%= field.location_pretty(arch_def) %>
<%- end -%>
a@

--
<%= field.type_pretty(arch_def.symtab) %>
--

a@

--
<%= field.reset_value_pretty(arch_def) %>
--

<%- end -%>
|===

==== <%= crd.name %> Fields

<%- if csr.implemented_fields(arch_def).empty? -%>
This CSR has no fields. However, it must still exist (not cause an `Illegal Instruction` trap) and always return zero on a read.
<%- else -%>

<%- csr.implemented_fields(arch_def).each do |field| -%>
[[<%=csr.name%>-<%=field.name%>-def]]
===== `<%= field.name %>`

<%- if !field.defined_in_all_bases? -%>
IMPORTANT: <%= field.name %> is only defined in <%= field.base32_only? ? "RV32" : "RV64" %> (`<%= field.base32_only? ? field.location_cond32 : field.location_cond64 %>`)
<%- end -%>

****
Location::
<%= field.location_pretty(arch_def) %>

Description::
<%= field.description.gsub("\n", " +\n") %>

Type::
<%= field.type_pretty(arch_def.symtab) %>

Reset value::
<%= field.reset_value_pretty(arch_def) %>

****

<%- end -%>
<%- end -%>

<%- if csr.implemented_fields(arch_def).map(&:has_custom_sw_write?).any? -%>
==== Software write

This CSR may store a value that is different from what software attempts to write.

When a software write occurs (_e.g._, through `csrrw`), the following determines the
written value:

[idl]
----
<%- csr.implemented_fields(arch_def).each do |field| -%>
<%- if field.has_custom_sw_write? -%>
<%= field.name %> = <%= field["sw_write(csr_value)"] %>
<%- else -%>
<%= field.name %> = csr_value.<%= field.name %>
<%- end -%>
<%- end -%>
----
<%- end -%>

<%- if csr.has_custom_sw_read? -%>
==== Software read

This CSR may return a value that is different from what is stored in hardware.

[source,idl,subs="specialchars,macros"]
----
<%= csr.sw_read_ast(arch_def.symtab).gen_adoc %>
----
<%- end -%>

<% end # do csrs -%>