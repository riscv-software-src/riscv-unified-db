:tabs-sync-option:

<%= anchor_for_udb_doc_inst(inst.name) %>
= <%= inst.name %>

*<%= inst.long_name %>*

This instruction is defined by:

<%- inst.defined_by_condition.to_asciidoc -%>

== Encoding

<%- if cfg_arch.multi_xlen? && inst.multi_encoding? -%>
[NOTE]
This instruction has different encodings in RV32 and RV64.

====
RV32::
+
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump inst.wavedrom_desc(32) %>
....

RV64::
+
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump inst.wavedrom_desc(64) %>
....
====
<%- else -%>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump inst.wavedrom_desc(inst.base.nil? ? cfg_arch.param_values["MXLEN"] : inst.base) %>
....
<%- end -%>

== Synopsis

<%= inst.description %>

== Access
<%-
  # Determine which privilege modes to display based on implemented extensions
  modes = ["M"]  # M-mode is always present
  mode_headers = ["M"]
  mode_values = ["[.access-always]#Always#"]

  # Add S-mode if S extension is implemented
  if cfg_arch.ext?(:S)
    if cfg_arch.ext?(:H)
      modes << "HS"
      mode_headers << "HS"
    else
      modes << "S"
      mode_headers << "S"
    end
    mode_values << "[.access-#{inst.access['s']}]##{inst.access['s'].capitalize}#"
  end

  # Add U-mode if U extension is implemented
  if cfg_arch.ext?(:U)
    modes << "U"
    mode_headers << "U"
    mode_values << "[.access-#{inst.access['u']}]##{inst.access['u'].capitalize}#"
  end

  # Add virtual modes if H extension is implemented
  if cfg_arch.ext?(:H)
    # Always add VS mode when H extension is present
    modes << "VS"
    mode_headers << "VS"
    mode_values << "[.access-#{inst.access['vs']}]##{inst.access['vs'].capitalize}#"

    # Only add VU mode if both H and U extensions are present
    if cfg_arch.ext?(:U)
      modes << "VU"
      mode_headers << "VU"
      mode_values << "[.access-#{inst.access['vu']}]##{inst.access['vu'].capitalize}#"
    end
  end

  # Generate column specification
  col_spec = "^," * modes.size
  col_spec = col_spec.chomp(",")
-%>
[cols="<%= col_spec %>"]
|===
| <%= mode_headers.join(" | ") %>

| <%= mode_values.join("\n| ") %>
|===

<%- if inst.access_detail? -%>
<%= inst.access_detail %>
<%- end -%>

== Decode Variables

<%- if cfg_arch.multi_xlen? && inst.multi_encoding? -%>
[tabs]
====
RV32::
+
[source.idl]
----
<%- inst.decode_variables(32).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----

RV64::
+
[source,idl]
----
<%- inst.decode_variables(64).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----
====
<%- else -%>
[source,idl]
----
<%- inst.decode_variables(inst.base.nil? ? cfg_arch.param_values["MXLEN"] : inst.base).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----
<%- end -%>

== Execution

<%- xlens = inst.base.nil? ? (cfg_arch.multi_xlen? ? [32, 64] : [cfg_arch.mxlen]) : [inst.base] -%>

<%- if inst.key?("operation()") -%>
[tabs]
====
<%- xlens.each do |effective_xlen| -%>
Pruned, XLEN == <%= effective_xlen %>::
+
[source,idl,subs="specialchars,macros"]
----
<%= inst.pruned_operation_ast(effective_xlen).gen_adoc %>
----
<%- end -%>

Original::
+
[source,idl,subs="specialchars,macros"]
----
<%= inst.operation_ast().gen_adoc %>
----
====
<%- end -%>

<%- exception_list = inst.reachable_exceptions_str(inst.base.nil? ? cfg_arch.param_values["MXLEN"] : inst.base) -%>
<%- unless exception_list.empty? -%>
== Exceptions

This instruction may result in the following synchronous exceptions:

  <%- exception_list.sort.each do |etype| -%>
  * <%= etype %>
  <%- end -%>

<%- end -%>
