
/* Automatically generated by parse_opcodes */
object Instructions {
  val ZACASType = Map(
   "AMOCAS_D"         -> BitPat("b00101????????????011?????0101111"),
   "AMOCAS_W"         -> BitPat("b00101????????????010?????0101111"),
  )
  val ZIMOPType = Map(
   "MOP_R_N"          -> BitPat("b1?00??0111???????100?????1110011"),
   "MOP_RR_N"         -> BitPat("b1?00??1??????????100?????1110011"),
  )
  val DType = Map(
   "FADD_D"           -> BitPat("b0000001??????????????????1010011"),
   "FCLASS_D"         -> BitPat("b111000100000?????001?????1010011"),
   "FCVT_D_H"         -> BitPat("b010000100010?????????????1010011"),
   "FCVT_D_S"         -> BitPat("b010000100000?????????????1010011"),
   "FCVT_D_W"         -> BitPat("b110100100000?????????????1010011"),
   "FCVT_D_WU"        -> BitPat("b110100100001?????????????1010011"),
   "FCVT_H_D"         -> BitPat("b010001000001?????????????1010011"),
   "FCVT_S_D"         -> BitPat("b010000000001?????????????1010011"),
   "FCVT_W_D"         -> BitPat("b110000100000?????????????1010011"),
   "FCVT_WU_D"        -> BitPat("b110000100001?????????????1010011"),
   "FCVTMOD_W_D"      -> BitPat("b110000101000?????001?????1010011"),
   "FDIV_D"           -> BitPat("b0001101??????????????????1010011"),
   "FEQ_D"            -> BitPat("b1010001??????????010?????1010011"),
   "FLD"              -> BitPat("b?????????????????011?????0000111"),
   "FLE_D"            -> BitPat("b1010001??????????000?????1010011"),
   "FLEQ_D"           -> BitPat("b1010001??????????100?????1010011"),
   "FLI_D"            -> BitPat("b111100100001?????000?????1010011"),
   "FLT_D"            -> BitPat("b1010001??????????001?????1010011"),
   "FLTQ_D"           -> BitPat("b1010001??????????101?????1010011"),
   "FMADD_D"          -> BitPat("b?????01??????????????????1000011"),
   "FMAX_D"           -> BitPat("b0010101??????????001?????1010011"),
   "FMAXM_D"          -> BitPat("b0010101??????????011?????1010011"),
   "FMIN_D"           -> BitPat("b0010101??????????000?????1010011"),
   "FMINM_D"          -> BitPat("b0010101??????????010?????1010011"),
   "FMSUB_D"          -> BitPat("b?????01??????????????????1000111"),
   "FMUL_D"           -> BitPat("b0001001??????????????????1010011"),
   "FNMADD_D"         -> BitPat("b?????01??????????????????1001111"),
   "FNMSUB_D"         -> BitPat("b?????01??????????????????1001011"),
   "FROUND_D"         -> BitPat("b010000100100?????????????1010011"),
   "FROUNDNX_D"       -> BitPat("b010000100101?????????????1010011"),
   "FSD"              -> BitPat("b?????????????????011?????0100111"),
   "FSGNJ_D"          -> BitPat("b0010001??????????000?????1010011"),
   "FSGNJN_D"         -> BitPat("b0010001??????????001?????1010011"),
   "FSGNJX_D"         -> BitPat("b0010001??????????010?????1010011"),
   "FSQRT_D"          -> BitPat("b010110100000?????????????1010011"),
   "FSUB_D"           -> BitPat("b0000101??????????????????1010011"),
  )
  val ZICBOZType = Map(
   "CBO_ZERO"         -> BitPat("b000000000100?????010000000001111"),
  )
  val HType = Map(
   "HFENCE_GVMA"      -> BitPat("b0110001??????????000000001110011"),
   "HFENCE_VVMA"      -> BitPat("b0010001??????????000000001110011"),
   "HLV_B"            -> BitPat("b011000000000?????100?????1110011"),
   "HLV_BU"           -> BitPat("b011000000001?????100?????1110011"),
   "HLV_H"            -> BitPat("b011001000000?????100?????1110011"),
   "HLV_HU"           -> BitPat("b011001000001?????100?????1110011"),
   "HLV_W"            -> BitPat("b011010000000?????100?????1110011"),
   "HLVX_HU"          -> BitPat("b011001000011?????100?????1110011"),
   "HLVX_WU"          -> BitPat("b011010000011?????100?????1110011"),
   "HSV_B"            -> BitPat("b0110001??????????100000001110011"),
   "HSV_H"            -> BitPat("b0110011??????????100000001110011"),
   "HSV_W"            -> BitPat("b0110101??????????100000001110011"),
  )
  val ZK32Type = Map(
   "AES32DSI"         -> BitPat("b??10101??????????000?????0110011"),
   "AES32DSMI"        -> BitPat("b??10111??????????000?????0110011"),
   "AES32ESI"         -> BitPat("b??10001??????????000?????0110011"),
   "AES32ESMI"        -> BitPat("b??10011??????????000?????0110011"),
   "SHA512SIG0H"      -> BitPat("b0101110??????????000?????0110011"),
   "SHA512SIG0L"      -> BitPat("b0101010??????????000?????0110011"),
   "SHA512SIG1H"      -> BitPat("b0101111??????????000?????0110011"),
   "SHA512SIG1L"      -> BitPat("b0101011??????????000?????0110011"),
   "SHA512SUM0R"      -> BitPat("b0101000??????????000?????0110011"),
   "SHA512SUM1R"      -> BitPat("b0101001??????????000?????0110011"),
  )
  val SMRNMIType = Map(
   "MNRET"            -> BitPat("b01110000001000000000000001110011"),
  )
  val BType = Map(
   "ANDN"             -> BitPat("b0100000??????????111?????0110011"),
   "BCLR"             -> BitPat("b0100100??????????001?????0110011"),
   "BEXT"             -> BitPat("b0100100??????????101?????0110011"),
   "BINV"             -> BitPat("b0110100??????????001?????0110011"),
   "BSET"             -> BitPat("b0010100??????????001?????0110011"),
   "CLMUL"            -> BitPat("b0000101??????????001?????0110011"),
   "CLMULH"           -> BitPat("b0000101??????????011?????0110011"),
   "CLMULR"           -> BitPat("b0000101??????????010?????0110011"),
   "CLZ"              -> BitPat("b011000000000?????001?????0010011"),
   "CPOP"             -> BitPat("b011000000010?????001?????0010011"),
   "CTZ"              -> BitPat("b011000000001?????001?????0010011"),
   "MAX"              -> BitPat("b0000101??????????110?????0110011"),
   "MAXU"             -> BitPat("b0000101??????????111?????0110011"),
   "MIN"              -> BitPat("b0000101??????????100?????0110011"),
   "MINU"             -> BitPat("b0000101??????????101?????0110011"),
   "ORC_B"            -> BitPat("b001010000111?????101?????0010011"),
   "ORN"              -> BitPat("b0100000??????????110?????0110011"),
   "ROL"              -> BitPat("b0110000??????????001?????0110011"),
   "ROR"              -> BitPat("b0110000??????????101?????0110011"),
   "SEXT_B"           -> BitPat("b011000000100?????001?????0010011"),
   "SEXT_H"           -> BitPat("b011000000101?????001?????0010011"),
   "SH1ADD"           -> BitPat("b0010000??????????010?????0110011"),
   "SH2ADD"           -> BitPat("b0010000??????????100?????0110011"),
   "SH3ADD"           -> BitPat("b0010000??????????110?????0110011"),
   "XNOR"             -> BitPat("b0100000??????????100?????0110011"),
  )
  val ZVKNType = Map(
   "VAESDF_VS"        -> BitPat("b1010011?????00001010?????1110111"),
   "VAESDF_VV"        -> BitPat("b1010001?????00001010?????1110111"),
   "VAESDM_VS"        -> BitPat("b1010011?????00000010?????1110111"),
   "VAESDM_VV"        -> BitPat("b1010001?????00000010?????1110111"),
   "VAESEF_VS"        -> BitPat("b1010011?????00011010?????1110111"),
   "VAESEF_VV"        -> BitPat("b1010001?????00011010?????1110111"),
   "VAESEM_VS"        -> BitPat("b1010011?????00010010?????1110111"),
   "VAESEM_VV"        -> BitPat("b1010001?????00010010?????1110111"),
   "VAESKF1_VI"       -> BitPat("b1000101??????????010?????1110111"),
   "VAESKF2_VI"       -> BitPat("b1010101??????????010?????1110111"),
   "VAESZ_VS"         -> BitPat("b1010011?????00111010?????1110111"),
   "VSHA2CH_VV"       -> BitPat("b1011101??????????010?????1110111"),
   "VSHA2CL_VV"       -> BitPat("b1011111??????????010?????1110111"),
   "VSHA2MS_VV"       -> BitPat("b1011011??????????010?????1110111"),
  )
  val A64Type = Map(
   "AMOADD_D"         -> BitPat("b00000????????????011?????0101111"),
   "AMOAND_D"         -> BitPat("b01100????????????011?????0101111"),
   "AMOMAX_D"         -> BitPat("b10100????????????011?????0101111"),
   "AMOMAXU_D"        -> BitPat("b11100????????????011?????0101111"),
   "AMOMIN_D"         -> BitPat("b10000????????????011?????0101111"),
   "AMOMINU_D"        -> BitPat("b11000????????????011?????0101111"),
   "AMOOR_D"          -> BitPat("b01000????????????011?????0101111"),
   "AMOSWAP_D"        -> BitPat("b00001????????????011?????0101111"),
   "AMOXOR_D"         -> BitPat("b00100????????????011?????0101111"),
   "LR_D"             -> BitPat("b00010??00000?????011?????0101111"),
   "SC_D"             -> BitPat("b00011????????????011?????0101111"),
  )
  val ZICBOMType = Map(
   "CBO_CLEAN"        -> BitPat("b000000000001?????010000000001111"),
   "CBO_FLUSH"        -> BitPat("b000000000010?????010000000001111"),
   "CBO_INVAL"        -> BitPat("b000000000000?????010000000001111"),
  )
  val ZIFENCEIType = Map(
   "FENCE_I"          -> BitPat("b?????????????????001?????0001111"),
  )
  val ZFAType = Map(
   "FLEQ_H"           -> BitPat("b1010010??????????100?????1010011"),
   "FLEQ_S"           -> BitPat("b1010000??????????100?????1010011"),
   "FLI_H"            -> BitPat("b111101000001?????000?????1010011"),
   "FLI_S"            -> BitPat("b111100000001?????000?????1010011"),
   "FLTQ_H"           -> BitPat("b1010010??????????101?????1010011"),
   "FLTQ_S"           -> BitPat("b1010000??????????101?????1010011"),
   "FMAXM_H"          -> BitPat("b0010110??????????011?????1010011"),
   "FMAXM_S"          -> BitPat("b0010100??????????011?????1010011"),
   "FMINM_H"          -> BitPat("b0010110??????????010?????1010011"),
   "FMINM_S"          -> BitPat("b0010100??????????010?????1010011"),
   "FROUND_H"         -> BitPat("b010001000100?????????????1010011"),
   "FROUND_S"         -> BitPat("b010000000100?????????????1010011"),
   "FROUNDNX_H"       -> BitPat("b010001000101?????????????1010011"),
   "FROUNDNX_S"       -> BitPat("b010000000101?????????????1010011"),
  )
  val SVINVALType = Map(
   "HINVAL_GVMA"      -> BitPat("b0110011??????????000000001110011"),
   "HINVAL_VVMA"      -> BitPat("b0010011??????????000000001110011"),
   "SFENCE_INVAL_IR"  -> BitPat("b00011000000100000000000001110011"),
   "SFENCE_W_INVAL"   -> BitPat("b00011000000000000000000001110011"),
   "SINVAL_VMA"       -> BitPat("b0001011??????????000000001110011"),
  )
  val ZKType = Map(
   "SHA256SIG0"       -> BitPat("b000100000010?????001?????0010011"),
   "SHA256SIG1"       -> BitPat("b000100000011?????001?????0010011"),
   "SHA256SUM0"       -> BitPat("b000100000000?????001?????0010011"),
   "SHA256SUM1"       -> BitPat("b000100000001?????001?????0010011"),
  )
  val ZVFBFMINType = Map(
   "VFNCVTBF16_F_F_W" -> BitPat("b010010??????11101001?????1010111"),
   "VFWCVTBF16_F_F_V" -> BitPat("b010010??????01101001?????1010111"),
  )
  val AType = Map(
   "AMOADD_W"         -> BitPat("b00000????????????010?????0101111"),
   "AMOAND_W"         -> BitPat("b01100????????????010?????0101111"),
   "AMOMAX_W"         -> BitPat("b10100????????????010?????0101111"),
   "AMOMAXU_W"        -> BitPat("b11100????????????010?????0101111"),
   "AMOMIN_W"         -> BitPat("b10000????????????010?????0101111"),
   "AMOMINU_W"        -> BitPat("b11000????????????010?????0101111"),
   "AMOOR_W"          -> BitPat("b01000????????????010?????0101111"),
   "AMOSWAP_W"        -> BitPat("b00001????????????010?????0101111"),
   "AMOXOR_W"         -> BitPat("b00100????????????010?????0101111"),
   "LR_W"             -> BitPat("b00010??00000?????010?????0101111"),
   "SC_W"             -> BitPat("b00011????????????010?????0101111"),
  )
  val ZVFBFWMAType = Map(
   "VFWMACCBF16_VF"   -> BitPat("b111011???????????101?????1010111"),
   "VFWMACCBF16_VV"   -> BitPat("b111011???????????001?????1010111"),
  )
  val ZCMPType = Map(
   "CM_MVA01S"        -> BitPat("b????????????????101011???11???10"),
   "CM_MVSA01"        -> BitPat("b????????????????101011???01???10"),
   "CM_POP"           -> BitPat("b????????????????10111010??????10"),
   "CM_POPRET"        -> BitPat("b????????????????10111110??????10"),
   "CM_POPRETZ"       -> BitPat("b????????????????10111100??????10"),
   "CM_PUSH"          -> BitPat("b????????????????10111000??????10"),
  )
  val ZVBBType = Map(
   "VANDN_VV"         -> BitPat("b000001???????????000?????1010111"),
   "VANDN_VX"         -> BitPat("b000001???????????100?????1010111"),
   "VBREV8_V"         -> BitPat("b010010??????01000010?????1010111"),
   "VBREV_V"          -> BitPat("b010010??????01010010?????1010111"),
   "VCLZ_V"           -> BitPat("b010010??????01100010?????1010111"),
   "VCPOP_V"          -> BitPat("b010010??????01110010?????1010111"),
   "VCTZ_V"           -> BitPat("b010010??????01101010?????1010111"),
   "VREV8_V"          -> BitPat("b010010??????01001010?????1010111"),
   "VROL_VV"          -> BitPat("b010101???????????000?????1010111"),
   "VROL_VX"          -> BitPat("b010101???????????100?????1010111"),
   "VROR_VI"          -> BitPat("b01010????????????011?????1010111"),
   "VROR_VV"          -> BitPat("b010100???????????000?????1010111"),
   "VROR_VX"          -> BitPat("b010100???????????100?????1010111"),
   "VWSLL_VI"         -> BitPat("b110101???????????011?????1010111"),
   "VWSLL_VV"         -> BitPat("b110101???????????000?????1010111"),
   "VWSLL_VX"         -> BitPat("b110101???????????100?????1010111"),
  )
  val H64Type = Map(
   "HLV_D"            -> BitPat("b011011000000?????100?????1110011"),
   "HLV_WU"           -> BitPat("b011010000001?????100?????1110011"),
   "HSV_D"            -> BitPat("b0110111??????????100000001110011"),
  )
  val ZCBType = Map(
   "C_LBU"            -> BitPat("b????????????????100000????????00"),
   "C_MUL"            -> BitPat("b????????????????100111???10???01"),
   "C_NOT"            -> BitPat("b????????????????100111???1110101"),
   "C_SB"             -> BitPat("b????????????????100010????????00"),
   "C_SEXT_B"         -> BitPat("b????????????????100111???1100101"),
   "C_SEXT_H"         -> BitPat("b????????????????100111???1101101"),
   "C_ZEXT_B"         -> BitPat("b????????????????100111???1100001"),
   "C_ZEXT_H"         -> BitPat("b????????????????100111???1101001"),
  )
  val ZVKGType = Map(
   "VGHSH_VV"         -> BitPat("b1011001??????????010?????1110111"),
   "VGMUL_VV"         -> BitPat("b1010001?????10001010?????1110111"),
  )
  val SMType = Map(
   "MRET"             -> BitPat("b00110000001000000000000001110011"),
   "WFI"              -> BitPat("b00010000010100000000000001110011"),
  )
  val ZAWRSType = Map(
   "WRS_NTO"          -> BitPat("b00000000110100000000000001110011"),
   "WRS_STO"          -> BitPat("b00000001110100000000000001110011"),
  )
  val ZK64Type = Map(
   "AES64DS"          -> BitPat("b0011101??????????000?????0110011"),
   "AES64DSM"         -> BitPat("b0011111??????????000?????0110011"),
   "AES64ES"          -> BitPat("b0011001??????????000?????0110011"),
   "AES64ESM"         -> BitPat("b0011011??????????000?????0110011"),
   "AES64IM"          -> BitPat("b001100000000?????001?????0010011"),
   "AES64KS1I"        -> BitPat("b00110001?????????001?????0010011"),
   "AES64KS2"         -> BitPat("b0111111??????????000?????0110011"),
   "SHA512SIG0"       -> BitPat("b000100000110?????001?????0010011"),
   "SHA512SIG1"       -> BitPat("b000100000111?????001?????0010011"),
   "SHA512SUM0"       -> BitPat("b000100000100?????001?????0010011"),
   "SHA512SUM1"       -> BitPat("b000100000101?????001?????0010011"),
  )
  val FType = Map(
   "FADD_S"           -> BitPat("b0000000??????????????????1010011"),
   "FCLASS_S"         -> BitPat("b111000000000?????001?????1010011"),
   "FCVT_S_W"         -> BitPat("b110100000000?????????????1010011"),
   "FCVT_S_WU"        -> BitPat("b110100000001?????????????1010011"),
   "FCVT_W_S"         -> BitPat("b110000000000?????????????1010011"),
   "FCVT_WU_S"        -> BitPat("b110000000001?????????????1010011"),
   "FDIV_S"           -> BitPat("b0001100??????????????????1010011"),
   "FEQ_S"            -> BitPat("b1010000??????????010?????1010011"),
   "FLE_S"            -> BitPat("b1010000??????????000?????1010011"),
   "FLT_S"            -> BitPat("b1010000??????????001?????1010011"),
   "FLW"              -> BitPat("b?????????????????010?????0000111"),
   "FMADD_S"          -> BitPat("b?????00??????????????????1000011"),
   "FMAX_S"           -> BitPat("b0010100??????????001?????1010011"),
   "FMIN_S"           -> BitPat("b0010100??????????000?????1010011"),
   "FMSUB_S"          -> BitPat("b?????00??????????????????1000111"),
   "FMUL_S"           -> BitPat("b0001000??????????????????1010011"),
   "FMV_H_X"          -> BitPat("b111101000000?????000?????1010011"),
   "FMV_W_X"          -> BitPat("b111100000000?????000?????1010011"),
   "FMV_X_W"          -> BitPat("b111000000000?????000?????1010011"),
   "FNMADD_S"         -> BitPat("b?????00??????????????????1001111"),
   "FNMSUB_S"         -> BitPat("b?????00??????????????????1001011"),
   "FSGNJ_S"          -> BitPat("b0010000??????????000?????1010011"),
   "FSGNJN_S"         -> BitPat("b0010000??????????001?????1010011"),
   "FSGNJX_S"         -> BitPat("b0010000??????????010?????1010011"),
   "FSQRT_S"          -> BitPat("b010110000000?????????????1010011"),
   "FSUB_S"           -> BitPat("b0000100??????????????????1010011"),
   "FSW"              -> BitPat("b?????????????????010?????0100111"),
  )
  val MType = Map(
   "DIV"              -> BitPat("b0000001??????????100?????0110011"),
   "DIVU"             -> BitPat("b0000001??????????101?????0110011"),
   "MUL"              -> BitPat("b0000001??????????000?????0110011"),
   "MULH"             -> BitPat("b0000001??????????001?????0110011"),
   "MULHSU"           -> BitPat("b0000001??????????010?????0110011"),
   "MULHU"            -> BitPat("b0000001??????????011?????0110011"),
   "REM"              -> BitPat("b0000001??????????110?????0110011"),
   "REMU"             -> BitPat("b0000001??????????111?????0110011"),
  )
  val ZALASRType = Map(
   "LB_AQ"            -> BitPat("b001101?00000?????000?????0101111"),
   "LD_AQ"            -> BitPat("b001101?00000?????011?????0101111"),
   "LH_AQ"            -> BitPat("b001101?00000?????001?????0101111"),
   "LW_AQ"            -> BitPat("b001101?00000?????010?????0101111"),
   "SB_RL"            -> BitPat("b00111?1??????????000000000101111"),
   "SD_RL"            -> BitPat("b00111?1??????????011000000101111"),
   "SH_RL"            -> BitPat("b00111?1??????????001000000101111"),
   "SW_RL"            -> BitPat("b00111?1??????????010000000101111"),
  )
  val ZVKSType = Map(
   "VSM3C_VI"         -> BitPat("b1010111??????????010?????1110111"),
   "VSM3ME_VV"        -> BitPat("b1000001??????????010?????1110111"),
   "VSM4K_VI"         -> BitPat("b1000011??????????010?????1110111"),
   "VSM4R_VS"         -> BitPat("b1010011?????10000010?????1110111"),
   "VSM4R_VV"         -> BitPat("b1010001?????10000010?????1110111"),
  )
  val B64Type = Map(
   "ADD_UW"           -> BitPat("b0000100??????????000?????0111011"),
   "BCLRI"            -> BitPat("b010010???????????001?????0010011"),
   "BEXTI"            -> BitPat("b010010???????????101?????0010011"),
   "BINVI"            -> BitPat("b011010???????????001?????0010011"),
   "BSETI"            -> BitPat("b001010???????????001?????0010011"),
   "CLZW"             -> BitPat("b011000000000?????001?????0011011"),
   "CPOPW"            -> BitPat("b011000000010?????001?????0011011"),
   "CTZW"             -> BitPat("b011000000001?????001?????0011011"),
   "REV8"             -> BitPat("b011010111000?????101?????0010011"),
   "ROLW"             -> BitPat("b0110000??????????001?????0111011"),
   "RORI"             -> BitPat("b011000???????????101?????0010011"),
   "RORIW"            -> BitPat("b0110000??????????101?????0011011"),
   "RORW"             -> BitPat("b0110000??????????101?????0111011"),
   "SH1ADD_UW"        -> BitPat("b0010000??????????010?????0111011"),
   "SH2ADD_UW"        -> BitPat("b0010000??????????100?????0111011"),
   "SH3ADD_UW"        -> BitPat("b0010000??????????110?????0111011"),
   "SLLI_UW"          -> BitPat("b000010???????????001?????0011011"),
   "ZEXT_H"           -> BitPat("b000010000000?????100?????0111011"),
  )
  val ZICONDType = Map(
   "CZERO_EQZ"        -> BitPat("b0000111??????????101?????0110011"),
   "CZERO_NEZ"        -> BitPat("b0000111??????????111?????0110011"),
  )
  val D32Type = Map(
   "FMVH_X_D"         -> BitPat("b111000100001?????000?????1010011"),
   "FMVP_D_X"         -> BitPat("b1011001??????????000?????1010011"),
  )
  val SDEXTType = Map(
   "DRET"             -> BitPat("b01111011001000000000000001110011"),
  )
  val D64Type = Map(
   "FCVT_D_L"         -> BitPat("b110100100010?????????????1010011"),
   "FCVT_D_LU"        -> BitPat("b110100100011?????????????1010011"),
   "FCVT_L_D"         -> BitPat("b110000100010?????????????1010011"),
   "FCVT_LU_D"        -> BitPat("b110000100011?????????????1010011"),
   "FMV_D_X"          -> BitPat("b111100100000?????000?????1010011"),
   "FMV_X_D"          -> BitPat("b111000100000?????000?????1010011"),
  )
  val ZICFILPType = Map(
   "LPAD"             -> BitPat("b????????????????????000000010111"),
  )
  val ZVBCType = Map(
   "VCLMUL_VV"        -> BitPat("b001100???????????010?????1010111"),
   "VCLMUL_VX"        -> BitPat("b001100???????????110?????1010111"),
   "VCLMULH_VV"       -> BitPat("b001101???????????010?????1010111"),
   "VCLMULH_VX"       -> BitPat("b001101???????????110?????1010111"),
  )
  val ZFH64Type = Map(
   "FCVT_H_L"         -> BitPat("b110101000010?????????????1010011"),
   "FCVT_H_LU"        -> BitPat("b110101000011?????????????1010011"),
   "FCVT_L_H"         -> BitPat("b110001000010?????????????1010011"),
   "FCVT_LU_H"        -> BitPat("b110001000011?????????????1010011"),
  )
  val SType = Map(
   "SFENCE_VMA"       -> BitPat("b0001001??????????000000001110011"),
   "SRET"             -> BitPat("b00010000001000000000000001110011"),
  )
  val SMDBLTRPType = Map(
   "SCTRCLR"          -> BitPat("b00010000010000000000000001110011"),
  )
  val ZICFISSType = Map(
   "SSAMOSWAP_D"      -> BitPat("b01001????????????011?????0101111"),
   "SSAMOSWAP_W"      -> BitPat("b01001????????????010?????0101111"),
   "SSPOPCHK_X1"      -> BitPat("b11001101110000001100000001110011"),
   "SSPOPCHK_X5"      -> BitPat("b11001101110000101100000001110011"),
   "SSPUSH_X1"        -> BitPat("b11001110000100000100000001110011"),
   "SSPUSH_X5"        -> BitPat("b11001110010100000100000001110011"),
   "SSRDP"            -> BitPat("b11001101110000000100?????1110011"),
  )
  val VType = Map(
   "VAADD_VV"         -> BitPat("b001001???????????010?????1010111"),
   "VAADD_VX"         -> BitPat("b001001???????????110?????1010111"),
   "VAADDU_VV"        -> BitPat("b001000???????????010?????1010111"),
   "VAADDU_VX"        -> BitPat("b001000???????????110?????1010111"),
   "VADC_VIM"         -> BitPat("b0100000??????????011?????1010111"),
   "VADC_VVM"         -> BitPat("b0100000??????????000?????1010111"),
   "VADC_VXM"         -> BitPat("b0100000??????????100?????1010111"),
   "VADD_VI"          -> BitPat("b000000???????????011?????1010111"),
   "VADD_VV"          -> BitPat("b000000???????????000?????1010111"),
   "VADD_VX"          -> BitPat("b000000???????????100?????1010111"),
   "VAND_VI"          -> BitPat("b001001???????????011?????1010111"),
   "VAND_VV"          -> BitPat("b001001???????????000?????1010111"),
   "VAND_VX"          -> BitPat("b001001???????????100?????1010111"),
   "VASUB_VV"         -> BitPat("b001011???????????010?????1010111"),
   "VASUB_VX"         -> BitPat("b001011???????????110?????1010111"),
   "VASUBU_VV"        -> BitPat("b001010???????????010?????1010111"),
   "VASUBU_VX"        -> BitPat("b001010???????????110?????1010111"),
   "VCOMPRESS_VM"     -> BitPat("b0101111??????????010?????1010111"),
   "VCPOP_M"          -> BitPat("b010000??????10000010?????1010111"),
   "VDIV_VV"          -> BitPat("b100001???????????010?????1010111"),
   "VDIV_VX"          -> BitPat("b100001???????????110?????1010111"),
   "VDIVU_VV"         -> BitPat("b100000???????????010?????1010111"),
   "VDIVU_VX"         -> BitPat("b100000???????????110?????1010111"),
   "VFADD_VF"         -> BitPat("b000000???????????101?????1010111"),
   "VFADD_VV"         -> BitPat("b000000???????????001?????1010111"),
   "VFCLASS_V"        -> BitPat("b010011??????10000001?????1010111"),
   "VFCVT_F_X_V"      -> BitPat("b010010??????00011001?????1010111"),
   "VFCVT_F_XU_V"     -> BitPat("b010010??????00010001?????1010111"),
   "VFCVT_RTZ_X_F_V"  -> BitPat("b010010??????00111001?????1010111"),
   "VFCVT_RTZ_XU_F_V" -> BitPat("b010010??????00110001?????1010111"),
   "VFCVT_X_F_V"      -> BitPat("b010010??????00001001?????1010111"),
   "VFCVT_XU_F_V"     -> BitPat("b010010??????00000001?????1010111"),
   "VFDIV_VF"         -> BitPat("b100000???????????101?????1010111"),
   "VFDIV_VV"         -> BitPat("b100000???????????001?????1010111"),
   "VFIRST_M"         -> BitPat("b010000??????10001010?????1010111"),
   "VFMACC_VF"        -> BitPat("b101100???????????101?????1010111"),
   "VFMACC_VV"        -> BitPat("b101100???????????001?????1010111"),
   "VFMADD_VF"        -> BitPat("b101000???????????101?????1010111"),
   "VFMADD_VV"        -> BitPat("b101000???????????001?????1010111"),
   "VFMAX_VF"         -> BitPat("b000110???????????101?????1010111"),
   "VFMAX_VV"         -> BitPat("b000110???????????001?????1010111"),
   "VFMERGE_VFM"      -> BitPat("b0101110??????????101?????1010111"),
   "VFMIN_VF"         -> BitPat("b000100???????????101?????1010111"),
   "VFMIN_VV"         -> BitPat("b000100???????????001?????1010111"),
   "VFMSAC_VF"        -> BitPat("b101110???????????101?????1010111"),
   "VFMSAC_VV"        -> BitPat("b101110???????????001?????1010111"),
   "VFMSUB_VF"        -> BitPat("b101010???????????101?????1010111"),
   "VFMSUB_VV"        -> BitPat("b101010???????????001?????1010111"),
   "VFMUL_VF"         -> BitPat("b100100???????????101?????1010111"),
   "VFMUL_VV"         -> BitPat("b100100???????????001?????1010111"),
   "VFMV_F_S"         -> BitPat("b0100001?????00000001?????1010111"),
   "VFMV_S_F"         -> BitPat("b010000100000?????101?????1010111"),
   "VFMV_V_F"         -> BitPat("b010111100000?????101?????1010111"),
   "VFNCVT_F_F_W"     -> BitPat("b010010??????10100001?????1010111"),
   "VFNCVT_F_X_W"     -> BitPat("b010010??????10011001?????1010111"),
   "VFNCVT_F_XU_W"    -> BitPat("b010010??????10010001?????1010111"),
   "VFNCVT_ROD_F_F_W" -> BitPat("b010010??????10101001?????1010111"),
   "VFNCVT_RTZ_X_F_W" -> BitPat("b010010??????10111001?????1010111"),
   "VFNCVT_RTZ_XU_F_W" -> BitPat("b010010??????10110001?????1010111"),
   "VFNCVT_X_F_W"     -> BitPat("b010010??????10001001?????1010111"),
   "VFNCVT_XU_F_W"    -> BitPat("b010010??????10000001?????1010111"),
   "VFNMACC_VF"       -> BitPat("b101101???????????101?????1010111"),
   "VFNMACC_VV"       -> BitPat("b101101???????????001?????1010111"),
   "VFNMADD_VF"       -> BitPat("b101001???????????101?????1010111"),
   "VFNMADD_VV"       -> BitPat("b101001???????????001?????1010111"),
   "VFNMSAC_VF"       -> BitPat("b101111???????????101?????1010111"),
   "VFNMSAC_VV"       -> BitPat("b101111???????????001?????1010111"),
   "VFNMSUB_VF"       -> BitPat("b101011???????????101?????1010111"),
   "VFNMSUB_VV"       -> BitPat("b101011???????????001?????1010111"),
   "VFRDIV_VF"        -> BitPat("b100001???????????101?????1010111"),
   "VFREC7_V"         -> BitPat("b010011??????00101001?????1010111"),
   "VFREDMAX_VS"      -> BitPat("b000111???????????001?????1010111"),
   "VFREDMIN_VS"      -> BitPat("b000101???????????001?????1010111"),
   "VFREDOSUM_VS"     -> BitPat("b000011???????????001?????1010111"),
   "VFREDUSUM_VS"     -> BitPat("b000001???????????001?????1010111"),
   "VFRSQRT7_V"       -> BitPat("b010011??????00100001?????1010111"),
   "VFRSUB_VF"        -> BitPat("b100111???????????101?????1010111"),
   "VFSGNJ_VF"        -> BitPat("b001000???????????101?????1010111"),
   "VFSGNJ_VV"        -> BitPat("b001000???????????001?????1010111"),
   "VFSGNJN_VF"       -> BitPat("b001001???????????101?????1010111"),
   "VFSGNJN_VV"       -> BitPat("b001001???????????001?????1010111"),
   "VFSGNJX_VF"       -> BitPat("b001010???????????101?????1010111"),
   "VFSGNJX_VV"       -> BitPat("b001010???????????001?????1010111"),
   "VFSLIDE1DOWN_VF"  -> BitPat("b001111???????????101?????1010111"),
   "VFSLIDE1UP_VF"    -> BitPat("b001110???????????101?????1010111"),
   "VFSQRT_V"         -> BitPat("b010011??????00000001?????1010111"),
   "VFSUB_VF"         -> BitPat("b000010???????????101?????1010111"),
   "VFSUB_VV"         -> BitPat("b000010???????????001?????1010111"),
   "VFWADD_VF"        -> BitPat("b110000???????????101?????1010111"),
   "VFWADD_VV"        -> BitPat("b110000???????????001?????1010111"),
   "VFWADD_WF"        -> BitPat("b110100???????????101?????1010111"),
   "VFWADD_WV"        -> BitPat("b110100???????????001?????1010111"),
   "VFWCVT_F_F_V"     -> BitPat("b010010??????01100001?????1010111"),
   "VFWCVT_F_X_V"     -> BitPat("b010010??????01011001?????1010111"),
   "VFWCVT_F_XU_V"    -> BitPat("b010010??????01010001?????1010111"),
   "VFWCVT_RTZ_X_F_V" -> BitPat("b010010??????01111001?????1010111"),
   "VFWCVT_RTZ_XU_F_V" -> BitPat("b010010??????01110001?????1010111"),
   "VFWCVT_X_F_V"     -> BitPat("b010010??????01001001?????1010111"),
   "VFWCVT_XU_F_V"    -> BitPat("b010010??????01000001?????1010111"),
   "VFWMACC_VF"       -> BitPat("b111100???????????101?????1010111"),
   "VFWMACC_VV"       -> BitPat("b111100???????????001?????1010111"),
   "VFWMSAC_VF"       -> BitPat("b111110???????????101?????1010111"),
   "VFWMSAC_VV"       -> BitPat("b111110???????????001?????1010111"),
   "VFWMUL_VF"        -> BitPat("b111000???????????101?????1010111"),
   "VFWMUL_VV"        -> BitPat("b111000???????????001?????1010111"),
   "VFWNMACC_VF"      -> BitPat("b111101???????????101?????1010111"),
   "VFWNMACC_VV"      -> BitPat("b111101???????????001?????1010111"),
   "VFWNMSAC_VF"      -> BitPat("b111111???????????101?????1010111"),
   "VFWNMSAC_VV"      -> BitPat("b111111???????????001?????1010111"),
   "VFWREDOSUM_VS"    -> BitPat("b110011???????????001?????1010111"),
   "VFWREDUSUM_VS"    -> BitPat("b110001???????????001?????1010111"),
   "VFWSUB_VF"        -> BitPat("b110010???????????101?????1010111"),
   "VFWSUB_VV"        -> BitPat("b110010???????????001?????1010111"),
   "VFWSUB_WF"        -> BitPat("b110110???????????101?????1010111"),
   "VFWSUB_WV"        -> BitPat("b110110???????????001?????1010111"),
   "VID_V"            -> BitPat("b010100?0000010001010?????1010111"),
   "VIOTA_M"          -> BitPat("b010100??????10000010?????1010111"),
   "VL1RE16_V"        -> BitPat("b000000101000?????101?????0000111"),
   "VL1RE32_V"        -> BitPat("b000000101000?????110?????0000111"),
   "VL1RE64_V"        -> BitPat("b000000101000?????111?????0000111"),
   "VL1RE8_V"         -> BitPat("b000000101000?????000?????0000111"),
   "VL2RE16_V"        -> BitPat("b001000101000?????101?????0000111"),
   "VL2RE32_V"        -> BitPat("b001000101000?????110?????0000111"),
   "VL2RE64_V"        -> BitPat("b001000101000?????111?????0000111"),
   "VL2RE8_V"         -> BitPat("b001000101000?????000?????0000111"),
   "VL4RE16_V"        -> BitPat("b011000101000?????101?????0000111"),
   "VL4RE32_V"        -> BitPat("b011000101000?????110?????0000111"),
   "VL4RE64_V"        -> BitPat("b011000101000?????111?????0000111"),
   "VL4RE8_V"         -> BitPat("b011000101000?????000?????0000111"),
   "VL8RE16_V"        -> BitPat("b111000101000?????101?????0000111"),
   "VL8RE32_V"        -> BitPat("b111000101000?????110?????0000111"),
   "VL8RE64_V"        -> BitPat("b111000101000?????111?????0000111"),
   "VL8RE8_V"         -> BitPat("b111000101000?????000?????0000111"),
   "VLE16_V"          -> BitPat("b000000?00000?????101?????0000111"),
   "VLE16FF_V"        -> BitPat("b000000?10000?????101?????0000111"),
   "VLE32_V"          -> BitPat("b000000?00000?????110?????0000111"),
   "VLE32FF_V"        -> BitPat("b000000?10000?????110?????0000111"),
   "VLE64_V"          -> BitPat("b000000?00000?????111?????0000111"),
   "VLE64FF_V"        -> BitPat("b000000?10000?????111?????0000111"),
   "VLE8_V"           -> BitPat("b000000?00000?????000?????0000111"),
   "VLE8FF_V"         -> BitPat("b000000?10000?????000?????0000111"),
   "VLM_V"            -> BitPat("b000000101011?????000?????0000111"),
   "VLOXEI16_V"       -> BitPat("b000011???????????101?????0000111"),
   "VLOXEI32_V"       -> BitPat("b000011???????????110?????0000111"),
   "VLOXEI64_V"       -> BitPat("b000011???????????111?????0000111"),
   "VLOXEI8_V"        -> BitPat("b000011???????????000?????0000111"),
   "VLOXSEG2EI16_V"   -> BitPat("b001011???????????101?????0000111"),
   "VLOXSEG2EI32_V"   -> BitPat("b001011???????????110?????0000111"),
   "VLOXSEG2EI64_V"   -> BitPat("b001011???????????111?????0000111"),
   "VLOXSEG2EI8_V"    -> BitPat("b001011???????????000?????0000111"),
   "VLOXSEG3EI16_V"   -> BitPat("b010011???????????101?????0000111"),
   "VLOXSEG3EI32_V"   -> BitPat("b010011???????????110?????0000111"),
   "VLOXSEG3EI64_V"   -> BitPat("b010011???????????111?????0000111"),
   "VLOXSEG3EI8_V"    -> BitPat("b010011???????????000?????0000111"),
   "VLOXSEG4EI16_V"   -> BitPat("b011011???????????101?????0000111"),
   "VLOXSEG4EI32_V"   -> BitPat("b011011???????????110?????0000111"),
   "VLOXSEG4EI64_V"   -> BitPat("b011011???????????111?????0000111"),
   "VLOXSEG4EI8_V"    -> BitPat("b011011???????????000?????0000111"),
   "VLOXSEG5EI16_V"   -> BitPat("b100011???????????101?????0000111"),
   "VLOXSEG5EI32_V"   -> BitPat("b100011???????????110?????0000111"),
   "VLOXSEG5EI64_V"   -> BitPat("b100011???????????111?????0000111"),
   "VLOXSEG5EI8_V"    -> BitPat("b100011???????????000?????0000111"),
   "VLOXSEG6EI16_V"   -> BitPat("b101011???????????101?????0000111"),
   "VLOXSEG6EI32_V"   -> BitPat("b101011???????????110?????0000111"),
   "VLOXSEG6EI64_V"   -> BitPat("b101011???????????111?????0000111"),
   "VLOXSEG6EI8_V"    -> BitPat("b101011???????????000?????0000111"),
   "VLOXSEG7EI16_V"   -> BitPat("b110011???????????101?????0000111"),
   "VLOXSEG7EI32_V"   -> BitPat("b110011???????????110?????0000111"),
   "VLOXSEG7EI64_V"   -> BitPat("b110011???????????111?????0000111"),
   "VLOXSEG7EI8_V"    -> BitPat("b110011???????????000?????0000111"),
   "VLOXSEG8EI16_V"   -> BitPat("b111011???????????101?????0000111"),
   "VLOXSEG8EI32_V"   -> BitPat("b111011???????????110?????0000111"),
   "VLOXSEG8EI64_V"   -> BitPat("b111011???????????111?????0000111"),
   "VLOXSEG8EI8_V"    -> BitPat("b111011???????????000?????0000111"),
   "VLSE16_V"         -> BitPat("b000010???????????101?????0000111"),
   "VLSE32_V"         -> BitPat("b000010???????????110?????0000111"),
   "VLSE64_V"         -> BitPat("b000010???????????111?????0000111"),
   "VLSE8_V"          -> BitPat("b000010???????????000?????0000111"),
   "VLSEG2E16_V"      -> BitPat("b001000?00000?????101?????0000111"),
   "VLSEG2E16FF_V"    -> BitPat("b001000?10000?????101?????0000111"),
   "VLSEG2E32_V"      -> BitPat("b001000?00000?????110?????0000111"),
   "VLSEG2E32FF_V"    -> BitPat("b001000?10000?????110?????0000111"),
   "VLSEG2E64_V"      -> BitPat("b001000?00000?????111?????0000111"),
   "VLSEG2E64FF_V"    -> BitPat("b001000?10000?????111?????0000111"),
   "VLSEG2E8_V"       -> BitPat("b001000?00000?????000?????0000111"),
   "VLSEG2E8FF_V"     -> BitPat("b001000?10000?????000?????0000111"),
   "VLSEG3E16_V"      -> BitPat("b010000?00000?????101?????0000111"),
   "VLSEG3E16FF_V"    -> BitPat("b010000?10000?????101?????0000111"),
   "VLSEG3E32_V"      -> BitPat("b010000?00000?????110?????0000111"),
   "VLSEG3E32FF_V"    -> BitPat("b010000?10000?????110?????0000111"),
   "VLSEG3E64_V"      -> BitPat("b010000?00000?????111?????0000111"),
   "VLSEG3E64FF_V"    -> BitPat("b010000?10000?????111?????0000111"),
   "VLSEG3E8_V"       -> BitPat("b010000?00000?????000?????0000111"),
   "VLSEG3E8FF_V"     -> BitPat("b010000?10000?????000?????0000111"),
   "VLSEG4E16_V"      -> BitPat("b011000?00000?????101?????0000111"),
   "VLSEG4E16FF_V"    -> BitPat("b011000?10000?????101?????0000111"),
   "VLSEG4E32_V"      -> BitPat("b011000?00000?????110?????0000111"),
   "VLSEG4E32FF_V"    -> BitPat("b011000?10000?????110?????0000111"),
   "VLSEG4E64_V"      -> BitPat("b011000?00000?????111?????0000111"),
   "VLSEG4E64FF_V"    -> BitPat("b011000?10000?????111?????0000111"),
   "VLSEG4E8_V"       -> BitPat("b011000?00000?????000?????0000111"),
   "VLSEG4E8FF_V"     -> BitPat("b011000?10000?????000?????0000111"),
   "VLSEG5E16_V"      -> BitPat("b100000?00000?????101?????0000111"),
   "VLSEG5E16FF_V"    -> BitPat("b100000?10000?????101?????0000111"),
   "VLSEG5E32_V"      -> BitPat("b100000?00000?????110?????0000111"),
   "VLSEG5E32FF_V"    -> BitPat("b100000?10000?????110?????0000111"),
   "VLSEG5E64_V"      -> BitPat("b100000?00000?????111?????0000111"),
   "VLSEG5E64FF_V"    -> BitPat("b100000?10000?????111?????0000111"),
   "VLSEG5E8_V"       -> BitPat("b100000?00000?????000?????0000111"),
   "VLSEG5E8FF_V"     -> BitPat("b100000?10000?????000?????0000111"),
   "VLSEG6E16_V"      -> BitPat("b101000?00000?????101?????0000111"),
   "VLSEG6E16FF_V"    -> BitPat("b101000?10000?????101?????0000111"),
   "VLSEG6E32_V"      -> BitPat("b101000?00000?????110?????0000111"),
   "VLSEG6E32FF_V"    -> BitPat("b101000?10000?????110?????0000111"),
   "VLSEG6E64_V"      -> BitPat("b101000?00000?????111?????0000111"),
   "VLSEG6E64FF_V"    -> BitPat("b101000?10000?????111?????0000111"),
   "VLSEG6E8_V"       -> BitPat("b101000?00000?????000?????0000111"),
   "VLSEG6E8FF_V"     -> BitPat("b101000?10000?????000?????0000111"),
   "VLSEG7E16_V"      -> BitPat("b110000?00000?????101?????0000111"),
   "VLSEG7E16FF_V"    -> BitPat("b110000?10000?????101?????0000111"),
   "VLSEG7E32_V"      -> BitPat("b110000?00000?????110?????0000111"),
   "VLSEG7E32FF_V"    -> BitPat("b110000?10000?????110?????0000111"),
   "VLSEG7E64_V"      -> BitPat("b110000?00000?????111?????0000111"),
   "VLSEG7E64FF_V"    -> BitPat("b110000?10000?????111?????0000111"),
   "VLSEG7E8_V"       -> BitPat("b110000?00000?????000?????0000111"),
   "VLSEG7E8FF_V"     -> BitPat("b110000?10000?????000?????0000111"),
   "VLSEG8E16_V"      -> BitPat("b111000?00000?????101?????0000111"),
   "VLSEG8E16FF_V"    -> BitPat("b111000?10000?????101?????0000111"),
   "VLSEG8E32_V"      -> BitPat("b111000?00000?????110?????0000111"),
   "VLSEG8E32FF_V"    -> BitPat("b111000?10000?????110?????0000111"),
   "VLSEG8E64_V"      -> BitPat("b111000?00000?????111?????0000111"),
   "VLSEG8E64FF_V"    -> BitPat("b111000?10000?????111?????0000111"),
   "VLSEG8E8_V"       -> BitPat("b111000?00000?????000?????0000111"),
   "VLSEG8E8FF_V"     -> BitPat("b111000?10000?????000?????0000111"),
   "VLSSEG2E16_V"     -> BitPat("b001010???????????101?????0000111"),
   "VLSSEG2E32_V"     -> BitPat("b001010???????????110?????0000111"),
   "VLSSEG2E64_V"     -> BitPat("b001010???????????111?????0000111"),
   "VLSSEG2E8_V"      -> BitPat("b001010???????????000?????0000111"),
   "VLSSEG3E16_V"     -> BitPat("b010010???????????101?????0000111"),
   "VLSSEG3E32_V"     -> BitPat("b010010???????????110?????0000111"),
   "VLSSEG3E64_V"     -> BitPat("b010010???????????111?????0000111"),
   "VLSSEG3E8_V"      -> BitPat("b010010???????????000?????0000111"),
   "VLSSEG4E16_V"     -> BitPat("b011010???????????101?????0000111"),
   "VLSSEG4E32_V"     -> BitPat("b011010???????????110?????0000111"),
   "VLSSEG4E64_V"     -> BitPat("b011010???????????111?????0000111"),
   "VLSSEG4E8_V"      -> BitPat("b011010???????????000?????0000111"),
   "VLSSEG5E16_V"     -> BitPat("b100010???????????101?????0000111"),
   "VLSSEG5E32_V"     -> BitPat("b100010???????????110?????0000111"),
   "VLSSEG5E64_V"     -> BitPat("b100010???????????111?????0000111"),
   "VLSSEG5E8_V"      -> BitPat("b100010???????????000?????0000111"),
   "VLSSEG6E16_V"     -> BitPat("b101010???????????101?????0000111"),
   "VLSSEG6E32_V"     -> BitPat("b101010???????????110?????0000111"),
   "VLSSEG6E64_V"     -> BitPat("b101010???????????111?????0000111"),
   "VLSSEG6E8_V"      -> BitPat("b101010???????????000?????0000111"),
   "VLSSEG7E16_V"     -> BitPat("b110010???????????101?????0000111"),
   "VLSSEG7E32_V"     -> BitPat("b110010???????????110?????0000111"),
   "VLSSEG7E64_V"     -> BitPat("b110010???????????111?????0000111"),
   "VLSSEG7E8_V"      -> BitPat("b110010???????????000?????0000111"),
   "VLSSEG8E16_V"     -> BitPat("b111010???????????101?????0000111"),
   "VLSSEG8E32_V"     -> BitPat("b111010???????????110?????0000111"),
   "VLSSEG8E64_V"     -> BitPat("b111010???????????111?????0000111"),
   "VLSSEG8E8_V"      -> BitPat("b111010???????????000?????0000111"),
   "VLUXEI16_V"       -> BitPat("b000001???????????101?????0000111"),
   "VLUXEI32_V"       -> BitPat("b000001???????????110?????0000111"),
   "VLUXEI64_V"       -> BitPat("b000001???????????111?????0000111"),
   "VLUXEI8_V"        -> BitPat("b000001???????????000?????0000111"),
   "VLUXSEG2EI16_V"   -> BitPat("b001001???????????101?????0000111"),
   "VLUXSEG2EI32_V"   -> BitPat("b001001???????????110?????0000111"),
   "VLUXSEG2EI64_V"   -> BitPat("b001001???????????111?????0000111"),
   "VLUXSEG2EI8_V"    -> BitPat("b001001???????????000?????0000111"),
   "VLUXSEG3EI16_V"   -> BitPat("b010001???????????101?????0000111"),
   "VLUXSEG3EI32_V"   -> BitPat("b010001???????????110?????0000111"),
   "VLUXSEG3EI64_V"   -> BitPat("b010001???????????111?????0000111"),
   "VLUXSEG3EI8_V"    -> BitPat("b010001???????????000?????0000111"),
   "VLUXSEG4EI16_V"   -> BitPat("b011001???????????101?????0000111"),
   "VLUXSEG4EI32_V"   -> BitPat("b011001???????????110?????0000111"),
   "VLUXSEG4EI64_V"   -> BitPat("b011001???????????111?????0000111"),
   "VLUXSEG4EI8_V"    -> BitPat("b011001???????????000?????0000111"),
   "VLUXSEG5EI16_V"   -> BitPat("b100001???????????101?????0000111"),
   "VLUXSEG5EI32_V"   -> BitPat("b100001???????????110?????0000111"),
   "VLUXSEG5EI64_V"   -> BitPat("b100001???????????111?????0000111"),
   "VLUXSEG5EI8_V"    -> BitPat("b100001???????????000?????0000111"),
   "VLUXSEG6EI16_V"   -> BitPat("b101001???????????101?????0000111"),
   "VLUXSEG6EI32_V"   -> BitPat("b101001???????????110?????0000111"),
   "VLUXSEG6EI64_V"   -> BitPat("b101001???????????111?????0000111"),
   "VLUXSEG6EI8_V"    -> BitPat("b101001???????????000?????0000111"),
   "VLUXSEG7EI16_V"   -> BitPat("b110001???????????101?????0000111"),
   "VLUXSEG7EI32_V"   -> BitPat("b110001???????????110?????0000111"),
   "VLUXSEG7EI64_V"   -> BitPat("b110001???????????111?????0000111"),
   "VLUXSEG7EI8_V"    -> BitPat("b110001???????????000?????0000111"),
   "VLUXSEG8EI16_V"   -> BitPat("b111001???????????101?????0000111"),
   "VLUXSEG8EI32_V"   -> BitPat("b111001???????????110?????0000111"),
   "VLUXSEG8EI64_V"   -> BitPat("b111001???????????111?????0000111"),
   "VLUXSEG8EI8_V"    -> BitPat("b111001???????????000?????0000111"),
   "VMACC_VV"         -> BitPat("b101101???????????010?????1010111"),
   "VMACC_VX"         -> BitPat("b101101???????????110?????1010111"),
   "VMADC_VI"         -> BitPat("b0100011??????????011?????1010111"),
   "VMADC_VIM"        -> BitPat("b0100010??????????011?????1010111"),
   "VMADC_VV"         -> BitPat("b0100011??????????000?????1010111"),
   "VMADC_VVM"        -> BitPat("b0100010??????????000?????1010111"),
   "VMADC_VX"         -> BitPat("b0100011??????????100?????1010111"),
   "VMADC_VXM"        -> BitPat("b0100010??????????100?????1010111"),
   "VMADD_VV"         -> BitPat("b101001???????????010?????1010111"),
   "VMADD_VX"         -> BitPat("b101001???????????110?????1010111"),
   "VMAND_MM"         -> BitPat("b0110011??????????010?????1010111"),
   "VMANDN_MM"        -> BitPat("b0110001??????????010?????1010111"),
   "VMAX_VV"          -> BitPat("b000111???????????000?????1010111"),
   "VMAX_VX"          -> BitPat("b000111???????????100?????1010111"),
   "VMAXU_VV"         -> BitPat("b000110???????????000?????1010111"),
   "VMAXU_VX"         -> BitPat("b000110???????????100?????1010111"),
   "VMERGE_VIM"       -> BitPat("b0101110??????????011?????1010111"),
   "VMERGE_VVM"       -> BitPat("b0101110??????????000?????1010111"),
   "VMERGE_VXM"       -> BitPat("b0101110??????????100?????1010111"),
   "VMFEQ_VF"         -> BitPat("b011000???????????101?????1010111"),
   "VMFEQ_VV"         -> BitPat("b011000???????????001?????1010111"),
   "VMFGE_VF"         -> BitPat("b011111???????????101?????1010111"),
   "VMFGT_VF"         -> BitPat("b011101???????????101?????1010111"),
   "VMFLE_VF"         -> BitPat("b011001???????????101?????1010111"),
   "VMFLE_VV"         -> BitPat("b011001???????????001?????1010111"),
   "VMFLT_VF"         -> BitPat("b011011???????????101?????1010111"),
   "VMFLT_VV"         -> BitPat("b011011???????????001?????1010111"),
   "VMFNE_VF"         -> BitPat("b011100???????????101?????1010111"),
   "VMFNE_VV"         -> BitPat("b011100???????????001?????1010111"),
   "VMIN_VV"          -> BitPat("b000101???????????000?????1010111"),
   "VMIN_VX"          -> BitPat("b000101???????????100?????1010111"),
   "VMINU_VV"         -> BitPat("b000100???????????000?????1010111"),
   "VMINU_VX"         -> BitPat("b000100???????????100?????1010111"),
   "VMNAND_MM"        -> BitPat("b0111011??????????010?????1010111"),
   "VMNOR_MM"         -> BitPat("b0111101??????????010?????1010111"),
   "VMOR_MM"          -> BitPat("b0110101??????????010?????1010111"),
   "VMORN_MM"         -> BitPat("b0111001??????????010?????1010111"),
   "VMSBC_VV"         -> BitPat("b0100111??????????000?????1010111"),
   "VMSBC_VVM"        -> BitPat("b0100110??????????000?????1010111"),
   "VMSBC_VX"         -> BitPat("b0100111??????????100?????1010111"),
   "VMSBC_VXM"        -> BitPat("b0100110??????????100?????1010111"),
   "VMSBF_M"          -> BitPat("b010100??????00001010?????1010111"),
   "VMSEQ_VI"         -> BitPat("b011000???????????011?????1010111"),
   "VMSEQ_VV"         -> BitPat("b011000???????????000?????1010111"),
   "VMSEQ_VX"         -> BitPat("b011000???????????100?????1010111"),
   "VMSGT_VI"         -> BitPat("b011111???????????011?????1010111"),
   "VMSGT_VX"         -> BitPat("b011111???????????100?????1010111"),
   "VMSGTU_VI"        -> BitPat("b011110???????????011?????1010111"),
   "VMSGTU_VX"        -> BitPat("b011110???????????100?????1010111"),
   "VMSIF_M"          -> BitPat("b010100??????00011010?????1010111"),
   "VMSLE_VI"         -> BitPat("b011101???????????011?????1010111"),
   "VMSLE_VV"         -> BitPat("b011101???????????000?????1010111"),
   "VMSLE_VX"         -> BitPat("b011101???????????100?????1010111"),
   "VMSLEU_VI"        -> BitPat("b011100???????????011?????1010111"),
   "VMSLEU_VV"        -> BitPat("b011100???????????000?????1010111"),
   "VMSLEU_VX"        -> BitPat("b011100???????????100?????1010111"),
   "VMSLT_VV"         -> BitPat("b011011???????????000?????1010111"),
   "VMSLT_VX"         -> BitPat("b011011???????????100?????1010111"),
   "VMSLTU_VV"        -> BitPat("b011010???????????000?????1010111"),
   "VMSLTU_VX"        -> BitPat("b011010???????????100?????1010111"),
   "VMSNE_VI"         -> BitPat("b011001???????????011?????1010111"),
   "VMSNE_VV"         -> BitPat("b011001???????????000?????1010111"),
   "VMSNE_VX"         -> BitPat("b011001???????????100?????1010111"),
   "VMSOF_M"          -> BitPat("b010100??????00010010?????1010111"),
   "VMUL_VV"          -> BitPat("b100101???????????010?????1010111"),
   "VMUL_VX"          -> BitPat("b100101???????????110?????1010111"),
   "VMULH_VV"         -> BitPat("b100111???????????010?????1010111"),
   "VMULH_VX"         -> BitPat("b100111???????????110?????1010111"),
   "VMULHSU_VV"       -> BitPat("b100110???????????010?????1010111"),
   "VMULHSU_VX"       -> BitPat("b100110???????????110?????1010111"),
   "VMULHU_VV"        -> BitPat("b100100???????????010?????1010111"),
   "VMULHU_VX"        -> BitPat("b100100???????????110?????1010111"),
   "VMV1R_V"          -> BitPat("b1001111?????00000011?????1010111"),
   "VMV2R_V"          -> BitPat("b1001111?????00001011?????1010111"),
   "VMV4R_V"          -> BitPat("b1001111?????00011011?????1010111"),
   "VMV8R_V"          -> BitPat("b1001111?????00111011?????1010111"),
   "VMV_S_X"          -> BitPat("b010000100000?????110?????1010111"),
   "VMV_V_I"          -> BitPat("b010111100000?????011?????1010111"),
   "VMV_V_V"          -> BitPat("b010111100000?????000?????1010111"),
   "VMV_V_X"          -> BitPat("b010111100000?????100?????1010111"),
   "VMV_X_S"          -> BitPat("b0100001?????00000010?????1010111"),
   "VMXNOR_MM"        -> BitPat("b0111111??????????010?????1010111"),
   "VMXOR_MM"         -> BitPat("b0110111??????????010?????1010111"),
   "VNCLIP_WI"        -> BitPat("b101111???????????011?????1010111"),
   "VNCLIP_WV"        -> BitPat("b101111???????????000?????1010111"),
   "VNCLIP_WX"        -> BitPat("b101111???????????100?????1010111"),
   "VNCLIPU_WI"       -> BitPat("b101110???????????011?????1010111"),
   "VNCLIPU_WV"       -> BitPat("b101110???????????000?????1010111"),
   "VNCLIPU_WX"       -> BitPat("b101110???????????100?????1010111"),
   "VNMSAC_VV"        -> BitPat("b101111???????????010?????1010111"),
   "VNMSAC_VX"        -> BitPat("b101111???????????110?????1010111"),
   "VNMSUB_VV"        -> BitPat("b101011???????????010?????1010111"),
   "VNMSUB_VX"        -> BitPat("b101011???????????110?????1010111"),
   "VNSRA_WI"         -> BitPat("b101101???????????011?????1010111"),
   "VNSRA_WV"         -> BitPat("b101101???????????000?????1010111"),
   "VNSRA_WX"         -> BitPat("b101101???????????100?????1010111"),
   "VNSRL_WI"         -> BitPat("b101100???????????011?????1010111"),
   "VNSRL_WV"         -> BitPat("b101100???????????000?????1010111"),
   "VNSRL_WX"         -> BitPat("b101100???????????100?????1010111"),
   "VOR_VI"           -> BitPat("b001010???????????011?????1010111"),
   "VOR_VV"           -> BitPat("b001010???????????000?????1010111"),
   "VOR_VX"           -> BitPat("b001010???????????100?????1010111"),
   "VREDAND_VS"       -> BitPat("b000001???????????010?????1010111"),
   "VREDMAX_VS"       -> BitPat("b000111???????????010?????1010111"),
   "VREDMAXU_VS"      -> BitPat("b000110???????????010?????1010111"),
   "VREDMIN_VS"       -> BitPat("b000101???????????010?????1010111"),
   "VREDMINU_VS"      -> BitPat("b000100???????????010?????1010111"),
   "VREDOR_VS"        -> BitPat("b000010???????????010?????1010111"),
   "VREDSUM_VS"       -> BitPat("b000000???????????010?????1010111"),
   "VREDXOR_VS"       -> BitPat("b000011???????????010?????1010111"),
   "VREM_VV"          -> BitPat("b100011???????????010?????1010111"),
   "VREM_VX"          -> BitPat("b100011???????????110?????1010111"),
   "VREMU_VV"         -> BitPat("b100010???????????010?????1010111"),
   "VREMU_VX"         -> BitPat("b100010???????????110?????1010111"),
   "VRGATHER_VI"      -> BitPat("b001100???????????011?????1010111"),
   "VRGATHER_VV"      -> BitPat("b001100???????????000?????1010111"),
   "VRGATHER_VX"      -> BitPat("b001100???????????100?????1010111"),
   "VRGATHEREI16_VV"  -> BitPat("b001110???????????000?????1010111"),
   "VRSUB_VI"         -> BitPat("b000011???????????011?????1010111"),
   "VRSUB_VX"         -> BitPat("b000011???????????100?????1010111"),
   "VS1R_V"           -> BitPat("b000000101000?????000?????0100111"),
   "VS2R_V"           -> BitPat("b001000101000?????000?????0100111"),
   "VS4R_V"           -> BitPat("b011000101000?????000?????0100111"),
   "VS8R_V"           -> BitPat("b111000101000?????000?????0100111"),
   "VSADD_VI"         -> BitPat("b100001???????????011?????1010111"),
   "VSADD_VV"         -> BitPat("b100001???????????000?????1010111"),
   "VSADD_VX"         -> BitPat("b100001???????????100?????1010111"),
   "VSADDU_VI"        -> BitPat("b100000???????????011?????1010111"),
   "VSADDU_VV"        -> BitPat("b100000???????????000?????1010111"),
   "VSADDU_VX"        -> BitPat("b100000???????????100?????1010111"),
   "VSBC_VVM"         -> BitPat("b0100100??????????000?????1010111"),
   "VSBC_VXM"         -> BitPat("b0100100??????????100?????1010111"),
   "VSE16_V"          -> BitPat("b000000?00000?????101?????0100111"),
   "VSE32_V"          -> BitPat("b000000?00000?????110?????0100111"),
   "VSE64_V"          -> BitPat("b000000?00000?????111?????0100111"),
   "VSE8_V"           -> BitPat("b000000?00000?????000?????0100111"),
   "VSETIVLI"         -> BitPat("b11???????????????111?????1010111"),
   "VSETVL"           -> BitPat("b1000000??????????111?????1010111"),
   "VSETVLI"          -> BitPat("b0????????????????111?????1010111"),
   "VSEXT_VF2"        -> BitPat("b010010??????00111010?????1010111"),
   "VSEXT_VF4"        -> BitPat("b010010??????00101010?????1010111"),
   "VSEXT_VF8"        -> BitPat("b010010??????00011010?????1010111"),
   "VSLIDE1DOWN_VX"   -> BitPat("b001111???????????110?????1010111"),
   "VSLIDE1UP_VX"     -> BitPat("b001110???????????110?????1010111"),
   "VSLIDEDOWN_VI"    -> BitPat("b001111???????????011?????1010111"),
   "VSLIDEDOWN_VX"    -> BitPat("b001111???????????100?????1010111"),
   "VSLIDEUP_VI"      -> BitPat("b001110???????????011?????1010111"),
   "VSLIDEUP_VX"      -> BitPat("b001110???????????100?????1010111"),
   "VSLL_VI"          -> BitPat("b100101???????????011?????1010111"),
   "VSLL_VV"          -> BitPat("b100101???????????000?????1010111"),
   "VSLL_VX"          -> BitPat("b100101???????????100?????1010111"),
   "VSM_V"            -> BitPat("b000000101011?????000?????0100111"),
   "VSMUL_VV"         -> BitPat("b100111???????????000?????1010111"),
   "VSMUL_VX"         -> BitPat("b100111???????????100?????1010111"),
   "VSOXEI16_V"       -> BitPat("b000011???????????101?????0100111"),
   "VSOXEI32_V"       -> BitPat("b000011???????????110?????0100111"),
   "VSOXEI64_V"       -> BitPat("b000011???????????111?????0100111"),
   "VSOXEI8_V"        -> BitPat("b000011???????????000?????0100111"),
   "VSOXSEG2EI16_V"   -> BitPat("b001011???????????101?????0100111"),
   "VSOXSEG2EI32_V"   -> BitPat("b001011???????????110?????0100111"),
   "VSOXSEG2EI64_V"   -> BitPat("b001011???????????111?????0100111"),
   "VSOXSEG2EI8_V"    -> BitPat("b001011???????????000?????0100111"),
   "VSOXSEG3EI16_V"   -> BitPat("b010011???????????101?????0100111"),
   "VSOXSEG3EI32_V"   -> BitPat("b010011???????????110?????0100111"),
   "VSOXSEG3EI64_V"   -> BitPat("b010011???????????111?????0100111"),
   "VSOXSEG3EI8_V"    -> BitPat("b010011???????????000?????0100111"),
   "VSOXSEG4EI16_V"   -> BitPat("b011011???????????101?????0100111"),
   "VSOXSEG4EI32_V"   -> BitPat("b011011???????????110?????0100111"),
   "VSOXSEG4EI64_V"   -> BitPat("b011011???????????111?????0100111"),
   "VSOXSEG4EI8_V"    -> BitPat("b011011???????????000?????0100111"),
   "VSOXSEG5EI16_V"   -> BitPat("b100011???????????101?????0100111"),
   "VSOXSEG5EI32_V"   -> BitPat("b100011???????????110?????0100111"),
   "VSOXSEG5EI64_V"   -> BitPat("b100011???????????111?????0100111"),
   "VSOXSEG5EI8_V"    -> BitPat("b100011???????????000?????0100111"),
   "VSOXSEG6EI16_V"   -> BitPat("b101011???????????101?????0100111"),
   "VSOXSEG6EI32_V"   -> BitPat("b101011???????????110?????0100111"),
   "VSOXSEG6EI64_V"   -> BitPat("b101011???????????111?????0100111"),
   "VSOXSEG6EI8_V"    -> BitPat("b101011???????????000?????0100111"),
   "VSOXSEG7EI16_V"   -> BitPat("b110011???????????101?????0100111"),
   "VSOXSEG7EI32_V"   -> BitPat("b110011???????????110?????0100111"),
   "VSOXSEG7EI64_V"   -> BitPat("b110011???????????111?????0100111"),
   "VSOXSEG7EI8_V"    -> BitPat("b110011???????????000?????0100111"),
   "VSOXSEG8EI16_V"   -> BitPat("b111011???????????101?????0100111"),
   "VSOXSEG8EI32_V"   -> BitPat("b111011???????????110?????0100111"),
   "VSOXSEG8EI64_V"   -> BitPat("b111011???????????111?????0100111"),
   "VSOXSEG8EI8_V"    -> BitPat("b111011???????????000?????0100111"),
   "VSRA_VI"          -> BitPat("b101001???????????011?????1010111"),
   "VSRA_VV"          -> BitPat("b101001???????????000?????1010111"),
   "VSRA_VX"          -> BitPat("b101001???????????100?????1010111"),
   "VSRL_VI"          -> BitPat("b101000???????????011?????1010111"),
   "VSRL_VV"          -> BitPat("b101000???????????000?????1010111"),
   "VSRL_VX"          -> BitPat("b101000???????????100?????1010111"),
   "VSSE16_V"         -> BitPat("b000010???????????101?????0100111"),
   "VSSE32_V"         -> BitPat("b000010???????????110?????0100111"),
   "VSSE64_V"         -> BitPat("b000010???????????111?????0100111"),
   "VSSE8_V"          -> BitPat("b000010???????????000?????0100111"),
   "VSSEG2E16_V"      -> BitPat("b001000?00000?????101?????0100111"),
   "VSSEG2E32_V"      -> BitPat("b001000?00000?????110?????0100111"),
   "VSSEG2E64_V"      -> BitPat("b001000?00000?????111?????0100111"),
   "VSSEG2E8_V"       -> BitPat("b001000?00000?????000?????0100111"),
   "VSSEG3E16_V"      -> BitPat("b010000?00000?????101?????0100111"),
   "VSSEG3E32_V"      -> BitPat("b010000?00000?????110?????0100111"),
   "VSSEG3E64_V"      -> BitPat("b010000?00000?????111?????0100111"),
   "VSSEG3E8_V"       -> BitPat("b010000?00000?????000?????0100111"),
   "VSSEG4E16_V"      -> BitPat("b011000?00000?????101?????0100111"),
   "VSSEG4E32_V"      -> BitPat("b011000?00000?????110?????0100111"),
   "VSSEG4E64_V"      -> BitPat("b011000?00000?????111?????0100111"),
   "VSSEG4E8_V"       -> BitPat("b011000?00000?????000?????0100111"),
   "VSSEG5E16_V"      -> BitPat("b100000?00000?????101?????0100111"),
   "VSSEG5E32_V"      -> BitPat("b100000?00000?????110?????0100111"),
   "VSSEG5E64_V"      -> BitPat("b100000?00000?????111?????0100111"),
   "VSSEG5E8_V"       -> BitPat("b100000?00000?????000?????0100111"),
   "VSSEG6E16_V"      -> BitPat("b101000?00000?????101?????0100111"),
   "VSSEG6E32_V"      -> BitPat("b101000?00000?????110?????0100111"),
   "VSSEG6E64_V"      -> BitPat("b101000?00000?????111?????0100111"),
   "VSSEG6E8_V"       -> BitPat("b101000?00000?????000?????0100111"),
   "VSSEG7E16_V"      -> BitPat("b110000?00000?????101?????0100111"),
   "VSSEG7E32_V"      -> BitPat("b110000?00000?????110?????0100111"),
   "VSSEG7E64_V"      -> BitPat("b110000?00000?????111?????0100111"),
   "VSSEG7E8_V"       -> BitPat("b110000?00000?????000?????0100111"),
   "VSSEG8E16_V"      -> BitPat("b111000?00000?????101?????0100111"),
   "VSSEG8E32_V"      -> BitPat("b111000?00000?????110?????0100111"),
   "VSSEG8E64_V"      -> BitPat("b111000?00000?????111?????0100111"),
   "VSSEG8E8_V"       -> BitPat("b111000?00000?????000?????0100111"),
   "VSSRA_VI"         -> BitPat("b101011???????????011?????1010111"),
   "VSSRA_VV"         -> BitPat("b101011???????????000?????1010111"),
   "VSSRA_VX"         -> BitPat("b101011???????????100?????1010111"),
   "VSSRL_VI"         -> BitPat("b101010???????????011?????1010111"),
   "VSSRL_VV"         -> BitPat("b101010???????????000?????1010111"),
   "VSSRL_VX"         -> BitPat("b101010???????????100?????1010111"),
   "VSSSEG2E16_V"     -> BitPat("b001010???????????101?????0100111"),
   "VSSSEG2E32_V"     -> BitPat("b001010???????????110?????0100111"),
   "VSSSEG2E64_V"     -> BitPat("b001010???????????111?????0100111"),
   "VSSSEG2E8_V"      -> BitPat("b001010???????????000?????0100111"),
   "VSSSEG3E16_V"     -> BitPat("b010010???????????101?????0100111"),
   "VSSSEG3E32_V"     -> BitPat("b010010???????????110?????0100111"),
   "VSSSEG3E64_V"     -> BitPat("b010010???????????111?????0100111"),
   "VSSSEG3E8_V"      -> BitPat("b010010???????????000?????0100111"),
   "VSSSEG4E16_V"     -> BitPat("b011010???????????101?????0100111"),
   "VSSSEG4E32_V"     -> BitPat("b011010???????????110?????0100111"),
   "VSSSEG4E64_V"     -> BitPat("b011010???????????111?????0100111"),
   "VSSSEG4E8_V"      -> BitPat("b011010???????????000?????0100111"),
   "VSSSEG5E16_V"     -> BitPat("b100010???????????101?????0100111"),
   "VSSSEG5E32_V"     -> BitPat("b100010???????????110?????0100111"),
   "VSSSEG5E64_V"     -> BitPat("b100010???????????111?????0100111"),
   "VSSSEG5E8_V"      -> BitPat("b100010???????????000?????0100111"),
   "VSSSEG6E16_V"     -> BitPat("b101010???????????101?????0100111"),
   "VSSSEG6E32_V"     -> BitPat("b101010???????????110?????0100111"),
   "VSSSEG6E64_V"     -> BitPat("b101010???????????111?????0100111"),
   "VSSSEG6E8_V"      -> BitPat("b101010???????????000?????0100111"),
   "VSSSEG7E16_V"     -> BitPat("b110010???????????101?????0100111"),
   "VSSSEG7E32_V"     -> BitPat("b110010???????????110?????0100111"),
   "VSSSEG7E64_V"     -> BitPat("b110010???????????111?????0100111"),
   "VSSSEG7E8_V"      -> BitPat("b110010???????????000?????0100111"),
   "VSSSEG8E16_V"     -> BitPat("b111010???????????101?????0100111"),
   "VSSSEG8E32_V"     -> BitPat("b111010???????????110?????0100111"),
   "VSSSEG8E64_V"     -> BitPat("b111010???????????111?????0100111"),
   "VSSSEG8E8_V"      -> BitPat("b111010???????????000?????0100111"),
   "VSSUB_VV"         -> BitPat("b100011???????????000?????1010111"),
   "VSSUB_VX"         -> BitPat("b100011???????????100?????1010111"),
   "VSSUBU_VV"        -> BitPat("b100010???????????000?????1010111"),
   "VSSUBU_VX"        -> BitPat("b100010???????????100?????1010111"),
   "VSUB_VV"          -> BitPat("b000010???????????000?????1010111"),
   "VSUB_VX"          -> BitPat("b000010???????????100?????1010111"),
   "VSUXEI16_V"       -> BitPat("b000001???????????101?????0100111"),
   "VSUXEI32_V"       -> BitPat("b000001???????????110?????0100111"),
   "VSUXEI64_V"       -> BitPat("b000001???????????111?????0100111"),
   "VSUXEI8_V"        -> BitPat("b000001???????????000?????0100111"),
   "VSUXSEG2EI16_V"   -> BitPat("b001001???????????101?????0100111"),
   "VSUXSEG2EI32_V"   -> BitPat("b001001???????????110?????0100111"),
   "VSUXSEG2EI64_V"   -> BitPat("b001001???????????111?????0100111"),
   "VSUXSEG2EI8_V"    -> BitPat("b001001???????????000?????0100111"),
   "VSUXSEG3EI16_V"   -> BitPat("b010001???????????101?????0100111"),
   "VSUXSEG3EI32_V"   -> BitPat("b010001???????????110?????0100111"),
   "VSUXSEG3EI64_V"   -> BitPat("b010001???????????111?????0100111"),
   "VSUXSEG3EI8_V"    -> BitPat("b010001???????????000?????0100111"),
   "VSUXSEG4EI16_V"   -> BitPat("b011001???????????101?????0100111"),
   "VSUXSEG4EI32_V"   -> BitPat("b011001???????????110?????0100111"),
   "VSUXSEG4EI64_V"   -> BitPat("b011001???????????111?????0100111"),
   "VSUXSEG4EI8_V"    -> BitPat("b011001???????????000?????0100111"),
   "VSUXSEG5EI16_V"   -> BitPat("b100001???????????101?????0100111"),
   "VSUXSEG5EI32_V"   -> BitPat("b100001???????????110?????0100111"),
   "VSUXSEG5EI64_V"   -> BitPat("b100001???????????111?????0100111"),
   "VSUXSEG5EI8_V"    -> BitPat("b100001???????????000?????0100111"),
   "VSUXSEG6EI16_V"   -> BitPat("b101001???????????101?????0100111"),
   "VSUXSEG6EI32_V"   -> BitPat("b101001???????????110?????0100111"),
   "VSUXSEG6EI64_V"   -> BitPat("b101001???????????111?????0100111"),
   "VSUXSEG6EI8_V"    -> BitPat("b101001???????????000?????0100111"),
   "VSUXSEG7EI16_V"   -> BitPat("b110001???????????101?????0100111"),
   "VSUXSEG7EI32_V"   -> BitPat("b110001???????????110?????0100111"),
   "VSUXSEG7EI64_V"   -> BitPat("b110001???????????111?????0100111"),
   "VSUXSEG7EI8_V"    -> BitPat("b110001???????????000?????0100111"),
   "VSUXSEG8EI16_V"   -> BitPat("b111001???????????101?????0100111"),
   "VSUXSEG8EI32_V"   -> BitPat("b111001???????????110?????0100111"),
   "VSUXSEG8EI64_V"   -> BitPat("b111001???????????111?????0100111"),
   "VSUXSEG8EI8_V"    -> BitPat("b111001???????????000?????0100111"),
   "VWADD_VV"         -> BitPat("b110001???????????010?????1010111"),
   "VWADD_VX"         -> BitPat("b110001???????????110?????1010111"),
   "VWADD_WV"         -> BitPat("b110101???????????010?????1010111"),
   "VWADD_WX"         -> BitPat("b110101???????????110?????1010111"),
   "VWADDU_VV"        -> BitPat("b110000???????????010?????1010111"),
   "VWADDU_VX"        -> BitPat("b110000???????????110?????1010111"),
   "VWADDU_WV"        -> BitPat("b110100???????????010?????1010111"),
   "VWADDU_WX"        -> BitPat("b110100???????????110?????1010111"),
   "VWMACC_VV"        -> BitPat("b111101???????????010?????1010111"),
   "VWMACC_VX"        -> BitPat("b111101???????????110?????1010111"),
   "VWMACCSU_VV"      -> BitPat("b111111???????????010?????1010111"),
   "VWMACCSU_VX"      -> BitPat("b111111???????????110?????1010111"),
   "VWMACCU_VV"       -> BitPat("b111100???????????010?????1010111"),
   "VWMACCU_VX"       -> BitPat("b111100???????????110?????1010111"),
   "VWMACCUS_VX"      -> BitPat("b111110???????????110?????1010111"),
   "VWMUL_VV"         -> BitPat("b111011???????????010?????1010111"),
   "VWMUL_VX"         -> BitPat("b111011???????????110?????1010111"),
   "VWMULSU_VV"       -> BitPat("b111010???????????010?????1010111"),
   "VWMULSU_VX"       -> BitPat("b111010???????????110?????1010111"),
   "VWMULU_VV"        -> BitPat("b111000???????????010?????1010111"),
   "VWMULU_VX"        -> BitPat("b111000???????????110?????1010111"),
   "VWREDSUM_VS"      -> BitPat("b110001???????????000?????1010111"),
   "VWREDSUMU_VS"     -> BitPat("b110000???????????000?????1010111"),
   "VWSUB_VV"         -> BitPat("b110011???????????010?????1010111"),
   "VWSUB_VX"         -> BitPat("b110011???????????110?????1010111"),
   "VWSUB_WV"         -> BitPat("b110111???????????010?????1010111"),
   "VWSUB_WX"         -> BitPat("b110111???????????110?????1010111"),
   "VWSUBU_VV"        -> BitPat("b110010???????????010?????1010111"),
   "VWSUBU_VX"        -> BitPat("b110010???????????110?????1010111"),
   "VWSUBU_WV"        -> BitPat("b110110???????????010?????1010111"),
   "VWSUBU_WX"        -> BitPat("b110110???????????110?????1010111"),
   "VXOR_VI"          -> BitPat("b001011???????????011?????1010111"),
   "VXOR_VV"          -> BitPat("b001011???????????000?????1010111"),
   "VXOR_VX"          -> BitPat("b001011???????????100?????1010111"),
   "VZEXT_VF2"        -> BitPat("b010010??????00110010?????1010111"),
   "VZEXT_VF4"        -> BitPat("b010010??????00100010?????1010111"),
   "VZEXT_VF8"        -> BitPat("b010010??????00010010?????1010111"),
  )
  val ZICSRType = Map(
   "CSRRC"            -> BitPat("b?????????????????011?????1110011"),
   "CSRRCI"           -> BitPat("b?????????????????111?????1110011"),
   "CSRRS"            -> BitPat("b?????????????????010?????1110011"),
   "CSRRSI"           -> BitPat("b?????????????????110?????1110011"),
   "CSRRW"            -> BitPat("b?????????????????001?????1110011"),
   "CSRRWI"           -> BitPat("b?????????????????101?????1110011"),
  )
  val F64Type = Map(
   "FCVT_L_S"         -> BitPat("b110000000010?????????????1010011"),
   "FCVT_LU_S"        -> BitPat("b110000000011?????????????1010011"),
   "FCVT_S_L"         -> BitPat("b110100000010?????????????1010011"),
   "FCVT_S_LU"        -> BitPat("b110100000011?????????????1010011"),
  )
  val ZBKXType = Map(
   "XPERM4"           -> BitPat("b0010100??????????010?????0110011"),
   "XPERM8"           -> BitPat("b0010100??????????100?????0110011"),
  )
  val ZABHAType = Map(
   "AMOADD_B"         -> BitPat("b00000????????????000?????0101111"),
   "AMOADD_H"         -> BitPat("b00000????????????001?????0101111"),
   "AMOAND_B"         -> BitPat("b01100????????????000?????0101111"),
   "AMOAND_H"         -> BitPat("b01100????????????001?????0101111"),
   "AMOCAS_B"         -> BitPat("b00101????????????000?????0101111"),
   "AMOCAS_H"         -> BitPat("b00101????????????001?????0101111"),
   "AMOMAX_B"         -> BitPat("b10100????????????000?????0101111"),
   "AMOMAX_H"         -> BitPat("b10100????????????001?????0101111"),
   "AMOMAXU_B"        -> BitPat("b11100????????????000?????0101111"),
   "AMOMAXU_H"        -> BitPat("b11100????????????001?????0101111"),
   "AMOMIN_B"         -> BitPat("b10000????????????000?????0101111"),
   "AMOMIN_H"         -> BitPat("b10000????????????001?????0101111"),
   "AMOMINU_B"        -> BitPat("b11000????????????000?????0101111"),
   "AMOMINU_H"        -> BitPat("b11000????????????001?????0101111"),
   "AMOOR_B"          -> BitPat("b01000????????????000?????0101111"),
   "AMOOR_H"          -> BitPat("b01000????????????001?????0101111"),
   "AMOSWAP_B"        -> BitPat("b00001????????????000?????0101111"),
   "AMOSWAP_H"        -> BitPat("b00001????????????001?????0101111"),
   "AMOXOR_B"         -> BitPat("b00100????????????000?????0101111"),
   "AMOXOR_H"         -> BitPat("b00100????????????001?????0101111"),
  )
  val C32Type = Map(
   "C_JAL"            -> BitPat("b????????????????001???????????01"),
  )
  val ZCB64Type = Map(
   "C_ZEXT_W"         -> BitPat("b????????????????100111???1110001"),
  )
  val IType = Map(
   "ADD"              -> BitPat("b0000000??????????000?????0110011"),
   "ADDI"             -> BitPat("b?????????????????000?????0010011"),
   "AND"              -> BitPat("b0000000??????????111?????0110011"),
   "ANDI"             -> BitPat("b?????????????????111?????0010011"),
   "AUIPC"            -> BitPat("b?????????????????????????0010111"),
   "BEQ"              -> BitPat("b?????????????????000?????1100011"),
   "BGE"              -> BitPat("b?????????????????101?????1100011"),
   "BGEU"             -> BitPat("b?????????????????111?????1100011"),
   "BLT"              -> BitPat("b?????????????????100?????1100011"),
   "BLTU"             -> BitPat("b?????????????????110?????1100011"),
   "BNE"              -> BitPat("b?????????????????001?????1100011"),
   "EBREAK"           -> BitPat("b00000000000100000000000001110011"),
   "ECALL"            -> BitPat("b00000000000000000000000001110011"),
   "FENCE"            -> BitPat("b?????????????????000?????0001111"),
   "JAL"              -> BitPat("b?????????????????????????1101111"),
   "JALR"             -> BitPat("b?????????????????000?????1100111"),
   "LB"               -> BitPat("b?????????????????000?????0000011"),
   "LBU"              -> BitPat("b?????????????????100?????0000011"),
   "LH"               -> BitPat("b?????????????????001?????0000011"),
   "LHU"              -> BitPat("b?????????????????101?????0000011"),
   "LUI"              -> BitPat("b?????????????????????????0110111"),
   "LW"               -> BitPat("b?????????????????010?????0000011"),
   "OR"               -> BitPat("b0000000??????????110?????0110011"),
   "ORI"              -> BitPat("b?????????????????110?????0010011"),
   "SB"               -> BitPat("b?????????????????000?????0100011"),
   "SH"               -> BitPat("b?????????????????001?????0100011"),
   "SLL"              -> BitPat("b0000000??????????001?????0110011"),
   "SLT"              -> BitPat("b0000000??????????010?????0110011"),
   "SLTI"             -> BitPat("b?????????????????010?????0010011"),
   "SLTIU"            -> BitPat("b?????????????????011?????0010011"),
   "SLTU"             -> BitPat("b0000000??????????011?????0110011"),
   "SRA"              -> BitPat("b0100000??????????101?????0110011"),
   "SRL"              -> BitPat("b0000000??????????101?????0110011"),
   "SUB"              -> BitPat("b0100000??????????000?????0110011"),
   "SW"               -> BitPat("b?????????????????010?????0100011"),
   "XOR"              -> BitPat("b0000000??????????100?????0110011"),
   "XORI"             -> BitPat("b?????????????????100?????0010011"),
  )
  val CType = Map(
   "C_ADD"            -> BitPat("b????????????????1001??????????10"),
   "C_ADDI"           -> BitPat("b????????????????000???????????01"),
   "C_ADDI16SP"       -> BitPat("b????????????????011?00010?????01"),
   "C_ADDI4SPN"       -> BitPat("b????????????????000???????????00"),
   "C_AND"            -> BitPat("b????????????????100011???11???01"),
   "C_ANDI"           -> BitPat("b????????????????100?10????????01"),
   "C_BEQZ"           -> BitPat("b????????????????110???????????01"),
   "C_BNEZ"           -> BitPat("b????????????????111???????????01"),
   "C_EBREAK"         -> BitPat("b????????????????1001000000000010"),
   "C_FLD"            -> BitPat("b????????????????001???????????00"),
   "C_FLDSP"          -> BitPat("b????????????????001???????????10"),
   "C_FLW"            -> BitPat("b????????????????011???????????00"),
   "C_FLWSP"          -> BitPat("b????????????????011???????????10"),
   "C_FSD"            -> BitPat("b????????????????101???????????00"),
   "C_FSDSP"          -> BitPat("b????????????????101???????????10"),
   "C_FSW"            -> BitPat("b????????????????111???????????00"),
   "C_FSWSP"          -> BitPat("b????????????????111???????????10"),
   "C_J"              -> BitPat("b????????????????101???????????01"),
   "C_JALR"           -> BitPat("b????????????????1001?????0000010"),
   "C_JR"             -> BitPat("b????????????????1000?????0000010"),
   "C_LI"             -> BitPat("b????????????????010???????????01"),
   "C_LUI"            -> BitPat("b????????????????011???????????01"),
   "C_LW"             -> BitPat("b????????????????010???????????00"),
   "C_LWSP"           -> BitPat("b????????????????010???????????10"),
   "C_MV"             -> BitPat("b????????????????1000??????????10"),
   "C_NOP"            -> BitPat("b????????????????000?00000?????01"),
   "C_OR"             -> BitPat("b????????????????100011???10???01"),
   "C_SUB"            -> BitPat("b????????????????100011???00???01"),
   "C_SW"             -> BitPat("b????????????????110???????????00"),
   "C_SWSP"           -> BitPat("b????????????????110???????????10"),
   "C_XOR"            -> BitPat("b????????????????100011???01???01"),
  )
  val I64Type = Map(
   "ADDIW"            -> BitPat("b?????????????????000?????0011011"),
   "ADDW"             -> BitPat("b0000000??????????000?????0111011"),
   "LD"               -> BitPat("b?????????????????011?????0000011"),
   "LWU"              -> BitPat("b?????????????????110?????0000011"),
   "SD"               -> BitPat("b?????????????????011?????0100011"),
   "SLLI"             -> BitPat("b000000???????????001?????0010011"),
   "SLLIW"            -> BitPat("b0000000??????????001?????0011011"),
   "SLLW"             -> BitPat("b0000000??????????001?????0111011"),
   "SRAI"             -> BitPat("b010000???????????101?????0010011"),
   "SRAIW"            -> BitPat("b0100000??????????101?????0011011"),
   "SRAW"             -> BitPat("b0100000??????????101?????0111011"),
   "SRLI"             -> BitPat("b000000???????????101?????0010011"),
   "SRLIW"            -> BitPat("b0000000??????????101?????0011011"),
   "SRLW"             -> BitPat("b0000000??????????101?????0111011"),
   "SUBW"             -> BitPat("b0100000??????????000?????0111011"),
  )
  val C64Type = Map(
   "C_ADDIW"          -> BitPat("b????????????????001???????????01"),
   "C_ADDW"           -> BitPat("b????????????????100111???01???01"),
   "C_LD"             -> BitPat("b????????????????011???????????00"),
   "C_LDSP"           -> BitPat("b????????????????011???????????10"),
   "C_SD"             -> BitPat("b????????????????111???????????00"),
   "C_SDSP"           -> BitPat("b????????????????111???????????10"),
   "C_SLLI"           -> BitPat("b????????????????000???????????10"),
   "C_SRAI"           -> BitPat("b????????????????100?01????????01"),
   "C_SRLI"           -> BitPat("b????????????????100?00????????01"),
   "C_SUBW"           -> BitPat("b????????????????100111???00???01"),
  )
  val ZFHType = Map(
   "FADD_H"           -> BitPat("b0000010??????????????????1010011"),
   "FCLASS_H"         -> BitPat("b111001000000?????001?????1010011"),
   "FCVT_H_S"         -> BitPat("b010001000000?????????????1010011"),
   "FCVT_H_W"         -> BitPat("b110101000000?????????????1010011"),
   "FCVT_H_WU"        -> BitPat("b110101000001?????????????1010011"),
   "FCVT_S_H"         -> BitPat("b010000000010?????????????1010011"),
   "FCVT_W_H"         -> BitPat("b110001000000?????????????1010011"),
   "FCVT_WU_H"        -> BitPat("b110001000001?????????????1010011"),
   "FDIV_H"           -> BitPat("b0001110??????????????????1010011"),
   "FEQ_H"            -> BitPat("b1010010??????????010?????1010011"),
   "FLE_H"            -> BitPat("b1010010??????????000?????1010011"),
   "FLH"              -> BitPat("b?????????????????001?????0000111"),
   "FLT_H"            -> BitPat("b1010010??????????001?????1010011"),
   "FMADD_H"          -> BitPat("b?????10??????????????????1000011"),
   "FMAX_H"           -> BitPat("b0010110??????????001?????1010011"),
   "FMIN_H"           -> BitPat("b0010110??????????000?????1010011"),
   "FMSUB_H"          -> BitPat("b?????10??????????????????1000111"),
   "FMUL_H"           -> BitPat("b0001010??????????????????1010011"),
   "FMV_X_H"          -> BitPat("b111001000000?????000?????1010011"),
   "FNMADD_H"         -> BitPat("b?????10??????????????????1001111"),
   "FNMSUB_H"         -> BitPat("b?????10??????????????????1001011"),
   "FSGNJ_H"          -> BitPat("b0010010??????????000?????1010011"),
   "FSGNJN_H"         -> BitPat("b0010010??????????001?????1010011"),
   "FSGNJX_H"         -> BitPat("b0010010??????????010?????1010011"),
   "FSH"              -> BitPat("b?????????????????001?????0100111"),
   "FSQRT_H"          -> BitPat("b010111000000?????????????1010011"),
   "FSUB_H"           -> BitPat("b0000110??????????????????1010011"),
  )
  val QType = Map(
   "FADD_Q"           -> BitPat("b0000011??????????????????1010011"),
   "FCLASS_Q"         -> BitPat("b111001100000?????001?????1010011"),
   "FCVT_D_Q"         -> BitPat("b010000100011?????????????1010011"),
   "FCVT_H_Q"         -> BitPat("b010001000011?????????????1010011"),
   "FCVT_Q_D"         -> BitPat("b010001100001?????????????1010011"),
   "FCVT_Q_H"         -> BitPat("b010001100010?????????????1010011"),
   "FCVT_Q_S"         -> BitPat("b010001100000?????????????1010011"),
   "FCVT_Q_W"         -> BitPat("b110101100000?????????????1010011"),
   "FCVT_Q_WU"        -> BitPat("b110101100001?????????????1010011"),
   "FCVT_S_Q"         -> BitPat("b010000000011?????????????1010011"),
   "FCVT_W_Q"         -> BitPat("b110001100000?????????????1010011"),
   "FCVT_WU_Q"        -> BitPat("b110001100001?????????????1010011"),
   "FDIV_Q"           -> BitPat("b0001111??????????????????1010011"),
   "FEQ_Q"            -> BitPat("b1010011??????????010?????1010011"),
   "FLE_Q"            -> BitPat("b1010011??????????000?????1010011"),
   "FLEQ_Q"           -> BitPat("b1010011??????????100?????1010011"),
   "FLI_Q"            -> BitPat("b111101100001?????000?????1010011"),
   "FLQ"              -> BitPat("b?????????????????100?????0000111"),
   "FLT_Q"            -> BitPat("b1010011??????????001?????1010011"),
   "FLTQ_Q"           -> BitPat("b1010011??????????101?????1010011"),
   "FMADD_Q"          -> BitPat("b?????11??????????????????1000011"),
   "FMAX_Q"           -> BitPat("b0010111??????????001?????1010011"),
   "FMAXM_Q"          -> BitPat("b0010111??????????011?????1010011"),
   "FMIN_Q"           -> BitPat("b0010111??????????000?????1010011"),
   "FMINM_Q"          -> BitPat("b0010111??????????010?????1010011"),
   "FMSUB_Q"          -> BitPat("b?????11??????????????????1000111"),
   "FMUL_Q"           -> BitPat("b0001011??????????????????1010011"),
   "FNMADD_Q"         -> BitPat("b?????11??????????????????1001111"),
   "FNMSUB_Q"         -> BitPat("b?????11??????????????????1001011"),
   "FROUND_Q"         -> BitPat("b010001100100?????????????1010011"),
   "FROUNDNX_Q"       -> BitPat("b010001100101?????????????1010011"),
   "FSGNJ_Q"          -> BitPat("b0010011??????????000?????1010011"),
   "FSGNJN_Q"         -> BitPat("b0010011??????????001?????1010011"),
   "FSGNJX_Q"         -> BitPat("b0010011??????????010?????1010011"),
   "FSQ"              -> BitPat("b?????????????????100?????0100111"),
   "FSQRT_Q"          -> BitPat("b010111100000?????????????1010011"),
   "FSUB_Q"           -> BitPat("b0000111??????????????????1010011"),
  )
  val ZACAS64Type = Map(
   "AMOCAS_Q"         -> BitPat("b00101????????????100?????0101111"),
  )
  val ZFBFMINType = Map(
   "FCVT_BF16_S"      -> BitPat("b010001001000?????????????1010011"),
   "FCVT_S_BF16"      -> BitPat("b010000000110?????????????1010011"),
  )
  val Q64Type = Map(
   "FCVT_L_Q"         -> BitPat("b110001100010?????????????1010011"),
   "FCVT_LU_Q"        -> BitPat("b110001100011?????????????1010011"),
   "FCVT_Q_L"         -> BitPat("b110101100010?????????????1010011"),
   "FCVT_Q_LU"        -> BitPat("b110101100011?????????????1010011"),
   "FMVH_X_Q"         -> BitPat("b111001100001?????000?????1010011"),
   "FMVP_Q_X"         -> BitPat("b1011011??????????000?????1010011"),
  )
  val ZBKB64Type = Map(
   "PACKW"            -> BitPat("b0000100??????????100?????0111011"),
  )
  val ZKSType = Map(
   "SM3P0"            -> BitPat("b000100001000?????001?????0010011"),
   "SM3P1"            -> BitPat("b000100001001?????001?????0010011"),
   "SM4ED"            -> BitPat("b??11000??????????000?????0110011"),
   "SM4KS"            -> BitPat("b??11010??????????000?????0110011"),
  )
  val ZBKB32Type = Map(
   "UNZIP"            -> BitPat("b000010001111?????101?????0010011"),
   "ZIP"              -> BitPat("b000010001111?????001?????0010011"),
  )
  val M64Type = Map(
   "DIVUW"            -> BitPat("b0000001??????????101?????0111011"),
   "DIVW"             -> BitPat("b0000001??????????100?????0111011"),
   "MULW"             -> BitPat("b0000001??????????000?????0111011"),
   "REMUW"            -> BitPat("b0000001??????????111?????0111011"),
   "REMW"             -> BitPat("b0000001??????????110?????0111011"),
  )
  val ZBKBType = Map(
   "BREV8"            -> BitPat("b011010000111?????101?????0010011"),
   "PACK"             -> BitPat("b0000100??????????100?????0110011"),
   "PACKH"            -> BitPat("b0000100??????????111?????0110011"),
  )

}
object Causes {
  val misaligned_fetch = 0x0
  val fetch_access = 0x1
  val illegal_instruction = 0x2
  val breakpoint = 0x3
  val misaligned_load = 0x4
  val load_access = 0x5
  val misaligned_store = 0x6
  val store_access = 0x7
  val user_ecall = 0x8
  val supervisor_ecall = 0x9
  val virtual_supervisor_ecall = 0xa
  val machine_ecall = 0xb
  val fetch_page_fault = 0xc
  val load_page_fault = 0xd
  val store_page_fault = 0xf
  val double_trap = 0x10
  val software_check_fault = 0x12
  val hardware_error_fault = 0x13
  val fetch_guest_page_fault = 0x14
  val load_guest_page_fault = 0x15
  val virtual_instruction = 0x16
  val store_guest_page_fault = 0x17
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += misaligned_fetch
    res += fetch_access
    res += illegal_instruction
    res += breakpoint
    res += misaligned_load
    res += load_access
    res += misaligned_store
    res += store_access
    res += user_ecall
    res += supervisor_ecall
    res += virtual_supervisor_ecall
    res += machine_ecall
    res += fetch_page_fault
    res += load_page_fault
    res += store_page_fault
    res += double_trap
    res += software_check_fault
    res += hardware_error_fault
    res += fetch_guest_page_fault
    res += load_guest_page_fault
    res += virtual_instruction
    res += store_guest_page_fault
    res.toArray
  }
}
object CSRs {
  val fflags = 0x1
  val frm = 0x2
  val fcsr = 0x3
  val vstart = 0x8
  val vxsat = 0x9
  val vxrm = 0xa
  val vcsr = 0xf
  val ssp = 0x11
  val seed = 0x15
  val jvt = 0x17
  val cycle = 0xc00
  val time = 0xc01
  val instret = 0xc02
  val hpmcounter3 = 0xc03
  val hpmcounter4 = 0xc04
  val hpmcounter5 = 0xc05
  val hpmcounter6 = 0xc06
  val hpmcounter7 = 0xc07
  val hpmcounter8 = 0xc08
  val hpmcounter9 = 0xc09
  val hpmcounter10 = 0xc0a
  val hpmcounter11 = 0xc0b
  val hpmcounter12 = 0xc0c
  val hpmcounter13 = 0xc0d
  val hpmcounter14 = 0xc0e
  val hpmcounter15 = 0xc0f
  val hpmcounter16 = 0xc10
  val hpmcounter17 = 0xc11
  val hpmcounter18 = 0xc12
  val hpmcounter19 = 0xc13
  val hpmcounter20 = 0xc14
  val hpmcounter21 = 0xc15
  val hpmcounter22 = 0xc16
  val hpmcounter23 = 0xc17
  val hpmcounter24 = 0xc18
  val hpmcounter25 = 0xc19
  val hpmcounter26 = 0xc1a
  val hpmcounter27 = 0xc1b
  val hpmcounter28 = 0xc1c
  val hpmcounter29 = 0xc1d
  val hpmcounter30 = 0xc1e
  val hpmcounter31 = 0xc1f
  val vl = 0xc20
  val vtype = 0xc21
  val vlenb = 0xc22
  val sstatus = 0x100
  val sedeleg = 0x102
  val sideleg = 0x103
  val sie = 0x104
  val stvec = 0x105
  val scounteren = 0x106
  val senvcfg = 0x10a
  val sstateen0 = 0x10c
  val sstateen1 = 0x10d
  val sstateen2 = 0x10e
  val sstateen3 = 0x10f
  val scountinhibit = 0x120
  val sscratch = 0x140
  val sepc = 0x141
  val scause = 0x142
  val stval = 0x143
  val sip = 0x144
  val stimecmp = 0x14d
  val sctrctl = 0x14e
  val sctrstatus = 0x14f
  val siselect = 0x150
  val sireg = 0x151
  val sireg2 = 0x152
  val sireg3 = 0x153
  val sireg4 = 0x155
  val sireg5 = 0x156
  val sireg6 = 0x157
  val stopei = 0x15c
  val sctrdepth = 0x15f
  val satp = 0x180
  val srmcfg = 0x181
  val scontext = 0x5a8
  val vsstatus = 0x200
  val vsie = 0x204
  val vstvec = 0x205
  val vsscratch = 0x240
  val vsepc = 0x241
  val vscause = 0x242
  val vstval = 0x243
  val vsip = 0x244
  val vstimecmp = 0x24d
  val vsctrctl = 0x24e
  val vsiselect = 0x250
  val vsireg = 0x251
  val vsireg2 = 0x252
  val vsireg3 = 0x253
  val vsireg4 = 0x255
  val vsireg5 = 0x256
  val vsireg6 = 0x257
  val vstopei = 0x25c
  val vsatp = 0x280
  val hstatus = 0x600
  val hedeleg = 0x602
  val hideleg = 0x603
  val hie = 0x604
  val htimedelta = 0x605
  val hcounteren = 0x606
  val hgeie = 0x607
  val hvien = 0x608
  val hvictl = 0x609
  val henvcfg = 0x60a
  val hstateen0 = 0x60c
  val hstateen1 = 0x60d
  val hstateen2 = 0x60e
  val hstateen3 = 0x60f
  val htval = 0x643
  val hip = 0x644
  val hvip = 0x645
  val hviprio1 = 0x646
  val hviprio2 = 0x647
  val htinst = 0x64a
  val hgatp = 0x680
  val hcontext = 0x6a8
  val hgeip = 0xe12
  val vstopi = 0xeb0
  val scountovf = 0xda0
  val stopi = 0xdb0
  val utvt = 0x7
  val unxti = 0x45
  val uintstatus = 0x46
  val uscratchcsw = 0x48
  val uscratchcswl = 0x49
  val stvt = 0x107
  val snxti = 0x145
  val sintstatus = 0x146
  val sscratchcsw = 0x148
  val sscratchcswl = 0x149
  val mtvt = 0x307
  val mnxti = 0x345
  val mintstatus = 0x346
  val mscratchcsw = 0x348
  val mscratchcswl = 0x349
  val mstatus = 0x300
  val misa = 0x301
  val medeleg = 0x302
  val mideleg = 0x303
  val mie = 0x304
  val mtvec = 0x305
  val mcounteren = 0x306
  val mvien = 0x308
  val mvip = 0x309
  val menvcfg = 0x30a
  val mstateen0 = 0x30c
  val mstateen1 = 0x30d
  val mstateen2 = 0x30e
  val mstateen3 = 0x30f
  val mcountinhibit = 0x320
  val mscratch = 0x340
  val mepc = 0x341
  val mcause = 0x342
  val mtval = 0x343
  val mip = 0x344
  val mtinst = 0x34a
  val mtval2 = 0x34b
  val mctrctl = 0x34e
  val miselect = 0x350
  val mireg = 0x351
  val mireg2 = 0x352
  val mireg3 = 0x353
  val mireg4 = 0x355
  val mireg5 = 0x356
  val mireg6 = 0x357
  val mtopei = 0x35c
  val pmpcfg0 = 0x3a0
  val pmpcfg1 = 0x3a1
  val pmpcfg2 = 0x3a2
  val pmpcfg3 = 0x3a3
  val pmpcfg4 = 0x3a4
  val pmpcfg5 = 0x3a5
  val pmpcfg6 = 0x3a6
  val pmpcfg7 = 0x3a7
  val pmpcfg8 = 0x3a8
  val pmpcfg9 = 0x3a9
  val pmpcfg10 = 0x3aa
  val pmpcfg11 = 0x3ab
  val pmpcfg12 = 0x3ac
  val pmpcfg13 = 0x3ad
  val pmpcfg14 = 0x3ae
  val pmpcfg15 = 0x3af
  val pmpaddr0 = 0x3b0
  val pmpaddr1 = 0x3b1
  val pmpaddr2 = 0x3b2
  val pmpaddr3 = 0x3b3
  val pmpaddr4 = 0x3b4
  val pmpaddr5 = 0x3b5
  val pmpaddr6 = 0x3b6
  val pmpaddr7 = 0x3b7
  val pmpaddr8 = 0x3b8
  val pmpaddr9 = 0x3b9
  val pmpaddr10 = 0x3ba
  val pmpaddr11 = 0x3bb
  val pmpaddr12 = 0x3bc
  val pmpaddr13 = 0x3bd
  val pmpaddr14 = 0x3be
  val pmpaddr15 = 0x3bf
  val pmpaddr16 = 0x3c0
  val pmpaddr17 = 0x3c1
  val pmpaddr18 = 0x3c2
  val pmpaddr19 = 0x3c3
  val pmpaddr20 = 0x3c4
  val pmpaddr21 = 0x3c5
  val pmpaddr22 = 0x3c6
  val pmpaddr23 = 0x3c7
  val pmpaddr24 = 0x3c8
  val pmpaddr25 = 0x3c9
  val pmpaddr26 = 0x3ca
  val pmpaddr27 = 0x3cb
  val pmpaddr28 = 0x3cc
  val pmpaddr29 = 0x3cd
  val pmpaddr30 = 0x3ce
  val pmpaddr31 = 0x3cf
  val pmpaddr32 = 0x3d0
  val pmpaddr33 = 0x3d1
  val pmpaddr34 = 0x3d2
  val pmpaddr35 = 0x3d3
  val pmpaddr36 = 0x3d4
  val pmpaddr37 = 0x3d5
  val pmpaddr38 = 0x3d6
  val pmpaddr39 = 0x3d7
  val pmpaddr40 = 0x3d8
  val pmpaddr41 = 0x3d9
  val pmpaddr42 = 0x3da
  val pmpaddr43 = 0x3db
  val pmpaddr44 = 0x3dc
  val pmpaddr45 = 0x3dd
  val pmpaddr46 = 0x3de
  val pmpaddr47 = 0x3df
  val pmpaddr48 = 0x3e0
  val pmpaddr49 = 0x3e1
  val pmpaddr50 = 0x3e2
  val pmpaddr51 = 0x3e3
  val pmpaddr52 = 0x3e4
  val pmpaddr53 = 0x3e5
  val pmpaddr54 = 0x3e6
  val pmpaddr55 = 0x3e7
  val pmpaddr56 = 0x3e8
  val pmpaddr57 = 0x3e9
  val pmpaddr58 = 0x3ea
  val pmpaddr59 = 0x3eb
  val pmpaddr60 = 0x3ec
  val pmpaddr61 = 0x3ed
  val pmpaddr62 = 0x3ee
  val pmpaddr63 = 0x3ef
  val mseccfg = 0x747
  val tselect = 0x7a0
  val tdata1 = 0x7a1
  val tdata2 = 0x7a2
  val tdata3 = 0x7a3
  val tinfo = 0x7a4
  val tcontrol = 0x7a5
  val mcontext = 0x7a8
  val mscontext = 0x7aa
  val dcsr = 0x7b0
  val dpc = 0x7b1
  val dscratch0 = 0x7b2
  val dscratch1 = 0x7b3
  val mcycle = 0xb00
  val minstret = 0xb02
  val mhpmcounter3 = 0xb03
  val mhpmcounter4 = 0xb04
  val mhpmcounter5 = 0xb05
  val mhpmcounter6 = 0xb06
  val mhpmcounter7 = 0xb07
  val mhpmcounter8 = 0xb08
  val mhpmcounter9 = 0xb09
  val mhpmcounter10 = 0xb0a
  val mhpmcounter11 = 0xb0b
  val mhpmcounter12 = 0xb0c
  val mhpmcounter13 = 0xb0d
  val mhpmcounter14 = 0xb0e
  val mhpmcounter15 = 0xb0f
  val mhpmcounter16 = 0xb10
  val mhpmcounter17 = 0xb11
  val mhpmcounter18 = 0xb12
  val mhpmcounter19 = 0xb13
  val mhpmcounter20 = 0xb14
  val mhpmcounter21 = 0xb15
  val mhpmcounter22 = 0xb16
  val mhpmcounter23 = 0xb17
  val mhpmcounter24 = 0xb18
  val mhpmcounter25 = 0xb19
  val mhpmcounter26 = 0xb1a
  val mhpmcounter27 = 0xb1b
  val mhpmcounter28 = 0xb1c
  val mhpmcounter29 = 0xb1d
  val mhpmcounter30 = 0xb1e
  val mhpmcounter31 = 0xb1f
  val mcyclecfg = 0x321
  val minstretcfg = 0x322
  val mhpmevent3 = 0x323
  val mhpmevent4 = 0x324
  val mhpmevent5 = 0x325
  val mhpmevent6 = 0x326
  val mhpmevent7 = 0x327
  val mhpmevent8 = 0x328
  val mhpmevent9 = 0x329
  val mhpmevent10 = 0x32a
  val mhpmevent11 = 0x32b
  val mhpmevent12 = 0x32c
  val mhpmevent13 = 0x32d
  val mhpmevent14 = 0x32e
  val mhpmevent15 = 0x32f
  val mhpmevent16 = 0x330
  val mhpmevent17 = 0x331
  val mhpmevent18 = 0x332
  val mhpmevent19 = 0x333
  val mhpmevent20 = 0x334
  val mhpmevent21 = 0x335
  val mhpmevent22 = 0x336
  val mhpmevent23 = 0x337
  val mhpmevent24 = 0x338
  val mhpmevent25 = 0x339
  val mhpmevent26 = 0x33a
  val mhpmevent27 = 0x33b
  val mhpmevent28 = 0x33c
  val mhpmevent29 = 0x33d
  val mhpmevent30 = 0x33e
  val mhpmevent31 = 0x33f
  val mvendorid = 0xf11
  val marchid = 0xf12
  val mimpid = 0xf13
  val mhartid = 0xf14
  val mconfigptr = 0xf15
  val mtopi = 0xfb0
  val sieh = 0x114
  val siph = 0x154
  val stimecmph = 0x15d
  val vsieh = 0x214
  val vsiph = 0x254
  val vstimecmph = 0x25d
  val hedelegh = 0x612
  val htimedeltah = 0x615
  val hidelegh = 0x613
  val hvienh = 0x618
  val henvcfgh = 0x61a
  val hviph = 0x655
  val hviprio1h = 0x656
  val hviprio2h = 0x657
  val hstateen0h = 0x61c
  val hstateen1h = 0x61d
  val hstateen2h = 0x61e
  val hstateen3h = 0x61f
  val cycleh = 0xc80
  val timeh = 0xc81
  val instreth = 0xc82
  val hpmcounter3h = 0xc83
  val hpmcounter4h = 0xc84
  val hpmcounter5h = 0xc85
  val hpmcounter6h = 0xc86
  val hpmcounter7h = 0xc87
  val hpmcounter8h = 0xc88
  val hpmcounter9h = 0xc89
  val hpmcounter10h = 0xc8a
  val hpmcounter11h = 0xc8b
  val hpmcounter12h = 0xc8c
  val hpmcounter13h = 0xc8d
  val hpmcounter14h = 0xc8e
  val hpmcounter15h = 0xc8f
  val hpmcounter16h = 0xc90
  val hpmcounter17h = 0xc91
  val hpmcounter18h = 0xc92
  val hpmcounter19h = 0xc93
  val hpmcounter20h = 0xc94
  val hpmcounter21h = 0xc95
  val hpmcounter22h = 0xc96
  val hpmcounter23h = 0xc97
  val hpmcounter24h = 0xc98
  val hpmcounter25h = 0xc99
  val hpmcounter26h = 0xc9a
  val hpmcounter27h = 0xc9b
  val hpmcounter28h = 0xc9c
  val hpmcounter29h = 0xc9d
  val hpmcounter30h = 0xc9e
  val hpmcounter31h = 0xc9f
  val mstatush = 0x310
  val midelegh = 0x313
  val mieh = 0x314
  val mvienh = 0x318
  val mviph = 0x319
  val menvcfgh = 0x31a
  val mstateen0h = 0x31c
  val mstateen1h = 0x31d
  val mstateen2h = 0x31e
  val mstateen3h = 0x31f
  val miph = 0x354
  val mcyclecfgh = 0x721
  val minstretcfgh = 0x722
  val mhpmevent3h = 0x723
  val mhpmevent4h = 0x724
  val mhpmevent5h = 0x725
  val mhpmevent6h = 0x726
  val mhpmevent7h = 0x727
  val mhpmevent8h = 0x728
  val mhpmevent9h = 0x729
  val mhpmevent10h = 0x72a
  val mhpmevent11h = 0x72b
  val mhpmevent12h = 0x72c
  val mhpmevent13h = 0x72d
  val mhpmevent14h = 0x72e
  val mhpmevent15h = 0x72f
  val mhpmevent16h = 0x730
  val mhpmevent17h = 0x731
  val mhpmevent18h = 0x732
  val mhpmevent19h = 0x733
  val mhpmevent20h = 0x734
  val mhpmevent21h = 0x735
  val mhpmevent22h = 0x736
  val mhpmevent23h = 0x737
  val mhpmevent24h = 0x738
  val mhpmevent25h = 0x739
  val mhpmevent26h = 0x73a
  val mhpmevent27h = 0x73b
  val mhpmevent28h = 0x73c
  val mhpmevent29h = 0x73d
  val mhpmevent30h = 0x73e
  val mhpmevent31h = 0x73f
  val mnscratch = 0x740
  val mnepc = 0x741
  val mncause = 0x742
  val mnstatus = 0x744
  val mseccfgh = 0x757
  val mcycleh = 0xb80
  val minstreth = 0xb82
  val mhpmcounter3h = 0xb83
  val mhpmcounter4h = 0xb84
  val mhpmcounter5h = 0xb85
  val mhpmcounter6h = 0xb86
  val mhpmcounter7h = 0xb87
  val mhpmcounter8h = 0xb88
  val mhpmcounter9h = 0xb89
  val mhpmcounter10h = 0xb8a
  val mhpmcounter11h = 0xb8b
  val mhpmcounter12h = 0xb8c
  val mhpmcounter13h = 0xb8d
  val mhpmcounter14h = 0xb8e
  val mhpmcounter15h = 0xb8f
  val mhpmcounter16h = 0xb90
  val mhpmcounter17h = 0xb91
  val mhpmcounter18h = 0xb92
  val mhpmcounter19h = 0xb93
  val mhpmcounter20h = 0xb94
  val mhpmcounter21h = 0xb95
  val mhpmcounter22h = 0xb96
  val mhpmcounter23h = 0xb97
  val mhpmcounter24h = 0xb98
  val mhpmcounter25h = 0xb99
  val mhpmcounter26h = 0xb9a
  val mhpmcounter27h = 0xb9b
  val mhpmcounter28h = 0xb9c
  val mhpmcounter29h = 0xb9d
  val mhpmcounter30h = 0xb9e
  val mhpmcounter31h = 0xb9f
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += fflags
    res += frm
    res += fcsr
    res += vstart
    res += vxsat
    res += vxrm
    res += vcsr
    res += ssp
    res += seed
    res += jvt
    res += cycle
    res += time
    res += instret
    res += hpmcounter3
    res += hpmcounter4
    res += hpmcounter5
    res += hpmcounter6
    res += hpmcounter7
    res += hpmcounter8
    res += hpmcounter9
    res += hpmcounter10
    res += hpmcounter11
    res += hpmcounter12
    res += hpmcounter13
    res += hpmcounter14
    res += hpmcounter15
    res += hpmcounter16
    res += hpmcounter17
    res += hpmcounter18
    res += hpmcounter19
    res += hpmcounter20
    res += hpmcounter21
    res += hpmcounter22
    res += hpmcounter23
    res += hpmcounter24
    res += hpmcounter25
    res += hpmcounter26
    res += hpmcounter27
    res += hpmcounter28
    res += hpmcounter29
    res += hpmcounter30
    res += hpmcounter31
    res += vl
    res += vtype
    res += vlenb
    res += sstatus
    res += sedeleg
    res += sideleg
    res += sie
    res += stvec
    res += scounteren
    res += senvcfg
    res += sstateen0
    res += sstateen1
    res += sstateen2
    res += sstateen3
    res += scountinhibit
    res += sscratch
    res += sepc
    res += scause
    res += stval
    res += sip
    res += stimecmp
    res += sctrctl
    res += sctrstatus
    res += siselect
    res += sireg
    res += sireg2
    res += sireg3
    res += sireg4
    res += sireg5
    res += sireg6
    res += stopei
    res += sctrdepth
    res += satp
    res += srmcfg
    res += scontext
    res += vsstatus
    res += vsie
    res += vstvec
    res += vsscratch
    res += vsepc
    res += vscause
    res += vstval
    res += vsip
    res += vstimecmp
    res += vsctrctl
    res += vsiselect
    res += vsireg
    res += vsireg2
    res += vsireg3
    res += vsireg4
    res += vsireg5
    res += vsireg6
    res += vstopei
    res += vsatp
    res += hstatus
    res += hedeleg
    res += hideleg
    res += hie
    res += htimedelta
    res += hcounteren
    res += hgeie
    res += hvien
    res += hvictl
    res += henvcfg
    res += hstateen0
    res += hstateen1
    res += hstateen2
    res += hstateen3
    res += htval
    res += hip
    res += hvip
    res += hviprio1
    res += hviprio2
    res += htinst
    res += hgatp
    res += hcontext
    res += hgeip
    res += vstopi
    res += scountovf
    res += stopi
    res += utvt
    res += unxti
    res += uintstatus
    res += uscratchcsw
    res += uscratchcswl
    res += stvt
    res += snxti
    res += sintstatus
    res += sscratchcsw
    res += sscratchcswl
    res += mtvt
    res += mnxti
    res += mintstatus
    res += mscratchcsw
    res += mscratchcswl
    res += mstatus
    res += misa
    res += medeleg
    res += mideleg
    res += mie
    res += mtvec
    res += mcounteren
    res += mvien
    res += mvip
    res += menvcfg
    res += mstateen0
    res += mstateen1
    res += mstateen2
    res += mstateen3
    res += mcountinhibit
    res += mscratch
    res += mepc
    res += mcause
    res += mtval
    res += mip
    res += mtinst
    res += mtval2
    res += mctrctl
    res += miselect
    res += mireg
    res += mireg2
    res += mireg3
    res += mireg4
    res += mireg5
    res += mireg6
    res += mtopei
    res += pmpcfg0
    res += pmpcfg1
    res += pmpcfg2
    res += pmpcfg3
    res += pmpcfg4
    res += pmpcfg5
    res += pmpcfg6
    res += pmpcfg7
    res += pmpcfg8
    res += pmpcfg9
    res += pmpcfg10
    res += pmpcfg11
    res += pmpcfg12
    res += pmpcfg13
    res += pmpcfg14
    res += pmpcfg15
    res += pmpaddr0
    res += pmpaddr1
    res += pmpaddr2
    res += pmpaddr3
    res += pmpaddr4
    res += pmpaddr5
    res += pmpaddr6
    res += pmpaddr7
    res += pmpaddr8
    res += pmpaddr9
    res += pmpaddr10
    res += pmpaddr11
    res += pmpaddr12
    res += pmpaddr13
    res += pmpaddr14
    res += pmpaddr15
    res += pmpaddr16
    res += pmpaddr17
    res += pmpaddr18
    res += pmpaddr19
    res += pmpaddr20
    res += pmpaddr21
    res += pmpaddr22
    res += pmpaddr23
    res += pmpaddr24
    res += pmpaddr25
    res += pmpaddr26
    res += pmpaddr27
    res += pmpaddr28
    res += pmpaddr29
    res += pmpaddr30
    res += pmpaddr31
    res += pmpaddr32
    res += pmpaddr33
    res += pmpaddr34
    res += pmpaddr35
    res += pmpaddr36
    res += pmpaddr37
    res += pmpaddr38
    res += pmpaddr39
    res += pmpaddr40
    res += pmpaddr41
    res += pmpaddr42
    res += pmpaddr43
    res += pmpaddr44
    res += pmpaddr45
    res += pmpaddr46
    res += pmpaddr47
    res += pmpaddr48
    res += pmpaddr49
    res += pmpaddr50
    res += pmpaddr51
    res += pmpaddr52
    res += pmpaddr53
    res += pmpaddr54
    res += pmpaddr55
    res += pmpaddr56
    res += pmpaddr57
    res += pmpaddr58
    res += pmpaddr59
    res += pmpaddr60
    res += pmpaddr61
    res += pmpaddr62
    res += pmpaddr63
    res += mseccfg
    res += tselect
    res += tdata1
    res += tdata2
    res += tdata3
    res += tinfo
    res += tcontrol
    res += mcontext
    res += mscontext
    res += dcsr
    res += dpc
    res += dscratch0
    res += dscratch1
    res += mcycle
    res += minstret
    res += mhpmcounter3
    res += mhpmcounter4
    res += mhpmcounter5
    res += mhpmcounter6
    res += mhpmcounter7
    res += mhpmcounter8
    res += mhpmcounter9
    res += mhpmcounter10
    res += mhpmcounter11
    res += mhpmcounter12
    res += mhpmcounter13
    res += mhpmcounter14
    res += mhpmcounter15
    res += mhpmcounter16
    res += mhpmcounter17
    res += mhpmcounter18
    res += mhpmcounter19
    res += mhpmcounter20
    res += mhpmcounter21
    res += mhpmcounter22
    res += mhpmcounter23
    res += mhpmcounter24
    res += mhpmcounter25
    res += mhpmcounter26
    res += mhpmcounter27
    res += mhpmcounter28
    res += mhpmcounter29
    res += mhpmcounter30
    res += mhpmcounter31
    res += mcyclecfg
    res += minstretcfg
    res += mhpmevent3
    res += mhpmevent4
    res += mhpmevent5
    res += mhpmevent6
    res += mhpmevent7
    res += mhpmevent8
    res += mhpmevent9
    res += mhpmevent10
    res += mhpmevent11
    res += mhpmevent12
    res += mhpmevent13
    res += mhpmevent14
    res += mhpmevent15
    res += mhpmevent16
    res += mhpmevent17
    res += mhpmevent18
    res += mhpmevent19
    res += mhpmevent20
    res += mhpmevent21
    res += mhpmevent22
    res += mhpmevent23
    res += mhpmevent24
    res += mhpmevent25
    res += mhpmevent26
    res += mhpmevent27
    res += mhpmevent28
    res += mhpmevent29
    res += mhpmevent30
    res += mhpmevent31
    res += mvendorid
    res += marchid
    res += mimpid
    res += mhartid
    res += mconfigptr
    res += mtopi
    res.toArray
  }
  val all32 = {
    val res = collection.mutable.ArrayBuffer(all:_*)
    res += sieh
    res += siph
    res += stimecmph
    res += vsieh
    res += vsiph
    res += vstimecmph
    res += hedelegh
    res += htimedeltah
    res += hidelegh
    res += hvienh
    res += henvcfgh
    res += hviph
    res += hviprio1h
    res += hviprio2h
    res += hstateen0h
    res += hstateen1h
    res += hstateen2h
    res += hstateen3h
    res += cycleh
    res += timeh
    res += instreth
    res += hpmcounter3h
    res += hpmcounter4h
    res += hpmcounter5h
    res += hpmcounter6h
    res += hpmcounter7h
    res += hpmcounter8h
    res += hpmcounter9h
    res += hpmcounter10h
    res += hpmcounter11h
    res += hpmcounter12h
    res += hpmcounter13h
    res += hpmcounter14h
    res += hpmcounter15h
    res += hpmcounter16h
    res += hpmcounter17h
    res += hpmcounter18h
    res += hpmcounter19h
    res += hpmcounter20h
    res += hpmcounter21h
    res += hpmcounter22h
    res += hpmcounter23h
    res += hpmcounter24h
    res += hpmcounter25h
    res += hpmcounter26h
    res += hpmcounter27h
    res += hpmcounter28h
    res += hpmcounter29h
    res += hpmcounter30h
    res += hpmcounter31h
    res += mstatush
    res += midelegh
    res += mieh
    res += mvienh
    res += mviph
    res += menvcfgh
    res += mstateen0h
    res += mstateen1h
    res += mstateen2h
    res += mstateen3h
    res += miph
    res += mcyclecfgh
    res += minstretcfgh
    res += mhpmevent3h
    res += mhpmevent4h
    res += mhpmevent5h
    res += mhpmevent6h
    res += mhpmevent7h
    res += mhpmevent8h
    res += mhpmevent9h
    res += mhpmevent10h
    res += mhpmevent11h
    res += mhpmevent12h
    res += mhpmevent13h
    res += mhpmevent14h
    res += mhpmevent15h
    res += mhpmevent16h
    res += mhpmevent17h
    res += mhpmevent18h
    res += mhpmevent19h
    res += mhpmevent20h
    res += mhpmevent21h
    res += mhpmevent22h
    res += mhpmevent23h
    res += mhpmevent24h
    res += mhpmevent25h
    res += mhpmevent26h
    res += mhpmevent27h
    res += mhpmevent28h
    res += mhpmevent29h
    res += mhpmevent30h
    res += mhpmevent31h
    res += mnscratch
    res += mnepc
    res += mncause
    res += mnstatus
    res += mseccfgh
    res += mcycleh
    res += minstreth
    res += mhpmcounter3h
    res += mhpmcounter4h
    res += mhpmcounter5h
    res += mhpmcounter6h
    res += mhpmcounter7h
    res += mhpmcounter8h
    res += mhpmcounter9h
    res += mhpmcounter10h
    res += mhpmcounter11h
    res += mhpmcounter12h
    res += mhpmcounter13h
    res += mhpmcounter14h
    res += mhpmcounter15h
    res += mhpmcounter16h
    res += mhpmcounter17h
    res += mhpmcounter18h
    res += mhpmcounter19h
    res += mhpmcounter20h
    res += mhpmcounter21h
    res += mhpmcounter22h
    res += mhpmcounter23h
    res += mhpmcounter24h
    res += mhpmcounter25h
    res += mhpmcounter26h
    res += mhpmcounter27h
    res += mhpmcounter28h
    res += mhpmcounter29h
    res += mhpmcounter30h
    res += mhpmcounter31h
    res.toArray
  }
}
