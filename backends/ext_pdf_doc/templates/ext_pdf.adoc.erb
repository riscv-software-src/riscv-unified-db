[[header]]
:description: <%= ext.long_name %> (<%= ext.name %>)
:revdate: <%= ext_version.key?("ratification_date") ? ext_version["ratification_date"] : Date.today %>
:revnumber: <%= ext_version["version"] %>
:revmark: <%=
  case ext_version["state"]
  when "ratified"
    <<~STATE
      This document is in the http://riscv.org/spec-state[Ratified state] + \\
      + \\
      No changes are allowed. + \\
      Any desired or needed changes can be the subject of a follow-on new extension. + \\
      Ratified extensions are never revised. + \\
    STATE
  when "frozen"
    <<~FROZEN_STATE
      This document is in the http://riscv.org/spec-state[Frozen state].

      Change is extremely unlikely.
      A high threshold will be used, and a change will only occur because of some truly
      critical issue being identified during the public review cycle.
      Any other desired or needed changes can be the subject of a follow-on new extension.
    FROZEN_STATE
  when "development"
    <<~DEV_STATE
      This document is in the http://riscv.org/spec-state[Development state]. + \\
      + \\
      Change should be expected + \\
    DEV_STATE
  else
    raise "TODO: #{ext_version["state"]} description"
  end
%>
:company: <%= ext.company.nil? ? "unknown" : ext.company["name"] %>
:url-riscv: https://riscv.org
:doctype: book
:preface-title: Licensing and Acknowledgements
:colophon:
:appendix-caption: Appendix
<%- if !ext.company.nil? && (ext.company["name"] =~ /RISCV/) -%>
:title-logo-image: image:risc-v_logo.png["RISC-V International Logo",pdfwidth=3.25in,align=center]
:back-cover-image: image:riscv-horizontal-color.svg[opacity=25%]
<%- end -%>
<%- unless ext_version["state"] == "ratified" -%>
:page-background-image: image:draft.png[opacity=20%]
<%- end -%>
// Settings
:experimental:
:reproducible:
:wavedrom: <%= $root %>/node_modules/.bin/wavedrom-cli
// needs to be changed
:imagesoutdir: images
:icons: font
:lang: en
:example-caption: Example
:listing-caption: Listing
:table-caption: Table
:figure-caption: Figure
:xrefstyle: short
:chapter-refsig: Chapter
:section-refsig: Section
:appendix-refsig: Appendix
:sectnums:
:toc: left
:toclevels: 5
:source-highlighter: pygments
ifdef::backend-pdf[]
:source-highlighter: rouge
endif::[]
:data-uri:
:hide-uri-scheme:
:stem:
:footnote:
:stem: latexmath
:footnote:
:le: &#8804;
:ge: &#8805;
:ne: &#8800;
:approx: &#8776;
:inf: &#8734;
:csrname: envcfg
:imagesdir: images

= <%= ext.long_name %>

// Preamble
<%=
  case ext_version["state"]
  when "ratified"
    <<~RATIFIED_STATE
      [WARNING]
      .This document is in the link:http://riscv.org/spec-state[Ratified state]
      ====
      No changes are allowed. Any desired or needed changes can be the subject of a
      follow-on new extension. Ratified extensions are never revised
      ====
    RATIFIED_STATE
  when "frozen"
    <<~FROZEN_STATE
      [WARNING]
      This document is in the http://riscv.org/spec-state[Frozen state].
      ====
      Change is extremely unlikely.
      A high threshold will be used, and a change will only occur because of some truly
      critical issue being identified during the public review cycle.
      Any other desired or needed changes can be the subject of a follow-on new extension.
      ====
    FROZEN_STATE
  when "development"
    <<~DEV_STATE
      [WARNING]
      This document is in the http://riscv.org/spec-state[Development state].
      ====
      Change should be expected
      ====
    DEV_STATE
  else
    raise "TODO: #{ext_version["state"]} description"
  end
%>

[preface]
== Copyright and license information
This document is released under the <%= ext.doc_license.nil? ? "unknown" : ext.doc_license["url"] %>[<%= ext.doc_license.nil? ? "unknown" : ext.doc_license["name"] %>].

Copyright <%= ext_version["ratification_date"].nil? ? Date.today.year : ext_version["ratification_date"].split("-")[0] %> by <%= ext.company.nil? ? "unknown" : ext.company["name"] %>.

[preface]
== Acknowledgements

<%- ext.versions.each do |version| -%>
Contributors to version <%= version["version"] %> of the specification (in alphabetical order) include: +

<%- unless version["contributors"].nil? -%>
<%- version["contributors"].sort { |a, b| a["name"].split(" ").last <=> b["name"].split(" ").last }.each do |c| -%>
  * <%= c["name"] %> <<%= c["email"] %>> (<%= c["company"] %>)

<%- end -%>
<%- end -%>
<%- end -%>

We express our gratitude to everyone that contributed to, reviewed or
improved this specification through their comments and questions.

[preface]
== Versions

The following versions have been defined:

<%- ext.versions.each do |version| -%>
--
Version:: <%= version["version"] %>
State:: <%= version["state"] %>
<%- if version.key?("ratification_date") && !version["ratification_date"].nil? -%>
Ratification Date:: <%= version["ratification_date"] %>
<%- end -%>
<%- if version.key?("url") -%>
Design document:: <%= version["url"] %>
<%- end -%>
<%- if version.key?("changes") -%>
Changes::
<%= version["changes"] %>
<%- end -%>
<%- unless version["implies"].nil? || version["implies"].empty? -%>
Implies::
* <%= version["implies"].map { |name, version| "#{name} (#{version})" }.join("\n* ") %>
<%- end -%>
--
<%- end -%>


<<<
== Extension description

<%= ext.description %>

<%- unless ext.implies.nil? -%>
=== Sub-extensions
The following sub-extensions are defined:

<%- ext.implies.each do |sub_ext| -%>
==== <%= sub_ext.name %>

<%= arch_def.extension(sub_ext.name).description %>

<%- end -%>
<%- end -%>

<%- unless ext.instructions.empty? -%>
<<<
== Instruction summary

The following <%= ext.instructions.size %> instructions are added by this extension:

[%autowidth]
|===
| RV32 | RV64 | Mnemonic | Instruction | <%= ext.versions.map { |v| "v#{v["version"]}" }.join(" | ") %>

<%- ext.instructions.each do |i| -%>
| <%= i.rv32? ? "&#x2713;" : "" %>
| <%= i.rv64? ? "&#x2713;" : "" %>
| `<%= i.name %> <%= i.assembly.gsub("x", "r").strip %>`
| xref:insns-<%= i.name.gsub('.', '_') %>[<%= i.long_name %>]
| <%= ext.versions.map { |v| i.defined_by?(ext.name, v["version"]) ? "&#x2713;" : "" }.join(" | ") %>
<%- end -%>
|===

<%- unless ext.implies.empty? -%>
=== Instructions by sub-extension

|===
| Mnemonic | `<%= ext.name %>` | <%= ext.implies.map { |e| "`#{e.name}`" }.join(" | ") %>

<%- ext.instructions.each do |i| -%>
| `<%= i.name %>`
| &#x2713;
| <%= ext.implies.map { |e| i.defined_by?(e.name, arch_def.extension(e.name).max_version) ? "&#x2713;" : "" }.join(" | ") %>
<%- end -%>
|===

<%- end -%>

<%- end -%>

<%- unless ext.csrs.empty? -%>
<<<
== CSR summary

The following <%= ext.csrs.size %> are added by this extension.

[%autowidth]
|===
| RV32 | RV64 | CSR | Name | <%= ext.versions.map { |v| "v#{v["version"]}" }.join(" | ") %>

<%- ext.csrs.each do |csr| -%>
| <%= csr.defined_in_base32? ? "&#x2713;" : "" %>
| <%= csr.defined_in_base64? ? "&#x2713;" : "" %>
| xref:csrs-<%= csr.name.gsub('.', '_') %>[<%= csr.name %>]
| <%= csr.long_name %>
| <%= ext.versions.map { |v| csr.defined_by?(ext.name, v["version"]) ? "&#x2713;" : "" }.join(" | ") %>
<%- end -%>

|===

<<<
[#csrs,reftext="CSRs (in alphabetical order)"]
== Csrs (in alphabetical order)

<%- ext.csrs.each do |csr| -%>
<<<
[#csrs-<%= csr.name.gsub('.', '_') %>,reftext=<%= csr.name %>]
=== <%= csr.name %>

*<%= csr.long_name %>*

<%= arch_def.render_erb(csr.description) %>

==== Attributes
[%autowidth]
|===
h| CSR Address    | <%= "0x#{csr.address.to_s(16)}" %>
<%- if csr.priv_mode == 'VS' -%>
h| Virtual CSR Address    | <%= "0x#{csr.virtual_address.to_s(16)}" %>
<%- end -%>
<%- if csr.dynamic_length?(arch_def) -%>
h| Length         | <%= csr.length_pretty(arch_def) %>
<%- else -%>
h| Length         | <%= csr.length_pretty(arch_def) %>-bit
<%- end -%>
h| Privilege Mode | <%= csr.priv_mode %>
|===

==== Format
<%- unless csr.dynamic_length?(arch_def) || csr.fields.any? { |f| f.dynamic_location?(arch_def) } -%>
<%# CSR has a known static length, so there is only one format to display -%>
.<%= csr.name %> format
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(arch_def, 64) %>
....
<%- else -%>
<%# CSR has a dynamic length, or a field has a dynamic location,
    so there is more than one format to display -%>
This CSR format changes dynamically.

.<%= csr.name %> Format when <%= csr.length_cond32 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(arch_def, 32) %>
....

.<%= csr.name %> Format when <%= csr.length_cond64 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(arch_def, 64) %>
....
<%- end -%>

==== Field Summary

[%autowidth,float="center",align="center",cols="^,<,<,<",options="header",role="stretch"]
|===
|Name | Location | Type | Reset Value

<%- csr.fields.each do |field| -%>
| xref:<%=csr.name%>-<%=field.name%>-def[`<%= field.name %>`]
| <%= field.location_pretty(arch_def) %>
| <%= field.type_pretty(arch_def.symtab) %>
| <%= field.reset_value_pretty(arch_def) %>

<%- end -%>
|===


==== Fields

<%- if csr.fields.empty? -%>
This CSR has no fields. However, it must still exist (not cause an `Illegal Instruction` trap) and always return zero on a read.
<%- else -%>

<%- csr.fields.each do |field| -%>
[[<%=csr.name%>-<%=field.name%>-def]]
===== `<%= field.name %>`

[example]
****
Location::
<%= field.location_pretty(arch_def) %>

Description::
<%= field.description %>

Type::
<%= field.type_pretty(arch_def.symtab) %>

Reset value::
<%= field.reset_value_pretty(arch_def) %>

****

<%- end -%>
<%- end -%>

<%- if csr.fields.map(&:has_custom_sw_write?).any? -%>
== Software write

This CSR may store a value that is different from what software attempts to write.

When a software write occurs (_e.g._, through `csrrw`), the following determines the
written value:

[idl]
----
<%- csr.fields.each do |field| -%>
<%- if field.has_custom_sw_write? -%>
<%= field.name %> = <%= field["sw_write(csr_value)"] %>
<%- else -%>
<%= field.name %> = csr_value.<%= field.name %>
<%- end -%>
<%- end -%>
----
<%- end -%>

<%- if csr.has_custom_sw_read? -%>
== Software read

This CSR may return a value that is different from what is stored in hardware.

[source,idl,subs="specialchars,macros"]
----
<%= csr.sw_read_ast(arch_def.symtab).gen_adoc %>
----
<%- end -%>


<%- end -%>

<%- end -%>

<%- unless ext.instructions.empty? -%>
<<<
[#insns,reftext="Instructions (in alphabetical order)"]
== Instructions (in alphabetical order)

<%- ext.instructions.each do |i| -%>
[#insns-<%= i.name.gsub('.', '_') %>,reftext=<%= i.long_name %>]
=== <%= i.name %>

Synopsis::
<%= i.long_name %>

Mnemonic::
----
<%= i.name %> <%= i.assembly.gsub('x', 'r') %>
----

Encoding::
<%- if i.multi_encoding? -%>
[NOTE]
This instruction has different encodings in RV32 and RV64

RV32::
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump i.wavedrom_desc(32) %>
....

RV64::
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump i.wavedrom_desc(64) %>
....
<%- else -%>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump i.wavedrom_desc(i.base.nil? ? 64 : i.base) %>
....
<%- end -%>

Description::
<%= i.description %>


Decode Variables::

<%- if i.multi_encoding? ? (i.decode_variables(32).empty? && i.decode_variables(64).empty?) : i.decode_variables(i.base.nil? ? 64 : i.base).empty? -%>

<%= i.name %> has no decode variables.

<%- else -%>
<%- if i.multi_encoding? -%>
RV32::
+
[source,idl]
----
<%- i.decode_variables(32).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----

RV64::
+
[source,idl]
----
<%- i.decode_variables(64).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----
<%- else -%>
[source,idl,subs="specialchars,macros"]
----
<%- i.decode_variables(i.base.nil? ? 64 : i.base).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----
<%- end # if multi_encoding? -%>
<%- end # if no decode variables-%>

Operation::
<%- unless i.data["operation()"].nil? -%>
[source,idl,subs="specialchars,macros"]
----
<%= i.operation_ast(arch_def.symtab).gen_adoc %>
----
<%- end -%>

Included in::

<%= i.defined_by.to_asciidoc %>


<<<
<%- end -%>
<%- end -%>

<<<
== IDL Functions

<%- ext.reachable_functions(arch_def.symtab).sort { |a,b| a.name <=> b.name }.each do |f| -%>
[#<%= f.name %>-func-def]
=== <%= f.name %><%- if f.builtin? -%> (builtin)<%- end -%>

<%= f.description %>

|===
h| Return Type l| <%= f.return_type_list_str.join(', ') %>
h| Arguments   l| <%= f.arguments_list_str.join (', ') %>
|===

<%- unless f.builtin? -%>
<%- body_ast = f.body -%>
[source,idl,subs="specialchars,macros"]
----
<%= body_ast.gen_adoc %>
----
<%- end -%>

<%- end -%>
