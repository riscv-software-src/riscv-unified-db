# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Udb::Architecture`.
# Please instead update this file by running `bin/tapioca dsl Udb::Architecture`.


class Udb::Architecture
  sig { params(name: String).returns(T.nilable(Udb::Csr)) }
  def csr(name); end

  sig { returns(T::Hash[String, Udb::Csr]) }
  def csr_hash; end

  sig { returns(T::Array[Udb::Csr]) }
  def csrs; end

  sig { params(name: String).returns(T.nilable(Udb::Extension)) }
  def extension(name); end

  sig { returns(T::Hash[String, Udb::Extension]) }
  def extension_hash; end

  sig { returns(T::Array[Udb::Extension]) }
  def extensions; end

  sig { params(name: String).returns(T.nilable(Udb::Instruction)) }
  def instruction(name); end

  sig { returns(T::Hash[String, Udb::Instruction]) }
  def instruction_hash; end

  sig { params(name: String).returns(T.nilable(Udb::InstructionSubtype)) }
  def instruction_subtype(name); end

  sig { returns(T::Hash[String, Udb::InstructionSubtype]) }
  def instruction_subtype_hash; end

  sig { returns(T::Array[Udb::InstructionSubtype]) }
  def instruction_subtypes; end

  sig { params(name: String).returns(T.nilable(Udb::InstructionType)) }
  def instruction_type(name); end

  sig { returns(T::Hash[String, Udb::InstructionType]) }
  def instruction_type_hash; end

  sig { returns(T::Array[Udb::InstructionType]) }
  def instruction_types; end

  sig { returns(T::Array[Udb::Instruction]) }
  def instructions; end

  sig { params(name: String).returns(T.nilable(Udb::Manual)) }
  def manual(name); end

  sig { returns(T::Hash[String, Udb::Manual]) }
  def manual_hash; end

  sig { params(name: String).returns(T.nilable(Udb::ManualVersion)) }
  def manual_version(name); end

  sig { returns(T::Hash[String, Udb::ManualVersion]) }
  def manual_version_hash; end

  sig { returns(T::Array[Udb::ManualVersion]) }
  def manual_versions; end

  sig { returns(T::Array[Udb::Manual]) }
  def manuals; end

  sig { params(name: String).returns(T.nilable(Udb::ProcCertClass)) }
  def proc_cert_class(name); end

  sig { returns(T::Hash[String, Udb::ProcCertClass]) }
  def proc_cert_class_hash; end

  sig { returns(T::Array[Udb::ProcCertClass]) }
  def proc_cert_classes; end

  sig { params(name: String).returns(T.nilable(Udb::ProcCertModel)) }
  def proc_cert_model(name); end

  sig { returns(T::Hash[String, Udb::ProcCertModel]) }
  def proc_cert_model_hash; end

  sig { returns(T::Array[Udb::ProcCertModel]) }
  def proc_cert_models; end

  sig { params(name: String).returns(T.nilable(Udb::Profile)) }
  def profile(name); end

  sig { returns(T::Array[Udb::ProfileFamily]) }
  def profile_families; end

  sig { params(name: String).returns(T.nilable(Udb::ProfileFamily)) }
  def profile_family(name); end

  sig { returns(T::Hash[String, Udb::ProfileFamily]) }
  def profile_family_hash; end

  sig { returns(T::Hash[String, Udb::Profile]) }
  def profile_hash; end

  sig { params(name: String).returns(T.nilable(Udb::ProfileRelease)) }
  def profile_release(name); end

  sig { returns(T::Hash[String, Udb::ProfileRelease]) }
  def profile_release_hash; end

  sig { returns(T::Array[Udb::ProfileRelease]) }
  def profile_releases; end

  sig { returns(T::Array[Udb::Profile]) }
  def profiles; end
end
