# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `asciidoctor` gem.
# Please instead update this file by running `bin/tapioca gem asciidoctor`.


# source://asciidoctor//lib/asciidoctor/core_ext/nil_or_empty.rb#14
class Array
  include ::Enumerable
end

# source://asciidoctor//lib/asciidoctor.rb#48
module Asciidoctor
  class << self
    # source://asciidoctor//lib/asciidoctor.rb#529
    def const_missing(name); end

    # source://asciidoctor//lib/asciidoctor/convert.rb#34
    def convert(input, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/convert.rb#189
    def convert_file(filename, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/load.rb#17
    def load(input, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/load.rb#115
    def load_file(filename, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/convert.rb#34
    def render(input, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/convert.rb#189
    def render_file(filename, options = T.unsafe(nil)); end
  end
end

# source://asciidoctor//lib/asciidoctor.rb#270
Asciidoctor::ADMONITION_STYLES = T.let(T.unsafe(nil), Set)

# source://asciidoctor//lib/asciidoctor.rb#272
Asciidoctor::ADMONITION_STYLE_HEADS = T.let(T.unsafe(nil), Set)

# source://asciidoctor//lib/asciidoctor.rb#253
Asciidoctor::ASCIIDOC_EXTENSIONS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#330
Asciidoctor::ATTR_REF_HEAD = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/abstract_block.rb#3
class Asciidoctor::AbstractBlock < ::Asciidoctor::AbstractNode
  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#36
  def initialize(parent, context, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#115
  def <<(block); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#226
  def alt; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#115
  def append(block); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#389
  def assign_caption(value, caption_context = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#408
  def assign_numeral(section); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#52
  def block?; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#5
  def blocks; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#127
  def blocks?; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#246
  def caption; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#8
  def caption=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#260
  def captioned_title; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#84
  def content; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#16
  def content_model; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#16
  def content_model=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#95
  def context=(context); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#74
  def convert; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#61
  def file; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#176
  def find_by(selector = T.unsafe(nil), &block); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#56
  def inline?; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#19
  def level; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#19
  def level=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#66
  def lineno; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#271
  def list_marker_keyword(list_type = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#186
  def next_adjacent_block; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#143
  def number; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#148
  def number=(val); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#24
  def numeral; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#24
  def numeral=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#176
  def query(selector = T.unsafe(nil), &block); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#435
  def reindex_sections; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#324
  def remove_sub(sub); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#74
  def render; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#218
  def sections; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#138
  def sections?; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#28
  def source_location; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#28
  def source_location=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#31
  def style; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#31
  def style=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#315
  def sub?(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#34
  def subs; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#288
  def title; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#303
  def title=(val); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#296
  def title?; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#345
  def xreftext(xrefstyle = T.unsafe(nil)); end

  protected

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#449
  def find_by_internal(selector = T.unsafe(nil), result = T.unsafe(nil), &block); end
end

# source://asciidoctor//lib/asciidoctor/abstract_node.rb#6
class Asciidoctor::AbstractNode
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Substitutors
  extend ::Asciidoctor::Logging

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#28
  def initialize(parent, context, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#232
  def add_role(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#87
  def attr(name, default_value = T.unsafe(nil), fallback_name = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#106
  def attr?(name, expected_value = T.unsafe(nil), fallback_name = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#11
  def attributes; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#44
  def block?; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#14
  def context; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#61
  def converter; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#17
  def document; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#168
  def enabled_options; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#365
  def generate_data_uri(target_image, asset_dir_key = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#401
  def generate_data_uri_from_uri(image_uri, cache_uri = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#215
  def has_role?(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#291
  def icon_uri(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#20
  def id; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#20
  def id=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#321
  def image_uri(target_image, asset_dir_key = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#53
  def inline?; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#563
  def is_uri?(str); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#349
  def media_uri(target, asset_dir_key = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#23
  def node_name; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#429
  def normalize_asset_path(asset_ref, asset_name = T.unsafe(nil), autocorrect = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#458
  def normalize_system_path(target, start = T.unsafe(nil), jail = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#481
  def normalize_web_path(target, start = T.unsafe(nil), preserve_uri_target = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#149
  def option?(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#26
  def parent; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#70
  def parent=(parent); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#502
  def read_asset(path, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#531
  def read_contents(target, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#264
  def reftext; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#269
  def reftext?; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#136
  def remove_attr(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#250
  def remove_role(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#188
  def role; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#225
  def role=(names); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#206
  def role?(expected_value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#195
  def roles; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#122
  def set_attr(name, value = T.unsafe(nil), overwrite = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#160
  def set_option(name); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#181
  def update_attributes(new_attributes); end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#201
Asciidoctor::AdmonitionParagraphRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#274
Asciidoctor::AnyListRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#141
Asciidoctor::AttributeEntryPassMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#124
Asciidoctor::AttributeEntryRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#24
class Asciidoctor::AttributeList
  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#53
  def initialize(source, block = T.unsafe(nil), delimiter = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#66
  def parse(positional_attrs = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#62
  def parse_into(attributes, positional_attrs = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#82
  def rekey(positional_attrs); end

  private

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#98
  def parse_attribute(index, positional_attrs); end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#186
  def parse_attribute_value(quote); end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#208
  def scan_name; end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#212
  def scan_to_delimiter; end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#216
  def scan_to_quote(quote); end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#200
  def skip_blank; end

  # source://asciidoctor//lib/asciidoctor/attribute_list.rb#204
  def skip_delimiter; end

  class << self
    # source://asciidoctor//lib/asciidoctor/attribute_list.rb#86
    def rekey(attributes, positional_attrs); end
  end
end

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#25
Asciidoctor::AttributeList::APOS = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#26
Asciidoctor::AttributeList::BACKSLASH = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#46
Asciidoctor::AttributeList::BlankRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#30
Asciidoctor::AttributeList::BoundaryRx = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#37
Asciidoctor::AttributeList::EscapedQuotes = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#44
Asciidoctor::AttributeList::NameRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#27
Asciidoctor::AttributeList::QUOT = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/attribute_list.rb#49
Asciidoctor::AttributeList::SkipRx = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#153
Asciidoctor::AttributeReferenceRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#241
Asciidoctor::AtxSectionTitleRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#30
Asciidoctor::AuthorDelimiterRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#22
Asciidoctor::AuthorInfoLineRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#231
Asciidoctor::BACKEND_ALIASES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#341
Asciidoctor::BLOCK_MATH_DELIMITERS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#208
Asciidoctor::BOM_BYTES_UTF_16BE = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor.rb#207
Asciidoctor::BOM_BYTES_UTF_16LE = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor.rb#206
Asciidoctor::BOM_BYTES_UTF_8 = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/rx.rb#662
Asciidoctor::BlankLineRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/block.rb#10
class Asciidoctor::Block < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/block.rb#50
  def initialize(parent, context, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#14
  def blockname; end

  # source://asciidoctor//lib/asciidoctor/block.rb#108
  def content; end

  # source://asciidoctor//lib/asciidoctor/block.rb#30
  def lines; end

  # source://asciidoctor//lib/asciidoctor/block.rb#30
  def lines=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/block.rb#135
  def source; end

  # source://asciidoctor//lib/asciidoctor/block.rb#139
  def to_s; end
end

# source://asciidoctor//lib/asciidoctor/block.rb#12
Asciidoctor::Block::DEFAULT_CONTENT_MODEL = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#164
Asciidoctor::BlockAnchorRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#184
Asciidoctor::BlockAttributeLineRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#179
Asciidoctor::BlockAttributeListRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#421
Asciidoctor::BlockMediaMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#192
Asciidoctor::BlockTitleRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#430
Asciidoctor::BlockTocMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#298
Asciidoctor::CAPTION_ATTRIBUTE_NAMES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#429
Asciidoctor::CC_ALL = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#434
Asciidoctor::CC_ALNUM = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#433
Asciidoctor::CC_ALPHA = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#431
Asciidoctor::CC_ANY = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#432
Asciidoctor::CC_EOL = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#436
Asciidoctor::CC_WORD = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#434
Asciidoctor::CG_ALNUM = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#433
Asciidoctor::CG_ALPHA = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#435
Asciidoctor::CG_BLANK = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#436
Asciidoctor::CG_WORD = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/rx.rb#369
Asciidoctor::CalloutExtractRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#371
Asciidoctor::CalloutExtractRxMap = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#370
Asciidoctor::CalloutExtractRxt = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/rx.rb#358
Asciidoctor::CalloutListRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#373
Asciidoctor::CalloutScanRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#375
Asciidoctor::CalloutSourceRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#377
Asciidoctor::CalloutSourceRxMap = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#376
Asciidoctor::CalloutSourceRxt = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/callouts.rb#4
class Asciidoctor::Callouts
  # source://asciidoctor//lib/asciidoctor/callouts.rb#5
  def initialize; end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#61
  def callout_ids(li_ordinal); end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#68
  def current_list; end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#75
  def next_list; end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#43
  def read_next_id; end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#30
  def register(li_ordinal); end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#90
  def rewind; end

  private

  # source://asciidoctor//lib/asciidoctor/callouts.rb#111
  def generate_callout_id(list_index, co_index); end

  # source://asciidoctor//lib/asciidoctor/callouts.rb#101
  def generate_next_callout_id; end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#400
Asciidoctor::CellSpecEndRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#399
Asciidoctor::CellSpecStartRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#390
Asciidoctor::ColumnSpecRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#106
module Asciidoctor::Compliance
  class << self
    # source://asciidoctor//lib/asciidoctor.rb#114
    def attribute_missing; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def attribute_missing=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def attribute_undefined; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def attribute_undefined=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def block_terminates_paragraph; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def block_terminates_paragraph=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#112
    def define(key, value); end

    # source://asciidoctor//lib/asciidoctor.rb#109
    def keys; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def markdown_syntax; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def markdown_syntax=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def natural_xrefs; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def natural_xrefs=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def shorthand_property_syntax; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def shorthand_property_syntax=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def strict_verbatim_paragraphs; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def strict_verbatim_paragraphs=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def underline_style_section_titles; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def underline_style_section_titles=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def unique_id_start_index; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def unique_id_start_index=(_arg0); end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def unwrap_standalone_preamble; end

    # source://asciidoctor//lib/asciidoctor.rb#114
    def unwrap_standalone_preamble=(_arg0); end
  end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#75
Asciidoctor::ConditionalDirectiveRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/converter.rb#43
module Asciidoctor::Converter
  extend ::Asciidoctor::Converter::Factory
  extend ::Asciidoctor::Converter::DefaultFactory
  include ::Asciidoctor::Converter::BackendTraits

  mixes_in_class_methods ::Asciidoctor::Converter::Config

  # source://asciidoctor//lib/asciidoctor/converter.rb#56
  def initialize(backend, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#48
  def backend; end

  # source://asciidoctor//lib/asciidoctor/converter.rb#71
  def convert(node, transform = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#81
  def handles?(transform); end

  class << self
    # source://asciidoctor//lib/asciidoctor/converter.rb#91
    def derive_backend_traits(backend, basebackend = T.unsafe(nil)); end

    private

    # source://asciidoctor//lib/asciidoctor/converter.rb#369
    def included(into); end
  end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#103
module Asciidoctor::Converter::BackendTraits
  # source://asciidoctor//lib/asciidoctor/converter.rb#132
  def backend_info(basebackend = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#132
  def backend_traits(basebackend = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#104
  def basebackend(value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#108
  def filetype(value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#112
  def htmlsyntax(value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#128
  def init_backend_traits(value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#116
  def outfilesuffix(value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#120
  def supports_templates(value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#124
  def supports_templates?; end

  class << self
    # source://asciidoctor//lib/asciidoctor/converter.rb#139
    def derive_backend_traits(backend, basebackend = T.unsafe(nil)); end
  end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#377
class Asciidoctor::Converter::Base
  include ::Asciidoctor::Logging
  include ::Asciidoctor::Converter
  include ::Asciidoctor::Converter::BackendTraits
  extend ::Asciidoctor::Logging
  extend ::Asciidoctor::Converter::Config

  # source://asciidoctor//lib/asciidoctor/converter.rb#405
  def content_only(node); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#390
  def convert(node, transform = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#398
  def handles?(transform); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#412
  def skip(node); end
end

# source://asciidoctor//lib/asciidoctor/converter/composite.rb#6
class Asciidoctor::Converter::CompositeConverter < ::Asciidoctor::Converter::Base
  # source://asciidoctor//lib/asciidoctor/converter/composite.rb#10
  def initialize(backend, *converters, backend_traits_source: T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter/composite.rb#27
  def convert(node, transform = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter/composite.rb#34
  def converter_for(transform); end

  # source://asciidoctor//lib/asciidoctor/converter/composite.rb#8
  def converters; end

  # source://asciidoctor//lib/asciidoctor/converter/composite.rb#42
  def find_converter(transform); end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#145
module Asciidoctor::Converter::Config
  # source://asciidoctor//lib/asciidoctor/converter.rb#151
  def register_for(*backends); end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#257
class Asciidoctor::Converter::CustomFactory
  include ::Asciidoctor::Converter::Factory

  # source://asciidoctor//lib/asciidoctor/converter.rb#260
  def initialize(seed_registry = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#272
  def unregister_all; end

  private

  # source://asciidoctor//lib/asciidoctor/converter.rb#278
  def registry; end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#286
module Asciidoctor::Converter::DefaultFactory
  include ::Asciidoctor::Converter::Factory

  # source://asciidoctor//lib/asciidoctor/converter.rb#315
  def for(backend); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#300
  def register(converter, *backends); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#308
  def unregister_all; end

  private

  # source://asciidoctor//lib/asciidoctor/converter.rb#333
  def catch_all; end

  # source://asciidoctor//lib/asciidoctor/converter.rb#293
  def registry; end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#325
Asciidoctor::Converter::DefaultFactory::PROVIDED = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/converter.rb#342
class Asciidoctor::Converter::DefaultFactoryProxy < ::Asciidoctor::Converter::CustomFactory
  include ::Asciidoctor::Converter::DefaultFactory

  # source://asciidoctor//lib/asciidoctor/converter.rb#351
  def for(backend); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#346
  def unregister_all; end

  private

  # source://asciidoctor//lib/asciidoctor/converter.rb#357
  def catch_all; end
end

# source://asciidoctor//lib/asciidoctor/converter.rb#168
module Asciidoctor::Converter::Factory
  # source://asciidoctor//lib/asciidoctor/converter.rb#246
  def converters; end

  # source://asciidoctor//lib/asciidoctor/converter.rb#227
  def create(backend, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#208
  def for(backend); end

  # source://asciidoctor//lib/asciidoctor/converter.rb#199
  def register(converter, *backends); end

  private

  # source://asciidoctor//lib/asciidoctor/converter.rb#252
  def registry; end

  class << self
    # source://asciidoctor//lib/asciidoctor/converter.rb#188
    def create(backend, opts = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/converter.rb#183
    def default(*args); end

    # source://asciidoctor//lib/asciidoctor/converter.rb#178
    def new(converters = T.unsafe(nil), proxy_default: T.unsafe(nil)); end
  end
end

# source://asciidoctor//lib/asciidoctor/converter/template.rb#27
class Asciidoctor::Converter::TemplateConverter < ::Asciidoctor::Converter::Base
  # source://asciidoctor//lib/asciidoctor/converter/template.rb#52
  def initialize(backend, template_dirs, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#97
  def convert(node, template_name = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#119
  def handles?(name); end

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#136
  def register(name, template); end

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#126
  def templates; end

  private

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#256
  def load_eruby(name); end

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#150
  def scan; end

  # source://asciidoctor//lib/asciidoctor/converter/template.rb#196
  def scan_dir(template_dir, pattern, template_cache = T.unsafe(nil)); end

  class << self
    # source://asciidoctor//lib/asciidoctor/converter/template.rb#44
    def caches; end

    # source://asciidoctor//lib/asciidoctor/converter/template.rb#46
    def clear_caches; end
  end
end

# source://asciidoctor//lib/asciidoctor/converter/template.rb#28
Asciidoctor::Converter::TemplateConverter::DEFAULT_ENGINE_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#412
Asciidoctor::CustomBlockMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#184
Asciidoctor::DATA_DIR = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#363
Asciidoctor::DEFAULT_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#224
Asciidoctor::DEFAULT_BACKEND = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#221
Asciidoctor::DEFAULT_DOCTYPE = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#242
Asciidoctor::DEFAULT_EXTENSIONS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#237
Asciidoctor::DEFAULT_PAGE_WIDTHS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#226
Asciidoctor::DEFAULT_STYLESHEET_KEYS = T.let(T.unsafe(nil), Set)

# source://asciidoctor//lib/asciidoctor.rb#228
Asciidoctor::DEFAULT_STYLESHEET_NAME = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#278
Asciidoctor::DELIMITED_BLOCKS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#294
Asciidoctor::DELIMITED_BLOCK_HEADS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#295
Asciidoctor::DELIMITED_BLOCK_TAILS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#336
Asciidoctor::DescriptionListRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#340
Asciidoctor::DescriptionListSiblingRx = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/document.rb#83
class Asciidoctor::Document < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/document.rb#253
  def initialize(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#807
  def <<(block); end

  # source://asciidoctor//lib/asciidoctor/document.rb#900
  def attribute_locked?(name); end

  # source://asciidoctor//lib/asciidoctor/document.rb#747
  def author; end

  # source://asciidoctor//lib/asciidoctor/document.rb#756
  def authors; end

  # source://asciidoctor//lib/asciidoctor/document.rb#190
  def backend; end

  # source://asciidoctor//lib/asciidoctor/document.rb#214
  def base_dir; end

  # source://asciidoctor//lib/asciidoctor/document.rb#676
  def basebackend?(base); end

  # source://asciidoctor//lib/asciidoctor/document.rb#650
  def callouts; end

  # source://asciidoctor//lib/asciidoctor/document.rb#199
  def catalog; end

  # source://asciidoctor//lib/asciidoctor/document.rb#187
  def compat_mode; end

  # source://asciidoctor//lib/asciidoctor/document.rb#1009
  def content; end

  # source://asciidoctor//lib/asciidoctor/document.rb#929
  def convert(opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#232
  def converter; end

  # source://asciidoctor//lib/asciidoctor/document.rb#567
  def counter(name, seed = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#586
  def counter_increment(counter_name, block); end

  # source://asciidoctor//lib/asciidoctor/document.rb#205
  def counters; end

  # source://asciidoctor//lib/asciidoctor/document.rb#885
  def delete_attribute(name); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1027
  def docinfo(location = T.unsafe(nil), suffix = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1075
  def docinfo_processors?(location = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#721
  def doctitle(opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#193
  def doctype; end

  # source://asciidoctor//lib/asciidoctor/document.rb#658
  def embedded?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#238
  def extensions; end

  # source://asciidoctor//lib/asciidoctor/document.rb#662
  def extensions?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#817
  def finalize_header(unrooted_attributes, header_valid = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#791
  def first_section; end

  # source://asciidoctor//lib/asciidoctor/document.rb#646
  def footnotes; end

  # source://asciidoctor//lib/asciidoctor/document.rb#642
  def footnotes?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#795
  def has_header?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#208
  def header; end

  # source://asciidoctor//lib/asciidoctor/document.rb#795
  def header?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#586
  def increment_and_store_counter(counter_name, block); end

  # source://asciidoctor//lib/asciidoctor/document.rb#721
  def name(opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#654
  def nested?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#787
  def nofooter; end

  # source://asciidoctor//lib/asciidoctor/document.rb#783
  def noheader; end

  # source://asciidoctor//lib/asciidoctor/document.rb#779
  def notitle; end

  # source://asciidoctor//lib/asciidoctor/document.rb#217
  def options; end

  # source://asciidoctor//lib/asciidoctor/document.rb#220
  def outfilesuffix; end

  # source://asciidoctor//lib/asciidoctor/document.rb#223
  def parent_document; end

  # source://asciidoctor//lib/asciidoctor/document.rb#520
  def parse(data = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#557
  def parsed?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#229
  def path_resolver; end

  # source://asciidoctor//lib/asciidoctor/document.rb#825
  def playback_attributes(block_attributes); end

  # source://asciidoctor//lib/asciidoctor/document.rb#226
  def reader; end

  # source://asciidoctor//lib/asciidoctor/document.rb#199
  def references; end

  # source://asciidoctor//lib/asciidoctor/document.rb#593
  def register(type, value); end

  # source://asciidoctor//lib/asciidoctor/document.rb#929
  def render(opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#612
  def resolve_id(text); end

  # source://asciidoctor//lib/asciidoctor/document.rb#841
  def restore_attributes; end

  # source://asciidoctor//lib/asciidoctor/document.rb#775
  def revdate; end

  # source://asciidoctor//lib/asciidoctor/document.rb#176
  def safe; end

  # source://asciidoctor//lib/asciidoctor/document.rb#638
  def sections?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#857
  def set_attribute(name, value = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#915
  def set_header_attribute(name, value = T.unsafe(nil), overwrite = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#667
  def source; end

  # source://asciidoctor//lib/asciidoctor/document.rb#672
  def source_lines; end

  # source://asciidoctor//lib/asciidoctor/document.rb#196
  def sourcemap; end

  # source://asciidoctor//lib/asciidoctor/document.rb#196
  def sourcemap=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/document.rb#235
  def syntax_highlighter; end

  # source://asciidoctor//lib/asciidoctor/document.rb#683
  def title; end

  # source://asciidoctor//lib/asciidoctor/document.rb#695
  def title=(title); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1086
  def to_s; end

  # source://asciidoctor//lib/asciidoctor/document.rb#986
  def write(output, target); end

  # source://asciidoctor//lib/asciidoctor/document.rb#740
  def xreftext(xrefstyle = T.unsafe(nil)); end

  private

  # source://asciidoctor//lib/asciidoctor/document.rb#1102
  def apply_attribute_value_subs(value); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1160
  def clear_playback_attributes(attributes); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1141
  def create_converter(backend, delegate_backend); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1257
  def fill_datetime_attributes(attrs, input_mtime); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1120
  def limit_bytesize(str, max); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1134
  def resolve_docinfo_subs; end

  # source://asciidoctor//lib/asciidoctor/document.rb#1168
  def save_attributes; end

  # source://asciidoctor//lib/asciidoctor/document.rb#1289
  def update_backend_attributes(new_backend, init = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#1372
  def update_doctype_attributes(new_doctype); end
end

# source://asciidoctor//lib/asciidoctor/document.rb#91
class Asciidoctor::Document::AttributeEntry
  # source://asciidoctor//lib/asciidoctor/document.rb#94
  def initialize(name, value, negate = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#92
  def name; end

  # source://asciidoctor//lib/asciidoctor/document.rb#92
  def negate; end

  # source://asciidoctor//lib/asciidoctor/document.rb#100
  def save_to(block_attributes); end

  # source://asciidoctor//lib/asciidoctor/document.rb#92
  def value; end
end

# source://asciidoctor//lib/asciidoctor/document.rb#141
class Asciidoctor::Document::Author < ::Struct
  def email; end
  def email=(_); end
  def firstname; end
  def firstname=(_); end
  def initials; end
  def initials=(_); end
  def lastname; end
  def lastname=(_); end
  def middlename; end
  def middlename=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://asciidoctor//lib/asciidoctor/document.rb#89
class Asciidoctor::Document::Footnote < ::Struct
  def id; end
  def id=(_); end
  def index; end
  def index=(_); end
  def text; end
  def text=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://asciidoctor//lib/asciidoctor/document.rb#85
class Asciidoctor::Document::ImageReference < ::Struct
  def imagesdir; end
  def imagesdir=(_); end
  def target; end
  def target=(_); end
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://asciidoctor//lib/asciidoctor/document.rb#107
class Asciidoctor::Document::Title
  # source://asciidoctor//lib/asciidoctor/document.rb#113
  def initialize(val, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/document.rb#111
  def combined; end

  # source://asciidoctor//lib/asciidoctor/document.rb#108
  def main; end

  # source://asciidoctor//lib/asciidoctor/document.rb#127
  def sanitized?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#110
  def subtitle; end

  # source://asciidoctor//lib/asciidoctor/document.rb#131
  def subtitle?; end

  # source://asciidoctor//lib/asciidoctor/document.rb#108
  def title; end

  # source://asciidoctor//lib/asciidoctor/document.rb#135
  def to_s; end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#679
Asciidoctor::EscapedSpaceRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#83
Asciidoctor::EvalExpressionRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#244
Asciidoctor::ExtAtxSectionTitleRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#650
Asciidoctor::ExtLayoutBreakRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/extensions.rb#25
module Asciidoctor::Extensions
  class << self
    # source://asciidoctor//lib/asciidoctor/extensions.rb#1491
    def create(name = T.unsafe(nil), &block); end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#1478
    def generate_name; end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#1487
    def groups; end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#1482
    def next_auto_id; end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#1533
    def register(*args, &block); end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#1563
    def unregister(*names); end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#1553
    def unregister_all; end
  end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#611
class Asciidoctor::Extensions::BlockMacroProcessor < ::Asciidoctor::Extensions::MacroProcessor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#612
  def name; end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#617
Asciidoctor::Extensions::BlockMacroProcessor::DSL = Asciidoctor::Extensions::MacroProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#538
class Asciidoctor::Extensions::BlockProcessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#541
  def initialize(name = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#539
  def name; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#539
  def name=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#557
  def process(parent, reader, attributes); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#572
Asciidoctor::Extensions::BlockProcessor::DSL = Asciidoctor::Extensions::BlockProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#562
module Asciidoctor::Extensions::BlockProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl
  include ::Asciidoctor::Extensions::SyntaxProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#565
  def bind_to(*value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#565
  def contexts(*value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#565
  def on_context(*value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#565
  def on_contexts(*value); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#486
class Asciidoctor::Extensions::DocinfoProcessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#487
  def initialize(config = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#492
  def process(document); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#504
Asciidoctor::Extensions::DocinfoProcessor::DSL = Asciidoctor::Extensions::DocinfoProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#497
module Asciidoctor::Extensions::DocinfoProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl
  include ::Asciidoctor::Extensions::DocumentProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#500
  def at_location(value); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#286
module Asciidoctor::Extensions::DocumentProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#289
  def prefer; end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#668
class Asciidoctor::Extensions::Extension
  # source://asciidoctor//lib/asciidoctor/extensions.rb#673
  def initialize(kind, instance, config); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#670
  def config; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#671
  def instance; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#669
  def kind; end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#698
class Asciidoctor::Extensions::Group
  # source://asciidoctor//lib/asciidoctor/extensions.rb#705
  def activate(registry); end

  class << self
    # source://asciidoctor//lib/asciidoctor/extensions.rb#700
    def register(name = T.unsafe(nil)); end
  end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#447
class Asciidoctor::Extensions::IncludeProcessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#452
  def handles?(target); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#448
  def process(document, reader, target, attributes); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#476
Asciidoctor::Extensions::IncludeProcessor::DSL = Asciidoctor::Extensions::IncludeProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#457
module Asciidoctor::Extensions::IncludeProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl
  include ::Asciidoctor::Extensions::DocumentProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#460
  def handles?(*args, &block); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#627
class Asciidoctor::Extensions::InlineMacroProcessor < ::Asciidoctor::Extensions::MacroProcessor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#632
  def regexp; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#636
  def resolve_regexp(name, format); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#656
Asciidoctor::Extensions::InlineMacroProcessor::DSL = Asciidoctor::Extensions::InlineMacroProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#642
module Asciidoctor::Extensions::InlineMacroProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl
  include ::Asciidoctor::Extensions::SyntaxProcessorDsl
  include ::Asciidoctor::Extensions::MacroProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#645
  def format(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#652
  def match(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#645
  def match_format(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#645
  def using_format(value); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#574
class Asciidoctor::Extensions::MacroProcessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#577
  def initialize(name = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#575
  def name; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#575
  def name=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#583
  def process(parent, target, attributes); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#588
module Asciidoctor::Extensions::MacroProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl
  include ::Asciidoctor::Extensions::SyntaxProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#591
  def resolve_attributes(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#591
  def resolves_attributes(*args); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#429
class Asciidoctor::Extensions::Postprocessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#430
  def process(document, output); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#434
Asciidoctor::Extensions::Postprocessor::DSL = Asciidoctor::Extensions::DocumentProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#387
class Asciidoctor::Extensions::Preprocessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#388
  def process(document, reader); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#392
Asciidoctor::Extensions::Preprocessor::DSL = Asciidoctor::Extensions::DocumentProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#38
class Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#81
  def initialize(config = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#79
  def config; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_anchor(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#155
  def create_block(parent, context, source, attrs, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_example_block(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#191
  def create_image_block(parent, attrs, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#205
  def create_inline(parent, context, text, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_inline_pass(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#166
  def create_list(parent, context, attrs = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#178
  def create_list_item(parent, text = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_listing_block(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_literal_block(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_open_block(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_paragraph(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#246
  def create_pass_block(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#112
  def create_section(parent, title, attrs, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#229
  def parse_attributes(block, attrlist, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#214
  def parse_content(parent, content, attributes = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#89
  def process(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#85
  def update_config(config); end

  class << self
    # source://asciidoctor//lib/asciidoctor/extensions.rb#43
    def config; end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#66
    def enable_dsl; end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#55
    def option(key, default_value); end

    # source://asciidoctor//lib/asciidoctor/extensions.rb#66
    def use_dsl; end
  end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#256
module Asciidoctor::Extensions::ProcessorDsl
  # source://asciidoctor//lib/asciidoctor/extensions.rb#257
  def option(key, value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#261
  def process(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#281
  def process_block_given?; end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#683
class Asciidoctor::Extensions::ProcessorExtension < ::Asciidoctor::Extensions::Extension
  # source://asciidoctor//lib/asciidoctor/extensions.rb#686
  def initialize(kind, instance, process_method = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#684
  def process_method; end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#715
class Asciidoctor::Extensions::Registry
  # source://asciidoctor//lib/asciidoctor/extensions.rb#722
  def initialize(groups = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#735
  def activate(document); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1098
  def block(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1193
  def block_macro(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1200
  def block_macros?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1105
  def blocks?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1005
  def docinfo_processor(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1032
  def docinfo_processors(location = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1014
  def docinfo_processors?(location = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#717
  def document; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1135
  def find_block_extension(name); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1230
  def find_block_macro_extension(name); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1323
  def find_inline_macro_extension(name); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#720
  def groups; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#952
  def include_processor(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#967
  def include_processors; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#959
  def include_processors?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1288
  def inline_macro(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1334
  def inline_macros; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1295
  def inline_macros?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#900
  def postprocessor(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#915
  def postprocessors; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#907
  def postprocessors?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1351
  def prefer(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#791
  def preprocessor(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#806
  def preprocessors; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#798
  def preprocessors?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1117
  def registered_for_block?(name, context); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1216
  def registered_for_block_macro?(name); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1309
  def registered_for_inline_macro?(name); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#843
  def tree_processor(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#858
  def tree_processors; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#850
  def tree_processors?; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#843
  def treeprocessor(*args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#858
  def treeprocessors; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#850
  def treeprocessors?; end

  private

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1360
  def add_document_processor(kind, args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1404
  def add_syntax_processor(kind, args, &block); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1472
  def as_symbol(name); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1455
  def reset; end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#1460
  def resolve_args(args, expect); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#294
module Asciidoctor::Extensions::SyntaxProcessorDsl
  include ::Asciidoctor::Extensions::ProcessorDsl

  # source://asciidoctor//lib/asciidoctor/extensions.rb#306
  def content_model(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#318
  def default_attributes(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#318
  def default_attrs(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#311
  def name_positional_attributes(*value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#297
  def named(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#306
  def parse_content_as(value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#311
  def positional_attributes(*value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#311
  def positional_attrs(*value); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#324
  def resolve_attributes(*args); end

  # source://asciidoctor//lib/asciidoctor/extensions.rb#324
  def resolves_attributes(*args); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#404
class Asciidoctor::Extensions::TreeProcessor < ::Asciidoctor::Extensions::Processor
  # source://asciidoctor//lib/asciidoctor/extensions.rb#405
  def process(document); end
end

# source://asciidoctor//lib/asciidoctor/extensions.rb#409
Asciidoctor::Extensions::TreeProcessor::DSL = Asciidoctor::Extensions::DocumentProcessorDsl

# source://asciidoctor//lib/asciidoctor/extensions.rb#412
Asciidoctor::Extensions::Treeprocessor = Asciidoctor::Extensions::TreeProcessor

# source://asciidoctor//lib/asciidoctor.rb#211
Asciidoctor::FILE_READ_MODE = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#217
Asciidoctor::FILE_WRITE_MODE = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#390
Asciidoctor::FLEXIBLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor.rb#357
Asciidoctor::FONT_AWESOME_VERSION = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#335
Asciidoctor::HARD_LINE_BREAK = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#359
Asciidoctor::HIGHLIGHT_JS_VERSION = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#311
Asciidoctor::HYBRID_LAYOUT_BREAK_CHARS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#627
Asciidoctor::HardLineBreakRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/helpers.rb#4
module Asciidoctor::Helpers
  private

  # source://asciidoctor//lib/asciidoctor/helpers.rb#200
  def basename(filename, drop_ext = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#306
  def class_for_name(qualified_name); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#163
  def encode_spaces_in_uri(str); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#149
  def encode_uri_component(str); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#235
  def extname(path, fallback = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#213
  def extname?(path); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#269
  def int_to_roman(val); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#245
  def mkdir_p(dir); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#283
  def nextval(current); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#64
  def prepare_source_array(data, trim_end = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#96
  def prepare_source_string(data, trim_end = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#26
  def require_library(name, gem_name = T.unsafe(nil), on_failure = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#299
  def resolve_class(object); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#177
  def rootname(filename); end

  # source://asciidoctor//lib/asciidoctor/helpers.rb#128
  def uriish?(str); end

  class << self
    # source://asciidoctor//lib/asciidoctor/helpers.rb#200
    def basename(filename, drop_ext = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#306
    def class_for_name(qualified_name); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#163
    def encode_spaces_in_uri(str); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#149
    def encode_uri_component(str); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#235
    def extname(path, fallback = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#213
    def extname?(path); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#269
    def int_to_roman(val); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#245
    def mkdir_p(dir); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#283
    def nextval(current); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#64
    def prepare_source_array(data, trim_end = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#96
    def prepare_source_string(data, trim_end = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#26
    def require_library(name, gem_name = T.unsafe(nil), on_failure = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#299
    def resolve_class(object); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#177
    def rootname(filename); end

    # source://asciidoctor//lib/asciidoctor/helpers.rb#128
    def uriish?(str); end
  end
end

# source://asciidoctor//lib/asciidoctor/helpers.rb#148
Asciidoctor::Helpers::CGI = CGI

# source://asciidoctor//lib/asciidoctor/helpers.rb#258
Asciidoctor::Helpers::ROMAN_NUMERALS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#346
Asciidoctor::INLINE_MATH_DELIMITERS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#392
Asciidoctor::INTRINSIC_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#92
Asciidoctor::IncludeDirectiveRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/inline.rb#4
class Asciidoctor::Inline < ::Asciidoctor::AbstractNode
  # source://asciidoctor//lib/asciidoctor/inline.rb#14
  def initialize(parent, context, text = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/inline.rb#41
  def alt; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#23
  def block?; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#31
  def convert; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#27
  def inline?; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#55
  def reftext; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#48
  def reftext?; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#31
  def render; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#12
  def target; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#12
  def target=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/inline.rb#6
  def text; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#6
  def text=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/inline.rb#9
  def type; end

  # source://asciidoctor//lib/asciidoctor/inline.rb#69
  def xreftext(xrefstyle = T.unsafe(nil)); end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#443
Asciidoctor::InlineAnchorRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#446
Asciidoctor::InlineAnchorScanRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#457
Asciidoctor::InlineBiblioAnchorRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#463
Asciidoctor::InlineEmailRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#474
Asciidoctor::InlineFootnoteMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#486
Asciidoctor::InlineImageMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#497
Asciidoctor::InlineIndextermMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#509
Asciidoctor::InlineKbdBtnMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#537
Asciidoctor::InlineLinkMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#526
Asciidoctor::InlineLinkRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#562
Asciidoctor::InlineMenuMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#570
Asciidoctor::InlineMenuRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#597
Asciidoctor::InlinePassMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#583
Asciidoctor::InlinePassRx = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#257
Asciidoctor::InlineSectionAnchorRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#551
Asciidoctor::InlineStemMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#608
Asciidoctor::InlineXrefMacroRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#127
Asciidoctor::InvalidAttributeNameCharsRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#262
Asciidoctor::InvalidSectionIdCharsRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#300
Asciidoctor::LAYOUT_BREAK_CHARS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#191
Asciidoctor::LF = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#181
Asciidoctor::LIB_DIR = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#337
Asciidoctor::LINE_CONTINUATION = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#339
Asciidoctor::LINE_CONTINUATION_LEGACY = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#332
Asciidoctor::LIST_CONTINUATION = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/rx.rb#449
Asciidoctor::LeadingInlineAnchorRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/list.rb#4
class Asciidoctor::List < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/list.rb#13
  def initialize(parent, context, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#5
  def content; end

  # source://asciidoctor//lib/asciidoctor/list.rb#24
  def convert; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#5
  def items; end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#127
  def items?; end

  # source://asciidoctor//lib/asciidoctor/list.rb#20
  def outline?; end

  # source://asciidoctor//lib/asciidoctor/list.rb#24
  def render; end

  # source://asciidoctor//lib/asciidoctor/list.rb#37
  def to_s; end
end

# source://asciidoctor//lib/asciidoctor/list.rb#47
class Asciidoctor::ListItem < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/list.rb#59
  def initialize(parent, text = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/list.rb#98
  def compound?; end

  # source://asciidoctor//lib/asciidoctor/list.rb#105
  def fold_first; end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#26
  def list; end

  # source://asciidoctor//lib/asciidoctor/list.rb#53
  def marker; end

  # source://asciidoctor//lib/asciidoctor/list.rb#53
  def marker=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/list.rb#90
  def simple?; end

  # source://asciidoctor//lib/asciidoctor/list.rb#78
  def text; end

  # source://asciidoctor//lib/asciidoctor/list.rb#84
  def text=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/list.rb#68
  def text?; end

  # source://asciidoctor//lib/asciidoctor/list.rb#110
  def to_s; end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#380
Asciidoctor::ListRxMap = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#209
Asciidoctor::LiteralParagraphRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/logging.rb#5
class Asciidoctor::Logger < ::Logger
  # source://asciidoctor//lib/asciidoctor/logging.rb#8
  def initialize(*args); end

  # source://asciidoctor//lib/asciidoctor/logging.rb#15
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/logging.rb#6
  def max_severity; end
end

# source://asciidoctor//lib/asciidoctor/logging.rb#30
module Asciidoctor::Logger::AutoFormattingMessage
  # source://asciidoctor//lib/asciidoctor/logging.rb#31
  def inspect; end
end

# source://asciidoctor//lib/asciidoctor/logging.rb#22
class Asciidoctor::Logger::BasicFormatter < ::Logger::Formatter
  # source://asciidoctor//lib/asciidoctor/logging.rb#25
  def call(severity, _, progname, msg); end
end

# source://asciidoctor//lib/asciidoctor/logging.rb#23
Asciidoctor::Logger::BasicFormatter::SEVERITY_LABEL_SUBSTITUTES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/logging.rb#83
module Asciidoctor::LoggerManager
  class << self
    # source://asciidoctor//lib/asciidoctor/logging.rb#89
    def logger(pipe = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/logging.rb#95
    def logger=(new_logger); end

    # source://asciidoctor//lib/asciidoctor/logging.rb#86
    def logger_class; end

    # source://asciidoctor//lib/asciidoctor/logging.rb#86
    def logger_class=(_arg0); end

    private

    # source://asciidoctor//lib/asciidoctor/logging.rb#101
    def memoize_logger; end
  end
end

# source://asciidoctor//lib/asciidoctor/logging.rb#110
module Asciidoctor::Logging
  # source://asciidoctor//lib/asciidoctor/logging.rb#121
  def logger; end

  # source://asciidoctor//lib/asciidoctor/logging.rb#125
  def message_with_context(text, context = T.unsafe(nil)); end

  class << self
    private

    # source://asciidoctor//lib/asciidoctor/logging.rb#116
    def included(into); end
  end
end

# source://asciidoctor//lib/asciidoctor.rb#305
Asciidoctor::MARKDOWN_THEMATIC_BREAK_CHARS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#361
Asciidoctor::MATHJAX_VERSION = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#200
Asciidoctor::MAX_INT = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor/rx.rb#541
Asciidoctor::MacroNameRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#59
Asciidoctor::ManpageNamePurposeRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#51
Asciidoctor::ManpageTitleVolnumRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#638
Asciidoctor::MarkdownThematicBreakRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/logging.rb#37
class Asciidoctor::MemoryLogger < ::Logger
  # source://asciidoctor//lib/asciidoctor/logging.rb#42
  def initialize; end

  # source://asciidoctor//lib/asciidoctor/logging.rb#48
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/logging.rb#54
  def clear; end

  # source://asciidoctor//lib/asciidoctor/logging.rb#58
  def empty?; end

  # source://asciidoctor//lib/asciidoctor/logging.rb#62
  def max_severity; end

  # source://asciidoctor//lib/asciidoctor/logging.rb#40
  def messages; end
end

# source://asciidoctor//lib/asciidoctor/logging.rb#38
Asciidoctor::MemoryLogger::SEVERITY_SYMBOL_BY_VALUE = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#315
Asciidoctor::NESTABLE_LIST_CONTEXTS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor.rb#194
Asciidoctor::NULL = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/logging.rb#67
class Asciidoctor::NullLogger < ::Logger
  # source://asciidoctor//lib/asciidoctor/logging.rb#70
  def initialize; end

  # source://asciidoctor//lib/asciidoctor/logging.rb#75
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/logging.rb#68
  def max_severity; end
end

# source://asciidoctor//lib/asciidoctor.rb#320
Asciidoctor::ORDERED_LIST_KEYWORDS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#318
Asciidoctor::ORDERED_LIST_STYLES = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/rx.rb#303
Asciidoctor::OrderedListMarkerRxMap = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/rx.rb#300
Asciidoctor::OrderedListRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#274
Asciidoctor::PARAGRAPH_STYLES = T.let(T.unsafe(nil), Set)

# source://asciidoctor//lib/asciidoctor/parser.rb#25
class Asciidoctor::Parser
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  class << self
    # source://asciidoctor//lib/asciidoctor/parser.rb#2675
    def adjust_indentation!(lines, indent_size = T.unsafe(nil), tab_size = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1709
    def atx_section_title?(line); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1016
    def build_block(block_context, content_model, terminator, parent, reader, attributes, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1137
    def catalog_callouts(text, document); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1157
    def catalog_inline_anchor(id, reftext, node, location, doc = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1173
    def catalog_inline_anchors(text, block, document, reader); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1207
    def catalog_inline_biblio_anchor(id, reftext, node, reader); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1604
    def initialize_section(reader, parent, attributes = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#976
    def is_delimited_block?(line, return_match_data = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1684
    def is_next_line_doctitle?(reader, attributes, leveloffset); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1667
    def is_next_line_section?(reader, attributes); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1698
    def is_section_title?(line1, line2 = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2280
    def is_sibling_list_item?(line, list_type, sibling_trait); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#503
    def next_block(reader, parent, attributes = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#321
    def next_section(reader, parent, attributes = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#97
    def parse(reader, document, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2043
    def parse_block_metadata_line(reader, document, attributes, options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2014
    def parse_block_metadata_lines(reader, document, attributes = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1098
    def parse_blocks(reader, parent, attributes = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1250
    def parse_callout_list(reader, match, parent, callouts); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2495
    def parse_cellspec(line, pos = T.unsafe(nil), delimiter = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2436
    def parse_colspecs(records); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1222
    def parse_description_list(reader, match, parent); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#126
    def parse_document_header(reader, document, header_only = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1815
    def parse_header_metadata(reader, document = T.unsafe(nil), retrieve = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1115
    def parse_list(reader, list_type, parent, style); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1297
    def parse_list_item(reader, list_block, match, sibling_trait, style = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#211
    def parse_manpage_header(reader, document, block_attributes, header_only = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1772
    def parse_section_title(reader, document, sect_id = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2569
    def parse_style_attribute(attributes, reader = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2295
    def parse_table(table_reader, parent, attributes); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2094
    def process_attribute_entries(reader, document, attributes = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2103
    def process_attribute_entry(reader, document, attributes = T.unsafe(nil), match = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1938
    def process_authors(author_line, names_only = T.unsafe(nil), multiple = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1404
    def read_lines_for_list_item(reader, list_type, sibling_trait = T.unsafe(nil), has_text = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#962
    def read_paragraph_lines(reader, break_at_list, opts = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2192
    def resolve_list_marker(list_type, marker, ordinal = T.unsafe(nil), validate = T.unsafe(nil), reader = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2229
    def resolve_ordered_list_marker(marker, ordinal = T.unsafe(nil), validate = T.unsafe(nil), reader = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2770
    def sanitize_attribute_name(name); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#1722
    def setext_section_title?(line1, line2); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2131
    def store_attribute(name, value, doc = T.unsafe(nil), attrs = T.unsafe(nil)); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2750
    def uniform?(str, chr, len); end

    # source://asciidoctor//lib/asciidoctor/parser.rb#2621
    def yield_buffered_attribute(attrs, name, value, reader); end

    private

    def new(*_arg0); end
  end
end

# source://asciidoctor//lib/asciidoctor/parser.rb#44
Asciidoctor::Parser::AuthorKeys = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/parser.rb#28
class Asciidoctor::Parser::BlockMatchData < ::Struct
  def context; end
  def context=(_); end
  def masq; end
  def masq=(_); end
  def terminator; end
  def terminator=(_); end
  def tip; end
  def tip=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://asciidoctor//lib/asciidoctor/parser.rb#46
module Asciidoctor::Parser::ListContinuationMarker; end

# source://asciidoctor//lib/asciidoctor/parser.rb#48
Asciidoctor::Parser::ListContinuationPlaceholder = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/parser.rb#50
Asciidoctor::Parser::ListContinuationString = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/parser.rb#42
Asciidoctor::Parser::NoOp = T.let(T.unsafe(nil), T.untyped)

# source://asciidoctor//lib/asciidoctor/parser.rb#40
Asciidoctor::Parser::StartOfBlockOrListProc = T.let(T.unsafe(nil), Proc)

# source://asciidoctor//lib/asciidoctor/parser.rb#36
Asciidoctor::Parser::StartOfBlockProc = T.let(T.unsafe(nil), Proc)

# source://asciidoctor//lib/asciidoctor/parser.rb#38
Asciidoctor::Parser::StartOfListProc = T.let(T.unsafe(nil), Proc)

# source://asciidoctor//lib/asciidoctor/parser.rb#31
Asciidoctor::Parser::TAB = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/parser.rb#34
Asciidoctor::Parser::TabIndentRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/parser.rb#54
Asciidoctor::Parser::TableCellHorzAlignments = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/parser.rb#70
Asciidoctor::Parser::TableCellStyles = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/parser.rb#62
Asciidoctor::Parser::TableCellVertAlignments = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#103
class Asciidoctor::PathResolver
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#127
  def initialize(file_separator = T.unsafe(nil), working_dir = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#145
  def absolute_path?(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#203
  def descends_from?(path, base); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#260
  def expand_path(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#115
  def file_separator; end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#115
  def file_separator=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#337
  def join_path(segments, root = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#285
  def partition_path(path, web = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#244
  def posixfy(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#244
  def posixify(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#223
  def relative_path(path, base); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#145
  def root?(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#363
  def system_path(target, start = T.unsafe(nil), jail = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#182
  def unc?(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#487
  def web_path(target, start = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#191
  def web_root?(path); end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#116
  def working_dir; end

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#116
  def working_dir=(_arg0); end

  private

  # source://asciidoctor//lib/asciidoctor/path_resolver.rb#536
  def extract_uri_prefix(str); end
end

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#110
Asciidoctor::PathResolver::BACKSLASH = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#106
Asciidoctor::PathResolver::DOT = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#107
Asciidoctor::PathResolver::DOT_DOT = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#108
Asciidoctor::PathResolver::DOT_SLASH = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#111
Asciidoctor::PathResolver::DOUBLE_SLASH = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#109
Asciidoctor::PathResolver::SLASH = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#112
Asciidoctor::PathResolver::URI_CLASSLOADER = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/path_resolver.rb#113
Asciidoctor::PathResolver::WindowsRootRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/reader.rb#617
class Asciidoctor::PreprocessorReader < ::Asciidoctor::Reader
  # source://asciidoctor//lib/asciidoctor/reader.rb#621
  def initialize(document, data = T.unsafe(nil), cursor = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#784
  def create_include_cursor(file, path, lineno); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#644
  def empty?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#644
  def eof?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#755
  def exceeded_max_depth?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#755
  def exceeds_max_depth?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#639
  def has_more_lines?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#747
  def include_depth; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#772
  def include_processors?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#618
  def include_stack; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#656
  def peek_line(direct = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#681
  def push_include(data, file = T.unsafe(nil), path = T.unsafe(nil), lineno = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#763
  def shift; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#796
  def to_s; end

  private

  # source://asciidoctor//lib/asciidoctor/reader.rb#1279
  def pop_include; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#802
  def prepare_lines(data, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#904
  def preprocess_conditional_directive(keyword, target, delimiter, text); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#1021
  def preprocess_include_directive(target, attrlist); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#819
  def process_line(line); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#1346
  def resolve_expr_val(val); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#1243
  def resolve_include_path(target, attrlist, attributes); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#1296
  def skip_front_matter!(data, increment_linenos = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#1291
  def split_delimited_value(val); end
end

# source://asciidoctor//lib/asciidoctor.rb#439
Asciidoctor::QUOTE_SUBS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#489
Asciidoctor::REPLACEMENTS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor.rb#178
Asciidoctor::ROOT_DIR = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#50
Asciidoctor::RUBY_ENGINE = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#50
Asciidoctor::RUBY_ENGINE_OPAL = T.let(T.unsafe(nil), FalseClass)

# source://asciidoctor//lib/asciidoctor/reader.rb#4
class Asciidoctor::Reader
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  # source://asciidoctor//lib/asciidoctor/reader.rb#42
  def initialize(data = T.unsafe(nil), cursor = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#216
  def advance; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#484
  def cursor; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#488
  def cursor_at_line(lineno); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#492
  def cursor_at_mark; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#505
  def cursor_at_prev_line; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#496
  def cursor_before_mark; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#26
  def dir; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#560
  def discard_save; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#90
  def empty?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#90
  def eof?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#25
  def file; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#78
  def has_more_lines?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#516
  def line_info; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#30
  def lineno; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#523
  def lines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#509
  def mark; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#105
  def next_line_empty?; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#27
  def path; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#127
  def peek_line(direct = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#159
  def peek_lines(num = T.unsafe(nil), direct = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#36
  def process_lines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#36
  def process_lines=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#209
  def read; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#183
  def read_line; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#196
  def read_lines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#396
  def read_lines_until(options = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#196
  def readlines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#258
  def replace_line(replacement); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#258
  def replace_next_line(replacement); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#230
  def restore_line(line_to_restore); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#244
  def restore_lines(lines_to_restore); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#550
  def restore_save; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#538
  def save; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#448
  def shift; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#279
  def skip_blank_lines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#307
  def skip_comment_lines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#332
  def skip_line_comments; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#533
  def source; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#33
  def source_lines; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#528
  def string; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#351
  def terminate; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#564
  def to_s; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#455
  def unshift(line); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#476
  def unshift_all(lines_to_restore); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#230
  def unshift_line(line_to_restore); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#244
  def unshift_lines(lines_to_restore); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#39
  def unterminated; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#39
  def unterminated=(_arg0); end

  private

  # source://asciidoctor//lib/asciidoctor/reader.rb#582
  def prepare_lines(data, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#609
  def process_line(line); end
end

# source://asciidoctor//lib/asciidoctor/reader.rb#7
class Asciidoctor::Reader::Cursor
  # source://asciidoctor//lib/asciidoctor/reader.rb#10
  def initialize(file, dir = T.unsafe(nil), path = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#14
  def advance(num); end

  # source://asciidoctor//lib/asciidoctor/reader.rb#8
  def dir; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#8
  def file; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#18
  def line_info; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#8
  def lineno; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#8
  def path; end

  # source://asciidoctor//lib/asciidoctor/reader.rb#18
  def to_s; end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#683
Asciidoctor::ReplaceableTextRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#42
Asciidoctor::RevisionInfoLineRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#11
module Asciidoctor::Rx; end

# source://asciidoctor//lib/asciidoctor.rb#262
Asciidoctor::SETEXT_SECTION_LEVELS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#351
Asciidoctor::STEM_TYPE_ALIASES = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor.rb#52
module Asciidoctor::SafeMode
  class << self
    # source://asciidoctor//lib/asciidoctor.rb#96
    def name_for_value(value); end

    # source://asciidoctor//lib/asciidoctor.rb#100
    def names; end

    # source://asciidoctor//lib/asciidoctor.rb#92
    def value_for_name(name); end
  end
end

# source://asciidoctor//lib/asciidoctor.rb#60
Asciidoctor::SafeMode::SAFE = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor.rb#80
Asciidoctor::SafeMode::SECURE = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor.rb#68
Asciidoctor::SafeMode::SERVER = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor.rb#55
Asciidoctor::SafeMode::UNSAFE = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor/section.rb#22
class Asciidoctor::Section < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/section.rb#46
  def initialize(parent = T.unsafe(nil), level = T.unsafe(nil), numbered = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/section.rb#166
  def <<(block); end

  # source://asciidoctor//lib/asciidoctor/section.rb#38
  def caption; end

  # source://asciidoctor//lib/asciidoctor/section.rb#63
  def generate_id; end

  # source://asciidoctor//lib/asciidoctor/section.rb#25
  def index; end

  # source://asciidoctor//lib/asciidoctor/section.rb#25
  def index=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_block.rb#288
  def name; end

  # source://asciidoctor//lib/asciidoctor/section.rb#35
  def numbered; end

  # source://asciidoctor//lib/asciidoctor/section.rb#35
  def numbered=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/section.rb#70
  def sections?; end

  # source://asciidoctor//lib/asciidoctor/section.rb#28
  def sectname; end

  # source://asciidoctor//lib/asciidoctor/section.rb#28
  def sectname=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/section.rb#119
  def sectnum(delimiter = T.unsafe(nil), append = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/section.rb#31
  def special; end

  # source://asciidoctor//lib/asciidoctor/section.rb#31
  def special=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/section.rb#171
  def to_s; end

  # source://asciidoctor//lib/asciidoctor/section.rb#125
  def xreftext(xrefstyle = T.unsafe(nil)); end

  class << self
    # source://asciidoctor//lib/asciidoctor/section.rb#198
    def generate_id(title, document); end
  end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#266
Asciidoctor::SectionLevelStyleRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#248
Asciidoctor::SetextSectionTitleRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#694
Asciidoctor::SpaceDelimiterRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/stylesheets.rb#7
class Asciidoctor::Stylesheets
  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#48
  def coderay_stylesheet_data; end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#41
  def coderay_stylesheet_name; end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#55
  def embed_coderay_stylesheet; end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#31
  def embed_primary_stylesheet; end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#79
  def embed_pygments_stylesheet(style = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#24
  def primary_stylesheet_data; end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#17
  def primary_stylesheet_name; end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#72
  def pygments_stylesheet_data(style = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#65
  def pygments_stylesheet_name(style = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#61
  def write_coderay_stylesheet(target_dir = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#37
  def write_primary_stylesheet(target_dir = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/stylesheets.rb#85
  def write_pygments_stylesheet(target_dir = T.unsafe(nil), style = T.unsafe(nil)); end

  class << self
    # source://asciidoctor//lib/asciidoctor/stylesheets.rb#13
    def instance; end
  end
end

# source://asciidoctor//lib/asciidoctor/stylesheets.rb#8
Asciidoctor::Stylesheets::DEFAULT_STYLESHEET_NAME = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/stylesheets.rb#9
Asciidoctor::Stylesheets::STYLESHEETS_DIR = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/rx.rb#698
Asciidoctor::SubModifierSniffRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#6
module Asciidoctor::Substitutors
  # source://asciidoctor//lib/asciidoctor/substitutors.rb#141
  def apply_header_subs(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#132
  def apply_normal_subs(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#157
  def apply_reftext_subs(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#75
  def apply_subs(text, subs = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#75
  def apply_title_subs(text, subs = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1285
  def commit_subs; end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1255
  def expand_subs(subs, subject = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1018
  def extract_passthroughs(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#946
  def highlight_source(source, process_callouts); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1330
  def parse_attributes(attrlist, posattrs = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1240
  def resolve_block_subs(subs, defaults, subject); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#984
  def resolve_lines_to_highlight(source, spec, start = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1245
  def resolve_pass_subs(subs); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1177
  def resolve_subs(subs, type = T.unsafe(nil), defaults = T.unsafe(nil), subject = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1150
  def restore_passthroughs(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#211
  def sub_attributes(text, opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#920
  def sub_callouts(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#296
  def sub_macros(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#889
  def sub_post_replacements(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#189
  def sub_quotes(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#282
  def sub_replacements(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#911
  def sub_source(source, process_callouts); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#174
  def sub_specialcharacters(text); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#174
  def sub_specialchars(text); end

  private

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1419
  def convert_quoted_text(match, type, scope); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1450
  def do_replacement(m, replacement, restore); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1348
  def extract_attributes_from_text(text, default_text = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1359
  def extract_callouts(source); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1510
  def normalize_text(text, normalize_whitespace = T.unsafe(nil), unescape_closing_square_brackets = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1475
  def parse_quoted_text_attributes(str); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1388
  def restore_callouts(source, callout_marks, source_offset = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/substitutors.rb#1520
  def split_simple_csv(str); end

  def sub_placeholder(*_arg0); end
end

# source://asciidoctor//lib/asciidoctor/substitutors.rb#13
Asciidoctor::Substitutors::BASIC_SUBS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#43
Asciidoctor::Substitutors::CAN = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#173
Asciidoctor::Substitutors::CGI = CGI

# source://asciidoctor//lib/asciidoctor/substitutors.rb#44
Asciidoctor::Substitutors::DEL = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#65
Asciidoctor::Substitutors::ESC_R_SB = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#14
Asciidoctor::Substitutors::HEADER_SUBS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#59
Asciidoctor::Substitutors::HighlightedPassSlotRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#16
Asciidoctor::Substitutors::NORMAL_SUBS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#15
Asciidoctor::Substitutors::NO_SUBS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#53
Asciidoctor::Substitutors::PASS_END = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#50
Asciidoctor::Substitutors::PASS_START = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#67
Asciidoctor::Substitutors::PLUS = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#56
Asciidoctor::Substitutors::PassSlotRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#11
Asciidoctor::Substitutors::QuotedTextSniffRx = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#17
Asciidoctor::Substitutors::REFTEXT_SUBS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#61
Asciidoctor::Substitutors::RS = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#63
Asciidoctor::Substitutors::R_SB = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#20
Asciidoctor::Substitutors::SUB_GROUPS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#27
Asciidoctor::Substitutors::SUB_HINTS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#38
Asciidoctor::Substitutors::SUB_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#7
Asciidoctor::Substitutors::SpecialCharsRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#8
Asciidoctor::Substitutors::SpecialCharsTr = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/substitutors.rb#18
Asciidoctor::Substitutors::VERBATIM_SUBS = T.let(T.unsafe(nil), Array)

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#14
module Asciidoctor::SyntaxHighlighter
  extend ::Asciidoctor::SyntaxHighlighter::Factory
  extend ::Asciidoctor::SyntaxHighlighter::DefaultFactory

  mixes_in_class_methods ::Asciidoctor::SyntaxHighlighter::Config

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#18
  def initialize(name, backend = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#41
  def docinfo(location, doc, opts); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#28
  def docinfo?(location); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#80
  def format(node, lang, opts); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#68
  def highlight(node, source, lang, opts); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#48
  def highlight?; end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#16
  def name; end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#98
  def write_stylesheet(doc, to_dir); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#90
  def write_stylesheet?(doc); end

  class << self
    private

    # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#102
    def included(into); end
  end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#230
class Asciidoctor::SyntaxHighlighter::Base
  include ::Asciidoctor::SyntaxHighlighter
  extend ::Asciidoctor::SyntaxHighlighter::Config

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#233
  def format(node, lang, opts); end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#107
module Asciidoctor::SyntaxHighlighter::Config
  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#114
  def register_for(*names); end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#162
class Asciidoctor::SyntaxHighlighter::CustomFactory
  include ::Asciidoctor::SyntaxHighlighter::Factory

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#165
  def initialize(seed_registry = T.unsafe(nil)); end

  private

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#171
  def registry; end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#174
module Asciidoctor::SyntaxHighlighter::DefaultFactory
  include ::Asciidoctor::SyntaxHighlighter::Factory

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#195
  def for(name); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#188
  def register(syntax_highlighter, *names); end

  private

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#181
  def registry; end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#211
Asciidoctor::SyntaxHighlighter::DefaultFactory::PROVIDED = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#222
class Asciidoctor::SyntaxHighlighter::DefaultFactoryProxy < ::Asciidoctor::SyntaxHighlighter::CustomFactory
  include ::Asciidoctor::SyntaxHighlighter::DefaultFactory

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#225
  def for(name); end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#119
module Asciidoctor::SyntaxHighlighter::Factory
  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#147
  def create(name, backend = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#135
  def for(name); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#126
  def register(syntax_highlighter, *names); end

  private

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter.rb#157
  def registry; end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter/highlightjs.rb#3
class Asciidoctor::SyntaxHighlighter::HighlightJsAdapter < ::Asciidoctor::SyntaxHighlighter::Base
  # source://asciidoctor//lib/asciidoctor/syntax_highlighter/highlightjs.rb#6
  def initialize(*args); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter/highlightjs.rb#19
  def docinfo(location, doc, opts); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter/highlightjs.rb#15
  def docinfo?(location); end

  # source://asciidoctor//lib/asciidoctor/syntax_highlighter/highlightjs.rb#11
  def format(node, lang, opts); end
end

# source://asciidoctor//lib/asciidoctor/syntax_highlighter/html_pipeline.rb#3
class Asciidoctor::SyntaxHighlighter::HtmlPipelineAdapter < ::Asciidoctor::SyntaxHighlighter::Base
  # source://asciidoctor//lib/asciidoctor/syntax_highlighter/html_pipeline.rb#6
  def format(node, lang, opts); end
end

# source://asciidoctor//lib/asciidoctor.rb#197
Asciidoctor::TAB = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/table.rb#5
class Asciidoctor::Table < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/table.rb#56
  def initialize(parent, attributes); end

  # source://asciidoctor//lib/asciidoctor/table.rb#121
  def assign_column_widths(width_base = T.unsafe(nil), autowidth_cols = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#54
  def caption; end

  # source://asciidoctor//lib/asciidoctor/table.rb#44
  def columns; end

  # source://asciidoctor//lib/asciidoctor/table.rb#44
  def columns=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#90
  def create_columns(colspecs); end

  # source://asciidoctor//lib/asciidoctor/table.rb#51
  def has_header_option; end

  # source://asciidoctor//lib/asciidoctor/table.rb#51
  def has_header_option=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#83
  def header_row?; end

  # source://asciidoctor//lib/asciidoctor/table.rb#155
  def partition_header_footer(attrs); end

  # source://asciidoctor//lib/asciidoctor/table.rb#48
  def rows; end

  # source://asciidoctor//lib/asciidoctor/table.rb#48
  def rows=(_arg0); end
end

# source://asciidoctor//lib/asciidoctor/table.rb#220
class Asciidoctor::Table::Cell < ::Asciidoctor::AbstractBlock
  # source://asciidoctor//lib/asciidoctor/table.rb#235
  def initialize(column, cell_text, attributes = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#342
  def catalog_inline_anchor(cell_text = T.unsafe(nil), cursor = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#224
  def colspan; end

  # source://asciidoctor//lib/asciidoctor/table.rb#224
  def colspan=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#26
  def column; end

  # source://asciidoctor//lib/asciidoctor/table.rb#371
  def content; end

  # source://asciidoctor//lib/asciidoctor/table.rb#396
  def file; end

  # source://asciidoctor//lib/asciidoctor/table.rb#233
  def inner_document; end

  # source://asciidoctor//lib/asciidoctor/table.rb#401
  def lineno; end

  # source://asciidoctor//lib/asciidoctor/table.rb#387
  def lines; end

  # source://asciidoctor//lib/asciidoctor/table.rb#330
  def reinitialize(has_header); end

  # source://asciidoctor//lib/asciidoctor/table.rb#227
  def rowspan; end

  # source://asciidoctor//lib/asciidoctor/table.rb#227
  def rowspan=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#391
  def source; end

  # source://asciidoctor//lib/asciidoctor/table.rb#357
  def text; end

  # source://asciidoctor//lib/asciidoctor/table.rb#364
  def text=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#405
  def to_s; end
end

# source://asciidoctor//lib/asciidoctor/table.rb#221
Asciidoctor::Table::Cell::DOUBLE_LF = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/table.rb#177
class Asciidoctor::Table::Column < ::Asciidoctor::AbstractNode
  # source://asciidoctor//lib/asciidoctor/table.rb#181
  def initialize(table, index, attributes = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#199
  def assign_width(col_pcwidth, width_base, precision); end

  # source://asciidoctor//lib/asciidoctor/table.rb#210
  def block?; end

  # source://asciidoctor//lib/asciidoctor/table.rb#214
  def inline?; end

  # source://asciidoctor//lib/asciidoctor/table.rb#179
  def style; end

  # source://asciidoctor//lib/asciidoctor/table.rb#179
  def style=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/abstract_node.rb#26
  def table; end
end

# source://asciidoctor//lib/asciidoctor/table.rb#7
Asciidoctor::Table::DEFAULT_PRECISION = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor/table.rb#416
class Asciidoctor::Table::ParserContext
  include ::Asciidoctor::Logging
  extend ::Asciidoctor::Logging

  # source://asciidoctor//lib/asciidoctor/table.rb#455
  def initialize(reader, table, attributes = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#447
  def buffer; end

  # source://asciidoctor//lib/asciidoctor/table.rb#447
  def buffer=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#534
  def buffer_has_unclosed_quotes?(append = T.unsafe(nil), q = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#596
  def cell_closed?; end

  # source://asciidoctor//lib/asciidoctor/table.rb#589
  def cell_open?; end

  # source://asciidoctor//lib/asciidoctor/table.rb#617
  def close_cell(eol = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#605
  def close_open_cell(next_cellspec = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#685
  def close_table; end

  # source://asciidoctor//lib/asciidoctor/table.rb#444
  def colcount; end

  # source://asciidoctor//lib/asciidoctor/table.rb#450
  def delimiter; end

  # source://asciidoctor//lib/asciidoctor/table.rb#453
  def delimiter_re; end

  # source://asciidoctor//lib/asciidoctor/table.rb#437
  def format; end

  # source://asciidoctor//lib/asciidoctor/table.rb#437
  def format=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#572
  def keep_cell_open; end

  # source://asciidoctor//lib/asciidoctor/table.rb#581
  def mark_cell_closed; end

  # source://asciidoctor//lib/asciidoctor/table.rb#510
  def match_delimiter(line); end

  # source://asciidoctor//lib/asciidoctor/table.rb#562
  def push_cellspec(cellspec = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#517
  def skip_past_delimiter(pre); end

  # source://asciidoctor//lib/asciidoctor/table.rb#525
  def skip_past_escaped_delimiter(pre); end

  # source://asciidoctor//lib/asciidoctor/table.rb#502
  def starts_with_delimiter?(line); end

  # source://asciidoctor//lib/asciidoctor/table.rb#434
  def table; end

  # source://asciidoctor//lib/asciidoctor/table.rb#434
  def table=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#554
  def take_cellspec; end

  private

  # source://asciidoctor//lib/asciidoctor/table.rb#713
  def activate_rowspan(rowspan, colspan); end

  # source://asciidoctor//lib/asciidoctor/table.rb#733
  def advance; end

  # source://asciidoctor//lib/asciidoctor/table.rb#697
  def close_row(drop = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/table.rb#727
  def effective_column_visits; end

  # source://asciidoctor//lib/asciidoctor/table.rb#721
  def end_of_row?; end
end

# source://asciidoctor//lib/asciidoctor/table.rb#425
Asciidoctor::Table::ParserContext::DELIMITERS = T.let(T.unsafe(nil), Hash)

# source://asciidoctor//lib/asciidoctor/table.rb#422
Asciidoctor::Table::ParserContext::FORMATS = T.let(T.unsafe(nil), Set)

# source://asciidoctor//lib/asciidoctor/table.rb#10
class Asciidoctor::Table::Rows
  # source://asciidoctor//lib/asciidoctor/table.rb#13
  def initialize(head = T.unsafe(nil), foot = T.unsafe(nil), body = T.unsafe(nil)); end

  def [](*_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#11
  def body; end

  # source://asciidoctor//lib/asciidoctor/table.rb#11
  def body=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#28
  def by_section; end

  # source://asciidoctor//lib/asciidoctor/table.rb#11
  def foot; end

  # source://asciidoctor//lib/asciidoctor/table.rb#11
  def foot=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#11
  def head; end

  # source://asciidoctor//lib/asciidoctor/table.rb#11
  def head=(_arg0); end

  # source://asciidoctor//lib/asciidoctor/table.rb#38
  def to_h; end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#107
Asciidoctor::TagDirectiveRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/timings.rb#3
class Asciidoctor::Timings
  # source://asciidoctor//lib/asciidoctor/timings.rb#4
  def initialize; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#34
  def convert; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#26
  def parse; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#50
  def print_report(to = T.unsafe(nil), subject = T.unsafe(nil)); end

  # source://asciidoctor//lib/asciidoctor/timings.rb#22
  def read; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#30
  def read_parse; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#38
  def read_parse_convert; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#13
  def record(key); end

  # source://asciidoctor//lib/asciidoctor/timings.rb#9
  def start(key); end

  # source://asciidoctor//lib/asciidoctor/timings.rb#17
  def time(*keys); end

  # source://asciidoctor//lib/asciidoctor/timings.rb#46
  def total; end

  # source://asciidoctor//lib/asciidoctor/timings.rb#42
  def write; end

  private

  # source://asciidoctor//lib/asciidoctor/timings.rb#61
  def now; end
end

# source://asciidoctor//lib/asciidoctor/timings.rb#60
Asciidoctor::Timings::CLOCK_ID = T.let(T.unsafe(nil), Integer)

# source://asciidoctor//lib/asciidoctor/rx.rb#707
Asciidoctor::TrailingDigitsRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#214
Asciidoctor::URI_READ_MODE = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#188
Asciidoctor::USER_HOME = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor.rb#203
Asciidoctor::UTF_8 = T.let(T.unsafe(nil), Encoding)

# source://asciidoctor//lib/asciidoctor/rx.rb#284
Asciidoctor::UnorderedListRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/rx.rb#722
Asciidoctor::UriSniffRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor.rb#276
Asciidoctor::VERBATIM_STYLES = T.let(T.unsafe(nil), Set)

# source://asciidoctor//lib/asciidoctor/version.rb#3
Asciidoctor::VERSION = T.let(T.unsafe(nil), String)

# source://asciidoctor//lib/asciidoctor/writer.rb#24
module Asciidoctor::VoidWriter
  include ::Asciidoctor::Writer

  # source://asciidoctor//lib/asciidoctor/writer.rb#28
  def write(output, target); end
end

# source://asciidoctor//lib/asciidoctor/writer.rb#5
module Asciidoctor::Writer
  # source://asciidoctor//lib/asciidoctor/writer.rb#12
  def write(output, target); end
end

# source://asciidoctor//lib/asciidoctor/rx.rb#726
Asciidoctor::XmlSanitizeRx = T.let(T.unsafe(nil), Regexp)

# source://asciidoctor//lib/asciidoctor/core_ext/nil_or_empty.rb#18
class Hash
  include ::Enumerable
end

# source://asciidoctor//lib/asciidoctor/core_ext/nil_or_empty.rb#6
class NilClass
  include ::Treetop::Compiler::Metagrammar::LabeledExpressionSequenceBody0
end

# source://asciidoctor//lib/asciidoctor/core_ext/nil_or_empty.rb#22
class Numeric
  include ::Comparable
end

# source://asciidoctor//lib/asciidoctor/core_ext/nil_or_empty.rb#10
class String
  include ::Comparable
end
