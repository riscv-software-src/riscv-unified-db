# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-github` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-github`.


# source://rubocop-github//lib/rubocop/github.rb#3
module RuboCop; end

# source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#6
module RuboCop::Cop; end

# source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#7
module RuboCop::Cop::GitHub; end

# source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#29
class RuboCop::Cop::GitHub::AvoidObjectSendWithDynamicMethod < ::RuboCop::Cop::Base
  # source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#34
  def on_send(node); end

  private

  # source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#46
  def method_being_sent_is_constrained?(node); end

  # source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#50
  def method_name_being_sent_is_constant?(node); end

  # source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#56
  def method_name_being_sent_is_dynamic_string_with_constants?(node); end

  # source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#42
  def send_method?(node); end

  # source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#64
  def source_range_for_method_call(node); end
end

# source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#32
RuboCop::Cop::GitHub::AvoidObjectSendWithDynamicMethod::CONSTANT_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#30
RuboCop::Cop::GitHub::AvoidObjectSendWithDynamicMethod::MESSAGE_TEMPLATE = T.let(T.unsafe(nil), String)

# source://rubocop-github//lib/rubocop/cop/github/avoid_object_send_with_dynamic_method.rb#31
RuboCop::Cop::GitHub::AvoidObjectSendWithDynamicMethod::SEND_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#8
class RuboCop::Cop::GitHub::InsecureHashAlgorithm < ::RuboCop::Cop::Base
  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#99
  def alg_name(val); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#95
  def allowed_hash_functions; end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#53
  def digest_uuid?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#65
  def insecure_algorithm?(val); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#16
  def insecure_const?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#29
  def insecure_digest?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#38
  def insecure_hash_lookup?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#82
  def just_encoding?(val); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#78
  def not_just_encoding?(val); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#110
  def on_const(const_node); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#116
  def on_send(send_node); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#43
  def openssl_hmac_new?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#48
  def openssl_hmac_new_insecure?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#57
  def uuid_v3?(param0 = T.unsafe(nil)); end

  # source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#61
  def uuid_v5?(param0 = T.unsafe(nil)); end
end

# source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#89
RuboCop::Cop::GitHub::InsecureHashAlgorithm::DEFAULT_ALLOWED = T.let(T.unsafe(nil), Array)

# source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#9
RuboCop::Cop::GitHub::InsecureHashAlgorithm::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#10
RuboCop::Cop::GitHub::InsecureHashAlgorithm::UUID_V3_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-github//lib/rubocop/cop/github/insecure_hash_algorithm.rb#11
RuboCop::Cop::GitHub::InsecureHashAlgorithm::UUID_V5_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-github//lib/rubocop/github.rb#4
module RuboCop::GitHub; end

# source://rubocop-github//lib/rubocop/github.rb#6
RuboCop::GitHub::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)

# source://rubocop-github//lib/rubocop/github.rb#7
RuboCop::GitHub::CONFIG_RAILS = T.let(T.unsafe(nil), Pathname)

# source://rubocop-github//lib/rubocop/github/inject.rb#8
module RuboCop::GitHub::Inject
  class << self
    # source://rubocop-github//lib/rubocop/github/inject.rb#17
    def _load_config(path); end

    # source://rubocop-github//lib/rubocop/github/inject.rb#9
    def default_defaults!; end

    # source://rubocop-github//lib/rubocop/github/inject.rb#13
    def rails_defaults!; end
  end
end

# source://rubocop-github//lib/rubocop/github.rb#5
RuboCop::GitHub::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)
