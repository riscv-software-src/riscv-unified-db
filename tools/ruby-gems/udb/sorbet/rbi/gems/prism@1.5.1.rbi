# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prism` gem.
# Please instead update this file by running `bin/tapioca gem prism`.


# typed: strict

# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/dsl.rbi.erb
# if you are looking to modify the template
# =end
# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/node.rbi.erb
# if you are looking to modify the template
# =end
# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/visitor.rbi.erb
# if you are looking to modify the template
# =end

# We keep these shims in here because our client libraries might not have parser
# in their bundle.
module Parser; end

class Parser::Base; end

# source://prism//lib/prism.rb#9
module Prism
  class << self
    def dump(*_arg0); end
    def dump_file(*_arg0); end
    def lex(*_arg0); end

    # source://prism//lib/prism.rb#48
    sig { params(source: String, options: T::Hash[Symbol, T.untyped]).returns(Prism::LexCompat::Result) }
    def lex_compat(source, **options); end

    def lex_file(*_arg0); end

    # source://prism//lib/prism.rb#58
    sig { params(source: String).returns(T::Array[T.untyped]) }
    def lex_ripper(source); end

    # source://prism//lib/prism.rb#66
    sig { params(source: String, serialized: String, freeze: T.nilable(T::Boolean)).returns(Prism::ParseResult) }
    def load(source, serialized, freeze = T.unsafe(nil)); end

    def parse(*_arg0); end
    def parse_comments(*_arg0); end
    def parse_failure?(*_arg0); end
    def parse_file(*_arg0); end
    def parse_file_comments(*_arg0); end
    def parse_file_failure?(*_arg0); end
    def parse_file_success?(*_arg0); end
    def parse_lex(*_arg0); end
    def parse_lex_file(*_arg0); end
    def parse_stream(*_arg0); end
    def parse_success?(*_arg0); end
    def profile(*_arg0); end
    def profile_file(*_arg0); end

    # source://prism//lib/prism/parse_result.rb#908
    sig { params(locals: T::Array[Symbol], forwarding: T::Array[Symbol]).returns(Prism::Scope) }
    def scope(locals: T.unsafe(nil), forwarding: T.unsafe(nil)); end
  end
end

# source://prism//lib/prism/parse_result.rb#254
class Prism::ASCIISource < ::Prism::Source
  # source://prism//lib/prism/parse_result.rb#261
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#256
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_offset(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#278
  sig do
    params(
      encoding: Encoding
    ).returns(T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer)))
  end
  def code_units_cache(encoding); end

  # source://prism//lib/prism/parse_result.rb#285
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_column(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#271
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_offset(byte_offset, encoding); end
end

# source://prism//lib/prism/node.rb#319
class Prism::AliasGlobalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#321
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      new_name: T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode),
      old_name: T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::SymbolNode, Prism::MissingNode),
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, new_name, old_name, keyword_loc); end

  # source://prism//lib/prism/node.rb#414
  def ===(other); end

  # source://prism//lib/prism/node.rb#332
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#337
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#347
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#342
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#352
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      new_name: T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode),
      old_name: T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::SymbolNode, Prism::MissingNode),
      keyword_loc: Prism::Location
    ).returns(Prism::AliasGlobalVariableNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), new_name: T.unsafe(nil), old_name: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#337
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#360
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#398
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#393
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#380
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#368
  sig { returns(T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)) }
  def new_name; end

  # source://prism//lib/prism/node.rb#374
  sig do
    returns(T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::SymbolNode, Prism::MissingNode))
  end
  def old_name; end

  # source://prism//lib/prism/node.rb#388
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#403
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#408
    def type; end
  end
end

# source://prism//lib/prism/node.rb#426
class Prism::AliasMethodNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#428
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      new_name: T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode),
      old_name: T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode, Prism::GlobalVariableReadNode, Prism::MissingNode),
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, new_name, old_name, keyword_loc); end

  # source://prism//lib/prism/node.rb#533
  def ===(other); end

  # source://prism//lib/prism/node.rb#439
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#444
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#454
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#449
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#459
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      new_name: T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode),
      old_name: T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode, Prism::GlobalVariableReadNode, Prism::MissingNode),
      keyword_loc: Prism::Location
    ).returns(Prism::AliasMethodNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), new_name: T.unsafe(nil), old_name: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#444
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#467
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#517
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#512
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#499
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#481
  sig { returns(T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)) }
  def new_name; end

  # source://prism//lib/prism/node.rb#493
  sig do
    returns(T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode, Prism::GlobalVariableReadNode, Prism::MissingNode))
  end
  def old_name; end

  # source://prism//lib/prism/node.rb#507
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#522
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#527
    def type; end
  end
end

# source://prism//lib/prism/node.rb#545
class Prism::AlternationPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#547
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end

  # source://prism//lib/prism/node.rb#640
  def ===(other); end

  # source://prism//lib/prism/node.rb#558
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#563
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#573
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#568
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#578
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::AlternationPatternNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#563
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#586
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#624
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#594
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#619
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#606
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#600
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#614
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#629
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#634
    def type; end
  end
end

# source://prism//lib/prism/node.rb#652
class Prism::AndNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#654
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end

  # source://prism//lib/prism/node.rb#753
  def ===(other); end

  # source://prism//lib/prism/node.rb#665
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#670
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#680
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#675
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#685
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::AndNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#670
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#693
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#737
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#704
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#732
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#719
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#713
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#727
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#742
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#747
    def type; end
  end
end

# source://prism//lib/prism/node.rb#765
class Prism::ArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#767
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T::Array[Prism::Node]
    ).void
  end
  def initialize(source, node_id, location, flags, arguments); end

  # source://prism//lib/prism/node.rb#856
  def ===(other); end

  # source://prism//lib/prism/node.rb#776
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#837
  sig { returns(T::Array[Prism::Node]) }
  def arguments; end

  # source://prism//lib/prism/node.rb#781
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#791
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#786
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#809
  sig { returns(T::Boolean) }
  def contains_forwarding?; end

  # source://prism//lib/prism/node.rb#819
  sig { returns(T::Boolean) }
  def contains_keyword_splat?; end

  # source://prism//lib/prism/node.rb#814
  sig { returns(T::Boolean) }
  def contains_keywords?; end

  # source://prism//lib/prism/node.rb#829
  sig { returns(T::Boolean) }
  def contains_multiple_splats?; end

  # source://prism//lib/prism/node.rb#824
  sig { returns(T::Boolean) }
  def contains_splat?; end

  # source://prism//lib/prism/node.rb#796
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T::Array[Prism::Node]
    ).returns(Prism::ArgumentsNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), arguments: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#781
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#804
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#840
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#845
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#850
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18630
# Flags for arguments nodes.
module Prism::ArgumentsNodeFlags; end

# source://prism//lib/prism/node.rb#18632
Prism::ArgumentsNodeFlags::CONTAINS_FORWARDING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18635
Prism::ArgumentsNodeFlags::CONTAINS_KEYWORDS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18638
Prism::ArgumentsNodeFlags::CONTAINS_KEYWORD_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18644
Prism::ArgumentsNodeFlags::CONTAINS_MULTIPLE_SPLATS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18641
Prism::ArgumentsNodeFlags::CONTAINS_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#868
class Prism::ArrayNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#870
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, elements, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#996
  def ===(other); end

  # source://prism//lib/prism/node.rb#881
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#886
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#975
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#951
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#896
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#891
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#914
  sig { returns(T::Boolean) }
  def contains_splat?; end

  # source://prism//lib/prism/node.rb#901
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::ArrayNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), elements: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#886
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#909
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#919
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#980
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#970
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#927
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#965
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#941
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#985
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#990
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18648
# Flags for array nodes.
module Prism::ArrayNodeFlags; end

# source://prism//lib/prism/node.rb#18650
Prism::ArrayNodeFlags::CONTAINS_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#1022
class Prism::ArrayPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1024
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, constant, requireds, rest, posts, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#1176
  def ===(other); end

  # source://prism//lib/prism/node.rb#1038
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1043
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1155
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#1131
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1058
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1048
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1085
  sig { returns(T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode))) }
  def constant; end

  # source://prism//lib/prism/node.rb#1063
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::ArrayPatternNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), constant: T.unsafe(nil), requireds: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1043
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1071
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1160
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1150
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#1109
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1103
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#1091
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#1097
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#1145
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#1123
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#1165
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1170
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1193
class Prism::AssocNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1195
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, key, value, operator_loc); end

  # source://prism//lib/prism/node.rb#1303
  def ===(other); end

  # source://prism//lib/prism/node.rb#1206
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1211
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1221
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1216
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1226
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location)
    ).returns(Prism::AssocNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), key: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1211
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1234
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1287
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1248
  sig { returns(Prism::Node) }
  def key; end

  # source://prism//lib/prism/node.rb#1282
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#1263
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1277
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#1292
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#1257
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1297
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1315
class Prism::AssocSplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1317
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, value, operator_loc); end

  # source://prism//lib/prism/node.rb#1405
  def ===(other); end

  # source://prism//lib/prism/node.rb#1327
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1332
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1344
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1337
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1349
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::AssocSplatNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1332
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1357
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1389
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1384
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1371
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1379
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#1394
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#1365
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1399
    def type; end
  end
end

# source://prism//lib/prism.rb#83
Prism::BACKEND = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#1416
class Prism::BackReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1418
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#1483
  def ===(other); end

  # source://prism//lib/prism/node.rb#1427
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1432
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1442
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1437
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1447
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::BackReferenceReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1432
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1455
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1467
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1464
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1472
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1477
    def type; end
  end
end

# source://prism//lib/prism/visitor.rb#17
class Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#20
  sig { params(node: T.nilable(Prism::Node)).void }
  def visit(node); end

  # source://prism//lib/prism/visitor.rb#26
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).void }
  def visit_all(nodes); end

  # source://prism//lib/prism/visitor.rb#32
  sig { params(node: Prism::Node).void }
  def visit_child_nodes(node); end
end

# source://prism//lib/prism/node.rb#1495
class Prism::BeginNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1497
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#1643
  def ===(other); end

  # source://prism//lib/prism/node.rb#1511
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1617
  sig { returns(T.nilable(String)) }
  def begin_keyword; end

  # source://prism//lib/prism/node.rb#1552
  sig { returns(T.nilable(Prism::Location)) }
  def begin_keyword_loc; end

  # source://prism//lib/prism/node.rb#1516
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1531
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1521
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1536
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::BeginNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), begin_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), rescue_clause: T.unsafe(nil), else_clause: T.unsafe(nil), ensure_clause: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1516
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1544
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1586
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#1622
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#1598
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#1592
  sig { returns(T.nilable(Prism::EnsureNode)) }
  def ensure_clause; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1627
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result/newlines.rb#80
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#1580
  sig { returns(T.nilable(Prism::RescueNode)) }
  def rescue_clause; end

  # source://prism//lib/prism/node.rb#1566
  def save_begin_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#1612
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#1574
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#1632
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1637
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1658
class Prism::BlockArgumentNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1660
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, expression, operator_loc); end

  # source://prism//lib/prism/node.rb#1748
  def ===(other); end

  # source://prism//lib/prism/node.rb#1670
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1675
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1687
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1680
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1692
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::BlockArgumentNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), expression: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1675
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1700
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1708
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1732
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1727
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1714
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1722
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#1737
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1742
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1759
class Prism::BlockLocalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1761
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#1830
  def ===(other); end

  # source://prism//lib/prism/node.rb#1770
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1775
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1785
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1780
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1790
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::BlockLocalVariableNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1775
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1798
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1814
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1811
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1803
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#1819
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1824
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1841
class Prism::BlockNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1843
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      parameters: T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode)),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, locals, parameters, body, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#1972
  def ===(other); end

  # source://prism//lib/prism/node.rb#1856
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1911
  sig { returns(T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))) }
  def body; end

  # source://prism//lib/prism/node.rb#1861
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1951
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#1933
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1874
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1866
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1879
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      parameters: T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode)),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::BlockNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1861
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1887
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#1956
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#1895
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1946
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#1917
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1905
  sig { returns(T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode))) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1941
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#1925
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#1961
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1966
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1988
class Prism::BlockParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1990
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc); end

  # source://prism//lib/prism/node.rb#2106
  def ===(other); end

  # source://prism//lib/prism/node.rb#2001
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2006
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2016
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2011
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2021
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).returns(Prism::BlockParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2006
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2029
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2090
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2043
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#2049
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#2085
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2072
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2034
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#2063
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#2080
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#2095
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2100
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2123
class Prism::BlockParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2125
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, parameters, locals, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#2271
  def ===(other); end

  # source://prism//lib/prism/node.rb#2137
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2142
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2250
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2226
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2155
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2147
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2160
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::BlockParametersNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), parameters: T.unsafe(nil), locals: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2142
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2168
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2255
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2190
  sig { returns(T::Array[Prism::BlockLocalVariableNode]) }
  def locals; end

  # source://prism//lib/prism/node.rb#2245
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2200
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2180
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#2240
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#2214
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#2260
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2265
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2285
class Prism::BreakNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2287
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, arguments, keyword_loc); end

  # source://prism//lib/prism/node.rb#2375
  def ===(other); end

  # source://prism//lib/prism/node.rb#2297
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2335
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2302
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2314
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2307
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2319
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location
    ).returns(Prism::BreakNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), arguments: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2302
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2327
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2359
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2354
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#2341
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#2349
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#2364
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2369
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2386
class Prism::CallAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2388
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value); end

  # source://prism//lib/prism/node.rb#2574
  def ===(other); end

  # source://prism//lib/prism/node.rb#2403
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2449
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2543
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2468
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2408
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2421
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2413
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2426
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::CallAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2408
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2434
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2454
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2558
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2548
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2490
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2553
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2524
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2512
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2462
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2439
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2482
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#2504
  def save_message_loc(repository); end

  # source://prism//lib/prism/node.rb#2532
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#2563
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#2540
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2444
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2518
  sig { returns(Symbol) }
  def write_name; end

  class << self
    # source://prism//lib/prism/node.rb#2568
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2606
class Prism::CallNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2608
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block); end

  # source://prism//lib/prism/node.rb#2837
  def ===(other); end

  # source://prism//lib/prism/node.rb#2624
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2770
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2671
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2798
  sig { returns(T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))) }
  def block; end

  # source://prism//lib/prism/node.rb#2801
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2699
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2629
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2816
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2776
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2643
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2634
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2648
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))
    ).returns(Prism::CallNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), name: T.unsafe(nil), message_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2629
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2656
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#334
  sig { returns(T.nilable(Prism::Location)) }
  def full_message_loc; end

  # source://prism//lib/prism/node.rb#2676
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2821
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#2806
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2727
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2721
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2811
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2748
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2690
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2661
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2713
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#2790
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#2741
  def save_message_loc(repository); end

  # source://prism//lib/prism/node.rb#2762
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#2826
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#2666
  sig { returns(T::Boolean) }
  def variable_call?; end

  class << self
    # source://prism//lib/prism/node.rb#2831
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18654
# Flags for call nodes.
module Prism::CallNodeFlags; end

# source://prism//lib/prism/node.rb#18662
Prism::CallNodeFlags::ATTRIBUTE_WRITE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18665
Prism::CallNodeFlags::IGNORE_VISIBILITY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18656
Prism::CallNodeFlags::SAFE_NAVIGATION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18659
Prism::CallNodeFlags::VARIABLE_CALL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#2855
class Prism::CallOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2857
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, message_loc, read_name, write_name, binary_operator, binary_operator_loc, value); end

  # source://prism//lib/prism/node.rb#3045
  def ===(other); end

  # source://prism//lib/prism/node.rb#2873
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2919
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2994
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#3000
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#3019
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2938
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2878
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2891
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2883
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2896
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::CallOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), binary_operator: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2878
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2904
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#2924
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3029
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3024
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2960
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node_ext.rb#342
  def operator; end

  # source://prism//lib/prism/node_ext.rb#349
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2982
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2932
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2909
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3008
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#2952
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#2974
  def save_message_loc(repository); end

  # source://prism//lib/prism/node.rb#3034
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3016
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2914
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2988
  sig { returns(Symbol) }
  def write_name; end

  class << self
    # source://prism//lib/prism/node.rb#3039
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3063
class Prism::CallOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3065
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value); end

  # source://prism//lib/prism/node.rb#3251
  def ===(other); end

  # source://prism//lib/prism/node.rb#3080
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3126
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#3220
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#3145
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#3085
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3098
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3090
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3103
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::CallOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3085
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3111
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3131
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3235
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3225
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#3167
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#3230
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3201
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3189
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#3139
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#3116
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3159
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#3181
  def save_message_loc(repository); end

  # source://prism//lib/prism/node.rb#3209
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#3240
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3217
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#3121
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#3195
  sig { returns(Symbol) }
  def write_name; end

  class << self
    # source://prism//lib/prism/node.rb#3245
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3276
class Prism::CallTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3278
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, name, message_loc); end

  # source://prism//lib/prism/node.rb#3413
  def ===(other); end

  # source://prism//lib/prism/node.rb#3290
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3333
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#3387
  sig { returns(String) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#3352
  sig { returns(Prism::Location) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#3295
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3305
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3300
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3310
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location
    ).returns(Prism::CallTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), name: T.unsafe(nil), message_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3295
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3318
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3338
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3397
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3392
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/node.rb#3374
  sig { returns(Prism::Location) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#3368
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3346
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#3323
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3360
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#3382
  def save_message_loc(repository); end

  # source://prism//lib/prism/node.rb#3402
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3328
  sig { returns(T::Boolean) }
  def variable_call?; end

  class << self
    # source://prism//lib/prism/node.rb#3407
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3427
class Prism::CapturePatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3429
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      target: Prism::LocalVariableTargetNode,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, value, target, operator_loc); end

  # source://prism//lib/prism/node.rb#3522
  def ===(other); end

  # source://prism//lib/prism/node.rb#3440
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3445
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3455
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3450
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3460
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      target: Prism::LocalVariableTargetNode,
      operator_loc: Prism::Location
    ).returns(Prism::CapturePatternNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3445
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3468
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3506
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3501
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3488
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3496
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#3482
  sig { returns(Prism::LocalVariableTargetNode) }
  def target; end

  # source://prism//lib/prism/node.rb#3511
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#3476
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3516
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3536
class Prism::CaseMatchNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3538
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::InNode],
      else_clause: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, predicate, conditions, else_clause, case_keyword_loc, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#3664
  def ===(other); end

  # source://prism//lib/prism/node.rb#3551
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3638
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3609
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3556
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3570
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3561
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3597
  sig { returns(T::Array[Prism::InNode]) }
  def conditions; end

  # source://prism//lib/prism/node_ext.rb#470
  def consequent; end

  # source://prism//lib/prism/node.rb#3575
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::InNode],
      else_clause: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location
    ).returns(Prism::CaseMatchNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), predicate: T.unsafe(nil), conditions: T.unsafe(nil), else_clause: T.unsafe(nil), case_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3556
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3583
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3603
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#3643
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3625
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3648
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3591
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3617
  def save_case_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#3633
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#3653
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3658
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3681
class Prism::CaseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3683
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::WhenNode],
      else_clause: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, predicate, conditions, else_clause, case_keyword_loc, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#3809
  def ===(other); end

  # source://prism//lib/prism/node.rb#3696
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3783
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3754
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3701
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3715
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3706
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3742
  sig { returns(T::Array[Prism::WhenNode]) }
  def conditions; end

  # source://prism//lib/prism/node_ext.rb#479
  def consequent; end

  # source://prism//lib/prism/node.rb#3720
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::WhenNode],
      else_clause: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location
    ).returns(Prism::CaseNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), predicate: T.unsafe(nil), conditions: T.unsafe(nil), else_clause: T.unsafe(nil), case_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3701
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3728
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3748
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#3788
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3770
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3793
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3736
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3762
  def save_case_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#3778
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#3798
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3803
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3824
class Prism::ClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3826
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::CallNode),
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location,
      name: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name); end

  # source://prism//lib/prism/node.rb#3988
  def ===(other); end

  # source://prism//lib/prism/node.rb#3842
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3933
  sig { returns(T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))) }
  def body; end

  # source://prism//lib/prism/node.rb#3847
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3957
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#3885
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#3861
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3852
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3898
  sig { returns(T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::CallNode)) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#3866
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::CallNode),
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location,
      name: Symbol
    ).returns(Prism::ClassNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), class_keyword_loc: T.unsafe(nil), constant_path: T.unsafe(nil), inheritance_operator_loc: T.unsafe(nil), superclass: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3847
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3874
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3967
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3939
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#3962
  sig { returns(T.nilable(String)) }
  def inheritance_operator; end

  # source://prism//lib/prism/node.rb#3904
  sig { returns(T.nilable(Prism::Location)) }
  def inheritance_operator_loc; end

  # source://prism//lib/prism/node.rb#3972
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#3879
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#3954
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3893
  def save_class_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#3947
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#3918
  def save_inheritance_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#3926
  sig { returns(T.nilable(Prism::Node)) }
  def superclass; end

  # source://prism//lib/prism/node.rb#3977
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3982
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4006
class Prism::ClassVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4008
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#4118
  def ===(other); end

  # source://prism//lib/prism/node.rb#4020
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4025
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4035
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4030
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4040
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ClassVariableAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4025
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4048
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#165
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4102
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4056
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4062
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4097
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4078
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4070
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4086
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4107
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4094
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4112
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4131
class Prism::ClassVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4133
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end

  # source://prism//lib/prism/node.rb#4230
  def ===(other); end

  # source://prism//lib/prism/node.rb#4146
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4211
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#4195
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#4151
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4161
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4156
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4166
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::ClassVariableOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4151
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4174
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#177
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4214
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4179
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4182
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#358
  def operator; end

  # source://prism//lib/prism/node_ext.rb#365
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4203
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4190
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4219
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4208
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4224
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4244
class Prism::ClassVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4246
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#4344
  def ===(other); end

  # source://prism//lib/prism/node.rb#4258
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4263
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4273
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4268
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4278
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ClassVariableOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4263
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4286
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#171
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4328
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4291
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4294
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4323
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4307
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4302
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4315
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4333
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4320
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4338
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4357
class Prism::ClassVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4359
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#4424
  def ===(other); end

  # source://prism//lib/prism/node.rb#4368
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4373
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4383
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4378
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4388
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ClassVariableReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4373
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4396
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4408
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4405
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4413
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4418
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4434
class Prism::ClassVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4436
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#4497
  def ===(other); end

  # source://prism//lib/prism/node.rb#4445
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4450
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4460
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4455
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4465
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ClassVariableTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4450
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4473
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4481
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4478
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4486
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4491
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4507
class Prism::ClassVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4509
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end

  # source://prism//lib/prism/node.rb#4623
  def ===(other); end

  # source://prism//lib/prism/node.rb#4521
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4526
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4536
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4531
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4541
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::ClassVariableWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4526
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4549
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4607
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4558
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4564
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4602
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4589
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4572
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4597
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4612
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4583
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4617
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#190
class Prism::CodeUnitsCache
  # source://prism//lib/prism/parse_result.rb#216
  sig { params(source: String, encoding: Encoding).void }
  def initialize(source, encoding); end

  # source://prism//lib/prism/parse_result.rb#230
  sig { params(byte_offset: Integer).returns(Integer) }
  def [](byte_offset); end
end

# source://prism//lib/prism/parse_result.rb#202
class Prism::CodeUnitsCache::LengthCounter
  # source://prism//lib/prism/parse_result.rb#203
  def initialize(source, encoding); end

  # source://prism//lib/prism/parse_result.rb#208
  def count(byte_offset, byte_length); end
end

# source://prism//lib/prism/parse_result.rb#191
class Prism::CodeUnitsCache::UTF16Counter
  # source://prism//lib/prism/parse_result.rb#192
  def initialize(source, encoding); end

  # source://prism//lib/prism/parse_result.rb#197
  def count(byte_offset, byte_length); end
end

# source://prism//lib/prism/parse_result.rb#525
class Prism::Comment
  abstract!

  # source://prism//lib/prism/parse_result.rb#530
  sig { params(location: Prism::Location).void }
  def initialize(location); end

  # source://prism//lib/prism/parse_result.rb#535
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#527
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#540
  sig { returns(String) }
  def slice; end

  sig { abstract.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/compiler.rb#30
class Prism::Compiler < ::Prism::Visitor
  # source://prism//lib/prism/compiler.rb#32
  sig { params(node: T.nilable(Prism::Node)).returns(T.untyped) }
  def visit(node); end

  # source://prism//lib/prism/compiler.rb#47
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#52
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/compiler.rb#37
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).returns(T::Array[T.untyped]) }
  def visit_all(nodes); end

  # source://prism//lib/prism/compiler.rb#57
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#62
  def visit_and_node(node); end

  # source://prism//lib/prism/compiler.rb#67
  def visit_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#72
  def visit_array_node(node); end

  # source://prism//lib/prism/compiler.rb#77
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#82
  def visit_assoc_node(node); end

  # source://prism//lib/prism/compiler.rb#87
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#92
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#97
  def visit_begin_node(node); end

  # source://prism//lib/prism/compiler.rb#102
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/compiler.rb#107
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#112
  def visit_block_node(node); end

  # source://prism//lib/prism/compiler.rb#117
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#122
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#127
  def visit_break_node(node); end

  # source://prism//lib/prism/compiler.rb#132
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#137
  def visit_call_node(node); end

  # source://prism//lib/prism/compiler.rb#142
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#147
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#152
  def visit_call_target_node(node); end

  # source://prism//lib/prism/compiler.rb#157
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#162
  def visit_case_match_node(node); end

  # source://prism//lib/prism/compiler.rb#167
  def visit_case_node(node); end

  # source://prism//lib/prism/compiler.rb#42
  sig { params(node: Prism::Node).returns(T::Array[T.untyped]) }
  def visit_child_nodes(node); end

  # source://prism//lib/prism/compiler.rb#172
  def visit_class_node(node); end

  # source://prism//lib/prism/compiler.rb#177
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#182
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#187
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#192
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#197
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#202
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#207
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#212
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#217
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#222
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#227
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/compiler.rb#232
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#237
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#242
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/compiler.rb#247
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/compiler.rb#252
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/compiler.rb#257
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/compiler.rb#262
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/compiler.rb#267
  def visit_def_node(node); end

  # source://prism//lib/prism/compiler.rb#272
  def visit_defined_node(node); end

  # source://prism//lib/prism/compiler.rb#277
  def visit_else_node(node); end

  # source://prism//lib/prism/compiler.rb#282
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#287
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#292
  def visit_ensure_node(node); end

  # source://prism//lib/prism/compiler.rb#297
  def visit_false_node(node); end

  # source://prism//lib/prism/compiler.rb#302
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#307
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/compiler.rb#312
  def visit_float_node(node); end

  # source://prism//lib/prism/compiler.rb#317
  def visit_for_node(node); end

  # source://prism//lib/prism/compiler.rb#322
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#327
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#332
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/compiler.rb#337
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#342
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#347
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#352
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#357
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#362
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#367
  def visit_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#372
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#377
  def visit_if_node(node); end

  # source://prism//lib/prism/compiler.rb#382
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/compiler.rb#387
  def visit_implicit_node(node); end

  # source://prism//lib/prism/compiler.rb#392
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/compiler.rb#397
  def visit_in_node(node); end

  # source://prism//lib/prism/compiler.rb#402
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#407
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#412
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#417
  def visit_index_target_node(node); end

  # source://prism//lib/prism/compiler.rb#422
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#427
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#432
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#437
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#442
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#447
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#452
  def visit_integer_node(node); end

  # source://prism//lib/prism/compiler.rb#457
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#462
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#467
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/compiler.rb#472
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#477
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#482
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#487
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#492
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#497
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#502
  def visit_lambda_node(node); end

  # source://prism//lib/prism/compiler.rb#507
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#512
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#517
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#522
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#527
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#532
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#537
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#542
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/compiler.rb#547
  def visit_match_required_node(node); end

  # source://prism//lib/prism/compiler.rb#552
  def visit_match_write_node(node); end

  # source://prism//lib/prism/compiler.rb#557
  def visit_missing_node(node); end

  # source://prism//lib/prism/compiler.rb#562
  def visit_module_node(node); end

  # source://prism//lib/prism/compiler.rb#567
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/compiler.rb#572
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/compiler.rb#577
  def visit_next_node(node); end

  # source://prism//lib/prism/compiler.rb#582
  def visit_nil_node(node); end

  # source://prism//lib/prism/compiler.rb#587
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#592
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#597
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#602
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#607
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#612
  def visit_or_node(node); end

  # source://prism//lib/prism/compiler.rb#617
  def visit_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#622
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/compiler.rb#627
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#632
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#637
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#642
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#647
  def visit_program_node(node); end

  # source://prism//lib/prism/compiler.rb#652
  def visit_range_node(node); end

  # source://prism//lib/prism/compiler.rb#657
  def visit_rational_node(node); end

  # source://prism//lib/prism/compiler.rb#662
  def visit_redo_node(node); end

  # source://prism//lib/prism/compiler.rb#667
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#672
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#677
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#682
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/compiler.rb#687
  def visit_rescue_node(node); end

  # source://prism//lib/prism/compiler.rb#692
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#697
  def visit_retry_node(node); end

  # source://prism//lib/prism/compiler.rb#702
  def visit_return_node(node); end

  # source://prism//lib/prism/compiler.rb#707
  def visit_self_node(node); end

  # source://prism//lib/prism/compiler.rb#712
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/compiler.rb#717
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/compiler.rb#722
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/compiler.rb#727
  def visit_source_file_node(node); end

  # source://prism//lib/prism/compiler.rb#732
  def visit_source_line_node(node); end

  # source://prism//lib/prism/compiler.rb#737
  def visit_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#742
  def visit_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#747
  def visit_string_node(node); end

  # source://prism//lib/prism/compiler.rb#752
  def visit_super_node(node); end

  # source://prism//lib/prism/compiler.rb#757
  def visit_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#762
  def visit_true_node(node); end

  # source://prism//lib/prism/compiler.rb#767
  def visit_undef_node(node); end

  # source://prism//lib/prism/compiler.rb#772
  def visit_unless_node(node); end

  # source://prism//lib/prism/compiler.rb#777
  def visit_until_node(node); end

  # source://prism//lib/prism/compiler.rb#782
  def visit_when_node(node); end

  # source://prism//lib/prism/compiler.rb#787
  def visit_while_node(node); end

  # source://prism//lib/prism/compiler.rb#792
  def visit_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#797
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#4636
class Prism::ConstantAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4638
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#4736
  def ===(other); end

  # source://prism//lib/prism/node.rb#4650
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4655
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4665
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4660
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4670
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4655
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4678
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#183
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4720
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4683
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4686
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4715
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4699
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4694
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4707
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4725
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4712
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4730
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4749
class Prism::ConstantOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4751
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end

  # source://prism//lib/prism/node.rb#4848
  def ===(other); end

  # source://prism//lib/prism/node.rb#4764
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4829
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#4813
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#4769
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4779
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4774
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4784
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::ConstantOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4769
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4792
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#195
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4832
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4797
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4800
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#374
  def operator; end

  # source://prism//lib/prism/node_ext.rb#381
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4821
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4808
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4837
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4826
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4842
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4862
class Prism::ConstantOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4864
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#4962
  def ===(other); end

  # source://prism//lib/prism/node.rb#4876
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4881
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4891
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4886
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4896
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4881
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4904
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#189
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#4946
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#4909
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4912
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4941
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4925
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4920
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#4933
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#4951
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#4938
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4956
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4975
class Prism::ConstantPathAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4977
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, target, operator_loc, value); end

  # source://prism//lib/prism/node.rb#5061
  def ===(other); end

  # source://prism//lib/prism/node.rb#4988
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4993
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5003
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4998
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5008
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantPathAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4993
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5016
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5045
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5040
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5024
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5032
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#5021
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5050
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5037
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5055
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5073
class Prism::ConstantPathNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5075
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, parent, name, delimiter_loc, name_loc); end

  # source://prism//lib/prism/node.rb#5196
  def ===(other); end

  # source://prism//lib/prism/node.rb#5087
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node_ext.rb#205
  def child; end

  # source://prism//lib/prism/node.rb#5092
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5104
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5097
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5109
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location
    ).returns(Prism::ConstantPathNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), parent: T.unsafe(nil), name: T.unsafe(nil), delimiter_loc: T.unsafe(nil), name_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5092
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5117
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5175
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#5143
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#198
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#176
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5180
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5134
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#5162
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5131
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#5151
  def save_delimiter_loc(repository); end

  # source://prism//lib/prism/node.rb#5170
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#5185
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5190
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#167
class Prism::ConstantPathNode::DynamicPartsInConstantPathError < ::StandardError; end

# source://prism//lib/prism/node_ext.rb#172
class Prism::ConstantPathNode::MissingNodesInConstantPathError < ::StandardError; end

# source://prism//lib/prism/node.rb#5209
class Prism::ConstantPathOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5211
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, target, binary_operator_loc, value, binary_operator); end

  # source://prism//lib/prism/node.rb#5294
  def ===(other); end

  # source://prism//lib/prism/node.rb#5223
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5275
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#5259
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#5228
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5238
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5233
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5243
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::ConstantPathOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5228
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5251
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5278
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node_ext.rb#390
  def operator; end

  # source://prism//lib/prism/node_ext.rb#397
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5267
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#5256
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5283
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5272
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5288
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5307
class Prism::ConstantPathOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5309
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, target, operator_loc, value); end

  # source://prism//lib/prism/node.rb#5393
  def ===(other); end

  # source://prism//lib/prism/node.rb#5320
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5325
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5335
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5330
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5340
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantPathOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5325
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5348
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5377
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5372
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5356
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5364
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#5353
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5382
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5369
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5387
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5405
class Prism::ConstantPathTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5407
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, parent, name, delimiter_loc, name_loc); end

  # source://prism//lib/prism/node.rb#5507
  def ===(other); end

  # source://prism//lib/prism/node.rb#5419
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node_ext.rb#246
  def child; end

  # source://prism//lib/prism/node.rb#5424
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5436
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5429
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5441
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location
    ).returns(Prism::ConstantPathTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), parent: T.unsafe(nil), name: T.unsafe(nil), delimiter_loc: T.unsafe(nil), name_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5424
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5449
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5486
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#5460
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#239
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#219
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5491
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5457
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#5473
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5454
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#5468
  def save_delimiter_loc(repository); end

  # source://prism//lib/prism/node.rb#5481
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#5496
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5501
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5526
class Prism::ConstantPathWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5528
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, target, operator_loc, value); end

  # source://prism//lib/prism/node.rb#5624
  def ===(other); end

  # source://prism//lib/prism/node.rb#5539
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5544
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5554
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5549
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5559
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantPathWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5544
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5567
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#5608
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5603
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5584
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5592
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#5578
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5613
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5600
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5618
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5636
class Prism::ConstantReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5638
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#5703
  def ===(other); end

  # source://prism//lib/prism/node.rb#5647
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5652
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5662
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5657
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5667
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ConstantReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5652
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5675
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#142
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#137
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5687
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5684
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5692
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5697
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5713
class Prism::ConstantTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5715
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#5776
  def ===(other); end

  # source://prism//lib/prism/node.rb#5724
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5729
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5739
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5734
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5744
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ConstantTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5729
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5752
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#265
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#260
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5760
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5757
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5765
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5770
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5786
class Prism::ConstantWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5788
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end

  # source://prism//lib/prism/node.rb#5902
  def ===(other); end

  # source://prism//lib/prism/node.rb#5800
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5805
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5815
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5810
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5820
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::ConstantWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5805
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5828
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node_ext.rb#155
  sig { returns(String) }
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#150
  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5886
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#5837
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5843
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5881
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5868
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5851
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#5876
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#5891
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#5862
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5896
    def type; end
  end
end

# source://prism//lib/prism/dsl.rb#64
module Prism::DSL
  extend ::Prism::DSL

  # source://prism//lib/prism/dsl.rb#80
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      new_name: T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode),
      old_name: T.any(Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::SymbolNode, Prism::MissingNode),
      keyword_loc: Prism::Location
    ).returns(Prism::AliasGlobalVariableNode)
  end
  def alias_global_variable_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), new_name: T.unsafe(nil), old_name: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#85
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      new_name: T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode),
      old_name: T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode, Prism::GlobalVariableReadNode, Prism::MissingNode),
      keyword_loc: Prism::Location
    ).returns(Prism::AliasMethodNode)
  end
  def alias_method_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), new_name: T.unsafe(nil), old_name: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#90
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::AlternationPatternNode)
  end
  def alternation_pattern_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#95
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::AndNode)
  end
  def and_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#100
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T::Array[Prism::Node]
    ).returns(Prism::ArgumentsNode)
  end
  def arguments_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), arguments: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#835
  sig { params(name: Symbol).returns(Integer) }
  def arguments_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#105
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::ArrayNode)
  end
  def array_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), elements: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#847
  sig { params(name: Symbol).returns(Integer) }
  def array_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#110
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::ArrayPatternNode)
  end
  def array_pattern_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), constant: T.unsafe(nil), requireds: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#115
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location)
    ).returns(Prism::AssocNode)
  end
  def assoc_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), key: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#120
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::AssocSplatNode)
  end
  def assoc_splat_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#125
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::BackReferenceReadNode)
  end
  def back_reference_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#130
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::BeginNode)
  end
  def begin_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), begin_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), rescue_clause: T.unsafe(nil), else_clause: T.unsafe(nil), ensure_clause: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#135
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::BlockArgumentNode)
  end
  def block_argument_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), expression: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#140
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::BlockLocalVariableNode)
  end
  def block_local_variable_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#145
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      parameters: T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode)),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::BlockNode)
  end
  def block_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#150
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).returns(Prism::BlockParameterNode)
  end
  def block_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#155
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::BlockParametersNode)
  end
  def block_parameters_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), parameters: T.unsafe(nil), locals: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#160
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location
    ).returns(Prism::BreakNode)
  end
  def break_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), arguments: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#165
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::CallAndWriteNode)
  end
  def call_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#170
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))
    ).returns(Prism::CallNode)
  end
  def call_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), name: T.unsafe(nil), message_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#855
  sig { params(name: Symbol).returns(Integer) }
  def call_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#175
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::CallOperatorWriteNode)
  end
  def call_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), binary_operator: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#180
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::CallOrWriteNode)
  end
  def call_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), message_loc: T.unsafe(nil), read_name: T.unsafe(nil), write_name: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#185
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location
    ).returns(Prism::CallTargetNode)
  end
  def call_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), name: T.unsafe(nil), message_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#190
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      target: Prism::LocalVariableTargetNode,
      operator_loc: Prism::Location
    ).returns(Prism::CapturePatternNode)
  end
  def capture_pattern_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#195
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::InNode],
      else_clause: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location
    ).returns(Prism::CaseMatchNode)
  end
  def case_match_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), predicate: T.unsafe(nil), conditions: T.unsafe(nil), else_clause: T.unsafe(nil), case_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#200
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::WhenNode],
      else_clause: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location
    ).returns(Prism::CaseNode)
  end
  def case_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), predicate: T.unsafe(nil), conditions: T.unsafe(nil), else_clause: T.unsafe(nil), case_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#205
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::CallNode),
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location,
      name: Symbol
    ).returns(Prism::ClassNode)
  end
  def class_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), class_keyword_loc: T.unsafe(nil), constant_path: T.unsafe(nil), inheritance_operator_loc: T.unsafe(nil), superclass: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#210
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ClassVariableAndWriteNode)
  end
  def class_variable_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#215
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::ClassVariableOperatorWriteNode)
  end
  def class_variable_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#220
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ClassVariableOrWriteNode)
  end
  def class_variable_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#225
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ClassVariableReadNode)
  end
  def class_variable_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#230
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ClassVariableTargetNode)
  end
  def class_variable_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#235
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::ClassVariableWriteNode)
  end
  def class_variable_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#240
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantAndWriteNode)
  end
  def constant_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#245
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::ConstantOperatorWriteNode)
  end
  def constant_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#250
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantOrWriteNode)
  end
  def constant_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#255
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantPathAndWriteNode)
  end
  def constant_path_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#260
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location
    ).returns(Prism::ConstantPathNode)
  end
  def constant_path_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), parent: T.unsafe(nil), name: T.unsafe(nil), delimiter_loc: T.unsafe(nil), name_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#265
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::ConstantPathOperatorWriteNode)
  end
  def constant_path_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#270
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantPathOrWriteNode)
  end
  def constant_path_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#275
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location
    ).returns(Prism::ConstantPathTargetNode)
  end
  def constant_path_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), parent: T.unsafe(nil), name: T.unsafe(nil), delimiter_loc: T.unsafe(nil), name_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#280
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::ConstantPathWriteNode)
  end
  def constant_path_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), target: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#285
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ConstantReadNode)
  end
  def constant_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#290
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::ConstantTargetNode)
  end
  def constant_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#295
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::ConstantWriteNode)
  end
  def constant_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#300
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::DefNode)
  end
  def def_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), receiver: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), locals: T.unsafe(nil), def_keyword_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), equal_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#305
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location
    ).returns(Prism::DefinedNode)
  end
  def defined_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), lparen_loc: T.unsafe(nil), value: T.unsafe(nil), rparen_loc: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#310
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::ElseNode)
  end
  def else_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), else_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#315
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location
    ).returns(Prism::EmbeddedStatementsNode)
  end
  def embedded_statements_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), statements: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#320
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      variable: T.any(Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)
    ).returns(Prism::EmbeddedVariableNode)
  end
  def embedded_variable_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), operator_loc: T.unsafe(nil), variable: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#866
  sig { params(name: Symbol).returns(Integer) }
  def encoding_flag(name); end

  # source://prism//lib/prism/dsl.rb#325
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location
    ).returns(Prism::EnsureNode)
  end
  def ensure_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), ensure_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#330
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::FalseNode)
  end
  def false_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#335
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      left: Prism::SplatNode,
      requireds: T::Array[Prism::Node],
      right: T.any(Prism::SplatNode, Prism::MissingNode),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::FindPatternNode)
  end
  def find_pattern_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), constant: T.unsafe(nil), left: T.unsafe(nil), requireds: T.unsafe(nil), right: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#340
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::FlipFlopNode)
  end
  def flip_flop_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#345
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Float
    ).returns(Prism::FloatNode)
  end
  def float_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#350
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      index: T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode),
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location
    ).returns(Prism::ForNode)
  end
  def for_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), index: T.unsafe(nil), collection: T.unsafe(nil), statements: T.unsafe(nil), for_keyword_loc: T.unsafe(nil), in_keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#355
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::ForwardingArgumentsNode)
  end
  def forwarding_arguments_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#360
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::ForwardingParameterNode)
  end
  def forwarding_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#365
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      block: T.nilable(Prism::BlockNode)
    ).returns(Prism::ForwardingSuperNode)
  end
  def forwarding_super_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#370
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::GlobalVariableAndWriteNode)
  end
  def global_variable_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#375
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::GlobalVariableOperatorWriteNode)
  end
  def global_variable_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#380
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::GlobalVariableOrWriteNode)
  end
  def global_variable_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#385
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::GlobalVariableReadNode)
  end
  def global_variable_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#390
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::GlobalVariableTargetNode)
  end
  def global_variable_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#395
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::GlobalVariableWriteNode)
  end
  def global_variable_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#400
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location
    ).returns(Prism::HashNode)
  end
  def hash_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), elements: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#405
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::HashPatternNode)
  end
  def hash_pattern_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), constant: T.unsafe(nil), elements: T.unsafe(nil), rest: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#410
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      subsequent: T.nilable(T.any(Prism::ElseNode, Prism::IfNode)),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::IfNode)
  end
  def if_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), if_keyword_loc: T.unsafe(nil), predicate: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), subsequent: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#415
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode)
    ).returns(Prism::ImaginaryNode)
  end
  def imaginary_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), numeric: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#420
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: T.any(Prism::LocalVariableReadNode, Prism::CallNode, Prism::ConstantReadNode, Prism::LocalVariableTargetNode)
    ).returns(Prism::ImplicitNode)
  end
  def implicit_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#425
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::ImplicitRestNode)
  end
  def implicit_rest_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#430
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location)
    ).returns(Prism::InNode)
  end
  def in_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), pattern: T.unsafe(nil), statements: T.unsafe(nil), in_loc: T.unsafe(nil), then_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#435
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::IndexAndWriteNode)
  end
  def index_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#440
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::IndexOperatorWriteNode)
  end
  def index_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), binary_operator: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#445
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::IndexOrWriteNode)
  end
  def index_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#450
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode)
    ).returns(Prism::IndexTargetNode)
  end
  def index_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#455
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::InstanceVariableAndWriteNode)
  end
  def instance_variable_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#460
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::InstanceVariableOperatorWriteNode)
  end
  def instance_variable_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#465
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::InstanceVariableOrWriteNode)
  end
  def instance_variable_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#470
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::InstanceVariableReadNode)
  end
  def instance_variable_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#475
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::InstanceVariableTargetNode)
  end
  def instance_variable_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#480
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::InstanceVariableWriteNode)
  end
  def instance_variable_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#875
  sig { params(name: Symbol).returns(Integer) }
  def integer_base_flag(name); end

  # source://prism//lib/prism/dsl.rb#485
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Integer
    ).returns(Prism::IntegerNode)
  end
  def integer_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#490
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).returns(Prism::InterpolatedMatchLastLineNode)
  end
  def interpolated_match_last_line_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#495
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).returns(Prism::InterpolatedRegularExpressionNode)
  end
  def interpolated_regular_expression_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#500
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode, Prism::XStringNode)],
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::InterpolatedStringNode)
  end
  def interpolated_string_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#886
  sig { params(name: Symbol).returns(Integer) }
  def interpolated_string_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#505
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::InterpolatedSymbolNode)
  end
  def interpolated_symbol_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#510
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).returns(Prism::InterpolatedXStringNode)
  end
  def interpolated_x_string_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#515
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::ItLocalVariableReadNode)
  end
  def it_local_variable_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#520
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::ItParametersNode)
  end
  def it_parameters_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#525
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]
    ).returns(Prism::KeywordHashNode)
  end
  def keyword_hash_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), elements: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#895
  sig { params(name: Symbol).returns(Integer) }
  def keyword_hash_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#530
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).returns(Prism::KeywordRestParameterNode)
  end
  def keyword_rest_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#535
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode)),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))
    ).returns(Prism::LambdaNode)
  end
  def lambda_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#540
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableAndWriteNode)
  end
  def local_variable_and_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#545
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableOperatorWriteNode)
  end
  def local_variable_operator_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), binary_operator: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#550
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableOrWriteNode)
  end
  def local_variable_or_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#555
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableReadNode)
  end
  def local_variable_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#560
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableTargetNode)
  end
  def local_variable_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#565
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::LocalVariableWriteNode)
  end
  def local_variable_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#75
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).returns(Prism::Location) }
  def location(source: T.unsafe(nil), start_offset: T.unsafe(nil), length: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#903
  sig { params(name: Symbol).returns(Integer) }
  def loop_flag(name); end

  # source://prism//lib/prism/dsl.rb#570
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).returns(Prism::MatchLastLineNode)
  end
  def match_last_line_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#575
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::MatchPredicateNode)
  end
  def match_predicate_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), pattern: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#580
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::MatchRequiredNode)
  end
  def match_required_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), pattern: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#585
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode]
    ).returns(Prism::MatchWriteNode)
  end
  def match_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), call: T.unsafe(nil), targets: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#590
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::MissingNode)
  end
  def missing_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#595
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::MissingNode),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location,
      name: Symbol
    ).returns(Prism::ModuleNode)
  end
  def module_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), module_keyword_loc: T.unsafe(nil), constant_path: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#600
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode)),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location)
    ).returns(Prism::MultiTargetNode)
  end
  def multi_target_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), lefts: T.unsafe(nil), rest: T.unsafe(nil), rights: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#605
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode)),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::MultiWriteNode)
  end
  def multi_write_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), lefts: T.unsafe(nil), rest: T.unsafe(nil), rights: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#610
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location
    ).returns(Prism::NextNode)
  end
  def next_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), arguments: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#615
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::NilNode)
  end
  def nil_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#620
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location
    ).returns(Prism::NoKeywordsParameterNode)
  end
  def no_keywords_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), operator_loc: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#625
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      maximum: Integer
    ).returns(Prism::NumberedParametersNode)
  end
  def numbered_parameters_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), maximum: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#630
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      number: Integer
    ).returns(Prism::NumberedReferenceReadNode)
  end
  def numbered_reference_read_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), number: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#635
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::OptionalKeywordParameterNode)
  end
  def optional_keyword_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#640
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::OptionalParameterNode)
  end
  def optional_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#645
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::OrNode)
  end
  def or_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#911
  sig { params(name: Symbol).returns(Integer) }
  def parameter_flag(name); end

  # source://prism//lib/prism/dsl.rb#650
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode)
    ).returns(Prism::ParametersNode)
  end
  def parameters_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#655
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::ParenthesesNode)
  end
  def parentheses_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), body: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#919
  sig { params(name: Symbol).returns(Integer) }
  def parentheses_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#660
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location
    ).returns(Prism::PinnedExpressionNode)
  end
  def pinned_expression_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), expression: T.unsafe(nil), operator_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#665
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      variable: T.any(Prism::LocalVariableReadNode, Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::ItLocalVariableReadNode, Prism::MissingNode),
      operator_loc: Prism::Location
    ).returns(Prism::PinnedVariableNode)
  end
  def pinned_variable_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), variable: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#670
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::PostExecutionNode)
  end
  def post_execution_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), statements: T.unsafe(nil), keyword_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#675
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::PreExecutionNode)
  end
  def pre_execution_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), statements: T.unsafe(nil), keyword_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#680
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode
    ).returns(Prism::ProgramNode)
  end
  def program_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#927
  sig { params(name: Symbol).returns(Integer) }
  def range_flag(name); end

  # source://prism//lib/prism/dsl.rb#685
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::RangeNode)
  end
  def range_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#690
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      numerator: Integer,
      denominator: Integer
    ).returns(Prism::RationalNode)
  end
  def rational_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), numerator: T.unsafe(nil), denominator: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#695
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::RedoNode)
  end
  def redo_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#935
  sig { params(name: Symbol).returns(Integer) }
  def regular_expression_flag(name); end

  # source://prism//lib/prism/dsl.rb#700
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).returns(Prism::RegularExpressionNode)
  end
  def regular_expression_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#705
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location
    ).returns(Prism::RequiredKeywordParameterNode)
  end
  def required_keyword_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#710
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::RequiredParameterNode)
  end
  def required_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#715
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node
    ).returns(Prism::RescueModifierNode)
  end
  def rescue_modifier_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), expression: T.unsafe(nil), keyword_loc: T.unsafe(nil), rescue_expression: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#720
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode)),
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      subsequent: T.nilable(Prism::RescueNode)
    ).returns(Prism::RescueNode)
  end
  def rescue_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), exceptions: T.unsafe(nil), operator_loc: T.unsafe(nil), reference: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), subsequent: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#725
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).returns(Prism::RestParameterNode)
  end
  def rest_parameter_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#730
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::RetryNode)
  end
  def retry_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#735
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode)
    ).returns(Prism::ReturnNode)
  end
  def return_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), arguments: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#740
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::SelfNode)
  end
  def self_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#745
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode)
    ).returns(Prism::ShareableConstantNode)
  end
  def shareable_constant_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), write: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#953
  sig { params(name: Symbol).returns(Integer) }
  def shareable_constant_node_flag(name); end

  # source://prism//lib/prism/dsl.rb#750
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location
    ).returns(Prism::SingletonClassNode)
  end
  def singleton_class_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), class_keyword_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), expression: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#70
  sig { params(string: String).returns(Prism::Source) }
  def source(string); end

  # source://prism//lib/prism/dsl.rb#755
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::SourceEncodingNode)
  end
  def source_encoding_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#760
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      filepath: String
    ).returns(Prism::SourceFileNode)
  end
  def source_file_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), filepath: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#765
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::SourceLineNode)
  end
  def source_line_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#770
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node)
    ).returns(Prism::SplatNode)
  end
  def splat_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), operator_loc: T.unsafe(nil), expression: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#775
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      body: T::Array[Prism::Node]
    ).returns(Prism::StatementsNode)
  end
  def statements_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), body: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#963
  sig { params(name: Symbol).returns(Integer) }
  def string_flag(name); end

  # source://prism//lib/prism/dsl.rb#780
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String
    ).returns(Prism::StringNode)
  end
  def string_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#785
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))
    ).returns(Prism::SuperNode)
  end
  def super_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), arguments: T.unsafe(nil), rparen_loc: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#974
  sig { params(name: Symbol).returns(Integer) }
  def symbol_flag(name); end

  # source://prism//lib/prism/dsl.rb#790
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String
    ).returns(Prism::SymbolNode)
  end
  def symbol_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), value_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#795
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer
    ).returns(Prism::TrueNode)
  end
  def true_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#800
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location
    ).returns(Prism::UndefNode)
  end
  def undef_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), names: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#805
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      else_clause: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::UnlessNode)
  end
  def unless_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), predicate: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), else_clause: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#810
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode)
    ).returns(Prism::UntilNode)
  end
  def until_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), predicate: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#815
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode)
    ).returns(Prism::WhenNode)
  end
  def when_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), conditions: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#820
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode)
    ).returns(Prism::WhileNode)
  end
  def while_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), predicate: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#825
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).returns(Prism::XStringNode)
  end
  def x_string_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#830
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location)
    ).returns(Prism::YieldNode)
  end
  def yield_node(source: T.unsafe(nil), node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), arguments: T.unsafe(nil), rparen_loc: T.unsafe(nil)); end

  private

  # source://prism//lib/prism/dsl.rb#993
  sig { returns(Prism::Location) }
  def default_location; end

  # source://prism//lib/prism/dsl.rb#999
  sig { params(source: Prism::Source, location: Prism::Location).returns(Prism::Node) }
  def default_node(source, location); end

  # source://prism//lib/prism/dsl.rb#987
  sig { returns(Prism::Source) }
  def default_source; end
end

# source://prism//lib/prism/node.rb#5916
class Prism::DefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5918
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#6157
  def ===(other); end

  # source://prism//lib/prism/node.rb#5938
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5997
  sig { returns(T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))) }
  def body; end

  # source://prism//lib/prism/node.rb#5943
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5957
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5948
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5962
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::DefNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), receiver: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil), locals: T.unsafe(nil), def_keyword_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), equal_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5943
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5970
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6111
  sig { returns(String) }
  def def_keyword; end

  # source://prism//lib/prism/node.rb#6003
  sig { returns(Prism::Location) }
  def def_keyword_loc; end

  # source://prism//lib/prism/node.rb#6136
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6092
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6131
  sig { returns(T.nilable(String)) }
  def equal; end

  # source://prism//lib/prism/node.rb#6073
  sig { returns(T.nilable(Prism::Location)) }
  def equal_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6141
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6000
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#6121
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#6035
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#5975
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5978
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6116
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#6016
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5994
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#5991
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#6126
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#6054
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#6011
  def save_def_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6106
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6087
  def save_equal_loc(repository); end

  # source://prism//lib/prism/node.rb#6049
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#5986
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#6030
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#6068
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#6146
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6151
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6179
class Prism::DefinedNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6181
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, lparen_loc, value, rparen_loc, keyword_loc); end

  # source://prism//lib/prism/node.rb#6311
  def ===(other); end

  # source://prism//lib/prism/node.rb#6193
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6198
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6208
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6203
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6213
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location
    ).returns(Prism::DefinedNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), lparen_loc: T.unsafe(nil), value: T.unsafe(nil), rparen_loc: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6198
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6221
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6295
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6290
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#6267
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#6280
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#6226
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#6285
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#6248
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#6275
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6240
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#6262
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#6300
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#6245
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6305
    def type; end
  end
end

# source://prism//lib/prism/desugar_compiler.rb#5
class Prism::DesugarAndWriteNode
  include ::Prism::DSL

  # source://prism//lib/prism/desugar_compiler.rb#10
  def initialize(node, default_source, read_class, write_class, **arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#8
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#19
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#8
  def default_source; end

  # source://prism//lib/prism/desugar_compiler.rb#8
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#8
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#8
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#256
class Prism::DesugarCompiler < ::Prism::MutationCompiler
  # source://prism//lib/prism/desugar_compiler.rb#262
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#280
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#271
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#289
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#307
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#298
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#316
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#334
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#325
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#343
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#361
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#352
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#370
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#388
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#379
  def visit_local_variable_or_write_node(node); end
end

# source://prism//lib/prism/desugar_compiler.rb#87
class Prism::DesugarOperatorWriteNode
  include ::Prism::DSL

  # source://prism//lib/prism/desugar_compiler.rb#92
  def initialize(node, default_source, read_class, write_class, **arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#90
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#101
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#90
  def default_source; end

  # source://prism//lib/prism/desugar_compiler.rb#90
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#90
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#90
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#36
class Prism::DesugarOrWriteDefinedNode
  include ::Prism::DSL

  # source://prism//lib/prism/desugar_compiler.rb#41
  def initialize(node, default_source, read_class, write_class, **arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#50
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def default_source; end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#131
class Prism::DesugarOrWriteNode
  include ::Prism::DSL

  # source://prism//lib/prism/desugar_compiler.rb#136
  def initialize(node, default_source, read_class, write_class, **arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#134
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#145
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#134
  def default_source; end

  # source://prism//lib/prism/desugar_compiler.rb#134
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#134
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#134
  def write_class; end
end

# source://prism//lib/prism/dispatcher.rb#45
class Prism::Dispatcher < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#50
  def initialize; end

  # source://prism//lib/prism/visitor.rb#20
  def dispatch(node); end

  # source://prism//lib/prism/dispatcher.rb#82
  def dispatch_once(node); end

  # source://prism//lib/prism/dispatcher.rb#47
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#57
  def register(listener, *events); end

  # source://prism//lib/prism/dispatcher.rb#65
  def register_public_methods(listener); end

  # source://prism//lib/prism/dispatcher.rb#88
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#96
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#104
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#112
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#120
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#128
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#136
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#144
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#152
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#160
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#168
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#176
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#184
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#192
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#200
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#208
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#216
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#224
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#232
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#240
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#248
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#256
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#264
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#272
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#280
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#288
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#296
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#304
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#312
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#320
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#328
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#336
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#344
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#352
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#360
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#368
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#376
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#384
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#392
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#400
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#408
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#416
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#424
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#432
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#440
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#448
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#456
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#464
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#472
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#480
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#488
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#496
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#504
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#512
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#520
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#528
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#536
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#544
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#552
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#560
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#568
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#576
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#584
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#592
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#600
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#608
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#616
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#624
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#632
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#640
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#648
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#656
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#664
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#672
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#680
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#688
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#696
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#704
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#712
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#720
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#728
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#736
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#744
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#752
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#760
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#768
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#776
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#784
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#792
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#800
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#808
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#816
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#824
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#832
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#840
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#848
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#856
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#864
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#872
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#880
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#888
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#896
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#904
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#912
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#920
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#928
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#936
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#944
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#952
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#960
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#968
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#976
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#984
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#992
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1000
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1008
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1016
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1024
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1032
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1040
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1048
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1056
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1064
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1072
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1080
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1088
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1096
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1104
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1112
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1120
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1128
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1136
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1144
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1152
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1160
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1168
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1176
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1184
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1192
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1200
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1208
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1216
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1224
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1232
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1240
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1248
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1256
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1264
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1272
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1280
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1288
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/dispatcher.rb#70
  def register_events(listener, events); end
end

# source://prism//lib/prism/dispatcher.rb#1294
class Prism::Dispatcher::DispatchOnce < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#1297
  def initialize(listeners); end

  # source://prism//lib/prism/dispatcher.rb#1295
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#1302
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1308
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1314
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1320
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1326
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1332
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1338
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1344
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1350
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1356
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1362
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1368
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1374
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1380
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1386
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1392
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1398
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1404
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1410
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1416
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1422
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1428
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1434
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1440
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1446
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1452
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1458
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1464
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1470
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1476
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1482
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1488
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1494
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1500
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1506
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1512
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1518
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1524
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1530
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1536
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1542
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1548
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1554
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1560
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1566
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1572
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1578
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1584
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1590
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1596
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1602
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1608
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1614
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1620
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1626
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1632
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1638
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1644
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1650
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1656
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1662
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1668
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1674
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1680
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1686
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1692
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1698
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1704
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1710
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1716
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1722
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1728
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1734
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1740
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1746
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1752
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1758
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1764
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1770
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1776
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1782
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1788
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1794
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1800
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1806
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1812
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1818
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1824
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1830
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1836
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1842
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1848
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1854
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1860
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1866
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1872
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1878
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1884
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1890
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1896
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1902
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1908
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1914
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1920
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1926
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1932
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1938
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1944
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1950
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1956
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1962
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1968
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1974
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1980
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1986
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1992
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1998
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2004
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2010
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2016
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2022
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2028
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2034
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2040
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2046
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2052
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2058
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2064
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2070
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2076
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2082
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2088
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2094
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2100
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2106
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2112
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2118
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2124
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2130
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2136
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2142
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2148
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2154
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2160
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2166
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2172
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2178
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2184
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2190
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2196
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2202
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dot_visitor.rb#18
class Prism::DotVisitor < ::Prism::Visitor
  # source://prism//lib/prism/dot_visitor.rb#110
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#107
  def digraph; end

  # source://prism//lib/prism/dot_visitor.rb#115
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#120
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#145
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#170
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#195
  def visit_and_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#220
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#250
  def visit_array_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#290
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#352
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#379
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#402
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#419
  def visit_begin_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#467
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#490
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#510
  def visit_block_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#545
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#573
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#616
  def visit_break_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#639
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#685
  def visit_call_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#743
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#792
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#838
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#868
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#893
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#938
  def visit_case_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#983
  def visit_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1030
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1057
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1087
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1114
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1131
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1148
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1175
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1202
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1232
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1259
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1284
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1313
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1341
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1366
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1395
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1420
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1437
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1454
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1481
  def visit_def_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1550
  def visit_defined_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1581
  def visit_else_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1609
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1635
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1656
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1682
  def visit_false_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1696
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1747
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1779
  def visit_float_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1796
  def visit_for_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1838
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1852
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1866
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1886
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1913
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1943
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1970
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1987
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2004
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2031
  def visit_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2064
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2113
  def visit_if_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2158
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2176
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2194
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2208
  def visit_in_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2240
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2293
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2349
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2402
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2441
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2468
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2498
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2525
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2542
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2559
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2586
  def visit_integer_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2606
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2642
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2678
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2718
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2755
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2788
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2802
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2816
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2846
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2874
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2912
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2942
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2975
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3005
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3025
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3045
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3075
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3104
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3129
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3154
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3185
  def visit_missing_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3199
  def visit_module_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3235
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3291
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3354
  def visit_next_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3377
  def visit_nil_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3391
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3411
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3428
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3445
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3472
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3502
  def visit_or_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3527
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3611
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3640
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3667
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3688
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3717
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3746
  def visit_program_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3767
  def visit_range_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3799
  def visit_rational_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3822
  def visit_redo_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3836
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3865
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3888
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3908
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3933
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3991
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4019
  def visit_retry_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4033
  def visit_return_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4056
  def visit_self_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4070
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4091
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4127
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4141
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4161
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4175
  def visit_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4198
  def visit_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4225
  def visit_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4258
  def visit_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4297
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4332
  def visit_true_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4346
  def visit_undef_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4376
  def visit_unless_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4419
  def visit_until_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4459
  def visit_when_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4500
  def visit_while_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4540
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4569
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/dot_visitor.rb#4615
  def arguments_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4627
  def array_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4635
  def call_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4646
  def encoding_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4655
  def integer_base_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4666
  def interpolated_string_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4675
  def keyword_hash_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4609
  def location_inspect(location); end

  # source://prism//lib/prism/dot_visitor.rb#4683
  def loop_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4604
  def node_id(node); end

  # source://prism//lib/prism/dot_visitor.rb#4691
  def parameter_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4699
  def parentheses_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4707
  def range_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4715
  def regular_expression_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4733
  def shareable_constant_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4743
  def string_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4754
  def symbol_flags_inspect(node); end
end

# source://prism//lib/prism/dot_visitor.rb#63
class Prism::DotVisitor::Digraph
  # source://prism//lib/prism/dot_visitor.rb#66
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#80
  def edge(value); end

  # source://prism//lib/prism/dot_visitor.rb#64
  def edges; end

  # source://prism//lib/prism/dot_visitor.rb#72
  def node(value); end

  # source://prism//lib/prism/dot_visitor.rb#64
  def nodes; end

  # source://prism//lib/prism/dot_visitor.rb#84
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#76
  def waypoint(value); end

  # source://prism//lib/prism/dot_visitor.rb#64
  def waypoints; end
end

# source://prism//lib/prism/dot_visitor.rb#19
class Prism::DotVisitor::Field
  # source://prism//lib/prism/dot_visitor.rb#22
  def initialize(name, value, port); end

  # source://prism//lib/prism/dot_visitor.rb#20
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#20
  def port; end

  # source://prism//lib/prism/dot_visitor.rb#28
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#20
  def value; end
end

# source://prism//lib/prism/dot_visitor.rb#37
class Prism::DotVisitor::Table
  # source://prism//lib/prism/dot_visitor.rb#40
  def initialize(name); end

  # source://prism//lib/prism/dot_visitor.rb#45
  def field(name, value = T.unsafe(nil), port: T.unsafe(nil)); end

  # source://prism//lib/prism/dot_visitor.rb#38
  def fields; end

  # source://prism//lib/prism/dot_visitor.rb#38
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#49
  def to_dot; end
end

# source://prism//lib/prism/node.rb#6324
class Prism::ElseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6326
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, else_keyword_loc, statements, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#6433
  def ===(other); end

  # source://prism//lib/prism/node.rb#6337
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6342
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6354
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6347
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6359
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::ElseNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), else_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6342
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6367
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6407
  sig { returns(String) }
  def else_keyword; end

  # source://prism//lib/prism/node.rb#6372
  sig { returns(Prism::Location) }
  def else_keyword_loc; end

  # source://prism//lib/prism/node.rb#6412
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6388
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6417
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6380
  def save_else_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6402
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6385
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6422
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6427
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#562
class Prism::EmbDocComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#569
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#564
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/node.rb#6445
class Prism::EmbeddedStatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6447
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, statements, closing_loc); end

  # source://prism//lib/prism/node.rb#6548
  def ===(other); end

  # source://prism//lib/prism/node.rb#6458
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6463
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6527
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#6509
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6475
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6468
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6480
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location
    ).returns(Prism::EmbeddedStatementsNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), statements: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6463
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6488
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6532
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6522
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#6493
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6517
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#6501
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#6506
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6537
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6542
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6560
class Prism::EmbeddedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6562
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      variable: T.any(Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)
    ).void
  end
  def initialize(source, node_id, location, flags, operator_loc, variable); end

  # source://prism//lib/prism/node.rb#6642
  def ===(other); end

  # source://prism//lib/prism/node.rb#6572
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6577
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6587
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6582
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6592
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      variable: T.any(Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)
    ).returns(Prism::EmbeddedVariableNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), operator_loc: T.unsafe(nil), variable: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6577
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6600
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6626
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6621
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6605
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6613
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#6631
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#6618
  sig do
    returns(T.any(Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode))
  end
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#6636
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18669
# Flags for nodes that have unescaped content.
module Prism::EncodingFlags; end

# source://prism//lib/prism/node.rb#18674
Prism::EncodingFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18671
Prism::EncodingFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#6657
class Prism::EnsureNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6659
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, ensure_keyword_loc, statements, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#6760
  def ===(other); end

  # source://prism//lib/prism/node.rb#6670
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6675
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6687
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6680
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6692
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location
    ).returns(Prism::EnsureNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), ensure_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6675
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6700
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6739
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6721
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6734
  sig { returns(String) }
  def ensure_keyword; end

  # source://prism//lib/prism/node.rb#6705
  sig { returns(Prism::Location) }
  def ensure_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6744
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6729
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6713
  def save_ensure_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#6718
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6749
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6754
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6772
class Prism::FalseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6774
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#6831
  def ===(other); end

  # source://prism//lib/prism/node.rb#6782
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6787
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6797
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6792
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6802
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::FalseNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6787
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6810
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6815
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6820
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6825
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6849
class Prism::FindPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6851
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      left: Prism::SplatNode,
      requireds: T::Array[Prism::Node],
      right: T.any(Prism::SplatNode, Prism::MissingNode),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, constant, left, requireds, right, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#7012
  def ===(other); end

  # source://prism//lib/prism/node.rb#6865
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6870
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6991
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#6967
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6885
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6875
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6906
  sig { returns(T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode))) }
  def constant; end

  # source://prism//lib/prism/node.rb#6890
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      left: Prism::SplatNode,
      requireds: T::Array[Prism::Node],
      right: T.any(Prism::SplatNode, Prism::MissingNode),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::FindPatternNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), constant: T.unsafe(nil), left: T.unsafe(nil), requireds: T.unsafe(nil), right: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6870
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6898
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#6996
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#6915
  sig { returns(Prism::SplatNode) }
  def left; end

  # source://prism//lib/prism/node.rb#6986
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#6942
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6924
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#6933
  sig { returns(T.any(Prism::SplatNode, Prism::MissingNode)) }
  def right; end

  # source://prism//lib/prism/node.rb#6981
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#6956
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#7001
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7006
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7028
class Prism::FlipFlopNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7030
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end

  # source://prism//lib/prism/node.rb#7122
  def ===(other); end

  # source://prism//lib/prism/node.rb#7041
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7046
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7059
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7051
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7064
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::FlipFlopNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7046
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7072
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7077
  sig { returns(T::Boolean) }
  def exclude_end?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7106
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7082
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#7101
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7088
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7085
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#7096
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#7111
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7116
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7135
class Prism::FloatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7137
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, value: Float).void }
  def initialize(source, node_id, location, flags, value); end

  # source://prism//lib/prism/node.rb#7198
  def ===(other); end

  # source://prism//lib/prism/node.rb#7146
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7151
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7161
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7156
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7166
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer, value: Float).returns(Prism::FloatNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7151
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7174
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7182
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7187
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7179
  sig { returns(Float) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7192
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7208
class Prism::ForNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7210
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      index: T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode),
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#7388
  def ===(other); end

  # source://prism//lib/prism/node.rb#7225
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7230
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7271
  sig { returns(Prism::Node) }
  def collection; end

  # source://prism//lib/prism/node.rb#7244
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7235
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7249
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      index: T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode),
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location
    ).returns(Prism::ForNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), index: T.unsafe(nil), collection: T.unsafe(nil), statements: T.unsafe(nil), for_keyword_loc: T.unsafe(nil), in_keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7230
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7257
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7362
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#7317
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  # source://prism//lib/prism/node.rb#7367
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#7339
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7352
  sig { returns(String) }
  def for_keyword; end

  # source://prism//lib/prism/node.rb#7285
  sig { returns(Prism::Location) }
  def for_keyword_loc; end

  # source://prism//lib/prism/node.rb#7357
  sig { returns(String) }
  def in_keyword; end

  # source://prism//lib/prism/node.rb#7301
  sig { returns(Prism::Location) }
  def in_keyword_loc; end

  # source://prism//lib/prism/node.rb#7265
  sig do
    returns(T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode))
  end
  def index; end

  # source://prism//lib/prism/node.rb#7372
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7331
  def save_do_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#7347
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#7293
  def save_for_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#7309
  def save_in_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#7279
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#7377
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7382
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7406
class Prism::ForwardingArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7408
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#7465
  def ===(other); end

  # source://prism//lib/prism/node.rb#7416
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7421
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7431
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7426
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7436
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::ForwardingArgumentsNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7421
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7444
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7449
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7454
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7459
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7475
class Prism::ForwardingParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7477
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#7534
  def ===(other); end

  # source://prism//lib/prism/node.rb#7485
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7490
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7500
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7495
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7505
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::ForwardingParameterNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7490
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7513
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7518
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7523
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7528
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7543
class Prism::ForwardingSuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7545
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      block: T.nilable(Prism::BlockNode)
    ).void
  end
  def initialize(source, node_id, location, flags, block); end

  # source://prism//lib/prism/node.rb#7608
  def ===(other); end

  # source://prism//lib/prism/node.rb#7554
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7589
  sig { returns(T.nilable(Prism::BlockNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#7559
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7571
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7564
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7576
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      block: T.nilable(Prism::BlockNode)
    ).returns(Prism::ForwardingSuperNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7559
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7584
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7592
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7597
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7602
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7618
class Prism::GlobalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7620
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#7718
  def ===(other); end

  # source://prism//lib/prism/node.rb#7632
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7637
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7647
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7642
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7652
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::GlobalVariableAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7637
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7660
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#201
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7702
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7665
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7668
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7697
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7681
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7676
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#7689
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#7707
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7694
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7712
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7731
class Prism::GlobalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7733
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end

  # source://prism//lib/prism/node.rb#7830
  def ===(other); end

  # source://prism//lib/prism/node.rb#7746
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7811
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#7795
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#7751
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7761
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7756
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7766
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::GlobalVariableOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7751
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7774
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#213
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7814
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7779
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7782
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#406
  def operator; end

  # source://prism//lib/prism/node_ext.rb#413
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7803
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#7790
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#7819
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7808
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7824
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7844
class Prism::GlobalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7846
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#7944
  def ===(other); end

  # source://prism//lib/prism/node.rb#7858
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7863
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7873
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7868
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7878
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::GlobalVariableOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7863
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7886
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#207
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#7928
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#7891
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7894
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7923
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7907
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7902
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#7915
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#7933
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#7920
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7938
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7957
class Prism::GlobalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7959
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#8024
  def ===(other); end

  # source://prism//lib/prism/node.rb#7968
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7973
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7983
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7978
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7988
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::GlobalVariableReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7973
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7996
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8008
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8005
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8013
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8018
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8034
class Prism::GlobalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8036
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#8097
  def ===(other); end

  # source://prism//lib/prism/node.rb#8045
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8050
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8060
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8055
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8065
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::GlobalVariableTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8050
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8073
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8081
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8078
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8086
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8091
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8107
class Prism::GlobalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8109
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end

  # source://prism//lib/prism/node.rb#8223
  def ===(other); end

  # source://prism//lib/prism/node.rb#8121
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8126
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8136
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8131
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8141
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::GlobalVariableWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8126
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8149
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8207
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8158
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8164
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8202
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8189
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8172
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#8197
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#8212
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#8183
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8217
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8236
class Prism::HashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8238
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, elements, closing_loc); end

  # source://prism//lib/prism/node.rb#8349
  def ===(other); end

  # source://prism//lib/prism/node.rb#8249
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8254
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8328
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8310
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8264
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8259
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8269
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location
    ).returns(Prism::HashNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), elements: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8254
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8277
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8304
  sig { returns(T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8333
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8323
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8285
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8318
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#8293
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#8338
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8343
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8371
class Prism::HashPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8373
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, constant, elements, rest, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#8526
  def ===(other); end

  # source://prism//lib/prism/node.rb#8386
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8391
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8505
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#8481
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8405
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8396
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8429
  sig { returns(T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode))) }
  def constant; end

  # source://prism//lib/prism/node.rb#8410
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      constant: T.nilable(T.any(Prism::ConstantPathNode, Prism::ConstantReadNode)),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::HashPatternNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), constant: T.unsafe(nil), elements: T.unsafe(nil), rest: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8391
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8418
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8435
  sig { returns(T::Array[Prism::AssocNode]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8510
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8500
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#8456
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8447
  sig { returns(T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode))) }
  def rest; end

  # source://prism//lib/prism/node.rb#8495
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#8470
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#8515
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8520
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#55
module Prism::HeredocQuery
  # source://prism//lib/prism/node_ext.rb#57
  def heredoc?; end
end

# source://prism//lib/prism/node.rb#8547
class Prism::IfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8549
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      subsequent: T.nilable(T.any(Prism::ElseNode, Prism::IfNode)),
      end_keyword_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, if_keyword_loc, predicate, then_keyword_loc, statements, subsequent, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#8743
  def ===(other); end

  # source://prism//lib/prism/node.rb#8563
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8568
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8582
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8573
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node_ext.rb#488
  def consequent; end

  # source://prism//lib/prism/node.rb#8587
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      subsequent: T.nilable(T.any(Prism::ElseNode, Prism::IfNode)),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::IfNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), if_keyword_loc: T.unsafe(nil), predicate: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), subsequent: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8568
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8595
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8722
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#8693
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8712
  sig { returns(T.nilable(String)) }
  def if_keyword; end

  # source://prism//lib/prism/node.rb#8605
  sig { returns(T.nilable(Prism::Location)) }
  def if_keyword_loc; end

  # source://prism//lib/prism/node.rb#8727
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result/newlines.rb#92
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#8635
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#8707
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#8619
  def save_if_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#8658
  def save_then_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#8670
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#8685
  sig { returns(T.nilable(T.any(Prism::ElseNode, Prism::IfNode))) }
  def subsequent; end

  # source://prism//lib/prism/node.rb#8717
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#8644
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#8732
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8737
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8758
class Prism::ImaginaryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8760
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode)
    ).void
  end
  def initialize(source, node_id, location, flags, numeric); end

  # source://prism//lib/prism/node.rb#8821
  def ===(other); end

  # source://prism//lib/prism/node.rb#8769
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8774
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8784
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8779
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8789
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode)
    ).returns(Prism::ImaginaryNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), numeric: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8774
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8797
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8805
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8802
  sig { returns(T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode)) }
  def numeric; end

  # source://prism//lib/prism/node.rb#8810
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node_ext.rb#110
  sig { returns(Complex) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8815
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8837
class Prism::ImplicitNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8839
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: T.any(Prism::LocalVariableReadNode, Prism::CallNode, Prism::ConstantReadNode, Prism::LocalVariableTargetNode)
    ).void
  end
  def initialize(source, node_id, location, flags, value); end

  # source://prism//lib/prism/node.rb#8900
  def ===(other); end

  # source://prism//lib/prism/node.rb#8848
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8853
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8863
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8858
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8868
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: T.any(Prism::LocalVariableReadNode, Prism::CallNode, Prism::ConstantReadNode, Prism::LocalVariableTargetNode)
    ).returns(Prism::ImplicitNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8853
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8876
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8884
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8889
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#8881
  sig do
    returns(T.any(Prism::LocalVariableReadNode, Prism::CallNode, Prism::ConstantReadNode, Prism::LocalVariableTargetNode))
  end
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8894
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8919
class Prism::ImplicitRestNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8921
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#8978
  def ===(other); end

  # source://prism//lib/prism/node.rb#8929
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8934
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8944
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8939
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8949
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::ImplicitRestNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8934
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8957
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#8962
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#8967
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8972
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8987
class Prism::InNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8989
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, pattern, statements, in_loc, then_loc); end

  # source://prism//lib/prism/node.rb#9101
  def ===(other); end

  # source://prism//lib/prism/node.rb#9001
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9006
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9019
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9011
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9024
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location)
    ).returns(Prism::InNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), pattern: T.unsafe(nil), statements: T.unsafe(nil), in_loc: T.unsafe(nil), then_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9006
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9032
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9075
  sig { returns(String) }
  def in; end

  # source://prism//lib/prism/node.rb#9043
  sig { returns(Prism::Location) }
  def in_loc; end

  # source://prism//lib/prism/node.rb#9085
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9037
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#9051
  def save_in_loc(repository); end

  # source://prism//lib/prism/node.rb#9070
  def save_then_loc(repository); end

  # source://prism//lib/prism/node.rb#9040
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#9080
  sig { returns(T.nilable(String)) }
  def then; end

  # source://prism//lib/prism/node.rb#9056
  sig { returns(T.nilable(Prism::Location)) }
  def then_loc; end

  # source://prism//lib/prism/node.rb#9090
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9095
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9114
class Prism::IndexAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9116
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value); end

  # source://prism//lib/prism/node.rb#9296
  def ===(other); end

  # source://prism//lib/prism/node.rb#9132
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9225
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9180
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9241
  sig { returns(T.nilable(Prism::BlockArgumentNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#9260
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9193
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9137
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9270
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9228
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9152
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9142
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9157
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::IndexAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9137
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9165
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9185
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9280
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9265
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9212
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9275
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9244
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9190
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9170
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9207
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9236
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#9220
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#9252
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9285
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9257
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9175
  sig { returns(T::Boolean) }
  def variable_call?; end

  class << self
    # source://prism//lib/prism/node.rb#9290
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9314
class Prism::IndexOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9316
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, binary_operator, binary_operator_loc, value); end

  # source://prism//lib/prism/node.rb#9495
  def ===(other); end

  # source://prism//lib/prism/node.rb#9333
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9426
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9381
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9445
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#9448
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#9442
  sig { returns(T.nilable(Prism::BlockArgumentNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#9464
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9394
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9338
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9474
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9429
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9353
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9343
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9358
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::IndexOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), binary_operator: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9338
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9366
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9386
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9479
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9469
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9413
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node_ext.rb#422
  def operator; end

  # source://prism//lib/prism/node_ext.rb#429
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9391
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9371
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9456
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9408
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9437
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#9421
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#9484
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9461
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9376
  sig { returns(T::Boolean) }
  def variable_call?; end

  class << self
    # source://prism//lib/prism/node.rb#9489
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9514
class Prism::IndexOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9516
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value); end

  # source://prism//lib/prism/node.rb#9696
  def ===(other); end

  # source://prism//lib/prism/node.rb#9532
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9625
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9580
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9641
  sig { returns(T.nilable(Prism::BlockArgumentNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#9660
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9593
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9537
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9670
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9628
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9552
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9542
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9557
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::IndexOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), call_operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9537
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9565
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9585
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9680
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9665
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9612
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9675
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9644
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9590
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9570
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9607
  def save_call_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9636
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#9620
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#9652
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9685
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9657
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9575
  sig { returns(T::Boolean) }
  def variable_call?; end

  class << self
    # source://prism//lib/prism/node.rb#9690
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9722
class Prism::IndexTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9724
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode)
    ).void
  end
  def initialize(source, node_id, location, flags, receiver, opening_loc, arguments, closing_loc, block); end

  # source://prism//lib/prism/node.rb#9855
  def ===(other); end

  # source://prism//lib/prism/node.rb#9737
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9810
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9784
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9826
  sig { returns(T.nilable(Prism::BlockArgumentNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#9742
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9834
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9813
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9756
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9747
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9761
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::BlockArgumentNode)
    ).returns(Prism::IndexTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), receiver: T.unsafe(nil), opening_loc: T.unsafe(nil), arguments: T.unsafe(nil), closing_loc: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9742
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9769
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9789
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9839
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9829
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9797
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9794
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9774
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9821
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#9805
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#9844
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9779
  sig { returns(T::Boolean) }
  def variable_call?; end

  class << self
    # source://prism//lib/prism/node.rb#9849
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#547
class Prism::InlineComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#555
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#550
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/inspect_visitor.rb#15
class Prism::InspectVisitor < ::Prism::Visitor
  # source://prism//lib/prism/inspect_visitor.rb#38
  sig { params(indent: String).void }
  def initialize(indent = T.unsafe(nil)); end

  # source://prism//lib/prism/inspect_visitor.rb#35
  def commands; end

  # source://prism//lib/prism/inspect_visitor.rb#51
  sig { returns(String) }
  def compose; end

  # source://prism//lib/prism/inspect_visitor.rb#31
  def indent; end

  # source://prism//lib/prism/inspect_visitor.rb#80
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#92
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#104
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#116
  def visit_and_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#128
  def visit_arguments_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#144
  def visit_array_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#162
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#201
  def visit_assoc_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#213
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#227
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#235
  def visit_begin_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#268
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#282
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#290
  def visit_block_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#312
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#326
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#350
  def visit_break_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#364
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#384
  def visit_call_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#414
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#435
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#455
  def visit_call_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#467
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#479
  def visit_case_match_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#509
  def visit_case_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#539
  def visit_class_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#565
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#577
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#590
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#602
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#610
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#618
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#630
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#642
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#655
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#667
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#679
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#699
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#712
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#724
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#744
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#756
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#764
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#772
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#784
  def visit_def_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#818
  def visit_defined_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#830
  def visit_else_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#845
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#860
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#870
  def visit_ensure_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#885
  def visit_false_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#892
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#920
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#940
  def visit_float_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#948
  def visit_for_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#969
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#976
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#983
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#996
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1008
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1021
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1033
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1041
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1049
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1061
  def visit_hash_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1079
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1109
  def visit_if_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1133
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1142
  def visit_implicit_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1151
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1158
  def visit_in_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1175
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1206
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1238
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1269
  def visit_index_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1292
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1304
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1317
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1329
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1337
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1345
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1357
  def visit_integer_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1365
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1383
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1401
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1419
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1437
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1455
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1462
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1469
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1485
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1499
  def visit_lambda_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1522
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1535
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1549
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1562
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1571
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1580
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1593
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1604
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1616
  def visit_match_required_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1628
  def visit_match_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1646
  def visit_missing_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1653
  def visit_module_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1672
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1705
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1741
  def visit_next_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1755
  def visit_nil_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1762
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1771
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1779
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1787
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1798
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1810
  def visit_or_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1822
  def visit_parameters_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1883
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1898
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1910
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1920
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1936
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1952
  def visit_program_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1962
  def visit_range_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1982
  def visit_rational_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1991
  def visit_redo_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#1998
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2009
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2018
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2026
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2038
  def visit_rescue_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2075
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2089
  def visit_retry_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2096
  def visit_return_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2110
  def visit_self_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2117
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2126
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2145
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2152
  def visit_source_file_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2160
  def visit_source_line_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2167
  def visit_splat_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2181
  def visit_statements_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2197
  def visit_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2208
  def visit_super_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2230
  def visit_symbol_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2241
  def visit_true_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2248
  def visit_undef_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2265
  def visit_unless_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2289
  def visit_until_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2307
  def visit_when_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2331
  def visit_while_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2349
  def visit_x_string_node(node); end

  # source://prism//lib/prism/inspect_visitor.rb#2360
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/inspect_visitor.rb#2384
  def inspect_location(location); end

  # source://prism//lib/prism/inspect_visitor.rb#2378
  def inspect_node(name, node); end

  class << self
    # source://prism//lib/prism/inspect_visitor.rb#44
    sig { params(node: Prism::Node).returns(String) }
    def compose(node); end
  end
end

# source://prism//lib/prism/inspect_visitor.rb#20
class Prism::InspectVisitor::Replace
  # source://prism//lib/prism/inspect_visitor.rb#23
  def initialize(value); end

  # source://prism//lib/prism/inspect_visitor.rb#21
  def value; end
end

# source://prism//lib/prism/node.rb#9870
class Prism::InstanceVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9872
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#9970
  def ===(other); end

  # source://prism//lib/prism/node.rb#9884
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9889
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9899
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9894
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9904
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::InstanceVariableAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9889
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9912
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#219
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#9954
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#9917
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#9920
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#9949
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9933
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9928
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#9941
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#9959
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#9946
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#9964
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9983
class Prism::InstanceVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9985
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, binary_operator_loc, value, binary_operator); end

  # source://prism//lib/prism/node.rb#10082
  def ===(other); end

  # source://prism//lib/prism/node.rb#9998
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10063
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#10047
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#10003
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10013
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10008
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10018
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol
    ).returns(Prism::InstanceVariableOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), binary_operator: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10003
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10026
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#231
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10066
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10031
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10034
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#438
  def operator; end

  # source://prism//lib/prism/node_ext.rb#445
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10055
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#10042
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#10071
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10060
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10076
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10096
class Prism::InstanceVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10098
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#10196
  def ===(other); end

  # source://prism//lib/prism/node.rb#10110
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10115
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10125
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10120
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10130
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::InstanceVariableOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10115
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10138
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#225
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10180
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10143
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10146
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10175
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10159
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10154
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#10167
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#10185
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10172
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10190
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10209
class Prism::InstanceVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10211
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#10276
  def ===(other); end

  # source://prism//lib/prism/node.rb#10220
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10225
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10235
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10230
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10240
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::InstanceVariableReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10225
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10248
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10260
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10257
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10265
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10270
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10286
class Prism::InstanceVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10288
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#10349
  def ===(other); end

  # source://prism//lib/prism/node.rb#10297
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10302
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10312
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10307
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10317
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::InstanceVariableTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10302
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10325
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10333
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10330
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10338
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10343
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10359
class Prism::InstanceVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10361
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, value, operator_loc); end

  # source://prism//lib/prism/node.rb#10475
  def ===(other); end

  # source://prism//lib/prism/node.rb#10373
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10378
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10388
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10383
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10393
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::InstanceVariableWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10378
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10401
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10459
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10410
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10416
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10454
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10441
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10424
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#10449
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#10464
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10435
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10469
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18678
# Flags for integer nodes that correspond to the base of the integer.
module Prism::IntegerBaseFlags; end

# source://prism//lib/prism/node.rb#18680
Prism::IntegerBaseFlags::BINARY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18683
Prism::IntegerBaseFlags::DECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18689
Prism::IntegerBaseFlags::HEXADECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18686
Prism::IntegerBaseFlags::OCTAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#10488
class Prism::IntegerNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10490
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, value); end

  # source://prism//lib/prism/node.rb#10571
  def ===(other); end

  # source://prism//lib/prism/node.rb#10499
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10532
  sig { returns(T::Boolean) }
  def binary?; end

  # source://prism//lib/prism/node.rb#10504
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10514
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10509
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10519
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Integer
    ).returns(Prism::IntegerNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10537
  sig { returns(T::Boolean) }
  def decimal?; end

  # source://prism//lib/prism/node.rb#10504
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10527
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10547
  sig { returns(T::Boolean) }
  def hexadecimal?; end

  # source://prism//lib/prism/node.rb#10555
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10542
  sig { returns(T::Boolean) }
  def octal?; end

  # source://prism//lib/prism/node.rb#10560
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10552
  sig { returns(Integer) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10565
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10582
class Prism::InterpolatedMatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#10584
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end

  # source://prism//lib/prism/node.rb#10738
  def ===(other); end

  # source://prism//lib/prism/node.rb#10595
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10653
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#10600
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10717
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10699
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10610
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10605
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10615
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).returns(Prism::InterpolatedMatchLastLineNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10600
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10623
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10648
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#10633
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10673
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#10678
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#10668
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#10628
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#10722
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10638
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/parse_result/newlines.rb#122
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#10643
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#10712
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10683
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#10696
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10707
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#10691
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#10727
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10663
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#10658
  sig { returns(T::Boolean) }
  def windows_31j?; end

  class << self
    # source://prism//lib/prism/node.rb#10732
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10752
class Prism::InterpolatedRegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#10754
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end

  # source://prism//lib/prism/node.rb#10908
  def ===(other); end

  # source://prism//lib/prism/node.rb#10765
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10823
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#10770
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10887
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10869
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10780
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10775
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10785
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).returns(Prism::InterpolatedRegularExpressionNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10770
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10793
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10818
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#10803
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10843
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#10848
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#10838
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#10798
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#10892
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10808
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/parse_result/newlines.rb#129
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#10813
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#10882
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10853
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#10866
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10877
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#10861
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#10897
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#10833
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#10828
  sig { returns(T::Boolean) }
  def windows_31j?; end

  class << self
    # source://prism//lib/prism/node.rb#10902
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10922
class Prism::InterpolatedStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#10924
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode, Prism::XStringNode)],
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end

  # source://prism//lib/prism/node.rb#11045
  def ===(other); end

  # source://prism//lib/prism/node.rb#10935
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10940
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11024
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#11000
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10950
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10945
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10955
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode, Prism::XStringNode)],
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::InterpolatedStringNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10940
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10963
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#10968
  sig { returns(T::Boolean) }
  def frozen?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#11029
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#10973
  sig { returns(T::Boolean) }
  def mutable?; end

  # source://prism//lib/prism/parse_result/newlines.rb#136
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#11019
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#10978
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10997
  sig do
    returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode, Prism::XStringNode)])
  end
  def parts; end

  # source://prism//lib/prism/node.rb#11014
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#10992
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#11034
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11039
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18693
# Flags for interpolated string nodes that indicated mutability if they are also marked as literals.
module Prism::InterpolatedStringNodeFlags; end

# source://prism//lib/prism/node.rb#18695
Prism::InterpolatedStringNodeFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18698
Prism::InterpolatedStringNodeFlags::MUTABLE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#11059
class Prism::InterpolatedSymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11061
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end

  # source://prism//lib/prism/node.rb#11172
  def ===(other); end

  # source://prism//lib/prism/node.rb#11072
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11077
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11151
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#11127
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11087
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11082
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11092
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location)
    ).returns(Prism::InterpolatedSymbolNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11077
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11100
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11156
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result/newlines.rb#143
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#11146
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#11105
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11124
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11141
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#11119
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#11161
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11166
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11185
class Prism::InterpolatedXStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#11187
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, parts, closing_loc); end

  # source://prism//lib/prism/node.rb#11286
  def ===(other); end

  # source://prism//lib/prism/node.rb#11198
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11203
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11265
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11247
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11213
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11208
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11218
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location
    ).returns(Prism::InterpolatedXStringNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), parts: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11203
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11226
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#11270
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result/newlines.rb#150
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#11260
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11231
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11244
  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11255
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#11239
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#11275
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11280
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11299
class Prism::ItLocalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11301
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#11358
  def ===(other); end

  # source://prism//lib/prism/node.rb#11309
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11314
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11324
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11319
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11329
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::ItLocalVariableReadNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11314
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11337
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11342
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11347
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11352
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11367
class Prism::ItParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11369
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#11426
  def ===(other); end

  # source://prism//lib/prism/node.rb#11377
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11382
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11392
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11387
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11397
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::ItParametersNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11382
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11405
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11410
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11415
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11420
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11435
class Prism::KeywordHashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11437
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]
    ).void
  end
  def initialize(source, node_id, location, flags, elements); end

  # source://prism//lib/prism/node.rb#11503
  def ===(other); end

  # source://prism//lib/prism/node.rb#11446
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11451
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11461
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11456
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11466
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]
    ).returns(Prism::KeywordHashNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), elements: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11451
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11474
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11484
  sig { returns(T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11487
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11479
  sig { returns(T::Boolean) }
  def symbol_keys?; end

  # source://prism//lib/prism/node.rb#11492
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11497
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18702
# Flags for keyword hash nodes.
module Prism::KeywordHashNodeFlags; end

# source://prism//lib/prism/node.rb#18704
Prism::KeywordHashNodeFlags::SYMBOL_KEYS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#11516
class Prism::KeywordRestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11518
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc); end

  # source://prism//lib/prism/node.rb#11623
  def ===(other); end

  # source://prism//lib/prism/node.rb#11529
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11534
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11544
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11539
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11549
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).returns(Prism::KeywordRestParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11534
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11557
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11607
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11567
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#11570
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#11602
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11589
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11562
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#11584
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#11597
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#11612
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11617
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11636
class Prism::LambdaNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11638
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode)),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))
    ).void
  end
  def initialize(source, node_id, location, flags, locals, operator_loc, opening_loc, closing_loc, parameters, body); end

  # source://prism//lib/prism/node.rb#11767
  def ===(other); end

  # source://prism//lib/prism/node.rb#11652
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11733
  sig { returns(T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))) }
  def body; end

  # source://prism//lib/prism/node.rb#11657
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11746
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11717
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11670
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11662
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11675
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode)),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))
    ).returns(Prism::LambdaNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), operator_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), parameters: T.unsafe(nil), body: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11657
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11683
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11751
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11688
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#11741
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11704
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11736
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11691
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11730
  sig { returns(T.nilable(T.any(Prism::BlockParametersNode, Prism::NumberedParametersNode, Prism::ItParametersNode))) }
  def parameters; end

  # source://prism//lib/prism/node.rb#11725
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#11712
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#11699
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#11756
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11761
    def type; end
  end
end

# source://prism//lib/prism/lex_compat.rb#13
class Prism::LexCompat
  # source://prism//lib/prism/lex_compat.rb#620
  def initialize(source, **options); end

  # source://prism//lib/prism/lex_compat.rb#618
  def options; end

  # source://prism//lib/prism/lex_compat.rb#625
  def result; end

  # source://prism//lib/prism/lex_compat.rb#618
  def source; end
end

# source://prism//lib/prism/lex_compat.rb#231
class Prism::LexCompat::EndContentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#232
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#292
module Prism::LexCompat::Heredoc
  class << self
    # source://prism//lib/prism/lex_compat.rb#604
    def build(opening); end
  end
end

# source://prism//lib/prism/lex_compat.rb#316
class Prism::LexCompat::Heredoc::DashHeredoc
  # source://prism//lib/prism/lex_compat.rb#319
  def initialize(split); end

  # source://prism//lib/prism/lex_compat.rb#324
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#317
  def split; end

  # source://prism//lib/prism/lex_compat.rb#328
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#317
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#375
class Prism::LexCompat::Heredoc::DedentingHeredoc
  # source://prism//lib/prism/lex_compat.rb#380
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#391
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#378
  def dedent; end

  # source://prism//lib/prism/lex_compat.rb#378
  def dedent_next; end

  # source://prism//lib/prism/lex_compat.rb#378
  def embexpr_balance; end

  # source://prism//lib/prism/lex_compat.rb#428
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#378
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#376
Prism::LexCompat::Heredoc::DedentingHeredoc::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/lex_compat.rb#297
class Prism::LexCompat::Heredoc::PlainHeredoc
  # source://prism//lib/prism/lex_compat.rb#300
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#304
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#308
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#298
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#249
class Prism::LexCompat::IdentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#250
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#239
class Prism::LexCompat::IgnoreStateToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#240
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#260
class Prism::LexCompat::IgnoredNewlineToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#261
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#280
class Prism::LexCompat::ParamToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#281
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#34
Prism::LexCompat::RIPPER = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/lex_compat.rb#15
class Prism::LexCompat::Result < ::Prism::Result
  # source://prism//lib/prism/lex_compat.rb#20
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/lex_compat.rb#26
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/lex_compat.rb#17
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#205
class Prism::LexCompat::Token < ::SimpleDelegator
  # source://prism//lib/prism/lex_compat.rb#214
  def event; end

  # source://prism//lib/prism/lex_compat.rb#209
  def location; end

  # source://prism//lib/prism/lex_compat.rb#224
  def state; end

  # source://prism//lib/prism/lex_compat.rb#219
  def value; end
end

# source://prism//lib/prism/parse_result.rb#782
class Prism::LexResult < ::Prism::Result
  # source://prism//lib/prism/parse_result.rb#787
  sig do
    params(
      value: T::Array[T.untyped],
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#793
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#784
  sig { returns(T::Array[T.untyped]) }
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#873
class Prism::LexRipper
  # source://prism//lib/prism/lex_compat.rb#876
  def initialize(source); end

  # source://prism//lib/prism/lex_compat.rb#880
  def result; end

  # source://prism//lib/prism/lex_compat.rb#874
  def source; end

  private

  # source://prism//lib/prism/lex_compat.rb#914
  def lex(source); end
end

# source://prism//lib/prism/node.rb#11783
class Prism::LocalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11785
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, name_loc, operator_loc, value, name, depth); end

  # source://prism//lib/prism/node.rb#11887
  def ===(other); end

  # source://prism//lib/prism/node.rb#11798
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11803
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11813
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11808
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11818
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableAndWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11803
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11826
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11863
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#237
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11871
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11860
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#11831
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#11866
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11844
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11839
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#11852
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#11876
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#11857
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11881
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11901
class Prism::LocalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11903
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, name_loc, binary_operator_loc, value, name, binary_operator, depth); end

  # source://prism//lib/prism/node.rb#12004
  def ===(other); end

  # source://prism//lib/prism/node.rb#11917
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11982
  sig { returns(Symbol) }
  def binary_operator; end

  # source://prism//lib/prism/node.rb#11963
  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  # source://prism//lib/prism/node.rb#11922
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11932
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11927
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11937
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableOperatorWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name_loc: T.unsafe(nil), binary_operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), binary_operator: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11922
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11945
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11985
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#249
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#11988
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#11979
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#11950
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node_ext.rb#454
  def operator; end

  # source://prism//lib/prism/node_ext.rb#461
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11971
  def save_binary_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#11958
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#11993
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#11976
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#11998
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12019
class Prism::LocalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12021
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, name_loc, operator_loc, value, name, depth); end

  # source://prism//lib/prism/node.rb#12123
  def ===(other); end

  # source://prism//lib/prism/node.rb#12034
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12039
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12049
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12044
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12054
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableOrWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12039
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12062
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12099
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#243
  def desugar; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12107
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12096
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12067
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12102
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12080
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12075
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#12088
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#12112
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12093
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12117
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12137
class Prism::LocalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12139
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, name, depth); end

  # source://prism//lib/prism/node.rb#12218
  def ===(other); end

  # source://prism//lib/prism/node.rb#12149
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12154
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12164
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12159
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12169
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12154
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12177
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12199
  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12202
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12190
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12207
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12212
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12232
class Prism::LocalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12234
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, name, depth); end

  # source://prism//lib/prism/node.rb#12299
  def ===(other); end

  # source://prism//lib/prism/node.rb#12244
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12249
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12259
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12254
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12264
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer
    ).returns(Prism::LocalVariableTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12249
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12272
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12280
  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12283
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12277
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12288
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12293
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12310
class Prism::LocalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12312
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, depth, name_loc, value, operator_loc); end

  # source://prism//lib/prism/node.rb#12440
  def ===(other); end

  # source://prism//lib/prism/node.rb#12325
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12330
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12340
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12335
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12345
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::LocalVariableWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), depth: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12330
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12353
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12371
  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12424
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12362
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12377
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12419
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12406
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12385
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#12414
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#12429
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12400
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12434
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#291
class Prism::Location
  # source://prism//lib/prism/parse_result.rb#306
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).void }
  def initialize(source, start_offset, length); end

  # source://prism//lib/prism/parse_result.rb#494
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#513
  sig { params(string: String).returns(Prism::Location) }
  def adjoin(string); end

  # source://prism//lib/prism/parse_result.rb#479
  sig do
    params(
      cache: T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer))
    ).returns(Integer)
  end
  def cached_end_code_units_column(cache); end

  # source://prism//lib/prism/parse_result.rb#415
  sig do
    params(
      cache: T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer))
    ).returns(Integer)
  end
  def cached_end_code_units_offset(cache); end

  # source://prism//lib/prism/parse_result.rb#455
  sig do
    params(
      cache: T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer))
    ).returns(Integer)
  end
  def cached_start_code_units_column(cache); end

  # source://prism//lib/prism/parse_result.rb#393
  sig do
    params(
      cache: T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer))
    ).returns(Integer)
  end
  def cached_start_code_units_offset(cache); end

  # source://prism//lib/prism/parse_result.rb#352
  sig { returns(Prism::Location) }
  def chop; end

  # source://prism//lib/prism/parse_result.rb#342
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#347
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).returns(Prism::Location) }
  def copy(source: T.unsafe(nil), start_offset: T.unsafe(nil), length: T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#484
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#467
  sig { returns(Integer) }
  def end_character_column; end

  # source://prism//lib/prism/parse_result.rb#404
  sig { returns(Integer) }
  def end_character_offset; end

  # source://prism//lib/prism/parse_result.rb#473
  sig { params(encoding: Encoding).returns(Integer) }
  def end_code_units_column(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#409
  sig { params(encoding: Encoding).returns(Integer) }
  def end_code_units_offset(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#461
  sig { returns(Integer) }
  def end_column; end

  # source://prism//lib/prism/parse_result.rb#431
  sig { returns(Integer) }
  def end_line; end

  # source://prism//lib/prism/parse_result.rb#398
  sig { returns(Integer) }
  def end_offset; end

  # source://prism//lib/prism/parse_result.rb#357
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#503
  sig { params(other: Prism::Location).returns(Prism::Location) }
  def join(other); end

  # source://prism//lib/prism/parse_result.rb#325
  sig { params(comment: Prism::Comment).void }
  def leading_comment(comment); end

  # source://prism//lib/prism/parse_result.rb#320
  sig { returns(T::Array[Prism::Comment]) }
  def leading_comments; end

  # source://prism//lib/prism/parse_result.rb#302
  sig { returns(Integer) }
  def length; end

  # source://prism//lib/prism/parse_result.rb#489
  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#367
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/parse_result.rb#374
  def slice_lines; end

  # source://prism//lib/prism/parse_result.rb#362
  sig { returns(T::Array[String]) }
  def source_lines; end

  # source://prism//lib/prism/parse_result.rb#443
  sig { returns(Integer) }
  def start_character_column; end

  # source://prism//lib/prism/parse_result.rb#382
  sig { returns(Integer) }
  def start_character_offset; end

  # source://prism//lib/prism/parse_result.rb#449
  sig { params(encoding: Encoding).returns(Integer) }
  def start_code_units_column(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#387
  sig { params(encoding: Encoding).returns(Integer) }
  def start_code_units_offset(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#437
  sig { returns(Integer) }
  def start_column; end

  # source://prism//lib/prism/parse_result.rb#420
  sig { returns(Integer) }
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#425
  sig { returns(String) }
  def start_line_slice; end

  # source://prism//lib/prism/parse_result.rb#299
  sig { returns(Integer) }
  def start_offset; end

  # source://prism//lib/prism/parse_result.rb#336
  sig { params(comment: Prism::Comment).void }
  def trailing_comment(comment); end

  # source://prism//lib/prism/parse_result.rb#331
  sig { returns(T::Array[Prism::Comment]) }
  def trailing_comments; end

  protected

  # source://prism//lib/prism/parse_result.rb#294
  sig { returns(Prism::Source) }
  def source; end
end

# source://prism//lib/prism/node.rb#18708
# Flags for while and until loop nodes.
module Prism::LoopFlags; end

# source://prism//lib/prism/node.rb#18710
Prism::LoopFlags::BEGIN_MODIFIER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/parse_result.rb#575
class Prism::MagicComment
  # source://prism//lib/prism/parse_result.rb#583
  sig { params(key_loc: Prism::Location, value_loc: Prism::Location).void }
  def initialize(key_loc, value_loc); end

  # source://prism//lib/prism/parse_result.rb#599
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#604
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#589
  sig { returns(String) }
  def key; end

  # source://prism//lib/prism/parse_result.rb#577
  sig { returns(Prism::Location) }
  def key_loc; end

  # source://prism//lib/prism/parse_result.rb#594
  sig { returns(String) }
  def value; end

  # source://prism//lib/prism/parse_result.rb#580
  sig { returns(Prism::Location) }
  def value_loc; end
end

# source://prism//lib/prism/node.rb#12454
class Prism::MatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#12456
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end

  # source://prism//lib/prism/node.rb#12629
  def ===(other); end

  # source://prism//lib/prism/node.rb#12468
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12526
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#12473
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12608
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#12582
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#12483
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12478
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12603
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#12569
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#12488
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).returns(Prism::MatchLastLineNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12473
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12496
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12521
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#12506
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12546
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#12551
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#12541
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#12501
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#12613
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12511
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#12516
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#12598
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#12556
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#12590
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#12577
  def save_content_loc(repository); end

  # source://prism//lib/prism/node.rb#12564
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#12618
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12595
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#12536
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#12531
  sig { returns(T::Boolean) }
  def windows_31j?; end

  class << self
    # source://prism//lib/prism/node.rb#12623
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12643
class Prism::MatchPredicateNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12645
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, value, pattern, operator_loc); end

  # source://prism//lib/prism/node.rb#12729
  def ===(other); end

  # source://prism//lib/prism/node.rb#12656
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12661
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12671
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12666
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12676
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::MatchPredicateNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), pattern: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12661
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12684
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12713
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12708
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12695
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12692
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#12703
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#12718
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12689
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12723
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12741
class Prism::MatchRequiredNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12743
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, value, pattern, operator_loc); end

  # source://prism//lib/prism/node.rb#12875
  def ===(other); end

  # source://prism//lib/prism/node.rb#12754
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12759
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12769
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12764
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12774
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::MatchRequiredNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), value: T.unsafe(nil), pattern: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12759
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12782
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12859
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12854
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12841
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12835
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#12849
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#12864
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#12790
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12869
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12887
class Prism::MatchWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12889
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode]
    ).void
  end
  def initialize(source, node_id, location, flags, call, targets); end

  # source://prism//lib/prism/node.rb#12954
  def ===(other); end

  # source://prism//lib/prism/node.rb#12899
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12932
  sig { returns(Prism::CallNode) }
  def call; end

  # source://prism//lib/prism/node.rb#12904
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12914
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12909
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12919
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode]
    ).returns(Prism::MatchWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), call: T.unsafe(nil), targets: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12904
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12927
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#12938
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#12935
  sig { returns(T::Array[Prism::LocalVariableTargetNode]) }
  def targets; end

  # source://prism//lib/prism/node.rb#12943
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12948
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12963
class Prism::MissingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12965
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#13022
  def ===(other); end

  # source://prism//lib/prism/node.rb#12973
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12978
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12988
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12983
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12993
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::MissingNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12978
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13001
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13006
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13011
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13016
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13031
class Prism::ModuleNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13033
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::MissingNode),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location,
      name: Symbol
    ).void
  end
  def initialize(source, node_id, location, flags, locals, module_keyword_loc, constant_path, body, end_keyword_loc, name); end

  # source://prism//lib/prism/node.rb#13147
  def ===(other); end

  # source://prism//lib/prism/node.rb#13047
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13102
  sig { returns(T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))) }
  def body; end

  # source://prism//lib/prism/node.rb#13052
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13065
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13057
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13099
  sig { returns(T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::MissingNode)) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#13070
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: T.any(Prism::ConstantReadNode, Prism::ConstantPathNode, Prism::MissingNode),
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location,
      name: Symbol
    ).returns(Prism::ModuleNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), module_keyword_loc: T.unsafe(nil), constant_path: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13052
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13078
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13126
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#13105
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13131
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13083
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#13121
  sig { returns(String) }
  def module_keyword; end

  # source://prism//lib/prism/node.rb#13086
  sig { returns(Prism::Location) }
  def module_keyword_loc; end

  # source://prism//lib/prism/node.rb#13118
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#13113
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#13094
  def save_module_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#13136
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13141
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13168
class Prism::MultiTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13170
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode)),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, lefts, rest, rights, lparen_loc, rparen_loc); end

  # source://prism//lib/prism/node.rb#13323
  def ===(other); end

  # source://prism//lib/prism/node.rb#13183
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13188
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13202
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13193
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13207
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode)),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location)
    ).returns(Prism::MultiTargetNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), lefts: T.unsafe(nil), rest: T.unsafe(nil), rights: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13188
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13215
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13307
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13228
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)])
  end
  def lefts; end

  # source://prism//lib/prism/node.rb#13297
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13256
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13244
  sig { returns(T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode))) }
  def rest; end

  # source://prism//lib/prism/node.rb#13250
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)])
  end
  def rights; end

  # source://prism//lib/prism/node.rb#13302
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13278
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13270
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#13292
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#13312
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13317
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13339
class Prism::MultiWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13341
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode)),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#13524
  def ===(other); end

  # source://prism//lib/prism/node.rb#13356
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13361
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13376
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13366
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13381
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode)),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::MultiWriteNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), lefts: T.unsafe(nil), rest: T.unsafe(nil), rights: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13361
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13389
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13508
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13402
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)])
  end
  def lefts; end

  # source://prism//lib/prism/node.rb#13493
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13430
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13503
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13474
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13418
  sig { returns(T.nilable(T.any(Prism::ImplicitRestNode, Prism::SplatNode))) }
  def rest; end

  # source://prism//lib/prism/node.rb#13424
  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)])
  end
  def rights; end

  # source://prism//lib/prism/node.rb#13498
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13452
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13444
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#13482
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#13466
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#13513
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#13490
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13518
    def type; end
  end
end

# source://prism//lib/prism/mutation_compiler.rb#16
class Prism::MutationCompiler < ::Prism::Compiler
  # source://prism//lib/prism/mutation_compiler.rb#18
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#23
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#28
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#33
  def visit_and_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#38
  def visit_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#43
  def visit_array_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#48
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#53
  def visit_assoc_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#58
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#63
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#68
  def visit_begin_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#73
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#78
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#83
  def visit_block_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#88
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#93
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#98
  def visit_break_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#103
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#108
  def visit_call_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#113
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#118
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#123
  def visit_call_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#128
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#133
  def visit_case_match_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#138
  def visit_case_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#143
  def visit_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#148
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#153
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#158
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#163
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#168
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#173
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#178
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#183
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#188
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#193
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#198
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#203
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#208
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#213
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#218
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#223
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#228
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#233
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#238
  def visit_def_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#243
  def visit_defined_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#248
  def visit_else_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#253
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#258
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#263
  def visit_ensure_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#268
  def visit_false_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#273
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#278
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#283
  def visit_float_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#288
  def visit_for_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#293
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#298
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#303
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#308
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#313
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#318
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#323
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#328
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#333
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#338
  def visit_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#343
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#348
  def visit_if_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#353
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#358
  def visit_implicit_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#363
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#368
  def visit_in_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#373
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#378
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#383
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#388
  def visit_index_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#393
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#398
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#403
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#408
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#413
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#418
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#423
  def visit_integer_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#428
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#433
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#438
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#443
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#448
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#453
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#458
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#463
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#468
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#473
  def visit_lambda_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#478
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#483
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#488
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#493
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#498
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#503
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#508
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#513
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#518
  def visit_match_required_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#523
  def visit_match_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#528
  def visit_missing_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#533
  def visit_module_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#538
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#543
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#548
  def visit_next_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#553
  def visit_nil_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#558
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#563
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#568
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#573
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#578
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#583
  def visit_or_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#588
  def visit_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#593
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#598
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#603
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#608
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#613
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#618
  def visit_program_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#623
  def visit_range_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#628
  def visit_rational_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#633
  def visit_redo_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#638
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#643
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#648
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#653
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#658
  def visit_rescue_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#663
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#668
  def visit_retry_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#673
  def visit_return_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#678
  def visit_self_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#683
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#688
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#693
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#698
  def visit_source_file_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#703
  def visit_source_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#708
  def visit_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#713
  def visit_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#718
  def visit_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#723
  def visit_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#728
  def visit_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#733
  def visit_true_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#738
  def visit_undef_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#743
  def visit_unless_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#748
  def visit_until_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#753
  def visit_when_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#758
  def visit_while_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#763
  def visit_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#768
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#13542
class Prism::NextNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13544
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, arguments, keyword_loc); end

  # source://prism//lib/prism/node.rb#13626
  def ===(other); end

  # source://prism//lib/prism/node.rb#13554
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13589
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#13559
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13571
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13564
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13576
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location
    ).returns(Prism::NextNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), arguments: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13559
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13584
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13610
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13605
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13592
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13600
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#13615
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13620
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13637
class Prism::NilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13639
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#13696
  def ===(other); end

  # source://prism//lib/prism/node.rb#13647
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13652
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13662
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13657
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13667
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::NilNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13652
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13675
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13680
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13685
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13690
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13706
class Prism::NoKeywordsParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13708
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, operator_loc, keyword_loc); end

  # source://prism//lib/prism/node.rb#13803
  def ===(other); end

  # source://prism//lib/prism/node.rb#13718
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13723
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13733
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13728
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13738
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location
    ).returns(Prism::NoKeywordsParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), operator_loc: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13723
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13746
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13787
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13782
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13764
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13777
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13751
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13772
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#13759
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#13792
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13797
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15
class Prism::Node
  abstract!

  # source://prism//lib/prism/node.rb#261
  sig { abstract.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#231
  sig { params(block: T.proc.params(node: Prism::Node).returns(T::Boolean)).returns(T.nilable(Prism::Node)) }
  def breadth_first_search(&block); end

  # source://prism//lib/prism/node.rb#118
  def cached_end_code_units_column(cache); end

  # source://prism//lib/prism/node.rb#86
  def cached_end_code_units_offset(cache); end

  # source://prism//lib/prism/node.rb#112
  def cached_start_code_units_column(cache); end

  # source://prism//lib/prism/node.rb#80
  def cached_start_code_units_offset(cache); end

  # source://prism//lib/prism/node.rb#267
  sig { abstract.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#281
  sig { abstract.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#133
  def comments; end

  # source://prism//lib/prism/node.rb#275
  sig { abstract.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#267
  sig { abstract.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node_ext.rb#10
  def deprecated(*replacements); end

  # source://prism//lib/prism/node.rb#106
  def end_character_column; end

  # source://prism//lib/prism/node.rb#74
  def end_character_offset; end

  # source://prism//lib/prism/node.rb#96
  def end_column; end

  # source://prism//lib/prism/node.rb#50
  def end_line; end

  # source://prism//lib/prism/node.rb#63
  sig { returns(Integer) }
  def end_offset; end

  sig { abstract.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#286
  sig { abstract.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#123
  def leading_comments; end

  # source://prism//lib/prism/node.rb#33
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/node.rb#164
  sig { returns(T::Boolean) }
  def newline?; end

  # source://prism//lib/prism/parse_result/newlines.rb#70
  def newline_flag!(lines); end

  # source://prism//lib/prism/parse_result/newlines.rb#66
  def newline_flag?; end

  # source://prism//lib/prism/node.rb#24
  sig { returns(Integer) }
  def node_id; end

  # source://prism//lib/prism/node.rb#175
  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  # source://prism//lib/prism/node.rb#27
  def save(repository); end

  # source://prism//lib/prism/node.rb#40
  def save_location(repository); end

  # source://prism//lib/prism/node.rb#138
  sig { returns(T::Array[String]) }
  def script_lines; end

  # source://prism//lib/prism/node.rb#147
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/node.rb#154
  sig { returns(String) }
  def slice_lines; end

  # source://prism//lib/prism/node.rb#138
  sig { returns(T::Array[String]) }
  def source_lines; end

  # source://prism//lib/prism/node.rb#101
  def start_character_column; end

  # source://prism//lib/prism/node.rb#69
  def start_character_offset; end

  # source://prism//lib/prism/node.rb#91
  def start_column; end

  # source://prism//lib/prism/node.rb#45
  def start_line; end

  # source://prism//lib/prism/node.rb#56
  sig { returns(Integer) }
  def start_offset; end

  # source://prism//lib/prism/node.rb#169
  sig { returns(T::Boolean) }
  def static_literal?; end

  # source://prism//lib/prism/node.rb#183
  sig { returns(String) }
  def to_dot; end

  # source://prism//lib/prism/node.rb#128
  def trailing_comments; end

  # source://prism//lib/prism/node.rb#194
  sig { params(line: Integer, column: Integer).returns(T::Array[Prism::Node]) }
  def tunnel(line, column); end

  # source://prism//lib/prism/node.rb#302
  sig { abstract.returns(Symbol) }
  def type; end

  protected

  # source://prism//lib/prism/node.rb#160
  sig { returns(Integer) }
  def flags; end

  private

  # source://prism//lib/prism/node.rb#17
  sig { returns(Prism::Source) }
  def source; end

  class << self
    # source://prism//lib/prism/node.rb#245
    def fields; end

    # source://prism//lib/prism/node.rb#310
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18807
# The flags that are common to all nodes.
module Prism::NodeFlags; end

# source://prism//lib/prism/node.rb#18810
Prism::NodeFlags::NEWLINE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18814
Prism::NodeFlags::STATIC_LITERAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#13814
class Prism::NumberedParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13816
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      maximum: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, maximum); end

  # source://prism//lib/prism/node.rb#13877
  def ===(other); end

  # source://prism//lib/prism/node.rb#13825
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13830
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13840
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13835
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13845
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      maximum: Integer
    ).returns(Prism::NumberedParametersNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), maximum: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13830
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13853
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13861
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13858
  sig { returns(Integer) }
  def maximum; end

  # source://prism//lib/prism/node.rb#13866
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13871
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13887
class Prism::NumberedReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13889
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      number: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, number); end

  # source://prism//lib/prism/node.rb#13956
  def ===(other); end

  # source://prism//lib/prism/node.rb#13898
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13903
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13913
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13908
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13918
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      number: Integer
    ).returns(Prism::NumberedReferenceReadNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), number: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13903
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13926
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#13940
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#13937
  sig { returns(Integer) }
  def number; end

  # source://prism//lib/prism/node.rb#13945
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13950
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13967
class Prism::OptionalKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13969
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, value); end

  # source://prism//lib/prism/node.rb#14053
  def ===(other); end

  # source://prism//lib/prism/node.rb#13980
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13985
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13995
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13990
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14000
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::OptionalKeywordParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13985
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14008
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14037
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14018
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14021
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14013
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#14029
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#14042
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#14034
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#14047
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14067
class Prism::OptionalParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14069
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc, value); end

  # source://prism//lib/prism/node.rb#14172
  def ===(other); end

  # source://prism//lib/prism/node.rb#14081
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14086
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14096
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14091
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14101
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node
    ).returns(Prism::OptionalParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14086
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14109
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14156
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14119
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14122
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14151
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14135
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14114
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#14130
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#14143
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#14161
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#14148
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#14166
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14186
class Prism::OrNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14188
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end

  # source://prism//lib/prism/node.rb#14287
  def ===(other); end

  # source://prism//lib/prism/node.rb#14199
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14204
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14214
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14209
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14219
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location
    ).returns(Prism::OrNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14204
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14227
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14271
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14238
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#14266
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14253
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14247
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#14261
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#14276
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14281
    def type; end
  end
end

# source://prism//lib/prism/pack.rb#8
module Prism::Pack
  class << self
    def parse(_arg0, _arg1, _arg2); end
  end
end

# source://prism//lib/prism/pack.rb#58
Prism::Pack::AGNOSTIC_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::BACK = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::BER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::BIG_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::COMMENT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#62
class Prism::Pack::Directive
  # source://prism//lib/prism/pack.rb#91
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  # source://prism//lib/prism/pack.rb#133
  def describe; end

  # source://prism//lib/prism/pack.rb#79
  def endian; end

  # source://prism//lib/prism/pack.rb#88
  def length; end

  # source://prism//lib/prism/pack.rb#85
  def length_type; end

  # source://prism//lib/prism/pack.rb#76
  def signed; end

  # source://prism//lib/prism/pack.rb#82
  def size; end

  # source://prism//lib/prism/pack.rb#70
  def source; end

  # source://prism//lib/prism/pack.rb#73
  def type; end

  # source://prism//lib/prism/pack.rb#67
  def variant; end

  # source://prism//lib/prism/pack.rb#64
  def version; end
end

# source://prism//lib/prism/pack.rb#104
Prism::Pack::Directive::ENDIAN_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#113
Prism::Pack::Directive::SIGNED_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#120
Prism::Pack::Directive::SIZE_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::ENDIAN_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::FLOAT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#200
class Prism::Pack::Format
  # source://prism//lib/prism/pack.rb#208
  def initialize(directives, encoding); end

  # source://prism//lib/prism/pack.rb#214
  def describe; end

  # source://prism//lib/prism/pack.rb#202
  def directives; end

  # source://prism//lib/prism/pack.rb#205
  def encoding; end
end

# source://prism//lib/prism/pack.rb#58
Prism::Pack::INTEGER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::LENGTH_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::LENGTH_MAX = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::LENGTH_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::LENGTH_RELATIVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::LITTLE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::MOVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::NATIVE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::NULL = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIGNED_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_16 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_32 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_INT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_LONG_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_P = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SIZE_SHORT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::SPACE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_BASE64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_HEX_HIGH = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_HEX_LOW = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_LSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_MIME = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_MSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_NULL_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_NULL_TERMINATED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_POINTER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_SPACE_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::STRING_UU = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::UNSIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#58
Prism::Pack::UTF8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#18714
# Flags for parameter nodes.
module Prism::ParameterFlags; end

# source://prism//lib/prism/node.rb#18716
Prism::ParameterFlags::REPEATED_PARAMETER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#14300
class Prism::ParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14302
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode)
    ).void
  end
  def initialize(source, node_id, location, flags, requireds, optionals, rest, posts, keywords, keyword_rest, block); end

  # source://prism//lib/prism/node.rb#14395
  def ===(other); end

  # source://prism//lib/prism/node.rb#14317
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14376
  sig { returns(T.nilable(Prism::BlockParameterNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#14322
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14340
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14327
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14345
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode)
    ).returns(Prism::ParametersNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14322
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14353
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14379
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14373
  sig do
    returns(T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)))
  end
  def keyword_rest; end

  # source://prism//lib/prism/node.rb#14370
  sig { returns(T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)]) }
  def keywords; end

  # source://prism//lib/prism/node.rb#14361
  sig { returns(T::Array[Prism::OptionalParameterNode]) }
  def optionals; end

  # source://prism//lib/prism/node.rb#14367
  sig do
    returns(T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)])
  end
  def posts; end

  # source://prism//lib/prism/node.rb#14358
  sig { returns(T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#14364
  sig { returns(T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode))) }
  def rest; end

  # source://prism//lib/prism/node_ext.rb#272
  sig { returns(T::Array[T.any([Symbol, Symbol], [Symbol])]) }
  def signature; end

  # source://prism//lib/prism/node.rb#14384
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14389
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14415
class Prism::ParenthesesNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14417
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, body, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#14523
  def ===(other); end

  # source://prism//lib/prism/node.rb#14428
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14468
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#14433
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14502
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#14484
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#14445
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14438
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14450
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::ParenthesesNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), body: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14433
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14458
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14507
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14463
  sig { returns(T::Boolean) }
  def multiple_statements?; end

  # source://prism//lib/prism/parse_result/newlines.rb#86
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#14497
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#14471
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#14492
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#14479
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#14512
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14517
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18720
# Flags for parentheses nodes.
module Prism::ParenthesesNodeFlags; end

# source://prism//lib/prism/node.rb#18722
Prism::ParenthesesNodeFlags::MULTIPLE_STATEMENTS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/parse_result.rb#610
class Prism::ParseError
  # source://prism//lib/prism/parse_result.rb#625
  sig { params(type: Symbol, message: String, location: Prism::Location, level: Symbol).void }
  def initialize(type, message, location, level); end

  # source://prism//lib/prism/parse_result.rb#633
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#638
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#622
  sig { returns(Symbol) }
  def level; end

  # source://prism//lib/prism/parse_result.rb#619
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#616
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/parse_result.rb#613
  sig { returns(Symbol) }
  def type; end
end

# source://prism//lib/prism/parse_result.rb#799
class Prism::ParseLexResult < ::Prism::Result
  # source://prism//lib/prism/parse_result.rb#805
  sig do
    params(
      value: [Prism::ProgramNode, T::Array[T.untyped]],
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#811
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#802
  sig { returns([Prism::ProgramNode, T::Array[T.untyped]]) }
  def value; end
end

# source://prism//lib/prism/parse_result.rb#740
class Prism::ParseResult < ::Prism::Result
  # source://prism//lib/prism/parse_result.rb#753
  sig do
    params(
      value: Prism::ProgramNode,
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#764
  def attach_comments!; end

  # source://prism//lib/prism/parse_result.rb#759
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#776
  def errors_format; end

  # source://prism//lib/prism/parse_result.rb#770
  def mark_newlines!; end

  # source://prism//lib/prism/parse_result.rb#750
  sig { returns(Prism::ProgramNode) }
  def value; end
end

# source://prism//lib/prism/parse_result/comments.rb#20
class Prism::ParseResult::Comments
  # source://prism//lib/prism/parse_result/comments.rb#87
  def initialize(parse_result); end

  # source://prism//lib/prism/parse_result/comments.rb#93
  def attach!; end

  # source://prism//lib/prism/parse_result/comments.rb#83
  def parse_result; end

  private

  # source://prism//lib/prism/parse_result/comments.rb#120
  def nearest_targets(node, comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#54
class Prism::ParseResult::Comments::LocationTarget
  # source://prism//lib/prism/parse_result/comments.rb#57
  def initialize(location); end

  # source://prism//lib/prism/parse_result/comments.rb#69
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#65
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#73
  def leading_comment(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#55
  def location; end

  # source://prism//lib/prism/parse_result/comments.rb#61
  def start_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#77
  def trailing_comment(comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#23
class Prism::ParseResult::Comments::NodeTarget
  # source://prism//lib/prism/parse_result/comments.rb#26
  def initialize(node); end

  # source://prism//lib/prism/parse_result/comments.rb#38
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#34
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#43
  def leading_comment(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#24
  def node; end

  # source://prism//lib/prism/parse_result/comments.rb#30
  def start_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#47
  def trailing_comment(comment); end
end

# source://prism//lib/prism/parse_result/errors.rb#10
class Prism::ParseResult::Errors
  # source://prism//lib/prism/parse_result/errors.rb#15
  def initialize(parse_result); end

  # source://prism//lib/prism/parse_result/errors.rb#20
  def format; end

  # source://prism//lib/prism/parse_result/errors.rb#12
  def parse_result; end
end

# source://prism//lib/prism/parse_result/newlines.rb#26
class Prism::ParseResult::Newlines < ::Prism::Visitor
  # source://prism//lib/prism/parse_result/newlines.rb#28
  def initialize(lines); end

  # source://prism//lib/prism/parse_result/newlines.rb#34
  def visit_block_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#48
  def visit_if_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#34
  def visit_lambda_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#56
  def visit_statements_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#48
  def visit_unless_node(node); end
end

# source://prism//lib/prism/parse_result.rb#644
class Prism::ParseWarning
  # source://prism//lib/prism/parse_result.rb#659
  sig { params(type: Symbol, message: String, location: Prism::Location, level: Symbol).void }
  def initialize(type, message, location, level); end

  # source://prism//lib/prism/parse_result.rb#667
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#672
  sig { returns(String) }
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#656
  sig { returns(Symbol) }
  def level; end

  # source://prism//lib/prism/parse_result.rb#653
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#650
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/parse_result.rb#647
  sig { returns(Symbol) }
  def type; end
end

# source://prism//lib/prism/pattern.rb#38
class Prism::Pattern
  # source://prism//lib/prism/pattern.rb#64
  def initialize(query); end

  # source://prism//lib/prism/pattern.rb#71
  def compile; end

  # source://prism//lib/prism/pattern.rb#60
  def query; end

  # source://prism//lib/prism/pattern.rb#87
  def scan(root); end

  private

  # source://prism//lib/prism/pattern.rb#103
  def combine_and(left, right); end

  # source://prism//lib/prism/pattern.rb#109
  def combine_or(left, right); end

  # source://prism//lib/prism/pattern.rb#144
  def compile_alternation_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#119
  def compile_array_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#169
  def compile_constant_name(node, name); end

  # source://prism//lib/prism/pattern.rb#149
  def compile_constant_path_node(node); end

  # source://prism//lib/prism/pattern.rb#164
  def compile_constant_read_node(node); end

  # source://prism//lib/prism/pattern.rb#114
  def compile_error(node); end

  # source://prism//lib/prism/pattern.rb#185
  def compile_hash_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#215
  def compile_nil_node(node); end

  # source://prism//lib/prism/pattern.rb#244
  def compile_node(node); end

  # source://prism//lib/prism/pattern.rb#220
  def compile_regular_expression_node(node); end

  # source://prism//lib/prism/pattern.rb#228
  def compile_string_node(node); end

  # source://prism//lib/prism/pattern.rb#236
  def compile_symbol_node(node); end
end

# source://prism//lib/prism/pattern.rb#41
class Prism::Pattern::CompilationError < ::StandardError
  # source://prism//lib/prism/pattern.rb#44
  def initialize(repr); end
end

# source://prism//lib/prism/node.rb#14536
class Prism::PinnedExpressionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14538
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, expression, operator_loc, lparen_loc, rparen_loc); end

  # source://prism//lib/prism/node.rb#14668
  def ===(other); end

  # source://prism//lib/prism/node.rb#14550
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14555
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14565
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14560
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14570
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location
    ).returns(Prism::PinnedExpressionNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), expression: T.unsafe(nil), operator_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), rparen_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14555
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14578
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14586
  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14652
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14642
  sig { returns(String) }
  def lparen; end

  # source://prism//lib/prism/node.rb#14608
  sig { returns(Prism::Location) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#14637
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14592
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14647
  sig { returns(String) }
  def rparen; end

  # source://prism//lib/prism/node.rb#14624
  sig { returns(Prism::Location) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#14616
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#14600
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#14632
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#14657
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14662
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14681
class Prism::PinnedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14683
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      variable: T.any(Prism::LocalVariableReadNode, Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::ItLocalVariableReadNode, Prism::MissingNode),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, variable, operator_loc); end

  # source://prism//lib/prism/node.rb#14769
  def ===(other); end

  # source://prism//lib/prism/node.rb#14693
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14698
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14708
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14703
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14713
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      variable: T.any(Prism::LocalVariableReadNode, Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::ItLocalVariableReadNode, Prism::MissingNode),
      operator_loc: Prism::Location
    ).returns(Prism::PinnedVariableNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), variable: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14698
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14721
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14753
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14748
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14735
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14743
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#14758
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#14729
  sig do
    returns(T.any(Prism::LocalVariableReadNode, Prism::InstanceVariableReadNode, Prism::ClassVariableReadNode, Prism::GlobalVariableReadNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::ItLocalVariableReadNode, Prism::MissingNode))
  end
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#14763
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14780
class Prism::PostExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14782
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, statements, keyword_loc, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#14902
  def ===(other); end

  # source://prism//lib/prism/node.rb#14794
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14799
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14881
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#14858
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#14811
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14804
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14816
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::PostExecutionNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), statements: T.unsafe(nil), keyword_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14799
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14824
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#14886
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#14871
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#14832
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#14876
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#14845
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#14866
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#14840
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#14853
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#14829
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#14891
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14896
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14915
class Prism::PreExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14917
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, statements, keyword_loc, opening_loc, closing_loc); end

  # source://prism//lib/prism/node.rb#15037
  def ===(other); end

  # source://prism//lib/prism/node.rb#14929
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14934
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15016
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#14993
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#14946
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14939
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14951
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location
    ).returns(Prism::PreExecutionNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), statements: T.unsafe(nil), keyword_loc: T.unsafe(nil), opening_loc: T.unsafe(nil), closing_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14934
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14959
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15021
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15006
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#14967
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15011
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#14980
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15001
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#14975
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#14988
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#14964
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#15026
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15031
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15047
class Prism::ProgramNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15049
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode
    ).void
  end
  def initialize(source, node_id, location, flags, locals, statements); end

  # source://prism//lib/prism/node.rb#15114
  def ===(other); end

  # source://prism//lib/prism/node.rb#15059
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15064
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15074
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15069
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15079
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode
    ).returns(Prism::ProgramNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15064
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15087
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15098
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15092
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#15095
  sig { returns(Prism::StatementsNode) }
  def statements; end

  # source://prism//lib/prism/node.rb#15103
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15108
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18726
# Flags for range and flip-flop nodes.
module Prism::RangeFlags; end

# source://prism//lib/prism/node.rb#18728
Prism::RangeFlags::EXCLUDE_END = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15129
class Prism::RangeNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15131
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, left, right, operator_loc); end

  # source://prism//lib/prism/node.rb#15236
  def ===(other); end

  # source://prism//lib/prism/node.rb#15142
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15147
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15160
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15152
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15165
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location
    ).returns(Prism::RangeNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15147
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15173
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15178
  sig { returns(T::Boolean) }
  def exclude_end?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15220
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15189
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#15215
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15202
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15199
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#15210
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#15225
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15230
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15249
class Prism::RationalNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15251
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      numerator: Integer,
      denominator: Integer
    ).void
  end
  def initialize(source, node_id, location, flags, numerator, denominator); end

  # source://prism//lib/prism/node.rb#15340
  def ===(other); end

  # source://prism//lib/prism/node.rb#15261
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15294
  sig { returns(T::Boolean) }
  def binary?; end

  # source://prism//lib/prism/node.rb#15266
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15276
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15271
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15281
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      numerator: Integer,
      denominator: Integer
    ).returns(Prism::RationalNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), numerator: T.unsafe(nil), denominator: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15299
  sig { returns(T::Boolean) }
  def decimal?; end

  # source://prism//lib/prism/node.rb#15266
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15289
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15321
  sig { returns(Integer) }
  def denominator; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15309
  sig { returns(T::Boolean) }
  def hexadecimal?; end

  # source://prism//lib/prism/node.rb#15324
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15316
  sig { returns(Integer) }
  def numerator; end

  # source://prism//lib/prism/node_ext.rb#123
  def numeric; end

  # source://prism//lib/prism/node.rb#15304
  sig { returns(T::Boolean) }
  def octal?; end

  # source://prism//lib/prism/node.rb#15329
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node_ext.rb#117
  sig { returns(Rational) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#15334
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15352
class Prism::RedoNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15354
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#15411
  def ===(other); end

  # source://prism//lib/prism/node.rb#15362
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15367
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15377
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15372
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15382
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::RedoNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15367
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15390
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15395
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15400
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15405
    def type; end
  end
end

# source://prism//lib/prism/reflection.rb#16
module Prism::Reflection
  class << self
    # source://prism//lib/prism/reflection.rb#107
    sig { params(node: T.class_of(Prism::Node)).returns(T::Array[Prism::Reflection::Field]) }
    def fields_for(node); end
  end
end

# source://prism//lib/prism/reflection.rb#48
class Prism::Reflection::ConstantField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#58
class Prism::Reflection::ConstantListField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#19
class Prism::Reflection::Field
  # source://prism//lib/prism/reflection.rb#24
  sig { params(name: Symbol).void }
  def initialize(name); end

  # source://prism//lib/prism/reflection.rb#21
  sig { returns(Symbol) }
  def name; end
end

# source://prism//lib/prism/reflection.rb#95
class Prism::Reflection::FlagsField < ::Prism::Reflection::Field
  # source://prism//lib/prism/reflection.rb#100
  sig { params(name: Symbol, flags: T::Array[Symbol]).void }
  def initialize(name, flags); end

  # source://prism//lib/prism/reflection.rb#97
  sig { returns(T::Array[Symbol]) }
  def flags; end
end

# source://prism//lib/prism/reflection.rb#88
class Prism::Reflection::FloatField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#82
class Prism::Reflection::IntegerField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#70
class Prism::Reflection::LocationField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#31
class Prism::Reflection::NodeField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#42
class Prism::Reflection::NodeListField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#53
class Prism::Reflection::OptionalConstantField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#76
class Prism::Reflection::OptionalLocationField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#37
class Prism::Reflection::OptionalNodeField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/reflection.rb#64
class Prism::Reflection::StringField < ::Prism::Reflection::Field; end

# source://prism//lib/prism/node.rb#18732
# Flags for regular expression and match last line nodes.
module Prism::RegularExpressionFlags; end

# source://prism//lib/prism/node.rb#18749
Prism::RegularExpressionFlags::ASCII_8BIT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18746
Prism::RegularExpressionFlags::EUC_JP = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18737
Prism::RegularExpressionFlags::EXTENDED = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18761
Prism::RegularExpressionFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18764
Prism::RegularExpressionFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18758
Prism::RegularExpressionFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18734
Prism::RegularExpressionFlags::IGNORE_CASE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18740
Prism::RegularExpressionFlags::MULTI_LINE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18743
Prism::RegularExpressionFlags::ONCE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18755
Prism::RegularExpressionFlags::UTF_8 = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18752
Prism::RegularExpressionFlags::WINDOWS_31J = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15420
class Prism::RegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#15422
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end

  # source://prism//lib/prism/node.rb#15595
  def ===(other); end

  # source://prism//lib/prism/node.rb#15434
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15492
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#15439
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15574
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15548
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15449
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15444
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15569
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#15535
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#15454
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).returns(Prism::RegularExpressionNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15439
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15462
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15487
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#15472
  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15512
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#15517
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#15507
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#15467
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#15579
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15477
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#15482
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#15564
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15522
  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  # source://prism//lib/prism/node.rb#15556
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#15543
  def save_content_loc(repository); end

  # source://prism//lib/prism/node.rb#15530
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#15584
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#15561
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#15502
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#15497
  sig { returns(T::Boolean) }
  def windows_31j?; end

  class << self
    # source://prism//lib/prism/node.rb#15589
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#23
module Prism::RegularExpressionOptions
  # source://prism//lib/prism/node_ext.rb#26
  def options; end
end

# source://prism//lib/prism/relocation.rb#14
module Prism::Relocation
  class << self
    # source://prism//lib/prism/relocation.rb#496
    def filepath(value); end

    # source://prism//lib/prism/relocation.rb#501
    def string(value); end
  end
end

# source://prism//lib/prism/relocation.rb#270
class Prism::Relocation::CharacterColumnsField
  # source://prism//lib/prism/relocation.rb#272
  def fields(value); end
end

# source://prism//lib/prism/relocation.rb#218
class Prism::Relocation::CharacterOffsetsField
  # source://prism//lib/prism/relocation.rb#220
  def fields(value); end
end

# source://prism//lib/prism/relocation.rb#282
class Prism::Relocation::CodeUnitColumnsField
  # source://prism//lib/prism/relocation.rb#291
  def initialize(repository, encoding); end

  # source://prism//lib/prism/relocation.rb#288
  def encoding; end

  # source://prism//lib/prism/relocation.rb#299
  def fields(value); end

  # source://prism//lib/prism/relocation.rb#285
  def repository; end

  private

  # source://prism//lib/prism/relocation.rb#309
  def cache; end
end

# source://prism//lib/prism/relocation.rb#229
class Prism::Relocation::CodeUnitOffsetsField
  # source://prism//lib/prism/relocation.rb#238
  def initialize(repository, encoding); end

  # source://prism//lib/prism/relocation.rb#235
  def encoding; end

  # source://prism//lib/prism/relocation.rb#246
  def fields(value); end

  # source://prism//lib/prism/relocation.rb#232
  def repository; end

  private

  # source://prism//lib/prism/relocation.rb#256
  def cache; end
end

# source://prism//lib/prism/relocation.rb#262
class Prism::Relocation::ColumnsField
  # source://prism//lib/prism/relocation.rb#264
  def fields(value); end
end

# source://prism//lib/prism/relocation.rb#315
class Prism::Relocation::CommentsField
  private

  # source://prism//lib/prism/relocation.rb#330
  def comments(values); end
end

# source://prism//lib/prism/relocation.rb#317
class Prism::Relocation::CommentsField::Comment
  # source://prism//lib/prism/relocation.rb#322
  def initialize(slice); end

  # source://prism//lib/prism/relocation.rb#319
  def slice; end
end

# source://prism//lib/prism/relocation.rb#17
class Prism::Relocation::Entry
  # source://prism//lib/prism/relocation.rb#25
  def initialize(repository); end

  # source://prism//lib/prism/relocation.rb#120
  def comments; end

  # source://prism//lib/prism/relocation.rb#93
  def end_character_column; end

  # source://prism//lib/prism/relocation.rb#61
  def end_character_offset; end

  # source://prism//lib/prism/relocation.rb#105
  def end_code_units_column; end

  # source://prism//lib/prism/relocation.rb#73
  def end_code_units_offset; end

  # source://prism//lib/prism/relocation.rb#83
  def end_column; end

  # source://prism//lib/prism/relocation.rb#41
  def end_line; end

  # source://prism//lib/prism/relocation.rb#51
  def end_offset; end

  # source://prism//lib/prism/relocation.rb#31
  def filepath; end

  # source://prism//lib/prism/relocation.rb#110
  def leading_comments; end

  # source://prism//lib/prism/relocation.rb#127
  def reify!(values); end

  # source://prism//lib/prism/relocation.rb#88
  def start_character_column; end

  # source://prism//lib/prism/relocation.rb#56
  def start_character_offset; end

  # source://prism//lib/prism/relocation.rb#99
  def start_code_units_column; end

  # source://prism//lib/prism/relocation.rb#67
  def start_code_units_offset; end

  # source://prism//lib/prism/relocation.rb#78
  def start_column; end

  # source://prism//lib/prism/relocation.rb#36
  def start_line; end

  # source://prism//lib/prism/relocation.rb#46
  def start_offset; end

  # source://prism//lib/prism/relocation.rb#115
  def trailing_comments; end

  private

  # source://prism//lib/prism/relocation.rb#135
  def fetch_value(name); end

  # source://prism//lib/prism/relocation.rb#143
  def values; end
end

# source://prism//lib/prism/relocation.rb#21
class Prism::Relocation::Entry::MissingValueError < ::StandardError; end

# source://prism//lib/prism/relocation.rb#186
class Prism::Relocation::FilepathField
  # source://prism//lib/prism/relocation.rb#191
  def initialize(value); end

  # source://prism//lib/prism/relocation.rb#196
  def fields(_value); end

  # source://prism//lib/prism/relocation.rb#188
  def value; end
end

# source://prism//lib/prism/relocation.rb#336
class Prism::Relocation::LeadingCommentsField < ::Prism::Relocation::CommentsField
  # source://prism//lib/prism/relocation.rb#338
  def fields(value); end
end

# source://prism//lib/prism/relocation.rb#202
class Prism::Relocation::LinesField
  # source://prism//lib/prism/relocation.rb#204
  def fields(value); end
end

# source://prism//lib/prism/relocation.rb#210
class Prism::Relocation::OffsetsField
  # source://prism//lib/prism/relocation.rb#212
  def fields(value); end
end

# source://prism//lib/prism/relocation.rb#353
class Prism::Relocation::Repository
  # source://prism//lib/prism/relocation.rb#370
  def initialize(source); end

  # source://prism//lib/prism/relocation.rb#416
  def character_columns; end

  # source://prism//lib/prism/relocation.rb#399
  def character_offsets; end

  # source://prism//lib/prism/relocation.rb#422
  def code_unit_columns(encoding); end

  # source://prism//lib/prism/relocation.rb#405
  def code_unit_offsets(encoding); end

  # source://prism//lib/prism/relocation.rb#377
  def code_units_cache(encoding); end

  # source://prism//lib/prism/relocation.rb#410
  def columns; end

  # source://prism//lib/prism/relocation.rb#440
  def comments; end

  # source://prism//lib/prism/relocation.rb#447
  def enter(node_id, field_name); end

  # source://prism//lib/prism/relocation.rb#367
  def entries; end

  # source://prism//lib/prism/relocation.rb#364
  def fields; end

  # source://prism//lib/prism/relocation.rb#382
  def filepath; end

  # source://prism//lib/prism/relocation.rb#428
  def leading_comments; end

  # source://prism//lib/prism/relocation.rb#388
  def lines; end

  # source://prism//lib/prism/relocation.rb#393
  def offsets; end

  # source://prism//lib/prism/relocation.rb#456
  def reify!; end

  # source://prism//lib/prism/relocation.rb#361
  def source; end

  # source://prism//lib/prism/relocation.rb#434
  def trailing_comments; end

  private

  # source://prism//lib/prism/relocation.rb#488
  def field(name, value); end
end

# source://prism//lib/prism/relocation.rb#356
class Prism::Relocation::Repository::ConfigurationError < ::StandardError; end

# source://prism//lib/prism/relocation.rb#149
class Prism::Relocation::Source
  # source://prism//lib/prism/relocation.rb#154
  def initialize(value); end

  # source://prism//lib/prism/relocation.rb#164
  def code_units_cache(encoding); end

  # source://prism//lib/prism/relocation.rb#159
  def result; end

  # source://prism//lib/prism/relocation.rb#151
  def value; end
end

# source://prism//lib/prism/relocation.rb#170
class Prism::Relocation::SourceFilepath < ::Prism::Relocation::Source
  # source://prism//lib/prism/relocation.rb#172
  def result; end
end

# source://prism//lib/prism/relocation.rb#178
class Prism::Relocation::SourceString < ::Prism::Relocation::Source
  # source://prism//lib/prism/relocation.rb#180
  def result; end
end

# source://prism//lib/prism/relocation.rb#344
class Prism::Relocation::TrailingCommentsField < ::Prism::Relocation::CommentsField
  # source://prism//lib/prism/relocation.rb#346
  def fields(value); end
end

# source://prism//lib/prism/node.rb#15610
class Prism::RequiredKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15612
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc); end

  # source://prism//lib/prism/node.rb#15692
  def ===(other); end

  # source://prism//lib/prism/node.rb#15622
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15627
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15637
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15632
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15642
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location
    ).returns(Prism::RequiredKeywordParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15627
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15650
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15676
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15660
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#15663
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#15655
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#15671
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#15681
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15686
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15705
class Prism::RequiredParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15707
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer, name: Symbol).void }
  def initialize(source, node_id, location, flags, name); end

  # source://prism//lib/prism/node.rb#15773
  def ===(other); end

  # source://prism//lib/prism/node.rb#15716
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15721
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15731
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15726
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15736
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: Symbol
    ).returns(Prism::RequiredParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15721
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15744
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15757
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15754
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#15749
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#15762
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15767
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15784
class Prism::RescueModifierNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15786
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node
    ).void
  end
  def initialize(source, node_id, location, flags, expression, keyword_loc, rescue_expression); end

  # source://prism//lib/prism/node.rb#15870
  def ===(other); end

  # source://prism//lib/prism/node.rb#15797
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15802
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15812
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15807
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15817
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node
    ).returns(Prism::RescueModifierNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), expression: T.unsafe(nil), keyword_loc: T.unsafe(nil), rescue_expression: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15802
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15825
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15830
  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#15854
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#15849
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15833
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/parse_result/newlines.rb#116
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#15846
  sig { returns(Prism::Node) }
  def rescue_expression; end

  # source://prism//lib/prism/node.rb#15841
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#15859
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15864
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15887
class Prism::RescueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15889
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode)),
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      subsequent: T.nilable(Prism::RescueNode)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, exceptions, operator_loc, reference, then_keyword_loc, statements, subsequent); end

  # source://prism//lib/prism/node.rb#16036
  def ===(other); end

  # source://prism//lib/prism/node.rb#15904
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15909
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15924
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15914
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node_ext.rb#497
  def consequent; end

  # source://prism//lib/prism/node.rb#15929
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode)),
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      subsequent: T.nilable(Prism::RescueNode)
    ).returns(Prism::RescueNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), exceptions: T.unsafe(nil), operator_loc: T.unsafe(nil), reference: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), subsequent: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15909
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15937
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15955
  sig { returns(T::Array[Prism::Node]) }
  def exceptions; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16020
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16005
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15942
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16010
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#15958
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15977
  sig do
    returns(T.nilable(T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode, Prism::MissingNode)))
  end
  def reference; end

  # source://prism//lib/prism/node.rb#15950
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#15972
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#15994
  def save_then_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#15999
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16002
  sig { returns(T.nilable(Prism::RescueNode)) }
  def subsequent; end

  # source://prism//lib/prism/node.rb#16015
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#15980
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#16025
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16030
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16054
class Prism::RestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16056
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, name, name_loc, operator_loc); end

  # source://prism//lib/prism/node.rb#16161
  def ===(other); end

  # source://prism//lib/prism/node.rb#16067
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16072
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16082
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16077
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16087
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location
    ).returns(Prism::RestParameterNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), name: T.unsafe(nil), name_loc: T.unsafe(nil), operator_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16072
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16095
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16145
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16105
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#16108
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#16140
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#16127
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16100
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16122
  def save_name_loc(repository); end

  # source://prism//lib/prism/node.rb#16135
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#16150
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16155
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#680
class Prism::Result
  # source://prism//lib/prism/parse_result.rb#702
  sig do
    params(
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result.rb#734
  sig do
    params(
      encoding: Encoding
    ).returns(T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer)))
  end
  def code_units_cache(encoding); end

  # source://prism//lib/prism/parse_result.rb#682
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#690
  sig { returns(T.nilable(Prism::Location)) }
  def data_loc; end

  # source://prism//lib/prism/parse_result.rb#712
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#717
  sig { returns(Encoding) }
  def encoding; end

  # source://prism//lib/prism/parse_result.rb#693
  sig { returns(T::Array[Prism::ParseError]) }
  def errors; end

  # source://prism//lib/prism/parse_result.rb#729
  sig { returns(T::Boolean) }
  def failure?; end

  # source://prism//lib/prism/parse_result.rb#685
  sig { returns(T::Array[Prism::MagicComment]) }
  def magic_comments; end

  # source://prism//lib/prism/parse_result.rb#699
  sig { returns(Prism::Source) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#723
  sig { returns(T::Boolean) }
  def success?; end

  # source://prism//lib/prism/parse_result.rb#696
  sig { returns(T::Array[Prism::ParseWarning]) }
  def warnings; end
end

# source://prism//lib/prism/node.rb#16174
class Prism::RetryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16176
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#16233
  def ===(other); end

  # source://prism//lib/prism/node.rb#16184
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16189
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16199
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16194
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16204
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::RetryNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16189
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16212
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16217
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16222
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16227
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16242
class Prism::ReturnNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16244
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, arguments); end

  # source://prism//lib/prism/node.rb#16326
  def ===(other); end

  # source://prism//lib/prism/node.rb#16254
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16302
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#16259
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16271
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16264
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16276
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode)
    ).returns(Prism::ReturnNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), arguments: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16259
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16284
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16310
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16305
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16289
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16297
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#16315
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16320
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#888
class Prism::Scope
  # source://prism//lib/prism/parse_result.rb#899
  sig { params(locals: T::Array[Symbol], forwarding: T::Array[Symbol]).void }
  def initialize(locals, forwarding); end

  # source://prism//lib/prism/parse_result.rb#896
  sig { returns(T::Array[Symbol]) }
  def forwarding; end

  # source://prism//lib/prism/parse_result.rb#891
  sig { returns(T::Array[Symbol]) }
  def locals; end
end

# source://prism//lib/prism/node.rb#16337
class Prism::SelfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16339
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#16396
  def ===(other); end

  # source://prism//lib/prism/node.rb#16347
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16352
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16362
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16357
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16367
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::SelfNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16352
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16375
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16380
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16385
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16390
    def type; end
  end
end

# source://prism//lib/prism/serialize.rb#17
module Prism::Serialize
  class << self
    # source://prism//lib/prism/serialize.rb#87
    def load_lex(input, serialized, freeze); end

    # source://prism//lib/prism/serialize.rb#34
    def load_parse(input, serialized, freeze); end

    # source://prism//lib/prism/serialize.rb#131
    def load_parse_comments(input, serialized, freeze); end

    # source://prism//lib/prism/serialize.rb#153
    def load_parse_lex(input, serialized, freeze); end
  end
end

# source://prism//lib/prism/serialize.rb#202
class Prism::Serialize::ConstantPool
  # source://prism//lib/prism/serialize.rb#205
  def initialize(input, serialized, base, size); end

  # source://prism//lib/prism/serialize.rb#213
  def get(index, encoding); end

  # source://prism//lib/prism/serialize.rb#203
  def size; end
end

# source://prism//lib/prism/serialize.rb#256
Prism::Serialize::FastStringIO = StringIO

# source://prism//lib/prism/serialize.rb#259
class Prism::Serialize::Loader
  # source://prism//lib/prism/serialize.rb#262
  def initialize(source, serialized); end

  # source://prism//lib/prism/serialize.rb#270
  def eof?; end

  # source://prism//lib/prism/serialize.rb#260
  def input; end

  # source://prism//lib/prism/serialize.rb#260
  def io; end

  # source://prism//lib/prism/serialize.rb#304
  def load_comments(freeze); end

  # source://prism//lib/prism/serialize.rb#828
  def load_constant(constant_pool, encoding); end

  # source://prism//lib/prism/serialize.rb#275
  def load_constant_pool(constant_pool); end

  # source://prism//lib/prism/serialize.rb#779
  def load_double; end

  # source://prism//lib/prism/serialize.rb#794
  def load_embedded_string(encoding); end

  # source://prism//lib/prism/serialize.rb#292
  def load_encoding; end

  # source://prism//lib/prism/serialize.rb#664
  def load_error_level; end

  # source://prism//lib/prism/serialize.rb#679
  def load_errors(encoding, freeze); end

  # source://prism//lib/prism/serialize.rb#286
  def load_header; end

  # source://prism//lib/prism/serialize.rb#768
  def load_integer; end

  # source://prism//lib/prism/serialize.rb#298
  def load_line_offsets(freeze); end

  # source://prism//lib/prism/serialize.rb#815
  def load_location(freeze); end

  # source://prism//lib/prism/serialize.rb#809
  def load_location_object(freeze); end

  # source://prism//lib/prism/serialize.rb#321
  def load_magic_comments(freeze); end

  # source://prism//lib/prism/serialize.rb#839
  def load_node(constant_pool, encoding, freeze); end

  # source://prism//lib/prism/serialize.rb#833
  def load_optional_constant(constant_pool, encoding); end

  # source://prism//lib/prism/serialize.rb#820
  def load_optional_location(freeze); end

  # source://prism//lib/prism/serialize.rb#824
  def load_optional_location_object(freeze); end

  # source://prism//lib/prism/serialize.rb#787
  def load_optional_node(constant_pool, encoding, freeze); end

  # source://prism//lib/prism/serialize.rb#798
  def load_string(encoding); end

  # source://prism//lib/prism/serialize.rb#730
  def load_tokens; end

  # source://prism//lib/prism/serialize.rb#783
  def load_uint32; end

  # source://prism//lib/prism/serialize.rb#763
  def load_varsint; end

  # source://prism//lib/prism/serialize.rb#749
  def load_varuint; end

  # source://prism//lib/prism/serialize.rb#698
  def load_warning_level; end

  # source://prism//lib/prism/serialize.rb#711
  def load_warnings(encoding, freeze); end

  # source://prism//lib/prism/serialize.rb#260
  def source; end
end

# source://prism//lib/prism/serialize.rb#338
Prism::Serialize::Loader::DIAGNOSTIC_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/serialize.rb#20
Prism::Serialize::MAJOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#24
Prism::Serialize::MINOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#28
Prism::Serialize::PATCH_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#2224
Prism::Serialize::TOKEN_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/node.rb#16406
class Prism::ShareableConstantNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16408
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode)
    ).void
  end
  def initialize(source, node_id, location, flags, write); end

  # source://prism//lib/prism/node.rb#16484
  def ===(other); end

  # source://prism//lib/prism/node.rb#16417
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16422
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16432
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16427
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16437
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode)
    ).returns(Prism::ShareableConstantNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), write: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16422
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16445
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16460
  sig { returns(T::Boolean) }
  def experimental_copy?; end

  # source://prism//lib/prism/node.rb#16455
  sig { returns(T::Boolean) }
  def experimental_everything?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16468
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16450
  sig { returns(T::Boolean) }
  def literal?; end

  # source://prism//lib/prism/node.rb#16473
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#16465
  sig do
    returns(T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode))
  end
  def write; end

  class << self
    # source://prism//lib/prism/node.rb#16478
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18768
# Flags for shareable constant nodes.
module Prism::ShareableConstantNodeFlags; end

# source://prism//lib/prism/node.rb#18776
Prism::ShareableConstantNodeFlags::EXPERIMENTAL_COPY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18773
Prism::ShareableConstantNodeFlags::EXPERIMENTAL_EVERYTHING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18770
Prism::ShareableConstantNodeFlags::LITERAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#16495
class Prism::SingletonClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16497
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#16626
  def ===(other); end

  # source://prism//lib/prism/node.rb#16511
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16579
  sig { returns(T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode))) }
  def body; end

  # source://prism//lib/prism/node.rb#16516
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16595
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#16550
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#16529
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16521
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16534
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(T.any(Prism::StatementsNode, Prism::BeginNode)),
      end_keyword_loc: Prism::Location
    ).returns(Prism::SingletonClassNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), locals: T.unsafe(nil), class_keyword_loc: T.unsafe(nil), operator_loc: T.unsafe(nil), expression: T.unsafe(nil), body: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16516
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16542
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16605
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#16582
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#16576
  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16610
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16547
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#16600
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#16563
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16558
  def save_class_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#16590
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#16571
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#16615
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16620
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#8
class Prism::Source
  # source://prism//lib/prism/parse_result.rb#46
  sig { params(source: String, start_line: Integer, offsets: T::Array[Integer]).void }
  def initialize(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#108
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#103
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_offset(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#136
  sig do
    params(
      encoding: Encoding
    ).returns(T.any(Prism::CodeUnitsCache, T.proc.params(byte_offset: Integer).returns(Integer)))
  end
  def code_units_cache(encoding); end

  # source://prism//lib/prism/parse_result.rb#142
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_column(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#124
  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_offset(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#98
  sig { params(byte_offset: Integer).returns(Integer) }
  def column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#147
  def deep_freeze; end

  # source://prism//lib/prism/parse_result.rb#64
  sig { returns(Encoding) }
  def encoding; end

  # source://prism//lib/prism/parse_result.rb#81
  sig { params(byte_offset: Integer).returns(Integer) }
  def line(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#93
  def line_end(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#87
  sig { params(byte_offset: Integer).returns(Integer) }
  def line_start(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#69
  sig { returns(T::Array[String]) }
  def lines; end

  # source://prism//lib/prism/parse_result.rb#43
  sig { returns(T::Array[Integer]) }
  def offsets; end

  # source://prism//lib/prism/parse_result.rb#58
  sig { params(offsets: T::Array[Integer]).void }
  def replace_offsets(offsets); end

  # source://prism//lib/prism/parse_result.rb#53
  sig { params(start_line: Integer).void }
  def replace_start_line(start_line); end

  # source://prism//lib/prism/parse_result.rb#75
  sig { params(byte_offset: Integer, length: Integer).returns(String) }
  def slice(byte_offset, length); end

  # source://prism//lib/prism/parse_result.rb#37
  sig { returns(String) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#40
  sig { returns(Integer) }
  def start_line; end

  private

  # source://prism//lib/prism/parse_result.rb#157
  def find_line(byte_offset); end

  class << self
    # source://prism//lib/prism/parse_result.rb#13
    def for(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end
  end
end

# source://prism//lib/prism/node.rb#16642
class Prism::SourceEncodingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16644
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#16701
  def ===(other); end

  # source://prism//lib/prism/node.rb#16652
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16657
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16667
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16662
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16672
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::SourceEncodingNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16657
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16680
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16685
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16690
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16695
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16710
class Prism::SourceFileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16712
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      filepath: String
    ).void
  end
  def initialize(source, node_id, location, flags, filepath); end

  # source://prism//lib/prism/node.rb#16793
  def ===(other); end

  # source://prism//lib/prism/node.rb#16721
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16726
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16736
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16731
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16741
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      filepath: String
    ).returns(Prism::SourceFileNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), filepath: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16726
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16749
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16774
  sig { returns(String) }
  def filepath; end

  # source://prism//lib/prism/node.rb#16759
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#16754
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#16764
  sig { returns(T::Boolean) }
  def frozen?; end

  # source://prism//lib/prism/node.rb#16777
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16769
  sig { returns(T::Boolean) }
  def mutable?; end

  # source://prism//lib/prism/node.rb#16782
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16787
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16804
class Prism::SourceLineNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16806
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#16863
  def ===(other); end

  # source://prism//lib/prism/node.rb#16814
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16819
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16829
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16824
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16834
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::SourceLineNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16819
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16842
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16847
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16852
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16857
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16872
class Prism::SplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16874
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node)
    ).void
  end
  def initialize(source, node_id, location, flags, operator_loc, expression); end

  # source://prism//lib/prism/node.rb#16956
  def ===(other); end

  # source://prism//lib/prism/node.rb#16884
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16889
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16901
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16894
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16906
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node)
    ).returns(Prism::SplatNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), operator_loc: T.unsafe(nil), expression: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16889
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16914
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16932
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#16940
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#16935
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#16919
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16927
  def save_operator_loc(repository); end

  # source://prism//lib/prism/node.rb#16945
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16950
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16967
class Prism::StatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16969
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      body: T::Array[Prism::Node]
    ).void
  end
  def initialize(source, node_id, location, flags, body); end

  # source://prism//lib/prism/node.rb#17030
  def ===(other); end

  # source://prism//lib/prism/node.rb#16978
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17011
  sig { returns(T::Array[Prism::Node]) }
  def body; end

  # source://prism//lib/prism/node.rb#16983
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16993
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16988
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16998
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      body: T::Array[Prism::Node]
    ).returns(Prism::StatementsNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), body: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16983
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17006
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17014
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17019
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17024
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18780
# Flags for string nodes.
module Prism::StringFlags; end

# source://prism//lib/prism/node.rb#18785
Prism::StringFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18782
Prism::StringFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18788
Prism::StringFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18791
Prism::StringFlags::MUTABLE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17047
class Prism::StringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#17049
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end

  # source://prism//lib/prism/node.rb#17199
  def ===(other); end

  # source://prism//lib/prism/node.rb#17061
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17066
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17178
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#17146
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17076
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17071
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17173
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#17133
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#17081
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String
    ).returns(Prism::StringNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17066
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17089
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17099
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#17094
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#17104
  sig { returns(T::Boolean) }
  def frozen?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#17183
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17109
  sig { returns(T::Boolean) }
  def mutable?; end

  # source://prism//lib/prism/node.rb#17168
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#17114
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#17160
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#17141
  def save_content_loc(repository); end

  # source://prism//lib/prism/node.rb#17128
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node_ext.rb#75
  sig { returns(Prism::InterpolatedStringNode) }
  def to_interpolated; end

  # source://prism//lib/prism/node.rb#17188
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#17165
  sig { returns(String) }
  def unescaped; end

  class << self
    # source://prism//lib/prism/node.rb#17193
    def type; end
  end
end

# source://prism//lib/prism/string_query.rb#7
class Prism::StringQuery
  # source://prism//lib/prism/string_query.rb#12
  def initialize(string); end

  # source://prism//lib/prism/string_query.rb#22
  def constant?; end

  # source://prism//lib/prism/string_query.rb#17
  def local?; end

  # source://prism//lib/prism/string_query.rb#27
  def method_name?; end

  # source://prism//lib/prism/string_query.rb#9
  def string; end

  class << self
    def constant?(_arg0); end
    def local?(_arg0); end
    def method_name?(_arg0); end
  end
end

# source://prism//lib/prism/node.rb#17216
class Prism::SuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17218
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, lparen_loc, arguments, rparen_loc, block); end

  # source://prism//lib/prism/node.rb#17355
  def ===(other); end

  # source://prism//lib/prism/node.rb#17231
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17299
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#17321
  sig { returns(T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))) }
  def block; end

  # source://prism//lib/prism/node.rb#17236
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17249
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17241
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17254
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(T.any(Prism::BlockNode, Prism::BlockArgumentNode))
    ).returns(Prism::SuperNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), arguments: T.unsafe(nil), rparen_loc: T.unsafe(nil), block: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17236
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17262
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17339
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17324
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17267
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#17329
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#17280
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#17334
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#17302
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#17275
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#17294
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#17316
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#17344
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17349
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18795
# Flags for symbol nodes.
module Prism::SymbolFlags; end

# source://prism//lib/prism/node.rb#18800
Prism::SymbolFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18803
Prism::SymbolFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#18797
Prism::SymbolFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17372
class Prism::SymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17374
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, value_loc, closing_loc, unescaped); end

  # source://prism//lib/prism/node.rb#17525
  def ===(other); end

  # source://prism//lib/prism/node.rb#17386
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17391
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17504
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#17472
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17401
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17396
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17406
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String
    ).returns(Prism::SymbolNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), value_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17391
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17414
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17424
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#17429
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#17419
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#17509
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17494
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#17434
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#17486
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#17448
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node.rb#17467
  def save_value_loc(repository); end

  # source://prism//lib/prism/node.rb#17514
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#17491
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#17499
  sig { returns(T.nilable(String)) }
  def value; end

  # source://prism//lib/prism/node.rb#17453
  sig { returns(T.nilable(Prism::Location)) }
  def value_loc; end

  class << self
    # source://prism//lib/prism/node.rb#17519
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#817
class Prism::Token
  # source://prism//lib/prism/parse_result.rb#829
  sig { params(source: Prism::Source, type: Symbol, value: String, location: T.any(Integer, Prism::Location)).void }
  def initialize(source, type, value, location); end

  # source://prism//lib/prism/parse_result.rb#864
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#837
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#877
  def deep_freeze; end

  # source://prism//lib/prism/parse_result.rb#871
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#842
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#849
  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#823
  sig { returns(Symbol) }
  def type; end

  # source://prism//lib/prism/parse_result.rb#826
  sig { returns(String) }
  def value; end

  private

  # source://prism//lib/prism/parse_result.rb#819
  sig { returns(Prism::Source) }
  def source; end
end

# source://prism//lib/prism/translation.rb#7
module Prism::Translation; end

# source://prism//lib/prism/translation/parser.rb#22
class Prism::Translation::Parser < ::Parser::Base
  # source://prism//lib/prism/translation/parser.rb#67
  def initialize(builder = T.unsafe(nil), parser: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser.rb#84
  def default_encoding; end

  # source://prism//lib/prism/translation/parser.rb#92
  def parse(source_buffer); end

  # source://prism//lib/prism/translation/parser.rb#105
  def parse_with_comments(source_buffer); end

  # source://prism//lib/prism/translation/parser.rb#122
  def tokenize(source_buffer, recover = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser.rb#148
  def try_declare_numparam(node); end

  # source://prism//lib/prism/translation/parser.rb#79
  sig { overridable.returns(Integer) }
  def version; end

  # source://prism//lib/prism/translation/parser.rb#88
  def yyerror; end

  private

  # source://prism//lib/prism/translation/parser.rb#306
  def build_ast(program, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#311
  def build_comments(comments, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#289
  def build_offset_cache(source); end

  # source://prism//lib/prism/translation/parser.rb#323
  def build_range(location, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#318
  def build_tokens(tokens, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#346
  def convert_for_prism(version); end

  # source://prism//lib/prism/translation/parser.rb#167
  def error_diagnostic(error, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#332
  def prism_options; end

  # source://prism//lib/prism/translation/parser.rb#267
  def unwrap(result, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#156
  def valid_error?(error); end

  # source://prism//lib/prism/translation/parser.rb#162
  def valid_warning?(warning); end

  # source://prism//lib/prism/translation/parser.rb#240
  def warning_diagnostic(warning, offset_cache); end
end

# source://prism//lib/prism/translation/parser33.rb#7
class Prism::Translation::Parser33 < ::Prism::Translation::Parser
  # source://prism//lib/prism/translation/parser33.rb#8
  sig { override.returns(Integer) }
  def version; end
end

# source://prism//lib/prism/translation/parser34.rb#7
class Prism::Translation::Parser34 < ::Prism::Translation::Parser
  # source://prism//lib/prism/translation/parser34.rb#8
  sig { override.returns(Integer) }
  def version; end
end

# source://prism//lib/prism/translation/parser35.rb#7
class Prism::Translation::Parser35 < ::Prism::Translation::Parser
  # source://prism//lib/prism/translation/parser35.rb#8
  sig { override.returns(Integer) }
  def version; end
end

# source://prism//lib/prism/translation/parser/builder.rb#9
class Prism::Translation::Parser::Builder < ::Parser::Builders::Default
  # source://prism//lib/prism/translation/parser/builder.rb#22
  def block(method_call, begin_t, args, body, end_t); end

  # source://prism//lib/prism/translation/parser/builder.rb#11
  def itarg; end
end

# source://prism//lib/prism/translation/parser/compiler.rb#9
class Prism::Translation::Parser::Compiler < ::Prism::Compiler
  # source://prism//lib/prism/translation/parser/compiler.rb#40
  def initialize(parser, offset_cache, forwarding: T.unsafe(nil), in_destructure: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser/compiler.rb#19
  def builder; end

  # source://prism//lib/prism/translation/parser/compiler.rb#30
  def forwarding; end

  # source://prism//lib/prism/translation/parser/compiler.rb#33
  def in_destructure; end

  # source://prism//lib/prism/translation/parser/compiler.rb#36
  def in_pattern; end

  # source://prism//lib/prism/translation/parser/compiler.rb#27
  def offset_cache; end

  # source://prism//lib/prism/translation/parser/compiler.rb#15
  def parser; end

  # source://prism//lib/prism/translation/parser/compiler.rb#23
  def source_buffer; end

  # source://prism//lib/prism/translation/parser/compiler.rb#59
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#53
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#65
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#71
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#128
  def visit_arguments_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#77
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#105
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#134
  def visit_assoc_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#182
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#194
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#200
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#245
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#251
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#256
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#262
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#267
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#276
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#381
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#288
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#362
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#400
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#419
  def visit_call_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#431
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#450
  def visit_case_match_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#437
  def visit_case_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#463
  def visit_class_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#502
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#492
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#512
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#476
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#522
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#482
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#553
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#543
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#563
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#619
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#579
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#609
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#629
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#639
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#599
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#528
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#573
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#537
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#648
  def visit_def_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#695
  def visit_defined_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#731
  def visit_else_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#737
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#747
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#753
  def visit_ensure_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#759
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#765
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1523
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#777
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#783
  def visit_for_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#801
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#807
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#816
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#854
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#844
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#864
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#828
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#874
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#834
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#880
  def visit_hash_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#890
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#908
  def visit_if_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#950
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#956
  def visit_implicit_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#962
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#968
  def visit_in_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1016
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#998
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1034
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1052
  def visit_index_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1089
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1079
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1099
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1063
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1109
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1069
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1115
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1121
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1121
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1136
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1150
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1160
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1174
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1180
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1196
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1205
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1214
  def visit_lambda_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1266
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1256
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1276
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1240
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1286
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1246
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1557
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1296
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1306
  def visit_match_required_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1316
  def visit_match_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1327
  def visit_missing_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1333
  def visit_module_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1344
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1354
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1377
  def visit_next_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1389
  def visit_nil_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1395
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1405
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1411
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1417
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1423
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1429
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1435
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1474
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1484
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1492
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1497
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1507
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1517
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1523
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1545
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1551
  def visit_redo_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1557
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1581
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1587
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1593
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1611
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1620
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1626
  def visit_retry_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1635
  def visit_return_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1647
  def visit_self_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1652
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1658
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1670
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1676
  def visit_source_file_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1682
  def visit_source_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1694
  def visit_splat_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1707
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1713
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1738
  def visit_super_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1761
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1788
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1794
  def visit_undef_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1803
  def visit_unless_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1833
  def visit_until_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1859
  def visit_when_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1877
  def visit_while_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1903
  def visit_x_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1929
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/translation/parser/compiler.rb#1943
  def copy_compiler(forwarding: T.unsafe(nil), in_destructure: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1950
  def find_forwarding(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1963
  def multi_target_elements(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1975
  def numeric_negate(message_loc, receiver); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1989
  def procarg0?(parameters); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2006
  def srange(location); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2021
  def srange_find(start_offset, end_offset, character); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2011
  def srange_offsets(start_offset, end_offset); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2138
  def string_nodes_from_interpolation(node, opening); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2150
  def string_nodes_from_line_continuations(unescaped, escaped, start_offset, opening); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2029
  def token(location); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2034
  def visit_block(call, block); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2069
  def visit_heredoc(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2115
  def visit_numeric(node, value); end

  # source://prism//lib/prism/translation/parser/compiler.rb#2127
  def within_pattern; end
end

# source://prism//lib/prism/translation/parser/compiler.rb#11
class Prism::Translation::Parser::Compiler::CompilationError < ::StandardError; end

# source://prism//lib/prism/translation/parser/compiler.rb#2003
Prism::Translation::Parser::Compiler::Range = Parser::Source::Range

# source://prism//lib/prism/translation/parser.rb#23
Prism::Translation::Parser::Diagnostic = Parser::Diagnostic

# source://prism//lib/prism/translation/parser/lexer.rb#13
class Prism::Translation::Parser::Lexer
  # source://prism//lib/prism/translation/parser/lexer.rb#231
  def initialize(source_buffer, lexed, offset_cache); end

  # source://prism//lib/prism/translation/parser/lexer.rb#224
  def lexed; end

  # source://prism//lib/prism/translation/parser/lexer.rb#227
  def offset_cache; end

  # source://prism//lib/prism/translation/parser/lexer.rb#220
  def source_buffer; end

  # source://prism//lib/prism/translation/parser/lexer.rb#241
  def to_a; end

  private

  # source://prism//lib/prism/translation/parser/lexer.rb#593
  def calculate_heredoc_whitespace(heredoc_token_index); end

  # source://prism//lib/prism/translation/parser/lexer.rb#735
  def escape_build(value, control, meta); end

  # source://prism//lib/prism/translation/parser/lexer.rb#743
  def escape_read(result, scanner, control, meta); end

  # source://prism//lib/prism/translation/parser/lexer.rb#804
  def interpolation?(quote); end

  # source://prism//lib/prism/translation/parser/lexer.rb#564
  def parse_complex(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#557
  def parse_float(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#550
  def parse_integer(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#579
  def parse_rational(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#814
  def percent_array?(quote); end

  # source://prism//lib/prism/translation/parser/lexer.rb#792
  def percent_array_leading_whitespace(string); end

  # source://prism//lib/prism/translation/parser/lexer.rb#784
  def percent_array_unescape(string); end

  # source://prism//lib/prism/translation/parser/lexer.rb#545
  def range(start_offset, end_offset); end

  # source://prism//lib/prism/translation/parser/lexer.rb#809
  def regexp?(quote); end

  # source://prism//lib/prism/translation/parser/lexer.rb#718
  def simplify_string?(value, quote); end

  # source://prism//lib/prism/translation/parser/lexer.rb#640
  def trim_heredoc_whitespace(string, heredoc); end

  # source://prism//lib/prism/translation/parser/lexer.rb#675
  def unescape_string(string, quote); end
end

# source://prism//lib/prism/translation/parser/lexer.rb#211
Prism::Translation::Parser::Lexer::COMMENT_CONTINUATION_TYPES = T.let(T.unsafe(nil), Set)

# source://prism//lib/prism/translation/parser/lexer.rb#666
Prism::Translation::Parser::Lexer::DELIMITER_SYMETRY = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/parser/lexer.rb#657
Prism::Translation::Parser::Lexer::ESCAPES = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/parser/lexer.rb#193
Prism::Translation::Parser::Lexer::EXPR_BEG = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/translation/parser/lexer.rb#194
Prism::Translation::Parser::Lexer::EXPR_LABEL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/translation/parser/lexer.rb#215
class Prism::Translation::Parser::Lexer::HeredocData < ::Struct
  def common_whitespace; end
  def common_whitespace=(_); end
  def identifier; end
  def identifier=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://prism//lib/prism/translation/parser/lexer.rb#200
Prism::Translation::Parser::Lexer::LAMBDA_TOKEN_TYPES = T.let(T.unsafe(nil), Set)

# source://prism//lib/prism/translation/parser/lexer.rb#204
Prism::Translation::Parser::Lexer::LPAREN_CONVERSION_TOKEN_TYPES = T.let(T.unsafe(nil), Set)

# source://prism//lib/prism/translation/parser/lexer.rb#671
Prism::Translation::Parser::Lexer::REGEXP_META_CHARACTERS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/parser/lexer.rb#237
Prism::Translation::Parser::Lexer::Range = Parser::Source::Range

# source://prism//lib/prism/translation/parser/lexer.rb#19
Prism::Translation::Parser::Lexer::TYPES = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/parser/lexer.rb#15
Prism::Translation::Parser::Lexer::TYPES_ALWAYS_SKIP = T.let(T.unsafe(nil), Set)

# source://prism//lib/prism/translation/parser.rb#29
class Prism::Translation::Parser::PrismDiagnostic < ::Parser::Diagnostic
  # source://prism//lib/prism/translation/parser.rb#34
  def initialize(message, level, reason, location); end

  # source://prism//lib/prism/translation/parser.rb#31
  def message; end
end

# source://prism//lib/prism/translation/parser.rb#40
Prism::Translation::Parser::Racc_debug_parser = T.let(T.unsafe(nil), FalseClass)

# source://prism//lib/prism/translation/parser_current.rb#21
Prism::Translation::ParserCurrent = Prism::Translation::Parser34

# source://prism//lib/prism/translation/ripper.rb#44
class Prism::Translation::Ripper < ::Prism::Compiler
  # source://prism//lib/prism/translation/ripper.rb#445
  def initialize(source, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#442
  def column; end

  # source://prism//lib/prism/translation/ripper.rb#458
  sig { returns(T::Boolean) }
  def error?; end

  # source://prism//lib/prism/translation/ripper.rb#436
  def filename; end

  # source://prism//lib/prism/translation/ripper.rb#439
  def lineno; end

  # source://prism//lib/prism/translation/ripper.rb#463
  sig { returns(T.untyped) }
  def parse; end

  # source://prism//lib/prism/translation/ripper.rb#433
  def source; end

  # source://prism//lib/prism/translation/ripper.rb#562
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#552
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#586
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#606
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#797
  def visit_arguments_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#616
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#776
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#804
  def visit_assoc_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#817
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#826
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#833
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#897
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#903
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#909
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#945
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#959
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#983
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1205
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1003
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1183
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1227
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1249
  def visit_call_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1274
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1297
  def visit_case_match_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1284
  def visit_case_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1310
  def visit_class_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1363
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1349
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1377
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1328
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1391
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1338
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1433
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1419
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1447
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1534
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1468
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1520
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1548
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1562
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1491
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1398
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1461
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1408
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1571
  def visit_def_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1618
  def visit_defined_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1640
  def visit_else_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1656
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1677
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1688
  def visit_ensure_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1706
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1713
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1738
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1752
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1758
  def visit_for_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1775
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1782
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1792
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1841
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1827
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1855
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1806
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1869
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1816
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1876
  def visit_hash_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1891
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1933
  def visit_if_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1969
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1975
  def visit_implicit_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1980
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#1987
  def visit_in_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2022
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2005
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2039
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2056
  def visit_index_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2098
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2084
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2112
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2066
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2126
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2073
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2133
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2139
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2158
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2177
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2205
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2218
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2248
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2255
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2260
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2272
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2286
  def visit_lambda_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2378
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2364
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2392
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2346
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2406
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2353
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2413
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2428
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2437
  def visit_match_required_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2446
  def visit_match_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2452
  def visit_missing_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2458
  def visit_module_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2475
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2529
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2549
  def visit_next_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2563
  def visit_nil_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2570
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2579
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2584
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2591
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2601
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2611
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2621
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2648
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2662
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2671
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2677
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2692
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2706
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2717
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2731
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2737
  def visit_redo_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2744
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2766
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2773
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2780
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2790
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2848
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2860
  def visit_retry_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2870
  def visit_return_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2884
  def visit_self_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2890
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2896
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2906
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2913
  def visit_source_file_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2920
  def visit_source_line_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2933
  def visit_splat_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2938
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2955
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3087
  def visit_super_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3108
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3132
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3139
  def visit_undef_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3151
  def visit_unless_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3179
  def visit_until_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3203
  def visit_when_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3224
  def visit_while_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3248
  def visit_x_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3271
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/translation/ripper.rb#3411
  def _dispatch_0; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def _dispatch_1(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def _dispatch_2(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def _dispatch_3(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def _dispatch_4(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3416
  def _dispatch_5(_, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3417
  def _dispatch_7(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3401
  def bounds(location); end

  # source://prism//lib/prism/translation/ripper.rb#1174
  def command?(node); end

  # source://prism//lib/prism/translation/ripper.rb#3439
  def compile_error(msg); end

  # source://prism//lib/prism/translation/ripper.rb#3454
  def dedent_string(string, width); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_BEGIN(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_CHAR(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_END(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on___end__(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_alias(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_alias_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_aref(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_aref_field(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_arg_ambiguous(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_arg_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_args_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_args_add_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_args_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_args_forward; end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_args_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_array(_); end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def on_aryptn(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_assign(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_assign_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_assoc_new(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_assoc_splat(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_assoclist_from_args(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_backref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_backtick(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_bare_assoc_hash(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_begin(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_binary(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_block_var(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_blockarg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def on_bodystmt(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_brace_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_break(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_call(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_case(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_class(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_class_name_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_comma(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_command(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def on_command_call(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_comment(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_const(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_const_path_field(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_const_path_ref(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_const_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_cvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_def(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_defined(_); end

  # source://prism//lib/prism/translation/ripper.rb#3416
  def on_defs(_, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_do_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_dot2(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_dot3(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_dyna_symbol(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_else(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_elsif(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_embdoc(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_embdoc_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_embdoc_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_embexpr_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_embexpr_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_embvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_ensure(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_excessed_comma; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_fcall(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_field(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_float(_); end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def on_fndptn(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_for(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_gvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_hash(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_heredoc_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_heredoc_dedent(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_heredoc_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_hshptn(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_ident(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_if(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_if_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_ifop(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_ignored_nl(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_ignored_sp(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_imaginary(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_in(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_int(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_ivar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_kw(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_kwrest_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_label(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_label_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_lambda(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_lbrace(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_lbracket(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_lparen(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_magic_comment(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_massign(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_method_add_arg(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_method_add_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_mlhs_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_mlhs_add_post(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_mlhs_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_mlhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_mlhs_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_module(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_mrhs_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_mrhs_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_mrhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_mrhs_new_from_args(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_next(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_nl(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_nokw_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_op(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_opassign(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_operator_ambiguous(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_param_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3417
  def on_params(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_parse_error(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_period(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_program(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_qsymbols_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_qsymbols_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_qsymbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_qwords_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_qwords_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_qwords_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_rational(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_rbrace(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_rbracket(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_redo; end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_regexp_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_regexp_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_regexp_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_regexp_literal(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_regexp_new; end

  # source://prism//lib/prism/translation/ripper.rb#3415
  def on_rescue(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_rescue_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_rest_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_retry; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_return(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_return0; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_rparen(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_sclass(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_semicolon(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_sp(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_stmts_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_stmts_new; end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_string_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_string_concat(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_string_content; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_string_dvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_string_embexpr(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_string_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_super(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_symbeg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_symbol(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_symbol_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_symbols_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_symbols_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_symbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_tlambda(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_tlambeg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_top_const_field(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_top_const_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_tstring_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_tstring_content(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_tstring_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_unary(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_undef(_); end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_unless(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_unless_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_until(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_until_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_var_alias(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_var_field(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_var_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_vcall(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_void_stmt; end

  # source://prism//lib/prism/translation/ripper.rb#3414
  def on_when(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_while(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_while_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_word_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_word_new; end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_words_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_words_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_words_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_words_sep(_); end

  # source://prism//lib/prism/translation/ripper.rb#3413
  def on_xstring_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_xstring_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_xstring_new; end

  # source://prism//lib/prism/translation/ripper.rb#3412
  def on_yield(_); end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_yield0; end

  # source://prism//lib/prism/translation/ripper.rb#3411
  def on_zsuper; end

  # source://prism//lib/prism/translation/ripper.rb#3297
  def result; end

  # source://prism//lib/prism/translation/ripper.rb#3306
  def trailing_comma?(left, right); end

  # source://prism//lib/prism/translation/ripper.rb#571
  def visit_alias_global_variable_node_value(node); end

  # source://prism//lib/prism/translation/ripper.rb#757
  def visit_arguments(elements); end

  # source://prism//lib/prism/translation/ripper.rb#841
  def visit_begin_node_clauses(location, node, allow_newline); end

  # source://prism//lib/prism/translation/ripper.rb#876
  def visit_body_node(location, node, allow_newline = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#1147
  def visit_call_node_arguments(arguments_node, block_node, trailing_comma); end

  # source://prism//lib/prism/translation/ripper.rb#1500
  def visit_constant_path_write_node_target(node); end

  # source://prism//lib/prism/translation/ripper.rb#2635
  def visit_destructured_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3006
  def visit_heredoc_node(parts, base); end

  # source://prism//lib/prism/translation/ripper.rb#2981
  def visit_heredoc_node_whitespace(parts); end

  # source://prism//lib/prism/translation/ripper.rb#3052
  def visit_heredoc_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#3069
  def visit_heredoc_x_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2488
  def visit_multi_target_node_targets(lefts, rest, rights, skippable); end

  # source://prism//lib/prism/translation/ripper.rb#3345
  def visit_number_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#596
  def visit_pattern_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#2947
  def visit_statements_node_body(body); end

  # source://prism//lib/prism/translation/ripper.rb#2237
  def visit_string_content(part); end

  # source://prism//lib/prism/translation/ripper.rb#3318
  def visit_token(token, allow_keywords = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#746
  def visit_words_sep(opening_loc, previous, current); end

  # source://prism//lib/prism/translation/ripper.rb#3363
  def visit_write_value(node); end

  # source://prism//lib/prism/translation/ripper.rb#3311
  def void_stmt?(left, right, allow_newline); end

  # source://prism//lib/prism/translation/ripper.rb#3430
  def warn(fmt, *args); end

  # source://prism//lib/prism/translation/ripper.rb#3435
  def warning(fmt, *args); end

  class << self
    # source://prism//lib/prism/translation/ripper.rb#73
    def lex(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ripper.rb#47
    def parse(src, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ripper.rb#382
    def sexp(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ripper.rb#417
    def sexp_raw(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end
  end
end

# source://prism//lib/prism/translation/ripper.rb#338
Prism::Translation::Ripper::BINARY_OPERATORS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#290
Prism::Translation::Ripper::EVENTS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#293
Prism::Translation::Ripper::KEYWORDS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#284
Prism::Translation::Ripper::PARSER_EVENTS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#85
Prism::Translation::Ripper::PARSER_EVENT_TABLE = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/ripper.rb#287
Prism::Translation::Ripper::SCANNER_EVENTS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#228
Prism::Translation::Ripper::SCANNER_EVENT_TABLE = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/ripper/sexp.rb#11
class Prism::Translation::Ripper::SexpBuilder < ::Prism::Translation::Ripper
  # source://prism//lib/prism/translation/ripper/sexp.rb#14
  def error; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_BEGIN(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_CHAR(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_END(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on___end__(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_alias(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_alias_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_aref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_aref_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_arg_ambiguous(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_arg_paren(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_args_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_args_add_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_args_add_star(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_args_forward(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_args_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_array(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_aryptn(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_assign(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_assign_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_assoc_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_assoc_splat(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_assoclist_from_args(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_backref(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_backtick(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_bare_assoc_hash(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_begin(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_binary(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_block_var(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_blockarg(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_bodystmt(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_brace_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_break(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_call(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_case(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_class(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_class_name_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_comma(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_command(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_command_call(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_comment(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_const(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_const_path_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_const_path_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_const_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_cvar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_def(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_defined(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_defs(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_do_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_dot2(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_dot3(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_dyna_symbol(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_else(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_elsif(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_embdoc(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_embdoc_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_embdoc_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_embexpr_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_embexpr_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_embvar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_ensure(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_excessed_comma(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_fcall(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_float(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_fndptn(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_for(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_gvar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_hash(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_heredoc_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_heredoc_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_hshptn(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_ident(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_if(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_if_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_ifop(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_ignored_nl(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_ignored_sp(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_imaginary(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_in(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_int(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_ivar(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_kw(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_kwrest_param(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_label(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_label_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_lambda(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_lbrace(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_lbracket(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_lparen(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_magic_comment(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_massign(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_method_add_arg(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_method_add_block(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mlhs_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mlhs_add_post(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mlhs_add_star(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mlhs_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mlhs_paren(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_module(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mrhs_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mrhs_add_star(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mrhs_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_mrhs_new_from_args(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_next(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_nl(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_nokw_param(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_op(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_opassign(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_operator_ambiguous(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_param_error(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_params(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_paren(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_period(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_program(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_qsymbols_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_qsymbols_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_qsymbols_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_qwords_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_qwords_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_qwords_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_rational(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_rbrace(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_rbracket(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_redo(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_regexp_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_regexp_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_regexp_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_regexp_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_regexp_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_rescue(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_rescue_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_rest_param(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_retry(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_return(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_return0(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_rparen(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_sclass(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_semicolon(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_sp(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_stmts_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_stmts_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_string_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_string_concat(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_string_content(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_string_dvar(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_string_embexpr(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_string_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_super(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_symbeg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_symbol(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_symbol_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_symbols_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_symbols_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_symbols_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_tlambda(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_tlambeg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_top_const_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_top_const_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_tstring_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_tstring_content(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_tstring_end(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_unary(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_undef(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_unless(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_unless_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_until(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_until_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_var_alias(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_var_field(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_var_ref(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_vcall(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_void_stmt(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_when(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_while(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_while_mod(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_word_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_word_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_words_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_words_beg(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_words_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#56
  def on_words_sep(tok); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_xstring_add(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_xstring_literal(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_xstring_new(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_yield(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_yield0(*args); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#48
  def on_zsuper(*args); end

  private

  # source://prism//lib/prism/translation/ripper/sexp.rb#62
  def compile_error(mesg); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#18
  def dedent_element(e, width); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#62
  def on_error(mesg); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#25
  def on_heredoc_dedent(val, width); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#62
  def on_parse_error(mesg); end
end

# source://prism//lib/prism/translation/ripper/sexp.rb#75
class Prism::Translation::Ripper::SexpBuilderPP < ::Prism::Translation::Ripper::SexpBuilder
  private

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def _dispatch_event_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def _dispatch_event_push(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_args_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_args_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#80
  def on_heredoc_dedent(val, width); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_mlhs_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#110
  def on_mlhs_add_post(list, post); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#106
  def on_mlhs_add_star(list, star); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_mlhs_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#102
  def on_mlhs_paren(list); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_mrhs_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_mrhs_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_qsymbols_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_qsymbols_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_qwords_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_qwords_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_regexp_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_regexp_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_stmts_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_stmts_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_string_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_symbols_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_symbols_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_word_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_word_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_words_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_words_new; end

  # source://prism//lib/prism/translation/ripper/sexp.rb#97
  def on_xstring_add(list, item); end

  # source://prism//lib/prism/translation/ripper/sexp.rb#93
  def on_xstring_new; end
end

# source://prism//lib/prism/translation/ruby_parser.rb#15
class Prism::Translation::RubyParser
  # source://prism//lib/prism/translation/ruby_parser.rb#1891
  def parse(source, filepath = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1897
  def parse_file(filepath); end

  private

  # source://prism//lib/prism/translation/ruby_parser.rb#1919
  def translate(result, filepath); end

  class << self
    # source://prism//lib/prism/translation/ruby_parser.rb#1904
    def parse(source, filepath = T.unsafe(nil)); end

    # source://prism//lib/prism/translation/ruby_parser.rb#1910
    def parse_file(filepath); end
  end
end

# source://prism//lib/prism/translation/ruby_parser.rb#17
class Prism::Translation::RubyParser::Compiler < ::Prism::Compiler
  # source://prism//lib/prism/translation/ruby_parser.rb#32
  def initialize(file, in_def: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ruby_parser.rb#21
  def file; end

  # source://prism//lib/prism/translation/ruby_parser.rb#25
  def in_def; end

  # source://prism//lib/prism/translation/ruby_parser.rb#29
  def in_pattern; end

  # source://prism//lib/prism/translation/ruby_parser.rb#50
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#42
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#58
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#66
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#123
  def visit_arguments_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#86
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#98
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#131
  def visit_assoc_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#142
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#154
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#162
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#197
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#207
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#212
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#220
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#225
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#267
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#341
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#287
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#329
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#353
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#378
  def visit_call_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#386
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#402
  def visit_case_match_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#394
  def visit_case_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#410
  def visit_class_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#459
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#451
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#467
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#432
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#475
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#443
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#516
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#508
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#524
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#571
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#540
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#563
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#579
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#587
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#555
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#489
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#532
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#500
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#605
  def visit_def_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#638
  def visit_defined_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#646
  def visit_else_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#654
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#664
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#672
  def visit_ensure_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#680
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#688
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#696
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#708
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#716
  def visit_for_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#724
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#732
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#743
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#778
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#770
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#786
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#751
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#794
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#762
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#802
  def visit_hash_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#810
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#833
  def visit_if_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#838
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#846
  def visit_implicit_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#853
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#860
  def visit_in_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#890
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#875
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#905
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#920
  def visit_index_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#958
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#950
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#966
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#931
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#974
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#942
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#982
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#990
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1009
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1026
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1035
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1044
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1127
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1135
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1146
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1151
  def visit_lambda_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1202
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1194
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1210
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1171
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1218
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1186
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1226
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1234
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1242
  def visit_match_required_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1250
  def visit_match_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1257
  def visit_missing_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1265
  def visit_module_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1287
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1299
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1325
  def visit_next_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1340
  def visit_nil_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1348
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1356
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1364
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1372
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1380
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1388
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1408
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1450
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1462
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1470
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1479
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1484
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1489
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1497
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1521
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1529
  def visit_redo_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1537
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1545
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1553
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1561
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1569
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1591
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1599
  def visit_retry_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1610
  def visit_return_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1625
  def visit_self_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1630
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1638
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1648
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1657
  def visit_source_file_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1665
  def visit_source_line_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1679
  def visit_splat_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1688
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1702
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1717
  def visit_super_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1733
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1741
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1749
  def visit_undef_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1761
  def visit_unless_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1772
  def visit_until_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1780
  def visit_when_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1791
  def visit_while_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1799
  def visit_x_string_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1817
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/translation/ruby_parser.rb#481
  def class_variable_write_type; end

  # source://prism//lib/prism/translation/ruby_parser.rb#1824
  def copy_compiler(in_def: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ruby_parser.rb#364
  def op_asgn?(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#370
  def op_asgn_type(node, type); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1829
  def s(node, *arguments); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1839
  def visit_block(node, sexp, block); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1425
  def visit_destructured_parameter(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1051
  def visit_interpolated_parts(parts); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1860
  def visit_pattern_constant(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1509
  def visit_range_bounds_node(node); end

  # source://prism//lib/prism/translation/ruby_parser.rb#1874
  def visit_write_value(node); end
end

# source://prism//lib/prism/node.rb#17539
class Prism::TrueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17541
  sig { params(source: Prism::Source, node_id: Integer, location: Prism::Location, flags: Integer).void }
  def initialize(source, node_id, location, flags); end

  # source://prism//lib/prism/node.rb#17598
  def ===(other); end

  # source://prism//lib/prism/node.rb#17549
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17554
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17564
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17559
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17569
  sig { params(node_id: Integer, location: Prism::Location, flags: Integer).returns(Prism::TrueNode) }
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17554
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17577
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17582
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17587
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17592
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17607
class Prism::UndefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17609
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location
    ).void
  end
  def initialize(source, node_id, location, flags, names, keyword_loc); end

  # source://prism//lib/prism/node.rb#17689
  def ===(other); end

  # source://prism//lib/prism/node.rb#17619
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17624
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17634
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17629
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17639
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location
    ).returns(Prism::UndefNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), names: T.unsafe(nil), keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17624
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17647
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17673
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17668
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17655
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#17652
  sig { returns(T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)]) }
  def names; end

  # source://prism//lib/prism/node.rb#17663
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#17678
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17683
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17704
class Prism::UnlessNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17706
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      else_clause: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, predicate, then_keyword_loc, statements, else_clause, end_keyword_loc); end

  # source://prism//lib/prism/node.rb#17873
  def ===(other); end

  # source://prism//lib/prism/node.rb#17720
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17725
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17739
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17730
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node_ext.rb#506
  def consequent; end

  # source://prism//lib/prism/node.rb#17744
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      else_clause: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location)
    ).returns(Prism::UnlessNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), predicate: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil), else_clause: T.unsafe(nil), end_keyword_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17725
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17752
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17817
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#17852
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#17823
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#17857
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#17842
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17763
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/parse_result/newlines.rb#98
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#17782
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#17837
  def save_end_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#17771
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#17802
  def save_then_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#17811
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#17847
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#17788
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#17862
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17867
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17891
class Prism::UntilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17893
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, do_keyword_loc, closing_loc, predicate, statements); end

  # source://prism//lib/prism/node.rb#18035
  def ===(other); end

  # source://prism//lib/prism/node.rb#17906
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17942
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#17911
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18014
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#17979
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17924
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17916
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17929
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode)
    ).returns(Prism::UntilNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), predicate: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17911
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17937
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18009
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#17960
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18019
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18004
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17947
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/parse_result/newlines.rb#104
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#17998
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#17993
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#17974
  def save_do_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#17955
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#18001
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18024
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18029
    def type; end
  end
end

Prism::VERSION = T.let(T.unsafe(nil), String)

# source://prism//lib/prism/visitor.rb#57
class Prism::Visitor < ::Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#59
  sig { params(node: Prism::AliasGlobalVariableNode).void }
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#64
  sig { params(node: Prism::AliasMethodNode).void }
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/visitor.rb#69
  sig { params(node: Prism::AlternationPatternNode).void }
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#74
  sig { params(node: Prism::AndNode).void }
  def visit_and_node(node); end

  # source://prism//lib/prism/visitor.rb#79
  sig { params(node: Prism::ArgumentsNode).void }
  def visit_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#84
  sig { params(node: Prism::ArrayNode).void }
  def visit_array_node(node); end

  # source://prism//lib/prism/visitor.rb#89
  sig { params(node: Prism::ArrayPatternNode).void }
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#94
  sig { params(node: Prism::AssocNode).void }
  def visit_assoc_node(node); end

  # source://prism//lib/prism/visitor.rb#99
  sig { params(node: Prism::AssocSplatNode).void }
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#104
  sig { params(node: Prism::BackReferenceReadNode).void }
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#109
  sig { params(node: Prism::BeginNode).void }
  def visit_begin_node(node); end

  # source://prism//lib/prism/visitor.rb#114
  sig { params(node: Prism::BlockArgumentNode).void }
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/visitor.rb#119
  sig { params(node: Prism::BlockLocalVariableNode).void }
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#124
  sig { params(node: Prism::BlockNode).void }
  def visit_block_node(node); end

  # source://prism//lib/prism/visitor.rb#129
  sig { params(node: Prism::BlockParameterNode).void }
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#134
  sig { params(node: Prism::BlockParametersNode).void }
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#139
  sig { params(node: Prism::BreakNode).void }
  def visit_break_node(node); end

  # source://prism//lib/prism/visitor.rb#144
  sig { params(node: Prism::CallAndWriteNode).void }
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#149
  sig { params(node: Prism::CallNode).void }
  def visit_call_node(node); end

  # source://prism//lib/prism/visitor.rb#154
  sig { params(node: Prism::CallOperatorWriteNode).void }
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#159
  sig { params(node: Prism::CallOrWriteNode).void }
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#164
  sig { params(node: Prism::CallTargetNode).void }
  def visit_call_target_node(node); end

  # source://prism//lib/prism/visitor.rb#169
  sig { params(node: Prism::CapturePatternNode).void }
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#174
  sig { params(node: Prism::CaseMatchNode).void }
  def visit_case_match_node(node); end

  # source://prism//lib/prism/visitor.rb#179
  sig { params(node: Prism::CaseNode).void }
  def visit_case_node(node); end

  # source://prism//lib/prism/visitor.rb#184
  sig { params(node: Prism::ClassNode).void }
  def visit_class_node(node); end

  # source://prism//lib/prism/visitor.rb#189
  sig { params(node: Prism::ClassVariableAndWriteNode).void }
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#194
  sig { params(node: Prism::ClassVariableOperatorWriteNode).void }
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#199
  sig { params(node: Prism::ClassVariableOrWriteNode).void }
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#204
  sig { params(node: Prism::ClassVariableReadNode).void }
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#209
  sig { params(node: Prism::ClassVariableTargetNode).void }
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#214
  sig { params(node: Prism::ClassVariableWriteNode).void }
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#219
  sig { params(node: Prism::ConstantAndWriteNode).void }
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#224
  sig { params(node: Prism::ConstantOperatorWriteNode).void }
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#229
  sig { params(node: Prism::ConstantOrWriteNode).void }
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#234
  sig { params(node: Prism::ConstantPathAndWriteNode).void }
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#239
  sig { params(node: Prism::ConstantPathNode).void }
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/visitor.rb#244
  sig { params(node: Prism::ConstantPathOperatorWriteNode).void }
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#249
  sig { params(node: Prism::ConstantPathOrWriteNode).void }
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#254
  sig { params(node: Prism::ConstantPathTargetNode).void }
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/visitor.rb#259
  sig { params(node: Prism::ConstantPathWriteNode).void }
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/visitor.rb#264
  sig { params(node: Prism::ConstantReadNode).void }
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/visitor.rb#269
  sig { params(node: Prism::ConstantTargetNode).void }
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/visitor.rb#274
  sig { params(node: Prism::ConstantWriteNode).void }
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/visitor.rb#279
  sig { params(node: Prism::DefNode).void }
  def visit_def_node(node); end

  # source://prism//lib/prism/visitor.rb#284
  sig { params(node: Prism::DefinedNode).void }
  def visit_defined_node(node); end

  # source://prism//lib/prism/visitor.rb#289
  sig { params(node: Prism::ElseNode).void }
  def visit_else_node(node); end

  # source://prism//lib/prism/visitor.rb#294
  sig { params(node: Prism::EmbeddedStatementsNode).void }
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#299
  sig { params(node: Prism::EmbeddedVariableNode).void }
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#304
  sig { params(node: Prism::EnsureNode).void }
  def visit_ensure_node(node); end

  # source://prism//lib/prism/visitor.rb#309
  sig { params(node: Prism::FalseNode).void }
  def visit_false_node(node); end

  # source://prism//lib/prism/visitor.rb#314
  sig { params(node: Prism::FindPatternNode).void }
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#319
  sig { params(node: Prism::FlipFlopNode).void }
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/visitor.rb#324
  sig { params(node: Prism::FloatNode).void }
  def visit_float_node(node); end

  # source://prism//lib/prism/visitor.rb#329
  sig { params(node: Prism::ForNode).void }
  def visit_for_node(node); end

  # source://prism//lib/prism/visitor.rb#334
  sig { params(node: Prism::ForwardingArgumentsNode).void }
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#339
  sig { params(node: Prism::ForwardingParameterNode).void }
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#344
  sig { params(node: Prism::ForwardingSuperNode).void }
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/visitor.rb#349
  sig { params(node: Prism::GlobalVariableAndWriteNode).void }
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#354
  sig { params(node: Prism::GlobalVariableOperatorWriteNode).void }
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#359
  sig { params(node: Prism::GlobalVariableOrWriteNode).void }
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#364
  sig { params(node: Prism::GlobalVariableReadNode).void }
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#369
  sig { params(node: Prism::GlobalVariableTargetNode).void }
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#374
  sig { params(node: Prism::GlobalVariableWriteNode).void }
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#379
  sig { params(node: Prism::HashNode).void }
  def visit_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#384
  sig { params(node: Prism::HashPatternNode).void }
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#389
  sig { params(node: Prism::IfNode).void }
  def visit_if_node(node); end

  # source://prism//lib/prism/visitor.rb#394
  sig { params(node: Prism::ImaginaryNode).void }
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/visitor.rb#399
  sig { params(node: Prism::ImplicitNode).void }
  def visit_implicit_node(node); end

  # source://prism//lib/prism/visitor.rb#404
  sig { params(node: Prism::ImplicitRestNode).void }
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/visitor.rb#409
  sig { params(node: Prism::InNode).void }
  def visit_in_node(node); end

  # source://prism//lib/prism/visitor.rb#414
  sig { params(node: Prism::IndexAndWriteNode).void }
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#419
  sig { params(node: Prism::IndexOperatorWriteNode).void }
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#424
  sig { params(node: Prism::IndexOrWriteNode).void }
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#429
  sig { params(node: Prism::IndexTargetNode).void }
  def visit_index_target_node(node); end

  # source://prism//lib/prism/visitor.rb#434
  sig { params(node: Prism::InstanceVariableAndWriteNode).void }
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#439
  sig { params(node: Prism::InstanceVariableOperatorWriteNode).void }
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#444
  sig { params(node: Prism::InstanceVariableOrWriteNode).void }
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#449
  sig { params(node: Prism::InstanceVariableReadNode).void }
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#454
  sig { params(node: Prism::InstanceVariableTargetNode).void }
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#459
  sig { params(node: Prism::InstanceVariableWriteNode).void }
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#464
  sig { params(node: Prism::IntegerNode).void }
  def visit_integer_node(node); end

  # source://prism//lib/prism/visitor.rb#469
  sig { params(node: Prism::InterpolatedMatchLastLineNode).void }
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#474
  sig { params(node: Prism::InterpolatedRegularExpressionNode).void }
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#479
  sig { params(node: Prism::InterpolatedStringNode).void }
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/visitor.rb#484
  sig { params(node: Prism::InterpolatedSymbolNode).void }
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#489
  sig { params(node: Prism::InterpolatedXStringNode).void }
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#494
  sig { params(node: Prism::ItLocalVariableReadNode).void }
  def visit_it_local_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#499
  sig { params(node: Prism::ItParametersNode).void }
  def visit_it_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#504
  sig { params(node: Prism::KeywordHashNode).void }
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#509
  sig { params(node: Prism::KeywordRestParameterNode).void }
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#514
  sig { params(node: Prism::LambdaNode).void }
  def visit_lambda_node(node); end

  # source://prism//lib/prism/visitor.rb#519
  sig { params(node: Prism::LocalVariableAndWriteNode).void }
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#524
  sig { params(node: Prism::LocalVariableOperatorWriteNode).void }
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#529
  sig { params(node: Prism::LocalVariableOrWriteNode).void }
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#534
  sig { params(node: Prism::LocalVariableReadNode).void }
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#539
  sig { params(node: Prism::LocalVariableTargetNode).void }
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#544
  sig { params(node: Prism::LocalVariableWriteNode).void }
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#549
  sig { params(node: Prism::MatchLastLineNode).void }
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#554
  sig { params(node: Prism::MatchPredicateNode).void }
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/visitor.rb#559
  sig { params(node: Prism::MatchRequiredNode).void }
  def visit_match_required_node(node); end

  # source://prism//lib/prism/visitor.rb#564
  sig { params(node: Prism::MatchWriteNode).void }
  def visit_match_write_node(node); end

  # source://prism//lib/prism/visitor.rb#569
  sig { params(node: Prism::MissingNode).void }
  def visit_missing_node(node); end

  # source://prism//lib/prism/visitor.rb#574
  sig { params(node: Prism::ModuleNode).void }
  def visit_module_node(node); end

  # source://prism//lib/prism/visitor.rb#579
  sig { params(node: Prism::MultiTargetNode).void }
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/visitor.rb#584
  sig { params(node: Prism::MultiWriteNode).void }
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/visitor.rb#589
  sig { params(node: Prism::NextNode).void }
  def visit_next_node(node); end

  # source://prism//lib/prism/visitor.rb#594
  sig { params(node: Prism::NilNode).void }
  def visit_nil_node(node); end

  # source://prism//lib/prism/visitor.rb#599
  sig { params(node: Prism::NoKeywordsParameterNode).void }
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#604
  sig { params(node: Prism::NumberedParametersNode).void }
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#609
  sig { params(node: Prism::NumberedReferenceReadNode).void }
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#614
  sig { params(node: Prism::OptionalKeywordParameterNode).void }
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#619
  sig { params(node: Prism::OptionalParameterNode).void }
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#624
  sig { params(node: Prism::OrNode).void }
  def visit_or_node(node); end

  # source://prism//lib/prism/visitor.rb#629
  sig { params(node: Prism::ParametersNode).void }
  def visit_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#634
  sig { params(node: Prism::ParenthesesNode).void }
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/visitor.rb#639
  sig { params(node: Prism::PinnedExpressionNode).void }
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#644
  sig { params(node: Prism::PinnedVariableNode).void }
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#649
  sig { params(node: Prism::PostExecutionNode).void }
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#654
  sig { params(node: Prism::PreExecutionNode).void }
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#659
  sig { params(node: Prism::ProgramNode).void }
  def visit_program_node(node); end

  # source://prism//lib/prism/visitor.rb#664
  sig { params(node: Prism::RangeNode).void }
  def visit_range_node(node); end

  # source://prism//lib/prism/visitor.rb#669
  sig { params(node: Prism::RationalNode).void }
  def visit_rational_node(node); end

  # source://prism//lib/prism/visitor.rb#674
  sig { params(node: Prism::RedoNode).void }
  def visit_redo_node(node); end

  # source://prism//lib/prism/visitor.rb#679
  sig { params(node: Prism::RegularExpressionNode).void }
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#684
  sig { params(node: Prism::RequiredKeywordParameterNode).void }
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#689
  sig { params(node: Prism::RequiredParameterNode).void }
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#694
  sig { params(node: Prism::RescueModifierNode).void }
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/visitor.rb#699
  sig { params(node: Prism::RescueNode).void }
  def visit_rescue_node(node); end

  # source://prism//lib/prism/visitor.rb#704
  sig { params(node: Prism::RestParameterNode).void }
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#709
  sig { params(node: Prism::RetryNode).void }
  def visit_retry_node(node); end

  # source://prism//lib/prism/visitor.rb#714
  sig { params(node: Prism::ReturnNode).void }
  def visit_return_node(node); end

  # source://prism//lib/prism/visitor.rb#719
  sig { params(node: Prism::SelfNode).void }
  def visit_self_node(node); end

  # source://prism//lib/prism/visitor.rb#724
  sig { params(node: Prism::ShareableConstantNode).void }
  def visit_shareable_constant_node(node); end

  # source://prism//lib/prism/visitor.rb#729
  sig { params(node: Prism::SingletonClassNode).void }
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/visitor.rb#734
  sig { params(node: Prism::SourceEncodingNode).void }
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/visitor.rb#739
  sig { params(node: Prism::SourceFileNode).void }
  def visit_source_file_node(node); end

  # source://prism//lib/prism/visitor.rb#744
  sig { params(node: Prism::SourceLineNode).void }
  def visit_source_line_node(node); end

  # source://prism//lib/prism/visitor.rb#749
  sig { params(node: Prism::SplatNode).void }
  def visit_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#754
  sig { params(node: Prism::StatementsNode).void }
  def visit_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#759
  sig { params(node: Prism::StringNode).void }
  def visit_string_node(node); end

  # source://prism//lib/prism/visitor.rb#764
  sig { params(node: Prism::SuperNode).void }
  def visit_super_node(node); end

  # source://prism//lib/prism/visitor.rb#769
  sig { params(node: Prism::SymbolNode).void }
  def visit_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#774
  sig { params(node: Prism::TrueNode).void }
  def visit_true_node(node); end

  # source://prism//lib/prism/visitor.rb#779
  sig { params(node: Prism::UndefNode).void }
  def visit_undef_node(node); end

  # source://prism//lib/prism/visitor.rb#784
  sig { params(node: Prism::UnlessNode).void }
  def visit_unless_node(node); end

  # source://prism//lib/prism/visitor.rb#789
  sig { params(node: Prism::UntilNode).void }
  def visit_until_node(node); end

  # source://prism//lib/prism/visitor.rb#794
  sig { params(node: Prism::WhenNode).void }
  def visit_when_node(node); end

  # source://prism//lib/prism/visitor.rb#799
  sig { params(node: Prism::WhileNode).void }
  def visit_while_node(node); end

  # source://prism//lib/prism/visitor.rb#804
  sig { params(node: Prism::XStringNode).void }
  def visit_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#809
  sig { params(node: Prism::YieldNode).void }
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#18052
class Prism::WhenNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18054
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, conditions, then_keyword_loc, statements); end

  # source://prism//lib/prism/node.rb#18166
  def ===(other); end

  # source://prism//lib/prism/node.rb#18066
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18071
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18084
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18076
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18115
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#18089
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode)
    ).returns(Prism::WhenNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), conditions: T.unsafe(nil), then_keyword_loc: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18071
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18097
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18150
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18140
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18102
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18110
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#18132
  def save_then_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#18137
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18145
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#18118
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#18155
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18160
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18183
class Prism::WhileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18185
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, do_keyword_loc, closing_loc, predicate, statements); end

  # source://prism//lib/prism/node.rb#18327
  def ===(other); end

  # source://prism//lib/prism/node.rb#18198
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18234
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#18203
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18306
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18271
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18216
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18208
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18221
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode)
    ).returns(Prism::WhileNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), do_keyword_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), predicate: T.unsafe(nil), statements: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18203
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18229
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18301
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#18252
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18311
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18296
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18239
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/parse_result/newlines.rb#110
  def newline_flag!(lines); end

  # source://prism//lib/prism/node.rb#18290
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18285
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#18266
  def save_do_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#18247
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#18293
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18316
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18321
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18342
class Prism::XStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#18344
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).void
  end
  def initialize(source, node_id, location, flags, opening_loc, content_loc, closing_loc, unescaped); end

  # source://prism//lib/prism/node.rb#18472
  def ===(other); end

  # source://prism//lib/prism/node.rb#18356
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18361
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18451
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#18425
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18371
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18366
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18446
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#18412
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#18376
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String
    ).returns(Prism::XStringNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), opening_loc: T.unsafe(nil), content_loc: T.unsafe(nil), closing_loc: T.unsafe(nil), unescaped: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18361
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18384
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18394
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#18389
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  # source://prism//lib/prism/node.rb#18456
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18441
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#18399
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#18433
  def save_closing_loc(repository); end

  # source://prism//lib/prism/node.rb#18420
  def save_content_loc(repository); end

  # source://prism//lib/prism/node.rb#18407
  def save_opening_loc(repository); end

  # source://prism//lib/prism/node_ext.rb#93
  sig { returns(Prism::InterpolatedXStringNode) }
  def to_interpolated; end

  # source://prism//lib/prism/node.rb#18461
  sig { override.returns(Symbol) }
  def type; end

  # source://prism//lib/prism/node.rb#18438
  sig { returns(String) }
  def unescaped; end

  class << self
    # source://prism//lib/prism/node.rb#18466
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18486
class Prism::YieldNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18488
  sig do
    params(
      source: Prism::Source,
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location)
    ).void
  end
  def initialize(source, node_id, location, flags, keyword_loc, lparen_loc, arguments, rparen_loc); end

  # source://prism//lib/prism/node.rb#18620
  def ===(other); end

  # source://prism//lib/prism/node.rb#18500
  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18567
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#18505
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18517
  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18510
  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18522
  sig do
    params(
      node_id: Integer,
      location: Prism::Location,
      flags: Integer,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location)
    ).returns(Prism::YieldNode)
  end
  def copy(node_id: T.unsafe(nil), location: T.unsafe(nil), flags: T.unsafe(nil), keyword_loc: T.unsafe(nil), lparen_loc: T.unsafe(nil), arguments: T.unsafe(nil), rparen_loc: T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18505
  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18530
  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  # source://prism//lib/prism/node.rb#18604
  sig { override.returns(String) }
  def inspect; end

  # source://prism//lib/prism/node.rb#18589
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18535
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18594
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#18548
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#18599
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#18570
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#18543
  def save_keyword_loc(repository); end

  # source://prism//lib/prism/node.rb#18562
  def save_lparen_loc(repository); end

  # source://prism//lib/prism/node.rb#18584
  def save_rparen_loc(repository); end

  # source://prism//lib/prism/node.rb#18609
  sig { override.returns(Symbol) }
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18614
    def type; end
  end
end
