# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `uri` gem.
# Please instead update this file by running `bin/tapioca gem uri`.


# source://uri//lib/uri/common.rb#856
module Kernel
  private

  # source://uri//lib/uri/common.rb#869
  def URI(uri); end

  class << self
    # source://uri//lib/uri/common.rb#869
    def URI(uri); end
  end
end

# source://uri//lib/uri.rb#90
module URI
  class << self
    # source://uri//lib/uri/common.rb#47
    def const_missing(const); end

    # source://uri//lib/uri/common.rb#406
    def decode_uri_component(str, enc = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#581
    def decode_www_form(str, enc = T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#395
    def decode_www_form_component(str, enc = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#401
    def encode_uri_component(str, enc = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#528
    def encode_www_form(enum, enc = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#362
    def encode_www_form_component(str, enc = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#266
    def extract(str, schemes = T.unsafe(nil), &block); end

    # source://uri//lib/uri/common.rb#150
    def for(scheme, *arguments, default: T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#851
    def get_encoding(label); end

    # source://uri//lib/uri/common.rb#238
    def join(*str); end

    # source://uri//lib/uri/common.rb#211
    def parse(uri); end

    # source://uri//lib/uri/common.rb#29
    def parser=(parser = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#303
    def regexp(schemes = T.unsafe(nil)); end

    # source://uri//lib/uri/common.rb#106
    def register_scheme(scheme, klass); end

    # source://uri//lib/uri/common.rb#124
    def scheme_list; end

    # source://uri//lib/uri/common.rb#197
    def split(uri); end

    private

    # source://uri//lib/uri/common.rb#424
    def _decode_uri_component(regexp, str, enc); end

    # source://uri//lib/uri/common.rb#410
    def _encode_uri_component(regexp, table, str, enc); end
  end
end

# source://uri//lib/uri/ftp.rb#22
class URI::FTP < ::URI::Generic
  # source://uri//lib/uri/ftp.rb#133
  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = T.unsafe(nil), arg_check = T.unsafe(nil)); end

  # source://uri//lib/uri/ftp.rb#214
  def merge(oth); end

  # source://uri//lib/uri/ftp.rb#240
  def path; end

  # source://uri//lib/uri/ftp.rb#251
  def to_s; end

  # source://uri//lib/uri/ftp.rb#161
  def typecode; end

  # source://uri//lib/uri/ftp.rb#208
  def typecode=(typecode); end

  protected

  # source://uri//lib/uri/ftp.rb#245
  def set_path(v); end

  # source://uri//lib/uri/ftp.rb#180
  def set_typecode(v); end

  private

  # source://uri//lib/uri/ftp.rb#166
  def check_typecode(v); end

  class << self
    # source://uri//lib/uri/ftp.rb#96
    def build(args); end

    # source://uri//lib/uri/ftp.rb#47
    def new2(user, password, host, port, path, typecode = T.unsafe(nil), arg_check = T.unsafe(nil)); end
  end
end

# source://uri//lib/uri/file.rb#10
class URI::File < ::URI::Generic
  # source://uri//lib/uri/file.rb#82
  def check_password(user); end

  # source://uri//lib/uri/file.rb#77
  def check_user(user); end

  # source://uri//lib/uri/file.rb#72
  def check_userinfo(user); end

  # source://uri//lib/uri/file.rb#62
  def set_host(v); end

  # source://uri//lib/uri/file.rb#95
  def set_password(v); end

  # source://uri//lib/uri/file.rb#68
  def set_port(v); end

  # source://uri//lib/uri/file.rb#91
  def set_user(v); end

  # source://uri//lib/uri/file.rb#87
  def set_userinfo(v); end

  class << self
    # source://uri//lib/uri/file.rb#53
    def build(args); end
  end
end

# source://uri//lib/uri/file.rb#17
URI::File::COMPONENT = T.let(T.unsafe(nil), Array)

# source://uri//lib/uri/file.rb#12
URI::File::DEFAULT_PORT = T.let(T.unsafe(nil), T.untyped)

# source://uri//lib/uri/generic.rb#21
class URI::Generic
  include ::URI

  # source://uri//lib/uri/generic.rb#169
  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = T.unsafe(nil), arg_check = T.unsafe(nil)); end

  # source://uri//lib/uri/generic.rb#1109
  def +(oth); end

  # source://uri//lib/uri/generic.rb#1261
  def -(oth); end

  # source://uri//lib/uri/generic.rb#1386
  def ==(oth); end

  # source://uri//lib/uri/generic.rb#972
  def absolute; end

  # source://uri//lib/uri/generic.rb#972
  def absolute?; end

  # source://uri//lib/uri/generic.rb#1465
  def coerce(oth); end

  # source://uri//lib/uri/generic.rb#313
  def component; end

  # source://uri//lib/uri/generic.rb#583
  def decoded_password; end

  # source://uri//lib/uri/generic.rb#578
  def decoded_user; end

  # source://uri//lib/uri/generic.rb#39
  def default_port; end

  # source://uri//lib/uri/generic.rb#1400
  def eql?(oth); end

  # source://uri//lib/uri/generic.rb#1491
  def find_proxy(env = T.unsafe(nil)); end

  # source://uri//lib/uri/generic.rb#283
  def fragment; end

  # source://uri//lib/uri/generic.rb#929
  def fragment=(v); end

  # source://uri//lib/uri/generic.rb#1395
  def hash; end

  # source://uri//lib/uri/generic.rb#961
  def hierarchical?; end

  # source://uri//lib/uri/generic.rb#243
  def host; end

  # source://uri//lib/uri/generic.rb#639
  def host=(v); end

  # source://uri//lib/uri/generic.rb#654
  def hostname; end

  # source://uri//lib/uri/generic.rb#671
  def hostname=(v); end

  # source://uri//lib/uri/generic.rb#1442
  def inspect; end

  # source://uri//lib/uri/generic.rb#1109
  def merge(oth); end

  # source://uri//lib/uri/generic.rb#1081
  def merge!(oth); end

  # source://uri//lib/uri/generic.rb#1318
  def normalize; end

  # source://uri//lib/uri/generic.rb#1327
  def normalize!; end

  # source://uri//lib/uri/generic.rb#277
  def opaque; end

  # source://uri//lib/uri/generic.rb#901
  def opaque=(v); end

  # source://uri//lib/uri/generic.rb#289
  def parser; end

  # source://uri//lib/uri/generic.rb#573
  def password; end

  # source://uri//lib/uri/generic.rb#498
  def password=(password); end

  # source://uri//lib/uri/generic.rb#260
  def path; end

  # source://uri//lib/uri/generic.rb#815
  def path=(v); end

  # source://uri//lib/uri/generic.rb#250
  def port; end

  # source://uri//lib/uri/generic.rb#729
  def port=(v); end

  # source://uri//lib/uri/generic.rb#266
  def query; end

  # source://uri//lib/uri/generic.rb#839
  def query=(v); end

  # source://uri//lib/uri/generic.rb#252
  def registry; end

  # source://uri//lib/uri/generic.rb#745
  def registry=(v); end

  # source://uri//lib/uri/generic.rb#984
  def relative?; end

  # source://uri//lib/uri/generic.rb#1261
  def route_from(oth); end

  # source://uri//lib/uri/generic.rb#1301
  def route_to(oth); end

  # source://uri//lib/uri/generic.rb#221
  def scheme; end

  # source://uri//lib/uri/generic.rb#360
  def scheme=(v); end

  # source://uri//lib/uri/generic.rb#1431
  def select(*components); end

  # source://uri//lib/uri/generic.rb#1342
  def to_s; end

  # source://uri//lib/uri/generic.rb#1342
  def to_str; end

  # source://uri//lib/uri/generic.rb#568
  def user; end

  # source://uri//lib/uri/generic.rb#471
  def user=(user); end

  # source://uri//lib/uri/generic.rb#557
  def userinfo; end

  # source://uri//lib/uri/generic.rb#441
  def userinfo=(userinfo); end

  protected

  # source://uri//lib/uri/generic.rb#1407
  def component_ary; end

  # source://uri//lib/uri/generic.rb#613
  def set_host(v); end

  # source://uri//lib/uri/generic.rb#883
  def set_opaque(v); end

  # source://uri//lib/uri/generic.rb#534
  def set_password(v); end

  # source://uri//lib/uri/generic.rb#789
  def set_path(v); end

  # source://uri//lib/uri/generic.rb#702
  def set_port(v); end

  # source://uri//lib/uri/generic.rb#740
  def set_registry(v); end

  # source://uri//lib/uri/generic.rb#334
  def set_scheme(v); end

  # source://uri//lib/uri/generic.rb#524
  def set_user(v); end

  # source://uri//lib/uri/generic.rb#509
  def set_userinfo(user, password = T.unsafe(nil)); end

  private

  # source://uri//lib/uri/generic.rb#594
  def check_host(v); end

  # source://uri//lib/uri/generic.rb#861
  def check_opaque(v); end

  # source://uri//lib/uri/generic.rb#417
  def check_password(v, user = T.unsafe(nil)); end

  # source://uri//lib/uri/generic.rb#757
  def check_path(v); end

  # source://uri//lib/uri/generic.rb#683
  def check_port(v); end

  # source://uri//lib/uri/generic.rb#735
  def check_registry(v); end

  # source://uri//lib/uri/generic.rb#320
  def check_scheme(v); end

  # source://uri//lib/uri/generic.rb#393
  def check_user(v); end

  # source://uri//lib/uri/generic.rb#375
  def check_userinfo(user, password = T.unsafe(nil)); end

  # source://uri//lib/uri/generic.rb#551
  def escape_userpass(v); end

  # source://uri//lib/uri/generic.rb#1000
  def merge_path(base, rel); end

  # source://uri//lib/uri/generic.rb#299
  def replace!(oth); end

  # source://uri//lib/uri/generic.rb#1193
  def route_from0(oth); end

  # source://uri//lib/uri/generic.rb#1154
  def route_from_path(src, dst); end

  # source://uri//lib/uri/generic.rb#991
  def split_path(path); end

  # source://uri//lib/uri/generic.rb#542
  def split_userinfo(ui); end

  class << self
    # source://uri//lib/uri/generic.rb#116
    def build(args); end

    # source://uri//lib/uri/generic.rb#78
    def build2(args); end

    # source://uri//lib/uri/generic.rb#57
    def component; end

    # source://uri//lib/uri/generic.rb#32
    def default_port; end

    # source://uri//lib/uri/generic.rb#1557
    def use_proxy?(hostname, addr, port, no_proxy); end

    # source://uri//lib/uri/generic.rb#63
    def use_registry; end
  end
end

# source://uri//lib/uri/http.rb#22
class URI::HTTP < ::URI::Generic
  # source://uri//lib/uri/http.rb#97
  def authority; end

  # source://uri//lib/uri/http.rb#119
  def origin; end

  # source://uri//lib/uri/http.rb#77
  def request_uri; end

  class << self
    # source://uri//lib/uri/http.rb#59
    def build(args); end
  end
end

# source://uri//lib/uri/common.rb#130
URI::INITIAL_SCHEMES = T.let(T.unsafe(nil), Hash)

# source://uri//lib/uri/ldap.rb#23
class URI::LDAP < ::URI::Generic
  # source://uri//lib/uri/ldap.rb#108
  def initialize(*arg); end

  # source://uri//lib/uri/ldap.rb#178
  def attributes; end

  # source://uri//lib/uri/ldap.rb#191
  def attributes=(val); end

  # source://uri//lib/uri/ldap.rb#159
  def dn; end

  # source://uri//lib/uri/ldap.rb#172
  def dn=(val); end

  # source://uri//lib/uri/ldap.rb#235
  def extensions; end

  # source://uri//lib/uri/ldap.rb#248
  def extensions=(val); end

  # source://uri//lib/uri/ldap.rb#216
  def filter; end

  # source://uri//lib/uri/ldap.rb#229
  def filter=(val); end

  # source://uri//lib/uri/ldap.rb#255
  def hierarchical?; end

  # source://uri//lib/uri/ldap.rb#197
  def scope; end

  # source://uri//lib/uri/ldap.rb#210
  def scope=(val); end

  protected

  # source://uri//lib/uri/ldap.rb#183
  def set_attributes(val); end

  # source://uri//lib/uri/ldap.rb#164
  def set_dn(val); end

  # source://uri//lib/uri/ldap.rb#240
  def set_extensions(val); end

  # source://uri//lib/uri/ldap.rb#221
  def set_filter(val); end

  # source://uri//lib/uri/ldap.rb#202
  def set_scope(val); end

  private

  # source://uri//lib/uri/ldap.rb#146
  def build_path_query; end

  # source://uri//lib/uri/ldap.rb#120
  def parse_dn; end

  # source://uri//lib/uri/ldap.rb#128
  def parse_query; end

  class << self
    # source://uri//lib/uri/ldap.rb#74
    def build(args); end
  end
end

# source://uri//lib/uri/mailto.rb#17
class URI::MailTo < ::URI::Generic
  include ::URI::RFC2396_REGEXP

  # source://uri//lib/uri/mailto.rb#132
  def initialize(*arg); end

  # source://uri//lib/uri/mailto.rb#166
  def headers; end

  # source://uri//lib/uri/mailto.rb#232
  def headers=(v); end

  # source://uri//lib/uri/mailto.rb#163
  def to; end

  # source://uri//lib/uri/mailto.rb#200
  def to=(v); end

  # source://uri//lib/uri/mailto.rb#268
  def to_mailtext; end

  # source://uri//lib/uri/mailto.rb#268
  def to_rfc822text; end

  # source://uri//lib/uri/mailto.rb#239
  def to_s; end

  protected

  # source://uri//lib/uri/mailto.rb#221
  def set_headers(v); end

  # source://uri//lib/uri/mailto.rb#194
  def set_to(v); end

  private

  # source://uri//lib/uri/mailto.rb#208
  def check_headers(v); end

  # source://uri//lib/uri/mailto.rb#169
  def check_to(v); end

  class << self
    # source://uri//lib/uri/mailto.rb#85
    def build(args); end
  end
end

# source://uri//lib/uri/rfc2396_parser.rb#64
class URI::RFC2396_Parser
  include ::URI::RFC2396_REGEXP

  # source://uri//lib/uri/rfc2396_parser.rb#99
  def initialize(opts = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc2396_parser.rb#287
  def escape(str, unsafe = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc2396_parser.rb#249
  def extract(str, schemes = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc2396_parser.rb#326
  def inspect; end

  # source://uri//lib/uri/rfc2396_parser.rb#223
  def join(*uris); end

  # source://uri//lib/uri/rfc2396_parser.rb#262
  def make_regexp(schemes = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc2396_parser.rb#209
  def parse(uri); end

  # source://uri//lib/uri/rfc2396_parser.rb#112
  def pattern; end

  # source://uri//lib/uri/rfc2396_parser.rb#117
  def regexp; end

  # source://uri//lib/uri/rfc2396_parser.rb#120
  def split(uri); end

  # source://uri//lib/uri/rfc2396_parser.rb#318
  def unescape(str, escaped = T.unsafe(nil)); end

  private

  # source://uri//lib/uri/rfc2396_parser.rb#527
  def convert_to_uri(uri); end

  # source://uri//lib/uri/rfc2396_parser.rb#338
  def initialize_pattern(opts = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc2396_parser.rb#496
  def initialize_regexp(pattern); end
end

# source://uri//lib/uri/rfc2396_parser.rb#324
URI::RFC2396_Parser::TO_S = T.let(T.unsafe(nil), UnboundMethod)

# source://uri//lib/uri/rfc3986_parser.rb#3
class URI::RFC3986_Parser
  # source://uri//lib/uri/rfc3986_parser.rb#73
  def initialize; end

  # source://uri//lib/uri/rfc3986_parser.rb#156
  def escape(str, unsafe = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc3986_parser.rb#144
  def extract(str, schemes = T.unsafe(nil), &block); end

  # source://uri//lib/uri/rfc3986_parser.rb#169
  def inspect; end

  # source://uri//lib/uri/rfc3986_parser.rb#138
  def join(*uris); end

  # source://uri//lib/uri/rfc3986_parser.rb#150
  def make_regexp(schemes = T.unsafe(nil)); end

  # source://uri//lib/uri/rfc3986_parser.rb#134
  def parse(uri); end

  # source://uri//lib/uri/rfc3986_parser.rb#71
  def regexp; end

  # source://uri//lib/uri/rfc3986_parser.rb#77
  def split(uri); end

  # source://uri//lib/uri/rfc3986_parser.rb#162
  def unescape(str, escaped = T.unsafe(nil)); end

  private

  # source://uri//lib/uri/rfc3986_parser.rb#194
  def convert_to_uri(uri); end

  # source://uri//lib/uri/rfc3986_parser.rb#180
  def default_regexp; end
end

# source://uri//lib/uri/rfc3986_parser.rb#33
URI::RFC3986_Parser::FRAGMENT = T.let(T.unsafe(nil), String)

# source://uri//lib/uri/rfc3986_parser.rb#5
URI::RFC3986_Parser::HOST = T.let(T.unsafe(nil), Regexp)

# source://uri//lib/uri/rfc3986_parser.rb#54
URI::RFC3986_Parser::RFC3986_relative_ref = T.let(T.unsafe(nil), Regexp)

# source://uri//lib/uri/rfc3986_parser.rb#30
URI::RFC3986_Parser::SCHEME = T.let(T.unsafe(nil), String)

# source://uri//lib/uri/rfc3986_parser.rb#31
URI::RFC3986_Parser::SEG = T.let(T.unsafe(nil), String)

# source://uri//lib/uri/rfc3986_parser.rb#32
URI::RFC3986_Parser::SEG_NC = T.let(T.unsafe(nil), String)

# source://uri//lib/uri/rfc3986_parser.rb#28
URI::RFC3986_Parser::USERINFO = T.let(T.unsafe(nil), Regexp)

# source://uri//lib/uri/common.rb#94
module URI::Schemes; end

# source://uri//lib/uri/common.rb#107
URI::Schemes::FILE = URI::File

# source://uri//lib/uri/common.rb#107
URI::Schemes::FTP = URI::FTP

# source://uri//lib/uri/common.rb#107
URI::Schemes::HTTP = URI::HTTP

# source://uri//lib/uri/common.rb#107
URI::Schemes::HTTPS = URI::HTTPS

# source://uri//lib/uri/common.rb#107
URI::Schemes::LDAP = URI::LDAP

# source://uri//lib/uri/common.rb#107
URI::Schemes::LDAPS = URI::LDAPS

# source://uri//lib/uri/common.rb#107
URI::Schemes::MAILTO = URI::MailTo

# source://uri//lib/uri/common.rb#107
URI::Schemes::SOURCE = Tapioca::SourceURI

# source://uri//lib/uri/common.rb#107
URI::Schemes::WS = URI::WS

# source://uri//lib/uri/common.rb#107
URI::Schemes::WSS = URI::WSS

# source://uri//lib/uri/common.rb#312
URI::TBLENCURICOMP_ = T.let(T.unsafe(nil), Hash)

# source://uri//lib/uri/common.rb#62
module URI::Util
  private

  # source://uri//lib/uri/common.rb#63
  def make_components_hash(klass, array_hash); end

  class << self
    # source://uri//lib/uri/common.rb#63
    def make_components_hash(klass, array_hash); end
  end
end

# source://uri//lib/uri/ws.rb#22
class URI::WS < ::URI::Generic
  # source://uri//lib/uri/ws.rb#74
  def request_uri; end

  class << self
    # source://uri//lib/uri/ws.rb#56
    def build(args); end
  end
end

# source://uri//lib/uri/wss.rb#17
class URI::WSS < ::URI::WS; end

# source://uri//lib/uri/wss.rb#19
URI::WSS::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)
