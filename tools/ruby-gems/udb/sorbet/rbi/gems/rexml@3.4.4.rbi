# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rexml` gem.
# Please instead update this file by running `bin/tapioca gem rexml`.


# source://rexml//lib/rexml/attlistdecl.rb#18
class REXML::AttlistDecl < ::REXML::Child
  include ::Enumerable

  # source://rexml//lib/rexml/attlistdecl.rb#29
  def initialize(source); end

  # source://rexml//lib/rexml/attlistdecl.rb#38
  def [](key); end

  # source://rexml//lib/rexml/attlistdecl.rb#50
  def each(&block); end

  # source://rexml//lib/rexml/attlistdecl.rb#22
  def element_name; end

  # source://rexml//lib/rexml/attlistdecl.rb#44
  def include?(key); end

  # source://rexml//lib/rexml/attlistdecl.rb#59
  def node_type; end

  # source://rexml//lib/rexml/attlistdecl.rb#55
  def write(out, indent = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/attribute.rb#10
class REXML::Attribute
  include ::REXML::Node
  include ::REXML::XMLTokens
  include ::REXML::Namespace

  # source://rexml//lib/rexml/attribute.rb#42
  def initialize(first, second = T.unsafe(nil), parent = T.unsafe(nil)); end

  # source://rexml//lib/rexml/attribute.rb#106
  def ==(other); end

  # source://rexml//lib/rexml/attribute.rb#161
  def clone; end

  # source://rexml//lib/rexml/attribute.rb#132
  def doctype; end

  # source://rexml//lib/rexml/attribute.rb#205
  def document; end

  # source://rexml//lib/rexml/attribute.rb#15
  def element; end

  # source://rexml//lib/rexml/attribute.rb#169
  def element=(element); end

  # source://rexml//lib/rexml/attribute.rb#111
  def hash; end

  # source://rexml//lib/rexml/attribute.rb#195
  def inspect; end

  # source://rexml//lib/rexml/attribute.rb#95
  def namespace(arg = T.unsafe(nil)); end

  # source://rexml//lib/rexml/attribute.rb#191
  def node_type; end

  # source://rexml//lib/rexml/attribute.rb#155
  def normalized=(new_normalized); end

  # source://rexml//lib/rexml/attribute.rb#70
  def prefix; end

  # source://rexml//lib/rexml/attribute.rb#182
  def remove; end

  # source://rexml//lib/rexml/attribute.rb#137
  def to_s; end

  # source://rexml//lib/rexml/attribute.rb#121
  def to_string; end

  # source://rexml//lib/rexml/attribute.rb#146
  def value; end

  # source://rexml//lib/rexml/attribute.rb#187
  def write(output, indent = T.unsafe(nil)); end

  # source://rexml//lib/rexml/attribute.rb#201
  def xpath; end
end

# source://rexml//lib/rexml/element.rb#2131
class REXML::Attributes < ::Hash
  # source://rexml//lib/rexml/element.rb#2150
  def initialize(element); end

  # source://rexml//lib/rexml/element.rb#2516
  def <<(attribute); end

  # source://rexml//lib/rexml/element.rb#2175
  def [](name); end

  # source://rexml//lib/rexml/element.rb#2358
  def []=(name, value); end

  # source://rexml//lib/rexml/element.rb#2516
  def add(attribute); end

  # source://rexml//lib/rexml/element.rb#2471
  def delete(attribute); end

  # source://rexml//lib/rexml/element.rb#2538
  def delete_all(name); end

  # source://rexml//lib/rexml/element.rb#2276
  def each; end

  # source://rexml//lib/rexml/element.rb#2243
  def each_attribute; end

  # source://rexml//lib/rexml/element.rb#2302
  def get_attribute(name); end

  # source://rexml//lib/rexml/element.rb#2564
  def get_attribute_ns(namespace, name); end

  # source://rexml//lib/rexml/element.rb#2214
  def length; end

  # source://rexml//lib/rexml/element.rb#2426
  def namespaces; end

  # source://rexml//lib/rexml/element.rb#2400
  def prefixes; end

  # source://rexml//lib/rexml/element.rb#2214
  def size; end

  # source://rexml//lib/rexml/element.rb#2196
  def to_a; end
end

# source://rexml//lib/rexml/cdata.rb#5
class REXML::CData < ::REXML::Text
  # source://rexml//lib/rexml/cdata.rb#16
  def initialize(first, whitespace = T.unsafe(nil), parent = T.unsafe(nil)); end

  # source://rexml//lib/rexml/cdata.rb#26
  def clone; end

  # source://rexml//lib/rexml/cdata.rb#35
  def to_s; end

  # source://rexml//lib/rexml/cdata.rb#39
  def value; end

  # source://rexml//lib/rexml/cdata.rb#60
  def write(output = T.unsafe(nil), indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/child.rb#9
class REXML::Child
  include ::REXML::Node

  # source://rexml//lib/rexml/child.rb#18
  def initialize(parent = T.unsafe(nil)); end

  # source://rexml//lib/rexml/child.rb#90
  def bytes; end

  # source://rexml//lib/rexml/child.rb#85
  def document; end

  # source://rexml//lib/rexml/node.rb#11
  def next_sibling; end

  # source://rexml//lib/rexml/child.rb#68
  def next_sibling=(other); end

  # source://rexml//lib/rexml/child.rb#11
  def parent; end

  # source://rexml//lib/rexml/child.rb#52
  def parent=(other); end

  # source://rexml//lib/rexml/node.rb#17
  def previous_sibling; end

  # source://rexml//lib/rexml/child.rb#79
  def previous_sibling=(other); end

  # source://rexml//lib/rexml/child.rb#37
  def remove; end

  # source://rexml//lib/rexml/child.rb#29
  def replace_with(child); end
end

# source://rexml//lib/rexml/comment.rb#7
class REXML::Comment < ::REXML::Child
  include ::Comparable

  # source://rexml//lib/rexml/comment.rb#24
  def initialize(first, second = T.unsafe(nil)); end

  # source://rexml//lib/rexml/comment.rb#63
  def <=>(other); end

  # source://rexml//lib/rexml/comment.rb#70
  def ==(other); end

  # source://rexml//lib/rexml/comment.rb#33
  def clone; end

  # source://rexml//lib/rexml/comment.rb#75
  def node_type; end

  # source://rexml//lib/rexml/comment.rb#14
  def string; end

  # source://rexml//lib/rexml/comment.rb#14
  def string=(_arg0); end

  # source://rexml//lib/rexml/comment.rb#14
  def to_s; end

  # source://rexml//lib/rexml/comment.rb#50
  def write(output, indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/xpath_parser.rb#11
module REXML::DClonable; end

# source://rexml//lib/rexml/doctype.rb#238
class REXML::Declaration < ::REXML::Child
  # source://rexml//lib/rexml/doctype.rb#239
  def initialize(src); end

  # source://rexml//lib/rexml/doctype.rb#244
  def to_s; end

  # source://rexml//lib/rexml/doctype.rb#251
  def write(output, indent); end
end

# source://rexml//lib/rexml/doctype.rb#51
class REXML::DocType < ::REXML::Parent
  include ::REXML::XMLTokens

  # source://rexml//lib/rexml/doctype.rb#80
  def initialize(first, parent = T.unsafe(nil)); end

  # source://rexml//lib/rexml/doctype.rb#181
  def add(child); end

  # source://rexml//lib/rexml/doctype.rb#125
  def attribute_of(element, attribute); end

  # source://rexml//lib/rexml/doctype.rb#115
  def attributes_of(element); end

  # source://rexml//lib/rexml/doctype.rb#135
  def clone; end

  # source://rexml//lib/rexml/doctype.rb#173
  def context; end

  # source://rexml//lib/rexml/doctype.rb#66
  def entities; end

  # source://rexml//lib/rexml/doctype.rb#177
  def entity(name); end

  # source://rexml//lib/rexml/doctype.rb#66
  def external_id; end

  # source://rexml//lib/rexml/doctype.rb#66
  def name; end

  # source://rexml//lib/rexml/doctype.rb#66
  def namespaces; end

  # source://rexml//lib/rexml/doctype.rb#111
  def node_type; end

  # source://rexml//lib/rexml/doctype.rb#225
  def notation(name); end

  # source://rexml//lib/rexml/doctype.rb#217
  def notations; end

  # source://rexml//lib/rexml/doctype.rb#191
  def public; end

  # source://rexml//lib/rexml/doctype.rb#203
  def system; end

  # source://rexml//lib/rexml/doctype.rb#149
  def write(output, indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/document.rb#35
class REXML::Document < ::REXML::Element
  # source://rexml//lib/rexml/document.rb#92
  def initialize(source = T.unsafe(nil), context = T.unsafe(nil)); end

  # source://rexml//lib/rexml/document.rb#174
  def <<(child); end

  # source://rexml//lib/rexml/document.rb#174
  def add(child); end

  # source://rexml//lib/rexml/document.rb#213
  def add_element(arg = T.unsafe(nil), arg2 = T.unsafe(nil)); end

  # source://rexml//lib/rexml/document.rb#124
  def clone; end

  # source://rexml//lib/rexml/document.rb#245
  def doctype; end

  # source://rexml//lib/rexml/document.rb#448
  def document; end

  # source://rexml//lib/rexml/document.rb#294
  def encoding; end

  # source://rexml//lib/rexml/document.rb#437
  def entity_expansion_count; end

  # source://rexml//lib/rexml/document.rb#438
  def entity_expansion_limit=(_arg0); end

  # source://rexml//lib/rexml/document.rb#439
  def entity_expansion_text_limit; end

  # source://rexml//lib/rexml/document.rb#439
  def entity_expansion_text_limit=(_arg0); end

  # source://rexml//lib/rexml/document.rb#133
  def expanded_name; end

  # source://rexml//lib/rexml/document.rb#133
  def name; end

  # source://rexml//lib/rexml/document.rb#114
  def node_type; end

  # source://rexml//lib/rexml/document.rb#441
  def record_entity_expansion; end

  # source://rexml//lib/rexml/document.rb#229
  def root; end

  # source://rexml//lib/rexml/document.rb#309
  def stand_alone?; end

  # source://rexml//lib/rexml/document.rb#279
  def version; end

  # source://rexml//lib/rexml/document.rb#369
  def write(*arguments); end

  # source://rexml//lib/rexml/document.rb#262
  def xml_decl; end

  private

  # source://rexml//lib/rexml/document.rb#467
  def build(source); end

  # source://rexml//lib/rexml/document.rb#458
  def enable_cache; end

  # source://rexml//lib/rexml/document.rb#454
  def namespaces_cache; end

  # source://rexml//lib/rexml/document.rb#454
  def namespaces_cache=(_arg0); end

  class << self
    # source://rexml//lib/rexml/document.rb#419
    def entity_expansion_limit; end

    # source://rexml//lib/rexml/document.rb#412
    def entity_expansion_limit=(val); end

    # source://rexml//lib/rexml/document.rb#433
    def entity_expansion_text_limit; end

    # source://rexml//lib/rexml/document.rb#426
    def entity_expansion_text_limit=(val); end

    # source://rexml//lib/rexml/document.rb#405
    def parse_stream(source, listener); end
  end
end

# source://rexml//lib/rexml/element.rb#271
class REXML::Element < ::REXML::Parent
  include ::REXML::XMLTokens
  include ::REXML::Namespace

  # source://rexml//lib/rexml/element.rb#319
  def initialize(arg = T.unsafe(nil), parent = T.unsafe(nil), context = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1238
  def [](name_or_index); end

  # source://rexml//lib/rexml/element.rb#1336
  def add_attribute(key, value = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1367
  def add_attributes(hash); end

  # source://rexml//lib/rexml/element.rb#725
  def add_element(element, attrs = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#648
  def add_namespace(prefix, uri = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1139
  def add_text(text); end

  # source://rexml//lib/rexml/element.rb#1279
  def attribute(name, namespace = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#278
  def attributes; end

  # source://rexml//lib/rexml/element.rb#1411
  def cdatas; end

  # source://rexml//lib/rexml/element.rb#383
  def clone; end

  # source://rexml//lib/rexml/element.rb#1432
  def comments; end

  # source://rexml//lib/rexml/element.rb#281
  def context; end

  # source://rexml//lib/rexml/element.rb#281
  def context=(_arg0); end

  # source://rexml//lib/rexml/element.rb#1386
  def delete_attribute(key); end

  # source://rexml//lib/rexml/element.rb#771
  def delete_element(element); end

  # source://rexml//lib/rexml/element.rb#680
  def delete_namespace(namespace = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#475
  def document; end

  # source://rexml//lib/rexml/element.rb#923
  def each_element(xpath = T.unsafe(nil), &block); end

  # source://rexml//lib/rexml/element.rb#840
  def each_element_with_attribute(key, value = T.unsafe(nil), max = T.unsafe(nil), name = T.unsafe(nil), &block); end

  # source://rexml//lib/rexml/element.rb#897
  def each_element_with_text(text = T.unsafe(nil), max = T.unsafe(nil), name = T.unsafe(nil), &block); end

  # source://rexml//lib/rexml/element.rb#278
  def elements; end

  # source://rexml//lib/rexml/element.rb#942
  def get_elements(xpath); end

  # source://rexml//lib/rexml/element.rb#1045
  def get_text(path = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1306
  def has_attributes?; end

  # source://rexml//lib/rexml/element.rb#787
  def has_elements?; end

  # source://rexml//lib/rexml/element.rb#995
  def has_text?; end

  # source://rexml//lib/rexml/element.rb#512
  def ignore_whitespace_nodes; end

  # source://rexml//lib/rexml/element.rb#358
  def inspect; end

  # source://rexml//lib/rexml/element.rb#1453
  def instructions; end

  # source://rexml//lib/rexml/element.rb#619
  def namespace(prefix = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#590
  def namespaces; end

  # source://rexml//lib/rexml/element.rb#956
  def next_element; end

  # source://rexml//lib/rexml/element.rb#1160
  def node_type; end

  # source://rexml//lib/rexml/element.rb#564
  def prefixes; end

  # source://rexml//lib/rexml/element.rb#972
  def previous_element; end

  # source://rexml//lib/rexml/element.rb#532
  def raw; end

  # source://rexml//lib/rexml/element.rb#443
  def root; end

  # source://rexml//lib/rexml/element.rb#422
  def root_node; end

  # source://rexml//lib/rexml/element.rb#1023
  def text(path = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1081
  def text=(text); end

  # source://rexml//lib/rexml/element.rb#1469
  def texts; end

  # source://rexml//lib/rexml/element.rb#489
  def whitespace; end

  # source://rexml//lib/rexml/element.rb#1495
  def write(output = T.unsafe(nil), indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1184
  def xpath; end

  private

  # source://rexml//lib/rexml/element.rb#1519
  def __to_xpath_helper(node); end

  # source://rexml//lib/rexml/element.rb#1511
  def calculate_namespaces; end

  # source://rexml//lib/rexml/element.rb#1534
  def each_with_something(test, max = T.unsafe(nil), name = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/doctype.rb#257
class REXML::ElementDecl < ::REXML::Declaration
  # source://rexml//lib/rexml/doctype.rb#258
  def initialize(src); end
end

# source://rexml//lib/rexml/element.rb#1589
class REXML::Elements
  include ::Enumerable

  # source://rexml//lib/rexml/element.rb#1602
  def initialize(parent); end

  # source://rexml//lib/rexml/element.rb#1915
  def <<(element = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1674
  def [](index, name = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1725
  def []=(index, element); end

  # source://rexml//lib/rexml/element.rb#1915
  def add(element = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1978
  def collect(xpath = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1815
  def delete(element); end

  # source://rexml//lib/rexml/element.rb#1841
  def delete_all(xpath); end

  # source://rexml//lib/rexml/element.rb#1957
  def each(xpath = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1745
  def empty?; end

  # source://rexml//lib/rexml/element.rb#1763
  def index(element); end

  # source://rexml//lib/rexml/element.rb#2063
  def inject(xpath = T.unsafe(nil), initial = T.unsafe(nil)); end

  # source://rexml//lib/rexml/element.rb#1617
  def parent; end

  # source://rexml//lib/rexml/element.rb#2087
  def size; end

  # source://rexml//lib/rexml/element.rb#2111
  def to_a(xpath = T.unsafe(nil)); end

  private

  # source://rexml//lib/rexml/element.rb#2119
  def literalize(name); end
end

# source://rexml//lib/rexml/encoding.rb#4
module REXML::Encoding
  # source://rexml//lib/rexml/encoding.rb#26
  def decode(string); end

  # source://rexml//lib/rexml/encoding.rb#22
  def encode(string); end

  # source://rexml//lib/rexml/encoding.rb#6
  def encoding; end

  # source://rexml//lib/rexml/encoding.rb#7
  def encoding=(encoding); end

  private

  # source://rexml//lib/rexml/encoding.rb#31
  def find_encoding(name); end
end

# source://rexml//lib/rexml/entity.rb#7
class REXML::Entity < ::REXML::Child
  include ::REXML::XMLTokens

  # source://rexml//lib/rexml/entity.rb#34
  def initialize(stream, value = T.unsafe(nil), parent = T.unsafe(nil), reference = T.unsafe(nil)); end

  # source://rexml//lib/rexml/entity.rb#23
  def external; end

  # source://rexml//lib/rexml/entity.rb#23
  def name; end

  # source://rexml//lib/rexml/entity.rb#23
  def ndata; end

  # source://rexml//lib/rexml/entity.rb#86
  def normalized; end

  # source://rexml//lib/rexml/entity.rb#23
  def pubid; end

  # source://rexml//lib/rexml/entity.rb#23
  def ref; end

  # source://rexml//lib/rexml/entity.rb#120
  def to_s; end

  # source://rexml//lib/rexml/entity.rb#73
  def unnormalized; end

  # source://rexml//lib/rexml/entity.rb#23
  def value; end

  # source://rexml//lib/rexml/entity.rb#98
  def write(out, indent = T.unsafe(nil)); end

  class << self
    # source://rexml//lib/rexml/entity.rb#67
    def matches?(string); end
  end
end

# source://rexml//lib/rexml/doctype.rb#263
class REXML::ExternalEntity < ::REXML::Child
  # source://rexml//lib/rexml/doctype.rb#264
  def initialize(src); end

  # source://rexml//lib/rexml/doctype.rb#268
  def to_s; end

  # source://rexml//lib/rexml/doctype.rb#271
  def write(output, indent); end
end

# source://rexml//lib/rexml/formatters/default.rb#5
class REXML::Formatters::Default
  # source://rexml//lib/rexml/formatters/default.rb#12
  def initialize(ie_hack = T.unsafe(nil)); end

  # source://rexml//lib/rexml/formatters/default.rb#23
  def write(node, output); end

  protected

  # source://rexml//lib/rexml/formatters/default.rb#98
  def write_cdata(node, output); end

  # source://rexml//lib/rexml/formatters/default.rb#92
  def write_comment(node, output); end

  # source://rexml//lib/rexml/formatters/default.rb#61
  def write_document(node, output); end

  # source://rexml//lib/rexml/formatters/default.rb#65
  def write_element(node, output); end

  # source://rexml//lib/rexml/formatters/default.rb#104
  def write_instruction(node, output); end

  # source://rexml//lib/rexml/formatters/default.rb#88
  def write_text(node, output); end
end

# source://rexml//lib/rexml/formatters/pretty.rb#10
class REXML::Formatters::Pretty < ::REXML::Formatters::Default
  # source://rexml//lib/rexml/formatters/pretty.rb#30
  def initialize(indentation = T.unsafe(nil), ie_hack = T.unsafe(nil)); end

  # source://rexml//lib/rexml/formatters/pretty.rb#14
  def compact; end

  # source://rexml//lib/rexml/formatters/pretty.rb#14
  def compact=(_arg0); end

  # source://rexml//lib/rexml/formatters/pretty.rb#16
  def width; end

  # source://rexml//lib/rexml/formatters/pretty.rb#16
  def width=(_arg0); end

  protected

  # source://rexml//lib/rexml/formatters/pretty.rb#102
  def write_cdata(node, output); end

  # source://rexml//lib/rexml/formatters/pretty.rb#97
  def write_comment(node, output); end

  # source://rexml//lib/rexml/formatters/pretty.rb#107
  def write_document(node, output); end

  # source://rexml//lib/rexml/formatters/pretty.rb#39
  def write_element(node, output); end

  # source://rexml//lib/rexml/formatters/pretty.rb#88
  def write_text(node, output); end

  private

  # source://rexml//lib/rexml/formatters/pretty.rb#124
  def indent_text(string, level = T.unsafe(nil), style = T.unsafe(nil), indentfirstline = T.unsafe(nil)); end

  # source://rexml//lib/rexml/formatters/pretty.rb#129
  def wrap(string, width); end
end

# source://rexml//lib/rexml/functions.rb#10
module REXML::Functions
  class << self
    # source://rexml//lib/rexml/functions.rb#317
    def boolean(object = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#417
    def ceiling(number); end

    # source://rexml//lib/rexml/functions.rb#370
    def compare_language(lang1, lang2); end

    # source://rexml//lib/rexml/functions.rb#190
    def concat(*objects); end

    # source://rexml//lib/rexml/functions.rb#204
    def contains(string, test); end

    # source://rexml//lib/rexml/functions.rb#38
    def context=(value); end

    # source://rexml//lib/rexml/functions.rb#60
    def count(node_set); end

    # source://rexml//lib/rexml/functions.rb#347
    def false; end

    # source://rexml//lib/rexml/functions.rb#413
    def floor(number); end

    # source://rexml//lib/rexml/functions.rb#87
    def get_namespace(node_set = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#66
    def id(object); end

    # source://rexml//lib/rexml/functions.rb#352
    def lang(language); end

    # source://rexml//lib/rexml/functions.rb#51
    def last; end

    # source://rexml//lib/rexml/functions.rb#69
    def local_name(node_set = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#80
    def name(node_set = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#35
    def namespace_context; end

    # source://rexml//lib/rexml/functions.rb#33
    def namespace_context=(x); end

    # source://rexml//lib/rexml/functions.rb#76
    def namespace_uri(node_set = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#265
    def normalize_space(string = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#337
    def not(object); end

    # source://rexml//lib/rexml/functions.rb#387
    def number(object = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#55
    def position; end

    # source://rexml//lib/rexml/functions.rb#432
    def processing_instruction(node); end

    # source://rexml//lib/rexml/functions.rb#421
    def round(number); end

    # source://rexml//lib/rexml/functions.rb#436
    def send(name, *args); end

    # source://rexml//lib/rexml/functions.rb#26
    def singleton_method_added(name); end

    # source://rexml//lib/rexml/functions.rb#199
    def starts_with(string, test); end

    # source://rexml//lib/rexml/functions.rb#138
    def string(object = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#261
    def string_length(string); end

    # source://rexml//lib/rexml/functions.rb#178
    def string_value(o); end

    # source://rexml//lib/rexml/functions.rb#228
    def substring(string, start, length = T.unsafe(nil)); end

    # source://rexml//lib/rexml/functions.rb#220
    def substring_after(string, test); end

    # source://rexml//lib/rexml/functions.rb#209
    def substring_before(string, test); end

    # source://rexml//lib/rexml/functions.rb#408
    def sum(nodes); end

    # source://rexml//lib/rexml/functions.rb#40
    def text; end

    # source://rexml//lib/rexml/functions.rb#275
    def translate(string, tr1, tr2); end

    # source://rexml//lib/rexml/functions.rb#342
    def true; end

    # source://rexml//lib/rexml/functions.rb#36
    def variables; end

    # source://rexml//lib/rexml/functions.rb#34
    def variables=(x); end
  end
end

# source://rexml//lib/rexml/source.rb#220
class REXML::IOSource < ::REXML::Source
  # source://rexml//lib/rexml/source.rb#224
  def initialize(arg, block_size = T.unsafe(nil), encoding = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#329
  def current_line; end

  # source://rexml//lib/rexml/source.rb#324
  def empty?; end

  # source://rexml//lib/rexml/source.rb#284
  def ensure_buffer; end

  # source://rexml//lib/rexml/source.rb#288
  def match(pattern, cons = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#307
  def match?(pattern, cons = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#245
  def read(term = T.unsafe(nil), min_bytes = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#266
  def read_until(term); end

  private

  # source://rexml//lib/rexml/source.rb#376
  def encoding_updated; end

  # source://rexml//lib/rexml/source.rb#351
  def readline(term = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/instruction.rb#9
class REXML::Instruction < ::REXML::Child
  # source://rexml//lib/rexml/instruction.rb#25
  def initialize(target, content = T.unsafe(nil)); end

  # source://rexml//lib/rexml/instruction.rb#65
  def ==(other); end

  # source://rexml//lib/rexml/instruction.rb#44
  def clone; end

  # source://rexml//lib/rexml/instruction.rb#15
  def content; end

  # source://rexml//lib/rexml/instruction.rb#15
  def content=(_arg0); end

  # source://rexml//lib/rexml/instruction.rb#75
  def inspect; end

  # source://rexml//lib/rexml/instruction.rb#71
  def node_type; end

  # source://rexml//lib/rexml/instruction.rb#15
  def target; end

  # source://rexml//lib/rexml/instruction.rb#15
  def target=(_arg0); end

  # source://rexml//lib/rexml/instruction.rb#51
  def write(writer, indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/namespace.rb#7
module REXML::Namespace
  include ::REXML::XMLTokens

  # source://rexml//lib/rexml/namespace.rb#9
  def expanded_name; end

  # source://rexml//lib/rexml/namespace.rb#57
  def fully_expanded_name; end

  # source://rexml//lib/rexml/namespace.rb#43
  def has_name?(other, ns = T.unsafe(nil)); end

  # source://rexml//lib/rexml/namespace.rb#9
  def name; end

  # source://rexml//lib/rexml/namespace.rb#17
  def name=(name); end

  # source://rexml//lib/rexml/namespace.rb#11
  def prefix; end

  # source://rexml//lib/rexml/namespace.rb#11
  def prefix=(_arg0); end
end

# source://rexml//lib/rexml/namespace.rb#13
REXML::Namespace::NAME_WITHOUT_NAMESPACE = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/node.rb#9
module REXML::Node
  # source://rexml//lib/rexml/node.rb#54
  def each_recursive(&block); end

  # source://rexml//lib/rexml/node.rb#67
  def find_first_recursive(&block); end

  # source://rexml//lib/rexml/node.rb#39
  def indent(to, ind); end

  # source://rexml//lib/rexml/node.rb#76
  def index_in_parent; end

  # source://rexml//lib/rexml/node.rb#11
  def next_sibling_node; end

  # source://rexml//lib/rexml/node.rb#48
  def parent?; end

  # source://rexml//lib/rexml/node.rb#17
  def previous_sibling_node; end

  # source://rexml//lib/rexml/node.rb#27
  def to_s(indent = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/doctype.rb#276
class REXML::NotationDecl < ::REXML::Child
  # source://rexml//lib/rexml/doctype.rb#278
  def initialize(name, middle, pub, sys); end

  # source://rexml//lib/rexml/doctype.rb#302
  def name; end

  # source://rexml//lib/rexml/doctype.rb#277
  def public; end

  # source://rexml//lib/rexml/doctype.rb#277
  def public=(_arg0); end

  # source://rexml//lib/rexml/doctype.rb#277
  def system; end

  # source://rexml//lib/rexml/doctype.rb#277
  def system=(_arg0); end

  # source://rexml//lib/rexml/doctype.rb#286
  def to_s; end

  # source://rexml//lib/rexml/doctype.rb#295
  def write(output, indent = T.unsafe(nil)); end
end

# source://rexml//lib/rexml/output.rb#5
class REXML::Output
  include ::REXML::Encoding

  # source://rexml//lib/rexml/output.rb#10
  def initialize(real_IO, encd = T.unsafe(nil)); end

  # source://rexml//lib/rexml/output.rb#22
  def <<(content); end

  # source://rexml//lib/rexml/output.rb#8
  def encoding; end

  # source://rexml//lib/rexml/output.rb#26
  def to_s; end
end

# source://rexml//lib/rexml/parent.rb#8
class REXML::Parent < ::REXML::Child
  include ::Enumerable

  # source://rexml//lib/rexml/parent.rb#13
  def initialize(parent = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parent.rb#18
  def <<(object); end

  # source://rexml//lib/rexml/parent.rb#57
  def [](index); end

  # source://rexml//lib/rexml/parent.rb#70
  def []=(*args); end

  # source://rexml//lib/rexml/parent.rb#18
  def add(object); end

  # source://rexml//lib/rexml/parent.rb#115
  def children; end

  # source://rexml//lib/rexml/parent.rb#148
  def deep_clone; end

  # source://rexml//lib/rexml/parent.rb#32
  def delete(object); end

  # source://rexml//lib/rexml/parent.rb#47
  def delete_at(index); end

  # source://rexml//lib/rexml/parent.rb#43
  def delete_if(&block); end

  # source://rexml//lib/rexml/parent.rb#39
  def each(&block); end

  # source://rexml//lib/rexml/parent.rb#39
  def each_child(&block); end

  # source://rexml//lib/rexml/parent.rb#51
  def each_index(&block); end

  # source://rexml//lib/rexml/parent.rb#123
  def index(child); end

  # source://rexml//lib/rexml/parent.rb#102
  def insert_after(child1, child2); end

  # source://rexml//lib/rexml/parent.rb#82
  def insert_before(child1, child2); end

  # source://rexml//lib/rexml/parent.rb#130
  def length; end

  # source://rexml//lib/rexml/parent.rb#162
  def parent?; end

  # source://rexml//lib/rexml/parent.rb#18
  def push(object); end

  # source://rexml//lib/rexml/parent.rb#140
  def replace_child(to_replace, replacement); end

  # source://rexml//lib/rexml/parent.rb#130
  def size; end

  # source://rexml//lib/rexml/parent.rb#115
  def to_a; end

  # source://rexml//lib/rexml/parent.rb#27
  def unshift(object); end
end

# source://rexml//lib/rexml/parseexception.rb#3
class REXML::ParseException < ::RuntimeError
  # source://rexml//lib/rexml/parseexception.rb#6
  def initialize(message, source = T.unsafe(nil), parser = T.unsafe(nil), exception = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parseexception.rb#49
  def context; end

  # source://rexml//lib/rexml/parseexception.rb#4
  def continued_exception; end

  # source://rexml//lib/rexml/parseexception.rb#4
  def continued_exception=(_arg0); end

  # source://rexml//lib/rexml/parseexception.rb#44
  def line; end

  # source://rexml//lib/rexml/parseexception.rb#4
  def parser; end

  # source://rexml//lib/rexml/parseexception.rb#4
  def parser=(_arg0); end

  # source://rexml//lib/rexml/parseexception.rb#39
  def position; end

  # source://rexml//lib/rexml/parseexception.rb#4
  def source; end

  # source://rexml//lib/rexml/parseexception.rb#4
  def source=(_arg0); end

  # source://rexml//lib/rexml/parseexception.rb#13
  def to_s; end
end

# source://rexml//lib/rexml/parsers/baseparser.rb#57
class REXML::Parsers::BaseParser
  # source://rexml//lib/rexml/parsers/baseparser.rb#164
  def initialize(source); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#175
  def add_listener(listener); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#210
  def empty?; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#537
  def entity(reference, entities); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#180
  def entity_expansion_count; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#181
  def entity_expansion_limit=(_arg0); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#182
  def entity_expansion_text_limit=(_arg0); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#215
  def has_next?; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#548
  def normalize(input, entities = T.unsafe(nil), entity_filter = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#231
  def peek(depth = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#200
  def position; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#246
  def pull; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#189
  def reset; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#179
  def source; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#184
  def stream=(source); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#564
  def unnormalize(string, entities = T.unsafe(nil), filter = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#221
  def unshift(token); end

  private

  # source://rexml//lib/rexml/parsers/baseparser.rb#613
  def add_namespace(prefix, uri); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#646
  def need_source_encoding_update?(xml_declaration_encoding); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#652
  def normalize_xml_declaration_encoding(xml_declaration_encoding); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#849
  def parse_attribute_value_with_equal(name); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#868
  def parse_attributes(prefixes); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#669
  def parse_id(base_error_message, accept_external_id:, accept_public_id:); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#697
  def parse_id_invalid_details(accept_external_id:, accept_public_id:); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#656
  def parse_name(base_error_message); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#628
  def pop_namespaces_restore; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#735
  def process_comment; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#747
  def process_instruction; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#256
  def pull_event; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#622
  def push_namespaces_restore; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#639
  def record_entity_expansion(delta = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parsers/baseparser.rb#831
  def scan_quote; end

  # source://rexml//lib/rexml/parsers/baseparser.rb#769
  def xml_declaration; end
end

# source://rexml//lib/rexml/parsers/baseparser.rb#130
REXML::Parsers::BaseParser::EXTERNAL_ID_PUBLIC = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#131
REXML::Parsers::BaseParser::EXTERNAL_ID_SYSTEM = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#132
REXML::Parsers::BaseParser::PUBLIC_ID = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#143
module REXML::Parsers::BaseParser::Private; end

# source://rexml//lib/rexml/parsers/baseparser.rb#148
REXML::Parsers::BaseParser::Private::ATTLISTDECL_END = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#153
REXML::Parsers::BaseParser::Private::CARRIAGE_RETURN_NEWLINE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#154
REXML::Parsers::BaseParser::Private::CHARACTER_REFERENCES = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#146
REXML::Parsers::BaseParser::Private::CLOSE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#155
REXML::Parsers::BaseParser::Private::DEFAULT_ENTITIES_PATTERNS = T.let(T.unsafe(nil), Hash)

# source://rexml//lib/rexml/parsers/baseparser.rb#152
REXML::Parsers::BaseParser::Private::ENTITYDECL_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#147
REXML::Parsers::BaseParser::Private::EQUAL_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#150
REXML::Parsers::BaseParser::Private::GEDECL_PATTERN = T.let(T.unsafe(nil), String)

# source://rexml//lib/rexml/parsers/baseparser.rb#149
REXML::Parsers::BaseParser::Private::NAME_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#151
REXML::Parsers::BaseParser::Private::PEDECL_PATTERN = T.let(T.unsafe(nil), String)

# source://rexml//lib/rexml/parsers/baseparser.rb#144
REXML::Parsers::BaseParser::Private::PEREFERENCE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#145
REXML::Parsers::BaseParser::Private::TAG_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#160
REXML::Parsers::BaseParser::Private::XML_PREFIXED_NAMESPACE = T.let(T.unsafe(nil), String)

# source://rexml//lib/rexml/parsers/baseparser.rb#66
REXML::Parsers::BaseParser::QNAME = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/baseparser.rb#65
REXML::Parsers::BaseParser::QNAME_STR = T.let(T.unsafe(nil), String)

# source://rexml//lib/rexml/parsers/streamparser.rb#6
class REXML::Parsers::StreamParser
  # source://rexml//lib/rexml/parsers/streamparser.rb#7
  def initialize(source, listener); end

  # source://rexml//lib/rexml/parsers/streamparser.rb#13
  def add_listener(listener); end

  # source://rexml//lib/rexml/parsers/streamparser.rb#17
  def entity_expansion_count; end

  # source://rexml//lib/rexml/parsers/streamparser.rb#21
  def entity_expansion_limit=(limit); end

  # source://rexml//lib/rexml/parsers/streamparser.rb#25
  def entity_expansion_text_limit=(limit); end

  # source://rexml//lib/rexml/parsers/streamparser.rb#29
  def parse; end
end

# source://rexml//lib/rexml/parsers/baseparser.rb#28
module REXML::Parsers::StringScannerCaptures; end

# source://rexml//lib/rexml/parsers/treeparser.rb#7
class REXML::Parsers::TreeParser
  # source://rexml//lib/rexml/parsers/treeparser.rb#8
  def initialize(source, build_context = T.unsafe(nil)); end

  # source://rexml//lib/rexml/parsers/treeparser.rb#13
  def add_listener(listener); end

  # source://rexml//lib/rexml/parsers/treeparser.rb#17
  def parse; end
end

# source://rexml//lib/rexml/parsers/xpathparser.rb#12
class REXML::Parsers::XPathParser
  include ::REXML::XMLTokens

  # source://rexml//lib/rexml/parsers/xpathparser.rb#42
  def abbreviate(path_or_parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#132
  def expand(path_or_parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#16
  def namespaces=(namespaces); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#21
  def parse(path); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#174
  def preciate_to_string(parsed, &block); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#36
  def predicate(path); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#174
  def predicate_to_path(parsed, &block); end

  private

  # source://rexml//lib/rexml/parsers/xpathparser.rb#505
  def AdditiveExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#438
  def AndExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#457
  def EqualityExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#608
  def FilterExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#663
  def FunctionCall(rest, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#243
  def LocationPath(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#528
  def MultiplicativeExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#343
  def NodeTest(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#419
  def OrExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#590
  def PathExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#395
  def Predicate(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#626
  def PrimaryExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#480
  def RelationalExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#267
  def RelativeLocationPath(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#553
  def UnaryExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#571
  def UnionExpr(path, parsed); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#676
  def get_group(string); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#694
  def parse_args(string); end

  # source://rexml//lib/rexml/parsers/xpathparser.rb#224
  def quote_literal(literal); end
end

# source://rexml//lib/rexml/parsers/xpathparser.rb#339
REXML::Parsers::XPathParser::LOCAL_NAME_WILDCARD = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/parsers/xpathparser.rb#338
REXML::Parsers::XPathParser::PREFIX_WILDCARD = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/doctype.rb#10
class REXML::ReferenceWriter
  # source://rexml//lib/rexml/doctype.rb#11
  def initialize(id_type, public_id_literal, system_literal, context = T.unsafe(nil)); end

  # source://rexml//lib/rexml/doctype.rb#25
  def write(output); end
end

# source://rexml//lib/rexml/security.rb#3
module REXML::Security
  class << self
    # source://rexml//lib/rexml/security.rb#12
    def entity_expansion_limit; end

    # source://rexml//lib/rexml/security.rb#7
    def entity_expansion_limit=(val); end

    # source://rexml//lib/rexml/security.rb#24
    def entity_expansion_text_limit; end

    # source://rexml//lib/rexml/security.rb#19
    def entity_expansion_text_limit=(val); end
  end
end

# source://rexml//lib/rexml/source.rb#61
class REXML::Source
  include ::REXML::Encoding

  # source://rexml//lib/rexml/source.rb#88
  def initialize(arg, encoding = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#101
  def buffer; end

  # source://rexml//lib/rexml/source.rb#111
  def buffer_encoding=(encoding); end

  # source://rexml//lib/rexml/source.rb#180
  def current_line; end

  # source://rexml//lib/rexml/source.rb#105
  def drop_parsed_content; end

  # source://rexml//lib/rexml/source.rb#175
  def empty?; end

  # source://rexml//lib/rexml/source.rb#65
  def encoding; end

  # source://rexml//lib/rexml/source.rb#117
  def encoding=(enc); end

  # source://rexml//lib/rexml/source.rb#135
  def ensure_buffer; end

  # source://rexml//lib/rexml/source.rb#64
  def line; end

  # source://rexml//lib/rexml/source.rb#138
  def match(pattern, cons = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#146
  def match?(pattern, cons = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#166
  def peek_byte; end

  # source://rexml//lib/rexml/source.rb#158
  def position; end

  # source://rexml//lib/rexml/source.rb#162
  def position=(pos); end

  # source://rexml//lib/rexml/source.rb#122
  def read(term = T.unsafe(nil)); end

  # source://rexml//lib/rexml/source.rb#125
  def read_until(term); end

  # source://rexml//lib/rexml/source.rb#170
  def scan_byte; end

  # source://rexml//lib/rexml/source.rb#154
  def skip_spaces; end

  private

  # source://rexml//lib/rexml/source.rb#189
  def detect_encoding; end

  # source://rexml//lib/rexml/source.rb#207
  def encoding_updated; end
end

# source://rexml//lib/rexml/source.rb#67
module REXML::Source::Private; end

# source://rexml//lib/rexml/source.rb#70
REXML::Source::Private::PRE_DEFINED_TERM_PATTERNS = T.let(T.unsafe(nil), Hash)

# source://rexml//lib/rexml/source.rb#69
REXML::Source::Private::SCANNER_RESET_SIZE = T.let(T.unsafe(nil), Integer)

# source://rexml//lib/rexml/source.rb#68
REXML::Source::Private::SPACES_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rexml//lib/rexml/source.rb#38
class REXML::SourceFactory
  class << self
    # source://rexml//lib/rexml/source.rb#42
    def create_from(arg); end
  end
end

# source://rexml//lib/rexml/text.rb#11
class REXML::Text < ::REXML::Child
  include ::Comparable

  # source://rexml//lib/rexml/text.rb#79
  def initialize(arg, respect_whitespace = T.unsafe(nil), parent = T.unsafe(nil), raw = T.unsafe(nil), entity_filter = T.unsafe(nil), illegal = T.unsafe(nil)); end

  # source://rexml//lib/rexml/text.rb#189
  def <<(to_append); end

  # source://rexml//lib/rexml/text.rb#198
  def <=>(other); end

  # source://rexml//lib/rexml/text.rb#179
  def clone; end

  # source://rexml//lib/rexml/text.rb#202
  def doctype; end

  # source://rexml//lib/rexml/text.rb#174
  def empty?; end

  # source://rexml//lib/rexml/text.rb#271
  def indent_text(string, level = T.unsafe(nil), style = T.unsafe(nil), indentfirstline = T.unsafe(nil)); end

  # source://rexml//lib/rexml/text.rb#225
  def inspect; end

  # source://rexml//lib/rexml/text.rb#170
  def node_type; end

  # source://rexml//lib/rexml/text.rb#110
  def parent=(parent); end

  # source://rexml//lib/rexml/text.rb#21
  def raw; end

  # source://rexml//lib/rexml/text.rb#21
  def raw=(_arg0); end

  # source://rexml//lib/rexml/text.rb#220
  def to_s; end

  # source://rexml//lib/rexml/text.rb#242
  def value; end

  # source://rexml//lib/rexml/text.rb#254
  def value=(val); end

  # source://rexml//lib/rexml/text.rb#260
  def wrap(string, width, addnewline = T.unsafe(nil)); end

  # source://rexml//lib/rexml/text.rb#288
  def write(writer, indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end

  # source://rexml//lib/rexml/text.rb#318
  def write_with_substitution(out, input); end

  # source://rexml//lib/rexml/text.rb#300
  def xpath; end

  private

  # source://rexml//lib/rexml/text.rb#331
  def clear_cache; end

  class << self
    # source://rexml//lib/rexml/text.rb#116
    def check(string, pattern, doctype = T.unsafe(nil)); end

    # source://rexml//lib/rexml/text.rb#401
    def expand(ref, doctype, filter); end

    # source://rexml//lib/rexml/text.rb#363
    def normalize(input, doctype = T.unsafe(nil), entity_filter = T.unsafe(nil)); end

    # source://rexml//lib/rexml/text.rb#337
    def read_with_substitution(input, illegal = T.unsafe(nil)); end

    # source://rexml//lib/rexml/text.rb#387
    def unnormalize(string, doctype = T.unsafe(nil), filter = T.unsafe(nil), illegal = T.unsafe(nil), entity_expansion_text_limit: T.unsafe(nil)); end
  end
end

# source://rexml//lib/rexml/undefinednamespaceexception.rb#4
class REXML::UndefinedNamespaceException < ::REXML::ParseException
  # source://rexml//lib/rexml/undefinednamespaceexception.rb#5
  def initialize(prefix, source, parser); end
end

# source://rexml//lib/rexml/validation/validationexception.rb#4
class REXML::Validation::ValidationException < ::RuntimeError
  # source://rexml//lib/rexml/validation/validationexception.rb#5
  def initialize(msg); end
end

# source://rexml//lib/rexml/xmldecl.rb#8
class REXML::XMLDecl < ::REXML::Child
  include ::REXML::Encoding

  # source://rexml//lib/rexml/xmldecl.rb#20
  def initialize(version = T.unsafe(nil), encoding = T.unsafe(nil), standalone = T.unsafe(nil)); end

  # source://rexml//lib/rexml/xmldecl.rb#56
  def ==(other); end

  # source://rexml//lib/rexml/xmldecl.rb#39
  def clone; end

  # source://rexml//lib/rexml/xmldecl.rb#102
  def dowrite; end

  # source://rexml//lib/rexml/xmldecl.rb#76
  def encoding=(enc); end

  # source://rexml//lib/rexml/xmldecl.rb#106
  def inspect; end

  # source://rexml//lib/rexml/xmldecl.rb#69
  def node_type; end

  # source://rexml//lib/rexml/xmldecl.rb#98
  def nowrite; end

  # source://rexml//lib/rexml/encoding.rb#7
  def old_enc=(encoding); end

  # source://rexml//lib/rexml/xmldecl.rb#17
  def stand_alone?; end

  # source://rexml//lib/rexml/xmldecl.rb#17
  def standalone; end

  # source://rexml//lib/rexml/xmldecl.rb#17
  def standalone=(_arg0); end

  # source://rexml//lib/rexml/xmldecl.rb#17
  def version; end

  # source://rexml//lib/rexml/xmldecl.rb#17
  def version=(_arg0); end

  # source://rexml//lib/rexml/xmldecl.rb#49
  def write(writer, indent = T.unsafe(nil), transitive = T.unsafe(nil), ie_hack = T.unsafe(nil)); end

  # source://rexml//lib/rexml/xmldecl.rb#18
  def writeencoding; end

  # source://rexml//lib/rexml/xmldecl.rb#18
  def writethis; end

  # source://rexml//lib/rexml/xmldecl.rb#63
  def xmldecl(version, encoding, standalone); end

  private

  # source://rexml//lib/rexml/xmldecl.rb#111
  def content(enc); end

  class << self
    # source://rexml//lib/rexml/xmldecl.rb#92
    def default; end
  end
end

# source://rexml//lib/rexml/xpath.rb#7
class REXML::XPath
  include ::REXML::Functions

  class << self
    # source://rexml//lib/rexml/xpath.rb#55
    def each(element, path = T.unsafe(nil), namespaces = T.unsafe(nil), variables = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://rexml//lib/rexml/xpath.rb#31
    def first(element, path = T.unsafe(nil), namespaces = T.unsafe(nil), variables = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://rexml//lib/rexml/xpath.rb#62
    def match(element, path = T.unsafe(nil), namespaces = T.unsafe(nil), variables = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://rexml//lib/rexml/xpath_parser.rb#965
class REXML::XPathNode
  # source://rexml//lib/rexml/xpath_parser.rb#967
  def initialize(node, context = T.unsafe(nil)); end

  # source://rexml//lib/rexml/xpath_parser.rb#966
  def context; end

  # source://rexml//lib/rexml/xpath_parser.rb#976
  def position; end

  # source://rexml//lib/rexml/xpath_parser.rb#966
  def raw_node; end
end

# source://rexml//lib/rexml/xpath_parser.rb#54
class REXML::XPathParser
  include ::REXML::XMLTokens

  # source://rexml//lib/rexml/xpath_parser.rb#60
  def initialize(strict: T.unsafe(nil)); end

  # source://rexml//lib/rexml/xpath_parser.rb#107
  def []=(variable_name, value); end

  # source://rexml//lib/rexml/xpath_parser.rb#116
  def first(path_stack, node); end

  # source://rexml//lib/rexml/xpath_parser.rb#97
  def get_first(path, node); end

  # source://rexml//lib/rexml/xpath_parser.rb#153
  def match(path_stack, node); end

  # source://rexml//lib/rexml/xpath_parser.rb#69
  def namespaces=(namespaces = T.unsafe(nil)); end

  # source://rexml//lib/rexml/xpath_parser.rb#79
  def parse(path, node); end

  # source://rexml//lib/rexml/xpath_parser.rb#102
  def predicate(path, node); end

  # source://rexml//lib/rexml/xpath_parser.rb#74
  def variables=(vars = T.unsafe(nil)); end

  private

  # source://rexml//lib/rexml/xpath_parser.rb#781
  def child(nodeset); end

  # source://rexml//lib/rexml/xpath_parser.rb#922
  def compare(a, operator, b); end

  # source://rexml//lib/rexml/xpath_parser.rb#687
  def descendant(nodeset, include_self); end

  # source://rexml//lib/rexml/xpath_parser.rb#698
  def descendant_recursive(raw_node, new_nodeset, new_nodes, include_self); end

  # source://rexml//lib/rexml/xpath_parser.rb#944
  def each_unnode(nodeset); end

  # source://rexml//lib/rexml/xpath_parser.rb#646
  def enter(tag, *args); end

  # source://rexml//lib/rexml/xpath_parser.rb#821
  def equality_relational_compare(set1, op, set2); end

  # source://rexml//lib/rexml/xpath_parser.rb#596
  def evaluate_predicate(expression, nodesets); end

  # source://rexml//lib/rexml/xpath_parser.rb#186
  def expr(path_stack, nodeset, context = T.unsafe(nil)); end

  # source://rexml//lib/rexml/xpath_parser.rb#587
  def filter_nodeset(nodeset); end

  # source://rexml//lib/rexml/xpath_parser.rb#754
  def following(node); end

  # source://rexml//lib/rexml/xpath_parser.rb#765
  def following_node_of(node); end

  # source://rexml//lib/rexml/xpath_parser.rb#174
  def get_namespace(node, prefix); end

  # source://rexml//lib/rexml/xpath_parser.rb#651
  def leave(tag, *args); end

  # source://rexml//lib/rexml/xpath_parser.rb#771
  def next_sibling_node(node); end

  # source://rexml//lib/rexml/xpath_parser.rb#488
  def node_test(path_stack, nodesets, any_type: T.unsafe(nil)); end

  # source://rexml//lib/rexml/xpath_parser.rb#808
  def norm(b); end

  # source://rexml//lib/rexml/xpath_parser.rb#896
  def normalize_compare_values(a, operator, b); end

  # source://rexml//lib/rexml/xpath_parser.rb#717
  def preceding(node); end

  # source://rexml//lib/rexml/xpath_parser.rb#739
  def preceding_node_of(node); end

  # source://rexml//lib/rexml/xpath_parser.rb#664
  def sort(array_of_nodes, order); end

  # source://rexml//lib/rexml/xpath_parser.rb#452
  def step(path_stack, any_type: T.unsafe(nil), order: T.unsafe(nil)); end

  # source://rexml//lib/rexml/xpath_parser.rb#165
  def strict?; end

  # source://rexml//lib/rexml/xpath_parser.rb#639
  def trace(*args); end

  # source://rexml//lib/rexml/xpath_parser.rb#956
  def unnode(nodeset); end

  # source://rexml//lib/rexml/xpath_parser.rb#883
  def value_type(value); end
end

# source://rexml//lib/rexml/xpath_parser.rb#58
REXML::XPathParser::DEBUG = T.let(T.unsafe(nil), FalseClass)
