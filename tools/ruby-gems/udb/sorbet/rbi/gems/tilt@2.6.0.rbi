# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tilt` gem.
# Please instead update this file by running `bin/tapioca gem tilt`.


# source://tilt//lib/tilt/template.rb#2
module Tilt
  class << self
    # source://tilt//lib/tilt.rb#75
    def [](file); end

    # source://tilt//lib/tilt.rb#91
    def default_mapping; end

    # source://tilt//lib/tilt.rb#95
    def extract_fixed_locals; end

    # source://tilt//lib/tilt.rb#95
    def extract_fixed_locals=(_arg0); end

    # source://tilt//lib/tilt.rb#24
    def finalize!; end

    # source://tilt//lib/tilt.rb#45
    def lazy_map; end

    # source://tilt//lib/tilt.rb#70
    def new(file, line = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://tilt//lib/tilt.rb#50
    def prefer(template_class, *extensions); end

    # source://tilt//lib/tilt.rb#50
    def register(template_class, *extensions); end

    # source://tilt//lib/tilt.rb#55
    def register_lazy(class_name, file, *extensions); end

    # source://tilt//lib/tilt.rb#60
    def register_pipeline(ext, options = T.unsafe(nil)); end

    # source://tilt//lib/tilt.rb#65
    def registered?(ext); end

    # source://tilt//lib/tilt.rb#80
    def template_for(file); end

    # source://tilt//lib/tilt.rb#85
    def templates_for(file); end
  end
end

# source://tilt//lib/tilt/asciidoc.rb#0
class Tilt::AsciidoctorTemplate < ::Tilt::StaticTemplate
  private

  # source://tilt//lib/tilt/asciidoc.rb#12
  def _prepare_output; end
end

# source://tilt//lib/tilt/mapping.rb#6
class Tilt::BaseMapping
  # source://tilt//lib/tilt/mapping.rb#32
  def [](file); end

  # source://tilt//lib/tilt/mapping.rb#16
  def new(file, line = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://tilt//lib/tilt/mapping.rb#32
  def template_for(file); end

  # source://tilt//lib/tilt/mapping.rb#48
  def templates_for(file); end

  private

  # source://tilt//lib/tilt/mapping.rb#63
  def split(file); end
end

# source://tilt//lib/tilt/csv.rb#32
class Tilt::CSVTemplate < ::Tilt::Template
  # source://tilt//lib/tilt/csv.rb#47
  def precompiled(locals); end

  # source://tilt//lib/tilt/csv.rb#39
  def precompiled_template(locals); end

  # source://tilt//lib/tilt/csv.rb#35
  def prepare; end
end

# source://tilt//lib/tilt.rb#119
class Tilt::Cache
  # source://tilt//lib/tilt.rb#120
  def initialize; end

  # source://tilt//lib/tilt.rb#137
  def clear; end

  # source://tilt//lib/tilt.rb#130
  def fetch(*key); end
end

# source://tilt//lib/tilt/template.rb#4
module Tilt::CompiledTemplates; end

# source://tilt//lib/tilt.rb#10
Tilt::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://tilt//lib/tilt.rb#13
Tilt::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://tilt//lib/tilt/erb.rb#8
class Tilt::ERBTemplate < ::Tilt::Template
  # source://tilt//lib/tilt/erb.rb#60
  def freeze_string_literals?; end

  # source://tilt//lib/tilt/erb.rb#55
  def precompiled(locals); end

  # source://tilt//lib/tilt/erb.rb#44
  def precompiled_postamble(locals); end

  # source://tilt//lib/tilt/erb.rb#36
  def precompiled_preamble(locals); end

  # source://tilt//lib/tilt/erb.rb#31
  def precompiled_template(locals); end

  # source://tilt//lib/tilt/erb.rb#11
  def prepare; end
end

# source://tilt//lib/tilt/erb.rb#9
Tilt::ERBTemplate::SUPPORTS_KVARGS = T.let(T.unsafe(nil), Array)

# source://tilt//lib/tilt/erubi.rb#14
class Tilt::ErubiTemplate < ::Tilt::Template
  # source://tilt//lib/tilt/erubi.rb#51
  def freeze_string_literals?; end

  # source://tilt//lib/tilt/erubi.rb#47
  def precompiled_template(locals); end

  # source://tilt//lib/tilt/erubi.rb#15
  def prepare; end
end

# source://tilt//lib/tilt/etanni.rb#5
class Tilt::EtanniTemplate < ::Tilt::Template
  # source://tilt//lib/tilt/etanni.rb#23
  def precompiled(locals); end

  # source://tilt//lib/tilt/etanni.rb#19
  def precompiled_template(locals); end

  # source://tilt//lib/tilt/etanni.rb#6
  def prepare; end
end

# source://tilt//lib/tilt/mapping.rb#370
class Tilt::FinalizedMapping < ::Tilt::BaseMapping
  # source://tilt//lib/tilt/mapping.rb#374
  def initialize(template_map); end

  # source://tilt//lib/tilt/mapping.rb#385
  def clone(freeze: T.unsafe(nil)); end

  # source://tilt//lib/tilt/mapping.rb#380
  def dup; end

  # source://tilt//lib/tilt/mapping.rb#396
  def extensions_for(template_class); end

  # source://tilt//lib/tilt/mapping.rb#390
  def registered?(ext); end

  private

  # source://tilt//lib/tilt/mapping.rb#407
  def lookup(ext); end
end

# source://tilt//lib/tilt/template.rb#11
Tilt::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://tilt//lib/tilt/mapping.rb#125
class Tilt::Mapping < ::Tilt::BaseMapping
  # source://tilt//lib/tilt/mapping.rb#131
  def initialize; end

  # source://tilt//lib/tilt/mapping.rb#287
  def extensions_for(template_class); end

  # source://tilt//lib/tilt/mapping.rb#151
  def finalized; end

  # source://tilt//lib/tilt/mapping.rb#129
  def lazy_map; end

  # source://tilt//lib/tilt/mapping.rb#200
  def register(template_class, *extensions); end

  # source://tilt//lib/tilt/mapping.rb#176
  def register_lazy(class_name, file, *extensions); end

  # source://tilt//lib/tilt/mapping.rb#238
  def register_pipeline(ext, options = T.unsafe(nil)); end

  # source://tilt//lib/tilt/mapping.rb#280
  def registered?(ext); end

  # source://tilt//lib/tilt/mapping.rb#129
  def template_map; end

  # source://tilt//lib/tilt/mapping.rb#260
  def unregister(*extensions); end

  private

  # source://tilt//lib/tilt/mapping.rb#360
  def constant_defined?(name); end

  # source://tilt//lib/tilt/mapping.rb#137
  def initialize_copy(other); end

  # source://tilt//lib/tilt/mapping.rb#301
  def lazy?(ext); end

  # source://tilt//lib/tilt/mapping.rb#320
  def lazy_load(pattern); end

  # source://tilt//lib/tilt/mapping.rb#306
  def lookup(ext); end

  # source://tilt//lib/tilt/mapping.rb#310
  def register_defined_classes(class_names, pattern); end
end

# source://tilt//lib/tilt/mapping.rb#126
Tilt::Mapping::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://tilt//lib/tilt/pipeline.rb#6
class Tilt::Pipeline < ::Tilt::Template
  # source://tilt//lib/tilt/pipeline.rb#15
  def evaluate(scope, locals, &block); end

  # source://tilt//lib/tilt/pipeline.rb#7
  def prepare; end
end

# source://tilt//lib/tilt/plain.rb#0
class Tilt::PlainTemplate < ::Tilt::StaticTemplate
  private

  # source://tilt//lib/tilt/plain.rb#5
  def _prepare_output; end
end

# source://tilt//lib/tilt/rdoc.rb#0
class Tilt::RDocTemplate < ::Tilt::StaticTemplate
  private

  # source://tilt//lib/tilt/rdoc.rb#9
  def _prepare_output; end
end

# source://tilt//lib/tilt/template.rb#563
class Tilt::StaticTemplate < ::Tilt::Template
  # source://tilt//lib/tilt/template.rb#586
  def allows_script?; end

  # source://tilt//lib/tilt/template.rb#581
  def compiled_method(locals_keys, scope_class = T.unsafe(nil)); end

  # source://tilt//lib/tilt/template.rb#575
  def render(scope = T.unsafe(nil), locals = T.unsafe(nil)); end

  protected

  # source://tilt//lib/tilt/template.rb#592
  def prepare; end

  private

  # source://tilt//lib/tilt/template.rb#599
  def set_compiled_method_cache; end

  # source://tilt//lib/tilt/template.rb#603
  def set_fixed_locals; end

  class << self
    # source://tilt//lib/tilt/template.rb#564
    def subclass(mime_type: T.unsafe(nil), &block); end
  end
end

# source://tilt//lib/tilt/string.rb#7
class Tilt::StringTemplate < ::Tilt::Template
  # source://tilt//lib/tilt/string.rb#23
  def freeze_string_literals?; end

  # source://tilt//lib/tilt/string.rb#18
  def precompiled(locals); end

  # source://tilt//lib/tilt/string.rb#14
  def precompiled_template(locals); end

  # source://tilt//lib/tilt/string.rb#8
  def prepare; end
end

# source://tilt//lib/tilt/template.rb#8
Tilt::TOPOBJECT = Tilt::CompiledTemplates

# source://tilt//lib/tilt/template.rb#16
class Tilt::Template
  # source://tilt//lib/tilt/template.rb#82
  def initialize(file = T.unsafe(nil), line = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://tilt//lib/tilt/template.rb#138
  def basename(suffix = T.unsafe(nil)); end

  # source://tilt//lib/tilt/template.rb#191
  def compiled_method(locals_keys, scope_class = T.unsafe(nil)); end

  # source://tilt//lib/tilt/template.rb#35
  def compiled_path; end

  # source://tilt//lib/tilt/template.rb#177
  def compiled_path=(path); end

  # source://tilt//lib/tilt/template.rb#18
  def data; end

  # source://tilt//lib/tilt/template.rb#150
  def eval_file; end

  # source://tilt//lib/tilt/template.rb#21
  def file; end

  # source://tilt//lib/tilt/template.rb#155
  def fixed_locals?; end

  # source://tilt//lib/tilt/template.rb#24
  def line; end

  # source://tilt//lib/tilt/template.rb#161
  def metadata; end

  # source://tilt//lib/tilt/template.rb#143
  def name; end

  # source://tilt//lib/tilt/template.rb#29
  def options; end

  # source://tilt//lib/tilt/template.rb#133
  def render(scope = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  protected

  # source://tilt//lib/tilt/template.rb#224
  def default_encoding; end

  # source://tilt//lib/tilt/template.rb#247
  def evaluate(scope, locals, &block); end

  # source://tilt//lib/tilt/template.rb#278
  def precompiled(local_keys); end

  # source://tilt//lib/tilt/template.rb#316
  def precompiled_postamble(local_keys); end

  # source://tilt//lib/tilt/template.rb#312
  def precompiled_preamble(local_keys); end

  # source://tilt//lib/tilt/template.rb#308
  def precompiled_template(local_keys); end

  # source://tilt//lib/tilt/template.rb#235
  def prepare; end

  # source://tilt//lib/tilt/template.rb#226
  def skip_compiled_encoding_detection?; end

  private

  # source://tilt//lib/tilt/template.rb#325
  def _dup_string_if_frozen(string); end

  # source://tilt//lib/tilt/template.rb#544
  def binary(string); end

  # source://tilt//lib/tilt/template.rb#442
  def bind_compiled_method(method_source, offset, scope_class); end

  # source://tilt//lib/tilt/template.rb#414
  def compile_template_method(local_keys, scope_class = T.unsafe(nil)); end

  # source://tilt//lib/tilt/template.rb#471
  def eval_compiled_method(method_source, offset, scope_class); end

  # source://tilt//lib/tilt/template.rb#390
  def evaluate_method(method, scope, locals, &block); end

  # source://tilt//lib/tilt/template.rb#523
  def extract_encoding(script, &block); end

  # source://tilt//lib/tilt/template.rb#517
  def extract_fixed_locals; end

  # source://tilt//lib/tilt/template.rb#527
  def extract_magic_comment(script); end

  # source://tilt//lib/tilt/template.rb#540
  def freeze_string_literals?; end

  # source://tilt//lib/tilt/template.rb#475
  def load_compiled_method(path, method_source); end

  # source://tilt//lib/tilt/template.rb#368
  def local_extraction(local_keys); end

  # source://tilt//lib/tilt/template.rb#336
  def process_arg(arg); end

  # source://tilt//lib/tilt/template.rb#350
  def read_template_file; end

  # source://tilt//lib/tilt/template.rb#359
  def set_compiled_method_cache; end

  # source://tilt//lib/tilt/template.rb#491
  def set_fixed_locals; end

  # source://tilt//lib/tilt/template.rb#483
  def unbind_compiled_method(method_name); end

  class << self
    # source://tilt//lib/tilt/template.rb#45
    def default_mime_type; end

    # source://tilt//lib/tilt/template.rb#50
    def default_mime_type=(value); end

    # source://tilt//lib/tilt/template.rb#40
    def metadata; end
  end
end

# source://tilt//lib/tilt/template.rb#238
Tilt::Template::CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://tilt//lib/tilt/template.rb#239
Tilt::Template::USE_BIND_CALL = T.let(T.unsafe(nil), TrueClass)

# source://tilt//lib/tilt.rb#8
Tilt::VERSION = T.let(T.unsafe(nil), String)
