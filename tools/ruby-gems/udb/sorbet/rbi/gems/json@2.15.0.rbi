# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json` gem.
# Please instead update this file by running `bin/tapioca gem json`.


class Array
  include ::Enumerable
  include ::JSON::Ext::Generator::GeneratorMethods::Array
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

class Float < ::Numeric
  include ::JSON::Ext::Generator::GeneratorMethods::Float
end

class Hash
  include ::Enumerable
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
end

class Integer < ::Numeric
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
end

# source://json//lib/json/version.rb#3
module JSON
  private

  # source://json//lib/json/common.rb#918
  def dump(obj, anIO = T.unsafe(nil), limit = T.unsafe(nil), kwargs = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#465
  def fast_generate(obj, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#963
  def fast_unparse(*_arg0, **_arg1, &_arg2); end

  # source://json//lib/json/common.rb#444
  def generate(obj, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#852
  def load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#393
  def load_file(filespec, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#404
  def load_file!(filespec, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#356
  def parse(source, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#378
  def parse!(source, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#512
  def pretty_generate(obj, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#973
  def pretty_unparse(*_arg0, **_arg1, &_arg2); end

  # source://json//lib/json/common.rb#983
  def restore(*_arg0, **_arg1, &_arg2); end

  # source://json//lib/json/common.rb#953
  def unparse(*_arg0, **_arg1, &_arg2); end

  # source://json//lib/json/common.rb#687
  def unsafe_load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # source://json//lib/json/common.rb#127
    def [](object, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#239
    def create_id; end

    # source://json//lib/json/common.rb#233
    def create_id=(new_value); end

    # source://json//lib/json/common.rb#154
    def deep_const_get(path); end

    # source://json//lib/json/common.rb#99
    def deprecation_warning(message, uplevel = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#918
    def dump(obj, anIO = T.unsafe(nil), limit = T.unsafe(nil), kwargs = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#465
    def fast_generate(obj, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#963
    def fast_unparse(*_arg0, **_arg1, &_arg2); end

    # source://json//lib/json/common.rb#444
    def generate(obj, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#182
    def generator; end

    # source://json//lib/json/common.rb#161
    def generator=(generator); end

    # source://json//lib/json/common.rb#852
    def load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#393
    def load_file(filespec, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#404
    def load_file!(filespec, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#356
    def parse(source, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#378
    def parse!(source, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#141
    def parser; end

    # source://json//lib/json/common.rb#144
    def parser=(parser); end

    # source://json//lib/json/common.rb#512
    def pretty_generate(obj, opts = T.unsafe(nil)); end

    # source://json//lib/json/common.rb#973
    def pretty_unparse(*_arg0, **_arg1, &_arg2); end

    # source://json//lib/json/common.rb#983
    def restore(*_arg0, **_arg1, &_arg2); end

    # source://json//lib/json/common.rb#185
    def state; end

    # source://json//lib/json/common.rb#185
    def state=(_arg0); end

    # source://json//lib/json/common.rb#953
    def unparse(*_arg0, **_arg1, &_arg2); end

    # source://json//lib/json/common.rb#687
    def unsafe_load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    # source://json//lib/json/common.rb#996
    def const_missing(const_name); end

    # source://json//lib/json/common.rb#208
    def deprecated_singleton_attr_accessor(*attrs); end

    # source://json//lib/json/common.rb#190
    def on_mixed_keys_hash(hash, do_raise); end
  end
end

# source://json//lib/json/common.rb#1022
class JSON::Coder
  # source://json//lib/json/common.rb#1046
  def initialize(options = T.unsafe(nil), &as_json); end

  # source://json//lib/json/common.rb#1064
  def dump(object, io = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#1064
  def generate(object, io = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#1073
  def load(source); end

  # source://json//lib/json/common.rb#1082
  def load_file(path); end

  # source://json//lib/json/common.rb#1073
  def parse(source); end
end

# source://json//lib/json/ext/generator/state.rb#6
class JSON::Ext::Generator::State
  # source://json//lib/json/ext/generator/state.rb#13
  def initialize(opts = T.unsafe(nil)); end

  # source://json//lib/json/ext/generator/state.rb#77
  def [](name); end

  # source://json//lib/json/ext/generator/state.rb#89
  def []=(name, value); end

  # source://json//lib/json/ext/generator/state.rb#23
  def configure(opts); end

  # source://json//lib/json/ext/generator/state.rb#23
  def merge(opts); end

  # source://json//lib/json/ext/generator/state.rb#42
  def to_h; end

  # source://json//lib/json/ext/generator/state.rb#42
  def to_hash; end
end

# source://json//lib/json/ext.rb#9
class JSON::Ext::Parser
  # source://json//lib/json/ext.rb#17
  def initialize(source, opts = T.unsafe(nil)); end

  # source://json//lib/json/ext.rb#26
  def parse; end

  # source://json//lib/json/ext.rb#22
  def source; end
end

# source://json//lib/json/ext.rb#32
JSON::Ext::Parser::Config = JSON::Ext::ParserConfig

# source://json//lib/json/common.rb#292
class JSON::Fragment < ::Struct
  # source://json//lib/json/common.rb#293
  def initialize(json); end

  def json; end
  def json=(_); end

  # source://json//lib/json/common.rb#301
  def to_json(state = T.unsafe(nil), *_arg1); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://json//lib/json/common.rb#262
class JSON::GeneratorError < ::JSON::JSONError
  # source://json//lib/json/common.rb#265
  def initialize(message, invalid_object = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#270
  def detailed_message(*_arg0, **_arg1, &_arg2); end

  # source://json//lib/json/common.rb#263
  def invalid_object; end
end

# source://json//lib/json/generic_object.rb#9
class JSON::GenericObject < ::OpenStruct
  # source://json//lib/json/generic_object.rb#59
  def as_json(*_arg0); end

  # source://json//lib/json/generic_object.rb#51
  def to_hash; end

  # source://json//lib/json/generic_object.rb#63
  def to_json(*a); end

  # source://json//lib/json/generic_object.rb#55
  def |(other); end

  class << self
    # source://json//lib/json/generic_object.rb#45
    def dump(obj, *args); end

    # source://json//lib/json/generic_object.rb#25
    def from_hash(object); end

    # source://json//lib/json/generic_object.rb#17
    def json_creatable=(_arg0); end

    # source://json//lib/json/generic_object.rb#13
    def json_creatable?; end

    # source://json//lib/json/generic_object.rb#19
    def json_create(data); end

    # source://json//lib/json/generic_object.rb#40
    def load(source, proc = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://json//lib/json/common.rb#361
JSON::PARSE_L_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://json//lib/json/common.rb#474
JSON::PRETTY_GENERATE_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://json//lib/json/common.rb#147
JSON::Parser = JSON::Ext::Parser

# source://json//lib/json/common.rb#253
class JSON::ParserError < ::JSON::JSONError
  # source://json//lib/json/common.rb#254
  def column; end

  # source://json//lib/json/common.rb#254
  def line; end
end

# source://json//lib/json/common.rb#8
module JSON::ParserOptions
  class << self
    # source://json//lib/json/common.rb#10
    def prepare(opts); end

    private

    # source://json//lib/json/common.rb#40
    def array_class_proc(array_class, on_load); end

    # source://json//lib/json/common.rb#52
    def create_additions_proc(opts); end

    # source://json//lib/json/common.rb#90
    def create_additions_warning; end

    # source://json//lib/json/common.rb#29
    def object_class_proc(object_class, on_load); end
  end
end

# source://json//lib/json/common.rb#176
JSON::State = JSON::Ext::Generator::State

# source://json//lib/json/common.rb#1088
module Kernel
  private

  # source://json//lib/json/common.rb#1127
  def JSON(object, opts = T.unsafe(nil)); end

  # source://json//lib/json/common.rb#1093
  def j(*objs); end

  # source://json//lib/json/common.rb#1108
  def jj(*objs); end
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  include ::Treetop::Compiler::Metagrammar::LabeledExpressionSequenceBody0
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::JSON::Ext::Generator::GeneratorMethods::Object
end

class String
  include ::Comparable
  include ::JSON::Ext::Generator::GeneratorMethods::String
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end
