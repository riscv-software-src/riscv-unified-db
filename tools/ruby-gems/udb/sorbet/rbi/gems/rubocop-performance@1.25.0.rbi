# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-performance` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-performance`.


# source://rubocop-performance//lib/rubocop/performance.rb#3
module RuboCop; end

# source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#4
module RuboCop::Cop; end

module RuboCop::Cop::Lint; end

class RuboCop::Cop::Lint::UnusedMethodArgument < ::RuboCop::Cop::Base
  # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#75
  def not_implemented?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#128
  def allowed_exception_class?(node); end

  # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#90
  def autocorrect(corrector, node); end

  # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#94
  def check_argument(variable); end

  # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#102
  def ignored_method?(body); end

  # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#107
  def message(variable); end

  class << self
    # source://rubocop-performance//lib/rubocop-performance.rb#12
    def autocorrect_incompatible_with; end

    # source://rubocop/1.76.2/lib/rubocop/cop/lint/unused_method_argument.rb#84
    def joining_forces; end
  end
end

# source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#5
module RuboCop::Cop::Performance; end

# source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#19
class RuboCop::Cop::Performance::AncestorsInclude < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#26
  def ancestors_include_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#30
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#43
  def range(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#23
RuboCop::Cop::Performance::AncestorsInclude::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/ancestors_include.rb#24
RuboCop::Cop::Performance::AncestorsInclude::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#29
class RuboCop::Cop::Performance::ArraySemiInfiniteRangeSlice < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#45
  def endless_range?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#41
  def endless_range_slice?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#52
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#52
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#66
  def correction(receiver, range_node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#36
RuboCop::Cop::Performance::ArraySemiInfiniteRangeSlice::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#39
RuboCop::Cop::Performance::ArraySemiInfiniteRangeSlice::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/array_semi_infinite_range_slice.rb#38
RuboCop::Cop::Performance::ArraySemiInfiniteRangeSlice::SLICE_METHODS = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#29
class RuboCop::Cop::Performance::BigDecimalWithNumericArgument < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#39
  def big_decimal_with_numeric_argument(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#48
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#43
  def to_d(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#35
RuboCop::Cop::Performance::BigDecimalWithNumericArgument::MSG_FROM_FLOAT_TO_STRING = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#36
RuboCop::Cop::Performance::BigDecimalWithNumericArgument::MSG_FROM_INTEGER_TO_STRING = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/big_decimal_with_numeric_argument.rb#37
RuboCop::Cop::Performance::BigDecimalWithNumericArgument::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#22
class RuboCop::Cop::Performance::BindCall < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#32
  def bind_with_call_method?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#40
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#71
  def build_call_args(call_args_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#64
  def correction_range(receiver, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#58
  def message(bind_arg, call_args); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#29
RuboCop::Cop::Performance::BindCall::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/bind_call.rb#30
RuboCop::Cop::Performance::BindCall::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/block_given_with_explicit_block.rb#30
class RuboCop::Cop::Performance::BlockGivenWithExplicitBlock < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/block_given_with_explicit_block.rb#38
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/block_given_with_explicit_block.rb#36
  def reassigns_block_arg?(param0 = T.unsafe(nil), param1); end

  class << self
    # source://rubocop-performance//lib/rubocop/cop/performance/block_given_with_explicit_block.rb#54
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-performance//lib/rubocop/cop/performance/block_given_with_explicit_block.rb#34
RuboCop::Cop::Performance::BlockGivenWithExplicitBlock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/block_given_with_explicit_block.rb#33
RuboCop::Cop::Performance::BlockGivenWithExplicitBlock::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#20
class RuboCop::Cop::Performance::Caller < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#33
  def caller_with_scope_method?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#40
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#26
  def slow_caller?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#61
  def int_value(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#23
RuboCop::Cop::Performance::Caller::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/caller.rb#24
RuboCop::Cop::Performance::Caller::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#58
class RuboCop::Cop::Performance::CaseWhenSplat < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::Alignment
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::CommentsHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#67
  def on_case(case_node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#84
  def autocorrect(corrector, when_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#154
  def indent_for(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#101
  def inline_fix_branch(corrector, when_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#178
  def needs_reorder?(when_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#144
  def new_branch_without_then(node, new_condition); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#140
  def new_condition_with_then(node, new_condition); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#172
  def non_splat?(condition); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#92
  def range(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#108
  def reorder_condition(corrector, when_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#117
  def reordering_correction(when_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#96
  def replacement(conditions); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#158
  def splat_offenses(when_conditions); end

  # source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#134
  def when_branch_range(when_node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#65
RuboCop::Cop::Performance::CaseWhenSplat::ARRAY_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/case_when_splat.rb#64
RuboCop::Cop::Performance::CaseWhenSplat::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#30
class RuboCop::Cop::Performance::Casecmp < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#51
  def downcase_downcase(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#37
  def downcase_eq(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#44
  def eq_downcase(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#58
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#90
  def autocorrect(corrector, node, replacement); end

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#94
  def build_good_method(method, arg, variable); end

  # source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#73
  def take_method_apart(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#35
RuboCop::Cop::Performance::Casecmp::CASE_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#33
RuboCop::Cop::Performance::Casecmp::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/casecmp.rb#34
RuboCop::Cop::Performance::Casecmp::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#21
class RuboCop::Cop::Performance::ChainArrayAllocation < ::RuboCop::Cop::Base
  # source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#54
  def chain_array_allocation?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#62
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#75
  def enumerable_select_method?(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#35
RuboCop::Cop::Performance::ChainArrayAllocation::ALWAYS_RETURNS_NEW_ARRAY = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#43
RuboCop::Cop::Performance::ChainArrayAllocation::HAS_MUTATION_ALTERNATIVE = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#50
RuboCop::Cop::Performance::ChainArrayAllocation::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#48
RuboCop::Cop::Performance::ChainArrayAllocation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#46
RuboCop::Cop::Performance::ChainArrayAllocation::RETURNS_NEW_ARRAY = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#31
RuboCop::Cop::Performance::ChainArrayAllocation::RETURNS_NEW_ARRAY_WHEN_NO_BLOCK = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/chain_array_allocation.rb#28
RuboCop::Cop::Performance::ChainArrayAllocation::RETURN_NEW_ARRAY_WHEN_ARGS = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#42
class RuboCop::Cop::Performance::CollectionLiteralInLoop < ::RuboCop::Cop::Base
  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#86
  def enumerable_loop?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#80
  def kernel_loop?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#92
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#102
  def check_literal?(node, method, arguments); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#161
  def enumerable_method?(method_name); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#143
  def keyword_loop?(type); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#153
  def literal_class(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#139
  def loop?(ancestor, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#165
  def min_size; end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#147
  def node_within_enumerable_loop?(node, ancestor); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#130
  def nonmutable_method_of_array_or_hash?(node, method); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#113
  def optimized_array_include?(node, method, arguments); end

  # source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#135
  def parent_is_loop?(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#66
RuboCop::Cop::Performance::CollectionLiteralInLoop::ARRAY_INCLUDE_OPTIMIZED_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#64
RuboCop::Cop::Performance::CollectionLiteralInLoop::ARRAY_METHODS = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#49
RuboCop::Cop::Performance::CollectionLiteralInLoop::ENUMERABLE_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#76
RuboCop::Cop::Performance::CollectionLiteralInLoop::HASH_METHODS = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#47
RuboCop::Cop::Performance::CollectionLiteralInLoop::LOOP_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#43
RuboCop::Cop::Performance::CollectionLiteralInLoop::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#50
RuboCop::Cop::Performance::CollectionLiteralInLoop::NONMUTATING_ARRAY_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#68
RuboCop::Cop::Performance::CollectionLiteralInLoop::NONMUTATING_HASH_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#46
RuboCop::Cop::Performance::CollectionLiteralInLoop::POST_CONDITION_LOOP_TYPES = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/collection_literal_in_loop.rb#78
RuboCop::Cop::Performance::CollectionLiteralInLoop::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#30
class RuboCop::Cop::Performance::CompareWithBlock < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#41
  def compare?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#55
  def on_block(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#48
  def replaceable_body?(param0 = T.unsafe(nil), param1, param2); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#114
  def compare_range(send, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#91
  def message(send, method, var_a, var_b, args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#76
  def slow_compare?(method, args_a, args_b); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#34
RuboCop::Cop::Performance::CompareWithBlock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/compare_with_block.rb#38
RuboCop::Cop::Performance::CompareWithBlock::REPLACEMENT = T.let(T.unsafe(nil), Hash)

# source://rubocop-performance//lib/rubocop/cop/performance/concurrent_monotonic_time.rb#17
class RuboCop::Cop::Performance::ConcurrentMonotonicTime < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/concurrent_monotonic_time.rb#23
  def concurrent_monotonic_time?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/concurrent_monotonic_time.rb#28
  def on_send(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/concurrent_monotonic_time.rb#20
RuboCop::Cop::Performance::ConcurrentMonotonicTime::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/concurrent_monotonic_time.rb#21
RuboCop::Cop::Performance::ConcurrentMonotonicTime::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#36
class RuboCop::Cop::Performance::ConstantRegexp < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#45
  def on_regexp(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#59
  def regexp_escape?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#64
  def include_interpolated_const?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#55
  def within_allowed_assignment?(node); end

  class << self
    # source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#41
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-performance//lib/rubocop/cop/performance/constant_regexp.rb#39
RuboCop::Cop::Performance::ConstantRegexp::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/count.rb#48
class RuboCop::Cop::Performance::Count < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#55
  def count_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#62
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#62
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#79
  def autocorrect(corrector, node, selector_node, selector); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#89
  def eligible_node?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#132
  def negate_block_pass_as_inline_block(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#111
  def negate_block_pass_reject(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#118
  def negate_block_reject(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#128
  def negate_expression(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#103
  def negate_reject(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/count.rb#93
  def source_starting_at(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/count.rb#52
RuboCop::Cop::Performance::Count::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/count.rb#53
RuboCop::Cop::Performance::Count::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#49
class RuboCop::Cop::Performance::DeletePrefix < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RegexpMetacharacter
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#66
  def delete_prefix_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#71
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#71
  def on_send(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#56
RuboCop::Cop::Performance::DeletePrefix::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#59
RuboCop::Cop::Performance::DeletePrefix::PREFERRED_METHODS = T.let(T.unsafe(nil), Hash)

# source://rubocop-performance//lib/rubocop/cop/performance/delete_prefix.rb#57
RuboCop::Cop::Performance::DeletePrefix::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#49
class RuboCop::Cop::Performance::DeleteSuffix < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RegexpMetacharacter
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#66
  def delete_suffix_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#71
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#71
  def on_send(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#56
RuboCop::Cop::Performance::DeleteSuffix::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#59
RuboCop::Cop::Performance::DeleteSuffix::PREFERRED_METHODS = T.let(T.unsafe(nil), Hash)

# source://rubocop-performance//lib/rubocop/cop/performance/delete_suffix.rb#57
RuboCop::Cop::Performance::DeleteSuffix::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#30
class RuboCop::Cop::Performance::Detect < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#41
  def detect_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#50
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#50
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#70
  def accept_first_call?(receiver, body); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#102
  def autocorrect(corrector, node, replacement); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#128
  def lazy?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#113
  def message_for_method(method, index); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#124
  def preferred_method; end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#79
  def register_offense(node, receiver, second_method, index); end

  # source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#94
  def replacement(method, index); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#33
RuboCop::Cop::Performance::Detect::CANDIDATE_METHODS = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#37
RuboCop::Cop::Performance::Detect::INDEX_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#38
RuboCop::Cop::Performance::Detect::INDEX_REVERSE_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#35
RuboCop::Cop::Performance::Detect::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#39
RuboCop::Cop::Performance::Detect::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/detect.rb#36
RuboCop::Cop::Performance::Detect::REVERSE_MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#41
class RuboCop::Cop::Performance::DoubleStartEndWith < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#96
  def check_with_active_support_aliases(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#46
  def on_or(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#90
  def two_start_end_with_calls(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#60
  def autocorrect(corrector, first_call_args, second_call_args, combined_args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#86
  def check_for_active_support_aliases?; end

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#82
  def combine_args(first_call_args, second_call_args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#76
  def message(node, receiver, first_call_args, method, combined_args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#68
  def process_source(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/double_start_end_with.rb#44
RuboCop::Cop::Performance::DoubleStartEndWith::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#49
class RuboCop::Cop::Performance::EndWith < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RegexpMetacharacter
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#63
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#63
  def on_match_with_lvasgn(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#63
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#56
  def redundant_regex?(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#53
RuboCop::Cop::Performance::EndWith::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/end_with.rb#54
RuboCop::Cop::Performance::EndWith::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#48
class RuboCop::Cop::Performance::FixedSize < ::RuboCop::Cop::Base
  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#52
  def counter(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#56
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#56
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#73
  def allowed_argument?(arg); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#77
  def allowed_parent?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#69
  def allowed_variable?(var); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#87
  def contains_double_splat?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#81
  def contains_splat?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#93
  def non_string_argument?(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#49
RuboCop::Cop::Performance::FixedSize::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/fixed_size.rb#50
RuboCop::Cop::Performance::FixedSize::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#18
class RuboCop::Cop::Performance::FlatMap < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#28
  def flat_map_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#39
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#39
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#73
  def autocorrect(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#53
  def offense_for_levels(node, map_node, first_method, flatten); end

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#59
  def offense_for_method(node, map_node, first_method, flatten); end

  # source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#63
  def register_offense(node, map_node, first_method, flatten, message); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#24
RuboCop::Cop::Performance::FlatMap::FLATTEN_MULTIPLE_LEVELS = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#22
RuboCop::Cop::Performance::FlatMap::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/flat_map.rb#23
RuboCop::Cop::Performance::FlatMap::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#42
class RuboCop::Cop::Performance::InefficientHashSearch < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#47
  def inefficient_include?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#51
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#51
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#90
  def correct_argument(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#98
  def correct_dot(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#94
  def correct_hash_expression(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#75
  def correct_method(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#82
  def current_method(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#67
  def message(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#71
  def replacement(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#86
  def use_long_method; end
end

# source://rubocop-performance//lib/rubocop/cop/performance/inefficient_hash_search.rb#45
RuboCop::Cop::Performance::InefficientHashSearch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#27
class RuboCop::Cop::Performance::IoReadlines < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#42
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#34
  def readlines_on_class?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#38
  def readlines_on_instance?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#58
  def autocorrect(corrector, enumerable_call, readlines_call, receiver); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#90
  def build_bad_method(enumerable_call); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#106
  def build_call_args(call_args_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#82
  def build_good_method(enumerable_call); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#94
  def correction_range(enumerable_call, readlines_call); end

  # source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#76
  def offense_range(enumerable_call, readlines_call); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#31
RuboCop::Cop::Performance::IoReadlines::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/io_readlines.rb#32
RuboCop::Cop::Performance::IoReadlines::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#31
class RuboCop::Cop::Performance::MapCompact < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#41
  def map_compact(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#54
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#54
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#95
  def compact_method_with_final_newline_range(compact_method_range); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#91
  def invoke_method_after_map_compact_on_same_line?(compact_node, chained_method); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#87
  def map_method_and_compact_method_on_same_line?(map_node, compact_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#69
  def remove_compact_method(corrector, map_node, compact_node, chained_method); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#83
  def use_dot?(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#36
RuboCop::Cop::Performance::MapCompact::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/map_compact.rb#37
RuboCop::Cop::Performance::MapCompact::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/map_method_chain.rb#43
class RuboCop::Cop::Performance::MapMethodChain < ::RuboCop::Cop::Base
  # source://rubocop-performance//lib/rubocop/cop/performance/map_method_chain.rb#49
  def block_pass_with_symbol_arg?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/map_method_chain.rb#53
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/map_method_chain.rb#72
  def find_begin_of_chained_map_method(node, map_args); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/map_method_chain.rb#46
RuboCop::Cop::Performance::MapMethodChain::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/map_method_chain.rb#47
RuboCop::Cop::Performance::MapMethodChain::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/method_object_as_block.rb#19
class RuboCop::Cop::Performance::MethodObjectAsBlock < ::RuboCop::Cop::Base
  # source://rubocop-performance//lib/rubocop/cop/performance/method_object_as_block.rb#22
  def method_object_as_argument?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/method_object_as_block.rb#26
  def on_block_pass(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/method_object_as_block.rb#20
RuboCop::Cop::Performance::MethodObjectAsBlock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/open_struct.rb#34
class RuboCop::Cop::Performance::OpenStruct < ::RuboCop::Cop::Base
  # source://rubocop-performance//lib/rubocop/cop/performance/open_struct.rb#42
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/open_struct.rb#38
  def open_struct(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/open_struct.rb#35
RuboCop::Cop::Performance::OpenStruct::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/open_struct.rb#36
RuboCop::Cop::Performance::OpenStruct::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/range_include.rb#29
class RuboCop::Cop::Performance::RangeInclude < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/range_include.rb#44
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/range_include.rb#44
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/range_include.rb#40
  def range_include(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/range_include.rb#32
RuboCop::Cop::Performance::RangeInclude::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/range_include.rb#33
RuboCop::Cop::Performance::RangeInclude::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#25
class RuboCop::Cop::Performance::RedundantBlockCall < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#43
  def blockarg_assigned?(param0, param1); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#39
  def blockarg_calls(param0, param1); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#34
  def blockarg_def(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#47
  def on_def(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#47
  def on_defs(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#99
  def args_include_block_pass?(blockcall); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#65
  def autocorrect(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#83
  def calls_to_report(argname, body); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#93
  def shadowed_block_argument?(body, block_argument_of_method_signature); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#31
RuboCop::Cop::Performance::RedundantBlockCall::CLOSE_PAREN = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#28
RuboCop::Cop::Performance::RedundantBlockCall::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#30
RuboCop::Cop::Performance::RedundantBlockCall::OPEN_PAREN = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#32
RuboCop::Cop::Performance::RedundantBlockCall::SPACE = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_block_call.rb#29
RuboCop::Cop::Performance::RedundantBlockCall::YIELD = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#49
class RuboCop::Cop::Performance::RedundantEqualityComparisonBlock < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#62
  def on_block(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#131
  def allow_regexp_match?; end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#104
  def new_argument(block_argument, block_body); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#127
  def offense_range(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#82
  def one_block_argument?(block_arguments); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#94
  def same_block_argument_and_is_a_argument?(block_body, block_argument); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#118
  def use_block_argument_in_method_argument_of_operand?(block_argument, operand); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#86
  def use_equality_comparison_block?(block_body); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#58
RuboCop::Cop::Performance::RedundantEqualityComparisonBlock::COMPARISON_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#60
RuboCop::Cop::Performance::RedundantEqualityComparisonBlock::IS_A_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#55
RuboCop::Cop::Performance::RedundantEqualityComparisonBlock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#59
RuboCop::Cop::Performance::RedundantEqualityComparisonBlock::REGEXP_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_equality_comparison_block.rb#57
RuboCop::Cop::Performance::RedundantEqualityComparisonBlock::TARGET_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#20
class RuboCop::Cop::Performance::RedundantMatch < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#30
  def match_call?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#39
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#35
  def only_truthiness_matters?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#51
  def autocorrect(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#57
  def autocorrectable?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#86
  def call_like?(arg); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#63
  def replacement(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#73
  def requires_parentheses?(arg); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#80
  def requires_parentheses_for_call_like?(arg); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#26
RuboCop::Cop::Performance::RedundantMatch::HIGHER_PRECEDENCE_OPERATOR_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#23
RuboCop::Cop::Performance::RedundantMatch::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_match.rb#24
RuboCop::Cop::Performance::RedundantMatch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#30
class RuboCop::Cop::Performance::RedundantMerge < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::Alignment
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#48
  def modifier_flow_control?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#52
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#44
  def redundant_merge_candidate(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#106
  def correct_multiple_elements(corrector, node, parent, new_source); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#118
  def correct_single_element(corrector, node, new_source); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#79
  def each_redundant_merge(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#98
  def kwsplat_used?(pairs); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#144
  def leading_spaces(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#148
  def max_key_value_pairs; end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#71
  def message(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#87
  def non_redundant_merge?(node, receiver, pairs); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#94
  def non_redundant_pairs?(receiver, pairs); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#102
  def non_redundant_value_used?(receiver, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#132
  def rewrite_with_modifier(node, parent, new_source); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#122
  def to_assignments(receiver, pairs); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#34
RuboCop::Cop::Performance::RedundantMerge::AREF_ASGN = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#154
class RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#157
  def initialize(node, receiver); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#188
  def each_with_object_node(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#162
  def value_used?; end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#172
  def eligible_receiver?; end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#170
  def node; end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#170
  def receiver; end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#176
  def second_argument; end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#183
  def unwind(receiver); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#35
RuboCop::Cop::Performance::RedundantMerge::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#36
RuboCop::Cop::Performance::RedundantMerge::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_merge.rb#38
RuboCop::Cop::Performance::RedundantMerge::WITH_MODIFIER_CORRECTION = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_sort_block.rb#15
class RuboCop::Cop::Performance::RedundantSortBlock < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::SortBlock
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_sort_block.rb#21
  def on_block(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_sort_block.rb#29
  def on_numblock(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_sort_block.rb#40
  def register_offense(send, node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_sort_block.rb#19
RuboCop::Cop::Performance::RedundantSortBlock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#15
class RuboCop::Cop::Performance::RedundantSplitRegexpArgument < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#27
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#27
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#23
  def split_call_with_regexp?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#42
  def determinist_regexp?(regexp_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#46
  def replacement(regexp_node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#20
RuboCop::Cop::Performance::RedundantSplitRegexpArgument::DETERMINISTIC_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#18
RuboCop::Cop::Performance::RedundantSplitRegexpArgument::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#19
RuboCop::Cop::Performance::RedundantSplitRegexpArgument::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_split_regexp_argument.rb#21
RuboCop::Cop::Performance::RedundantSplitRegexpArgument::STR_SPECIAL_CHARS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#43
class RuboCop::Cop::Performance::RedundantStringChars < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#54
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#50
  def redundant_chars_call?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#112
  def build_bad_method(method, args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#125
  def build_call_args(call_args_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#85
  def build_good_method(method, args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#100
  def build_good_method_for_brackets_or_first_method(method, args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#79
  def build_message(method, args); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#75
  def correction_range(receiver, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#71
  def offense_range(receiver, node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#47
RuboCop::Cop::Performance::RedundantStringChars::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/redundant_string_chars.rb#48
RuboCop::Cop::Performance::RedundantStringChars::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#75
class RuboCop::Cop::Performance::RegexpMatch < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#125
  def last_matches(param0); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#86
  def match_method?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#122
  def match_node?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#97
  def match_operator?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#101
  def match_threequals?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#93
  def match_with_int_arg_method?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#105
  def match_with_lvasgn?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#142
  def on_case(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#138
  def on_if(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#123
  def search_match_nodes(param0); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#165
  def autocorrect(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#154
  def check_condition(cond); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#250
  def correct_operator(corrector, recv, arg, oper = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#221
  def find_last_match(body, range, scope_root); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#181
  def last_match_used?(match_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#246
  def match_gvar?(sym); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#177
  def message(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#217
  def modifier_form?(match_node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#203
  def next_match_pos(body, match_node_pos, scope_root); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#190
  def range_to_search_for_last_matches(match_node, body, scope_root); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#259
  def replace_with_match_predicate_method(corrector, recv, arg, op_range); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#228
  def scope_body(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#240
  def scope_root(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#270
  def swap_receiver_and_arg(corrector, recv, arg); end

  class << self
    # source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#134
    def autocorrect_incompatible_with; end
  end
end

# source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#112
RuboCop::Cop::Performance::RegexpMatch::MATCH_NODE_PATTERN = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#84
RuboCop::Cop::Performance::RegexpMatch::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/regexp_match.rb#83
RuboCop::Cop::Performance::RegexpMatch::TYPES_IMPLEMENTING_MATCH = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#22
class RuboCop::Cop::Performance::ReverseEach < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#33
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#33
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#29
  def reverse_each?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#54
  def offense_range(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#48
  def use_return_value?(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#26
RuboCop::Cop::Performance::ReverseEach::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/reverse_each.rb#27
RuboCop::Cop::Performance::ReverseEach::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#19
class RuboCop::Cop::Performance::ReverseFirst < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#30
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#30
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#26
  def reverse_first_candidate?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#56
  def build_good_method(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#50
  def build_message(node, range); end

  # source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#46
  def correction_range(receiver, node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#23
RuboCop::Cop::Performance::ReverseFirst::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/reverse_first.rb#24
RuboCop::Cop::Performance::ReverseFirst::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#18
class RuboCop::Cop::Performance::SelectMap < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#27
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#27
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#41
  def map_method_candidate(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#51
  def offense_range(node, map_method); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#24
RuboCop::Cop::Performance::SelectMap::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/select_map.rb#25
RuboCop::Cop::Performance::SelectMap::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/size.rb#37
class RuboCop::Cop::Performance::Size < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/size.rb#43
  def array?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/size.rb#61
  def count?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/size.rb#52
  def hash?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/size.rb#65
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/size.rb#65
  def on_send(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/size.rb#40
RuboCop::Cop::Performance::Size::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/size.rb#41
RuboCop::Cop::Performance::Size::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/sort_reverse.rb#16
class RuboCop::Cop::Performance::SortReverse < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Cop::SortBlock
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/sort_reverse.rb#22
  def on_block(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sort_reverse.rb#30
  def on_numblock(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/sort_reverse.rb#42
  def register_offense(send, node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/sort_reverse.rb#20
RuboCop::Cop::Performance::SortReverse::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#21
class RuboCop::Cop::Performance::Squeeze < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#39
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#39
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#29
  def squeeze_candidate?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#65
  def repeating_literal?(regex_str); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#24
RuboCop::Cop::Performance::Squeeze::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#27
RuboCop::Cop::Performance::Squeeze::PREFERRED_METHODS = T.let(T.unsafe(nil), Hash)

# source://rubocop-performance//lib/rubocop/cop/performance/squeeze.rb#25
RuboCop::Cop::Performance::Squeeze::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#49
class RuboCop::Cop::Performance::StartWith < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RegexpMetacharacter
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#63
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#63
  def on_match_with_lvasgn(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#63
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#56
  def redundant_regex?(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#53
RuboCop::Cop::Performance::StartWith::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/start_with.rb#54
RuboCop::Cop::Performance::StartWith::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_bytesize.rb#22
class RuboCop::Cop::Performance::StringBytesize < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/string_bytesize.rb#32
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_bytesize.rb#32
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_bytesize.rb#28
  def string_bytes_method?(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/string_bytesize.rb#25
RuboCop::Cop::Performance::StringBytesize::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/string_bytesize.rb#26
RuboCop::Cop::Performance::StringBytesize::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#33
class RuboCop::Cop::Performance::StringIdentifierArgument < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#62
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#97
  def argument_replacement(node, value); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#87
  def register_offense(argument, argument_value); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#75
  def string_arguments(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#38
RuboCop::Cop::Performance::StringIdentifierArgument::COMMAND_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#36
RuboCop::Cop::Performance::StringIdentifierArgument::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#44
RuboCop::Cop::Performance::StringIdentifierArgument::MULTIPLE_ARGUMENTS_METHODS = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#52
RuboCop::Cop::Performance::StringIdentifierArgument::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_identifier_argument.rb#43
RuboCop::Cop::Performance::StringIdentifierArgument::TWO_ARGUMENTS_METHOD = T.let(T.unsafe(nil), Symbol)

# source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#23
class RuboCop::Cop::Performance::StringInclude < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#37
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#37
  def on_match_with_lvasgn(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#37
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#29
  def redundant_regex?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#59
  def literal?(regex_str); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#26
RuboCop::Cop::Performance::StringInclude::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/string_include.rb#27
RuboCop::Cop::Performance::StringInclude::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#20
class RuboCop::Cop::Performance::StringReplacement < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#37
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#37
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#31
  def string_replacement?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#84
  def accept_first_param?(first_param); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#79
  def accept_second_param?(second_param); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#60
  def autocorrect(corrector, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#100
  def first_source(first_param); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#143
  def message(node, first_source, second_source); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#149
  def method_suffix(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#49
  def offense(node, first_param, second_param); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#129
  def range(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#153
  def remove_second_param(corrector, node, first_param); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#70
  def replace_method(corrector, node, first_source, second_source, first_param); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#133
  def replacement_method(node, first_source, second_source); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#118
  def source_from_regex_constructor(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#111
  def source_from_regex_literal(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#29
RuboCop::Cop::Performance::StringReplacement::BANG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#27
RuboCop::Cop::Performance::StringReplacement::DELETE = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#26
RuboCop::Cop::Performance::StringReplacement::DETERMINISTIC_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#24
RuboCop::Cop::Performance::StringReplacement::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#25
RuboCop::Cop::Performance::StringReplacement::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/string_replacement.rb#28
RuboCop::Cop::Performance::StringReplacement::TR = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#70
class RuboCop::Cop::Performance::Sum < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#102
  def acc_plus_elem?(param0 = T.unsafe(nil), param1, param2); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#102
  def elem_plus_acc?(param0 = T.unsafe(nil), param1, param2); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#115
  def on_block(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#107
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#107
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#82
  def sum_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#86
  def sum_map_candidate?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#95
  def sum_with_block_candidate?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#160
  def array_literal?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#165
  def autocorrect(corrector, init, range); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#173
  def autocorrect_sum_map(corrector, sum, map, init); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#250
  def build_block_bad_method(method, init, var_acc, var_elem, body); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#217
  def build_block_message(send, init, var_acc, var_elem, body); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#223
  def build_good_method(init, block_pass = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#236
  def build_method_bad_method(init, method, operation); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#198
  def build_method_message(node, method, init, operation); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#209
  def build_sum_map_message(send_node, init); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#155
  def empty_array_literal?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#130
  def handle_sum_candidate(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#143
  def handle_sum_map_candidate(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#261
  def method_call_with_args_range(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#194
  def sum_block_range(send, node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#190
  def sum_map_range(map, sum); end

  # source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#186
  def sum_method_range(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#77
RuboCop::Cop::Performance::Sum::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#78
RuboCop::Cop::Performance::Sum::MSG_IF_NO_INIT_VALUE = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/sum.rb#80
RuboCop::Cop::Performance::Sum::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#32
class RuboCop::Cop::Performance::TimesMap < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#51
  def on_block(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#46
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#51
  def on_itblock(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#51
  def on_numblock(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#46
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#39
  def times_map_call(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#59
  def check(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#71
  def handleable_receiver?(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#78
  def message(map_or_collect, count); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#35
RuboCop::Cop::Performance::TimesMap::MESSAGE = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#36
RuboCop::Cop::Performance::TimesMap::MESSAGE_ONLY_IF = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/times_map.rb#37
RuboCop::Cop::Performance::TimesMap::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#27
class RuboCop::Cop::Performance::UnfreezeString < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetRubyVersion

  # source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#36
  def dup_string?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#47
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#40
  def string_new?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#60
  def string_value(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#33
RuboCop::Cop::Performance::UnfreezeString::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/unfreeze_string.rb#34
RuboCop::Cop::Performance::UnfreezeString::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/uri_default_parser.rb#15
class RuboCop::Cop::Performance::UriDefaultParser < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/uri_default_parser.rb#27
  def on_send(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/uri_default_parser.rb#21
  def uri_parser_new?(param0 = T.unsafe(nil)); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/uri_default_parser.rb#18
RuboCop::Cop::Performance::UriDefaultParser::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/uri_default_parser.rb#19
RuboCop::Cop::Performance::UriDefaultParser::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#20
class RuboCop::Cop::Performance::ZipWithoutBlock < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#27
  def map_with_array?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#35
  def on_csend(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#35
  def on_send(node); end

  private

  # source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#51
  def offense_range(node); end

  # source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#44
  def register_offense(node); end
end

# source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#23
RuboCop::Cop::Performance::ZipWithoutBlock::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-performance//lib/rubocop/cop/performance/zip_without_block.rb#24
RuboCop::Cop::Performance::ZipWithoutBlock::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#6
module RuboCop::Cop::RegexpMetacharacter
  private

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#63
  def drop_end_metacharacter(regexp_string); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#55
  def drop_start_metacharacter(regexp_string); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#15
  def literal_at_end?(regexp); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#41
  def literal_at_end_with_backslash_z?(regex_str); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#48
  def literal_at_end_with_dollar?(regex_str); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#9
  def literal_at_start?(regexp); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#21
  def literal_at_start_with_backslash_a?(regex_str); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#31
  def literal_at_start_with_caret?(regex_str); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/regexp_metacharacter.rb#71
  def safe_multiline?; end
end

# source://rubocop-performance//lib/rubocop/cop/mixin/sort_block.rb#6
module RuboCop::Cop::SortBlock
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::AST::NodePattern::Macros

  # source://rubocop-performance//lib/rubocop/cop/mixin/sort_block.rb#24
  def replaceable_body?(param0 = T.unsafe(nil), param1, param2); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/sort_block.rb#10
  def sort_with_block?(param0 = T.unsafe(nil)); end

  # source://rubocop-performance//lib/rubocop/cop/mixin/sort_block.rb#17
  def sort_with_numblock?(param0 = T.unsafe(nil)); end

  private

  # source://rubocop-performance//lib/rubocop/cop/mixin/sort_block.rb#30
  def sort_range(send, node); end
end

# source://rubocop-performance//lib/rubocop/performance.rb#5
module RuboCop::Performance; end

# source://rubocop-performance//lib/rubocop/performance/plugin.rb#8
class RuboCop::Performance::Plugin < ::LintRoller::Plugin
  # source://rubocop-performance//lib/rubocop/performance/plugin.rb#9
  def about; end

  # source://rubocop-performance//lib/rubocop/performance/plugin.rb#22
  def rules(_context); end

  # source://rubocop-performance//lib/rubocop/performance/plugin.rb#18
  def supported?(context); end
end

# source://rubocop-performance//lib/rubocop/performance/version.rb#6
module RuboCop::Performance::Version
  class << self
    # source://rubocop-performance//lib/rubocop/performance/version.rb#9
    def document_version; end
  end
end

# source://rubocop-performance//lib/rubocop/performance/version.rb#7
RuboCop::Performance::Version::STRING = T.let(T.unsafe(nil), String)
