# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `idlc` gem.
# Please instead update this file by running `bin/tapioca gem idlc`.


# source://idlc//lib/idlc/syntax_node.rb#48
module Idl
  include ::Treetop::Runtime

  # source://idlc//lib/idlc/idl_parser.rb#6275
  def _nt_ary_access; end

  # source://idlc//lib/idlc/idl_parser.rb#6173
  def _nt_ary_eligible_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#11728
  def _nt_ary_size_decl; end

  # source://idlc//lib/idlc/idl_parser.rb#10974
  def _nt_assignment; end

  # source://idlc//lib/idlc/idl_parser.rb#889
  def _nt_bitfield_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#6576
  def _nt_bits_cast; end

  # source://idlc//lib/idlc/idl_parser.rb#9484
  def _nt_body_function_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#10248
  def _nt_builtin_function_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#16220
  def _nt_builtin_read_only_var; end

  # source://idlc//lib/idlc/idl_parser.rb#16244
  def _nt_builtin_read_write_var; end

  # source://idlc//lib/idlc/idl_parser.rb#14581
  def _nt_builtin_type_name; end

  # source://idlc//lib/idlc/idl_parser.rb#15830
  def _nt_comment; end

  # source://idlc//lib/idlc/idl_parser.rb#5747
  def _nt_concatenation_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#8484
  def _nt_constraint_body; end

  # source://idlc//lib/idlc/idl_parser.rb#5888
  def _nt_csr_field_access_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#16326
  def _nt_csr_field_name; end

  # source://idlc//lib/idlc/idl_parser.rb#16271
  def _nt_csr_name; end

  # source://idlc//lib/idlc/idl_parser.rb#5962
  def _nt_csr_register_access_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#12080
  def _nt_declaration; end

  # source://idlc//lib/idlc/idl_parser.rb#12520
  def _nt_dontcare_lvalue; end

  # source://idlc//lib/idlc/idl_parser.rb#12544
  def _nt_dontcare_return; end

  # source://idlc//lib/idlc/idl_parser.rb#468
  def _nt_enum_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#780
  def _nt_enum_ref; end

  # source://idlc//lib/idlc/idl_parser.rb#6699
  def _nt_enum_to_a; end

  # source://idlc//lib/idlc/idl_parser.rb#13629
  def _nt_execute_if_block; end

  # source://idlc//lib/idlc/idl_parser.rb#8574
  def _nt_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#10703
  def _nt_fetch; end

  # source://idlc//lib/idlc/idl_parser.rb#6058
  def _nt_field_access_eligible_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#6106
  def _nt_field_access_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#15704
  def _nt_field_name; end

  # source://idlc//lib/idlc/idl_parser.rb#14238
  def _nt_for_loop; end

  # source://idlc//lib/idlc/idl_parser.rb#11948
  def _nt_for_loop_iteration_variable_declaration; end

  # source://idlc//lib/idlc/idl_parser.rb#9302
  def _nt_function_arg_list; end

  # source://idlc//lib/idlc/idl_parser.rb#15978
  def _nt_function_body; end

  # source://idlc//lib/idlc/idl_parser.rb#8787
  def _nt_function_call; end

  # source://idlc//lib/idlc/idl_parser.rb#8654
  def _nt_function_call_template_arguments; end

  # source://idlc//lib/idlc/idl_parser.rb#10799
  def _nt_function_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#12971
  def _nt_function_if_block; end

  # source://idlc//lib/idlc/idl_parser.rb#9207
  def _nt_function_name; end

  # source://idlc//lib/idlc/idl_parser.rb#15921
  def _nt_function_statement; end

  # source://idlc//lib/idlc/idl_parser.rb#290
  def _nt_global_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#16156
  def _nt_id; end

  # source://idlc//lib/idlc/idl_parser.rb#8020
  def _nt_implication_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#8118
  def _nt_implication_for_loop; end

  # source://idlc//lib/idlc/idl_parser.rb#8421
  def _nt_implication_statement; end

  # source://idlc//lib/idlc/idl_parser.rb#196
  def _nt_include_statement; end

  # source://idlc//lib/idlc/idl_parser.rb#16062
  def _nt_instruction_operation; end

  # source://idlc//lib/idlc/idl_parser.rb#1529
  def _nt_int; end

  # source://idlc//lib/idlc/idl_parser.rb#26
  def _nt_isa; end

  # source://idlc//lib/idlc/idl_parser.rb#14958
  def _nt_keyword; end

  # source://idlc//lib/idlc/idl_parser.rb#3517
  def _nt_p0_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#2897
  def _nt_p0_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#3635
  def _nt_p1_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#2965
  def _nt_p1_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#3753
  def _nt_p2_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3033
  def _nt_p2_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#3871
  def _nt_p3_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3101
  def _nt_p3_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#3169
  def _nt_p3_template_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#4107
  def _nt_p4_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3213
  def _nt_p4_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#4343
  def _nt_p5_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3260
  def _nt_p5_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#4579
  def _nt_p6_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3313
  def _nt_p6_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#4815
  def _nt_p7_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3340
  def _nt_p7_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#5051
  def _nt_p8_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3393
  def _nt_p8_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#5287
  def _nt_p9_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3417
  def _nt_p9_binary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#5510
  def _nt_paren_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#6462
  def _nt_post_dec; end

  # source://idlc//lib/idlc/idl_parser.rb#6519
  def _nt_post_inc; end

  # source://idlc//lib/idlc/idl_parser.rb#5594
  def _nt_replication_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#15788
  def _nt_reserved; end

  # source://idlc//lib/idlc/idl_parser.rb#12596
  def _nt_return_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#12778
  def _nt_return_statement; end

  # source://idlc//lib/idlc/idl_parser.rb#10831
  def _nt_rval; end

  # source://idlc//lib/idlc/idl_parser.rb#12252
  def _nt_single_declaration; end

  # source://idlc//lib/idlc/idl_parser.rb#11819
  def _nt_single_declaration_with_initialization; end

  # source://idlc//lib/idlc/idl_parser.rb#16596
  def _nt_space; end

  # source://idlc//lib/idlc/idl_parser.rb#12350
  def _nt_statement; end

  # source://idlc//lib/idlc/idl_parser.rb#16501
  def _nt_string; end

  # source://idlc//lib/idlc/idl_parser.rb#1213
  def _nt_struct_definition; end

  # source://idlc//lib/idlc/idl_parser.rb#8606
  def _nt_template_safe_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3989
  def _nt_template_safe_p3_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#4225
  def _nt_template_safe_p4_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#4461
  def _nt_template_safe_p5_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#4697
  def _nt_template_safe_p6_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#4933
  def _nt_template_safe_p7_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#5169
  def _nt_template_safe_p8_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#5405
  def _nt_template_safe_p9_binary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#7903
  def _nt_template_safe_ternary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#7782
  def _nt_ternary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#15756
  def _nt_type_name; end

  # source://idlc//lib/idlc/idl_parser.rb#6866
  def _nt_unary_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#3441
  def _nt_unary_operator; end

  # source://idlc//lib/idlc/idl_parser.rb#15637
  def _nt_user_type_name; end

  # source://idlc//lib/idlc/idl_parser.rb#16385
  def _nt_var_write; end

  # source://idlc//lib/idlc/idl_parser.rb#1397
  def _nt_version_string; end

  # source://idlc//lib/idlc/idl_parser.rb#12
  def root; end

  class << self
    # source://idlc//lib/idlc/log.rb#15
    sig { returns(::Logger) }
    def logger; end

    # source://idlc//lib/idlc/log.rb#20
    sig { params(logger: ::Logger).returns(::Logger) }
    def set_logger(logger); end
  end
end

# source://idlc//lib/idlc/ast.rb#1125
class Idl::ArrayIncludesAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1135
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      ary: T.all(::Idl::AstNode, ::Idl::Rvalue),
      value: T.all(::Idl::AstNode, ::Idl::Rvalue)
    ).void
  end
  def initialize(input, interval, ary, value); end

  # source://idlc//lib/idlc/ast.rb#1129
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def ary; end

  # source://idlc//lib/idlc/ast.rb#1163
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1132
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def expr; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#304
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1166
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#142
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#1153
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1140
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1158
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1119
class Idl::ArrayIncludesSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1120
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4297
class Idl::ArrayLiteralAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4301
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4305
  def element_nodes; end

  # source://idlc//lib/idlc/ast.rb#4303
  def entries; end

  # source://idlc//lib/idlc/ast.rb#4329
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4320
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4310
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4324
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4291
class Idl::ArrayLiteralSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4292
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1175
class Idl::ArraySizeAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1184
  def initialize(input, interval, expression); end

  # source://idlc//lib/idlc/ast.rb#1182
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1179
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#298
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1213
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1195
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1188
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1206
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Integer) }
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1169
class Idl::ArraySizeSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1170
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#6247
module Idl::AryAccess0
  # source://idlc//lib/idlc/idl_parser.rb#6248
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#6254
module Idl::AryAccess1
  # source://idlc//lib/idlc/idl_parser.rb#6259
  def lsb; end

  # source://idlc//lib/idlc/idl_parser.rb#6255
  def msb; end
end

# source://idlc//lib/idlc/idl_parser.rb#6265
module Idl::AryAccess2
  # source://idlc//lib/idlc/idl_parser.rb#6266
  def a; end

  # source://idlc//lib/idlc/idl_parser.rb#6270
  def brackets; end
end

# source://idlc//lib/idlc/ast.rb#1867
class Idl::AryAccessSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1871
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1887
class Idl::AryElementAccessAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1902
  def initialize(input, interval, var, index); end

  # source://idlc//lib/idlc/ast.rb#1891
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#229
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1900
  def index; end

  # source://idlc//lib/idlc/ast.rb#1972
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#113
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#1937
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1907
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1952
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#1899
  def var; end
end

# source://idlc//lib/idlc/ast.rb#2204
class Idl::AryElementAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2226
  def initialize(input, interval, lhs, idx, rhs); end

  # source://idlc//lib/idlc/ast.rb#2208
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2265
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2295
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#253
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2223
  def idx; end

  # source://idlc//lib/idlc/ast.rb#2222
  def lhs; end

  # source://idlc//lib/idlc/ast.rb#2224
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2330
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2231
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2194
class Idl::AryElementAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2195
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1975
class Idl::AryRangeAccessAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1993
  def initialize(input, interval, var, msb, lsb); end

  # source://idlc//lib/idlc/ast.rb#1979
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#168
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1991
  def lsb; end

  # source://idlc//lib/idlc/ast.rb#1990
  def msb; end

  # source://idlc//lib/idlc/ast.rb#2046
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2023
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1998
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2039
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#1989
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def var; end
end

# source://idlc//lib/idlc/ast.rb#2343
class Idl::AryRangeAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2366
  def initialize(input, interval, variable, msb, lsb, write_value); end

  # source://idlc//lib/idlc/ast.rb#2347
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2403
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2431
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#20
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2363
  def lsb; end

  # source://idlc//lib/idlc/ast.rb#2362
  def msb; end

  # source://idlc//lib/idlc/ast.rb#2398
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2437
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2371
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2361
  def variable; end

  # source://idlc//lib/idlc/ast.rb#2364
  def write_value; end
end

# source://idlc//lib/idlc/ast.rb#2333
class Idl::AryRangeAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2334
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#11721
module Idl::ArySizeDecl0
  # source://idlc//lib/idlc/idl_parser.rb#11722
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#10881
module Idl::Assignment0
  # source://idlc//lib/idlc/idl_parser.rb#10882
  def var; end
end

# source://idlc//lib/idlc/idl_parser.rb#10888
module Idl::Assignment1
  # source://idlc//lib/idlc/idl_parser.rb#10889
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#10897
  def function_call; end

  # source://idlc//lib/idlc/idl_parser.rb#10893
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#10902
module Idl::Assignment2
  # source://idlc//lib/idlc/idl_parser.rb#10903
  def rval; end
end

# source://idlc//lib/idlc/idl_parser.rb#10908
module Idl::Assignment3
  # source://idlc//lib/idlc/idl_parser.rb#10913
  def rval; end

  # source://idlc//lib/idlc/idl_parser.rb#10909
  def var; end
end

# source://idlc//lib/idlc/idl_parser.rb#10918
module Idl::Assignment4
  # source://idlc//lib/idlc/idl_parser.rb#10919
  def csr_field_access_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#10923
  def rval; end
end

# source://idlc//lib/idlc/idl_parser.rb#10928
module Idl::Assignment5
  # source://idlc//lib/idlc/idl_parser.rb#10933
  def field_name; end

  # source://idlc//lib/idlc/idl_parser.rb#10929
  def id; end

  # source://idlc//lib/idlc/idl_parser.rb#10937
  def rval; end
end

# source://idlc//lib/idlc/idl_parser.rb#10942
module Idl::Assignment6
  # source://idlc//lib/idlc/idl_parser.rb#10951
  def lsb; end

  # source://idlc//lib/idlc/idl_parser.rb#10947
  def msb; end

  # source://idlc//lib/idlc/idl_parser.rb#10955
  def rval; end

  # source://idlc//lib/idlc/idl_parser.rb#10943
  def var; end
end

# source://idlc//lib/idlc/idl_parser.rb#10960
module Idl::Assignment7
  # source://idlc//lib/idlc/idl_parser.rb#10965
  def idx; end

  # source://idlc//lib/idlc/idl_parser.rb#10969
  def rval; end

  # source://idlc//lib/idlc/idl_parser.rb#10961
  def var; end
end

# source://idlc//lib/idlc/type.rb#11
class Idl::AstNode
  abstract!

  # source://idlc//lib/idlc/ast.rb#205
  sig { params(input: ::String, interval: T::Range[T.untyped], children: T::Array[::Idl::AstNode]).void }
  def initialize(input, interval, children); end

  # source://idlc//lib/idlc/ast.rb#81
  sig { returns(T::Array[::Idl::AstNode]) }
  def children; end

  # source://idlc//lib/idlc/ast.rb#199
  sig { abstract.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#257
  sig { params(klass: ::Class).returns(T.nilable(::Idl::AstNode)) }
  def find_ancestor(klass); end

  # source://idlc//lib/idlc/ast.rb#434
  sig { params(global_symtab: ::Idl::SymbolTable).returns(::Idl::AstNode) }
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#10
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#16
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#64
  sig { returns(::String) }
  def input; end

  # source://idlc//lib/idlc/ast.rb#56
  sig { returns(::Pathname) }
  def input_file; end

  # source://idlc//lib/idlc/ast.rb#481
  sig { returns(::String) }
  def inspect; end

  # source://idlc//lib/idlc/ast.rb#368
  sig { params(reason: ::String).returns(T.noreturn) }
  def internal_error(reason); end

  # source://idlc//lib/idlc/ast.rb#68
  sig { returns(T::Range[T.untyped]) }
  def interval; end

  # source://idlc//lib/idlc/ast.rb#250
  sig { returns(::Integer) }
  def lineno; end

  # source://idlc//lib/idlc/ast.rb#275
  sig { returns(::Idl::AstNode::LinesDescriptor) }
  def lines_around; end

  # source://idlc//lib/idlc/passes/prune.rb#64
  def nullify_assignments(symtab); end

  # source://idlc//lib/idlc/ast.rb#77
  sig { returns(T.nilable(::Idl::AstNode)) }
  def parent; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#11
  def pass_find_return_values(values, current_conditions); end

  # source://idlc//lib/idlc/ast.rb#443
  sig { returns(::String) }
  def path; end

  # source://idlc//lib/idlc/ast.rb#417
  sig { params(indent: ::Integer, indent_size: ::Integer, io: ::IO).void }
  def print_ast(indent = T.unsafe(nil), indent_size: T.unsafe(nil), io: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/prune.rb#45
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#13
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#12
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#239
  sig { params(filename: T.any(::Pathname, ::String), starting_line: ::Integer).void }
  def set_input_file(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#223
  sig { params(filename: T.any(::Pathname, ::String), starting_line: ::Integer).void }
  def set_input_file_unless_already_set(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#60
  sig { returns(::Integer) }
  def starting_line; end

  # source://idlc//lib/idlc/ast.rb#72
  sig { returns(::String) }
  def text_value; end

  # source://idlc//lib/idlc/ast.rb#475
  sig { abstract.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#478
  sig { overridable.returns(::String) }
  def to_idl_verbose; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#18
  sig { overridable.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#303
  sig { params(reason: ::String).void }
  def truncation_warn(reason); end

  # source://idlc//lib/idlc/ast.rb#465
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#319
  sig { params(reason: ::String).returns(T.noreturn) }
  def type_error(reason); end

  # source://idlc//lib/idlc/ast.rb#407
  sig { params(s: ::String).returns(::String) }
  def unindent(s); end

  # source://idlc//lib/idlc/ast.rb#193
  sig { params(value_result: T.untyped, block: T.proc.returns(T.untyped)).returns(T.untyped) }
  def value_else(value_result, &block); end

  # source://idlc//lib/idlc/ast.rb#398
  sig { params(reason: ::String).returns(T.noreturn) }
  def value_error(reason); end

  # source://idlc//lib/idlc/ast.rb#183
  sig { params(block: T.proc.params(arg0: ::Object).returns(T.untyped)).returns(T.untyped) }
  def value_try(&block); end

  class << self
    # source://idlc//lib/idlc/ast.rb#186
    sig { params(value_result: T.untyped, _block: T.proc.returns(T.untyped)).returns(T.untyped) }
    def value_else(value_result, &_block); end

    # source://idlc//lib/idlc/ast.rb#389
    sig { params(reason: ::String, ast: T.nilable(::Idl::AstNode)).returns(T.noreturn) }
    def value_error(reason, ast = T.unsafe(nil)); end

    # source://idlc//lib/idlc/ast.rb#381
    def value_error_ast; end

    # source://idlc//lib/idlc/ast.rb#381
    def value_error_ast=(_arg0); end

    # source://idlc//lib/idlc/ast.rb#381
    def value_error_reason; end

    # source://idlc//lib/idlc/ast.rb#381
    def value_error_reason=(_arg0); end

    # source://idlc//lib/idlc/ast.rb#179
    sig { params(block: T.proc.params(arg0: ::Object).returns(T.untyped)).returns(T.untyped) }
    def value_try(&block); end
  end
end

# source://idlc//lib/idlc/ast.rb#43
Idl::AstNode::Bits1Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#45
Idl::AstNode::Bits32Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#47
Idl::AstNode::Bits64Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#50
Idl::AstNode::BoolType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#49
Idl::AstNode::ConstBoolType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#114
class Idl::AstNode::InternalError < ::StandardError
  # source://idlc//lib/idlc/ast.rb#130
  sig { params(what: ::String).void }
  def initialize(what); end

  # source://idlc//lib/idlc/ast.rb#127
  sig { returns(T::Array[::String]) }
  def bt; end

  # source://idlc//lib/idlc/ast.rb#119
  sig { returns(::String) }
  def what; end
end

# source://idlc//lib/idlc/ast.rb#267
class Idl::AstNode::LinesDescriptor < ::T::Struct
  const :lines, ::String
  const :problem_interval, T::Range[T.untyped]
  const :lines_interval, T::Range[T.untyped]

  class << self
    # source://sorbet-runtime/0.6.12638/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/ast.rb#44
Idl::AstNode::PossiblyUnknownBits1Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#46
Idl::AstNode::PossiblyUnknownBits32Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#48
Idl::AstNode::PossiblyUnknownBits64Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#52
Idl::AstNode::StringType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#84
class Idl::AstNode::TypeError < ::StandardError
  # source://idlc//lib/idlc/ast.rb#101
  sig { params(what: ::String).void }
  def initialize(what); end

  # source://idlc//lib/idlc/ast.rb#97
  sig { returns(T::Array[::String]) }
  def bt; end

  # source://idlc//lib/idlc/ast.rb#89
  sig { returns(::String) }
  def what; end
end

# source://idlc//lib/idlc/ast.rb#144
class Idl::AstNode::ValueError < ::StandardError
  # source://idlc//lib/idlc/ast.rb#157
  sig { params(lineno: ::Integer, file: ::String, reason: ::String).void }
  def initialize(lineno, file, reason); end

  # source://idlc//lib/idlc/ast.rb#151
  sig { returns(::String) }
  def file; end

  # source://idlc//lib/idlc/ast.rb#148
  sig { returns(::Integer) }
  def lineno; end

  # source://idlc//lib/idlc/ast.rb#168
  sig { returns(::String) }
  def message; end

  # source://idlc//lib/idlc/ast.rb#154
  sig { returns(::String) }
  def reason; end

  # source://idlc//lib/idlc/ast.rb#165
  sig { returns(::String) }
  def what; end
end

# source://idlc//lib/idlc/ast.rb#51
Idl::AstNode::VoidType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#16
Idl::BasicValueRbType = T.type_alias { T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean) }

# source://idlc//lib/idlc/ast.rb#3472
class Idl::BinaryExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3491
  def initialize(input, interval, lhs, op, rhs); end

  # source://idlc//lib/idlc/ast.rb#3738
  def bits_needed(value, signed); end

  # source://idlc//lib/idlc/ast.rb#3481
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#235
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3498
  def invert(symtab); end

  # source://idlc//lib/idlc/ast.rb#3487
  def lhs; end

  # source://idlc//lib/idlc/ast.rb#3765
  def max_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#3908
  def min_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#4252
  def op; end

  # source://idlc//lib/idlc/passes/prune.rb#239
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#3488
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#3529
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#197
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#3534
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3634
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4058
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3477
Idl::BinaryExpressionAst::ARITH_OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3476
Idl::BinaryExpressionAst::BIT_OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3475
Idl::BinaryExpressionAst::LOGICAL_OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3478
Idl::BinaryExpressionAst::OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3134
class Idl::BinaryExpressionRightSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3138
  def to_ast; end

  # source://idlc//lib/idlc/ast.rb#3155
  def type_check(_symtab); end
end

# source://idlc//lib/idlc/idl_parser.rb#847
module Idl::BitfieldDefinition0
  # source://idlc//lib/idlc/idl_parser.rb#848
  def int; end
end

# source://idlc//lib/idlc/idl_parser.rb#853
module Idl::BitfieldDefinition1
  # source://idlc//lib/idlc/idl_parser.rb#854
  def int; end

  # source://idlc//lib/idlc/idl_parser.rb#858
  def lsb; end
end

# source://idlc//lib/idlc/idl_parser.rb#863
module Idl::BitfieldDefinition2
  # source://idlc//lib/idlc/idl_parser.rb#864
  def field_name; end

  # source://idlc//lib/idlc/idl_parser.rb#868
  def range; end
end

# source://idlc//lib/idlc/idl_parser.rb#874
module Idl::BitfieldDefinition3
  # source://idlc//lib/idlc/idl_parser.rb#883
  def e; end

  # source://idlc//lib/idlc/idl_parser.rb#875
  def int; end

  # source://idlc//lib/idlc/idl_parser.rb#879
  def user_type_name; end
end

# source://idlc//lib/idlc/ast.rb#1649
class Idl::BitfieldDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1655
  def initialize(input, interval, name, size, fields); end

  # source://idlc//lib/idlc/ast.rb#1708
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1653
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1680
  def element_names; end

  # source://idlc//lib/idlc/ast.rb#1688
  def element_ranges(symtab); end

  # source://idlc//lib/idlc/ast.rb#1664
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/ast.rb#1730
  def name; end

  # source://idlc//lib/idlc/ast.rb#1675
  def size(symtab); end

  # source://idlc//lib/idlc/ast.rb#1737
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1718
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1695
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1733
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#1618
class Idl::BitfieldDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1619
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1558
class Idl::BitfieldFieldDefinitionAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1565
  def initialize(input, interval, name, msb, lsb); end

  # source://idlc//lib/idlc/ast.rb#1563
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1560
  def name; end

  # source://idlc//lib/idlc/ast.rb#1600
  def range(symtab); end

  # source://idlc//lib/idlc/ast.rb#1609
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1578
  def type_check(symtab); end
end

# source://idlc//lib/idlc/type.rb#696
class Idl::BitfieldType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#697
  def initialize(type_name, width, field_names, field_ranges); end

  # source://idlc//lib/idlc/type.rb#717
  def clone; end

  # source://idlc//lib/idlc/type.rb#713
  def field_names; end

  # source://idlc//lib/idlc/type.rb#706
  def range(field_name); end
end

# source://idlc//lib/idlc/type.rb#981
Idl::Bits1Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#982
Idl::Bits32Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#983
Idl::Bits64Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/idl_parser.rb#6569
module Idl::BitsCast0
  # source://idlc//lib/idlc/idl_parser.rb#6570
  def expr; end
end

# source://idlc//lib/idlc/ast.rb#3403
class Idl::BitsCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3414
  def initialize(input, interval, exp); end

  # source://idlc//lib/idlc/ast.rb#3407
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3412
  def expr; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#102
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3469
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3426
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3417
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3446
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3392
class Idl::BitsCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3393
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#984
Idl::BitsUnknownType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/idl_parser.rb#9392
module Idl::BodyFunctionDefinition0; end

# source://idlc//lib/idlc/idl_parser.rb#9395
module Idl::BodyFunctionDefinition1
  # source://idlc//lib/idlc/idl_parser.rb#9396
  def single_declaration; end
end

# source://idlc//lib/idlc/idl_parser.rb#9401
module Idl::BodyFunctionDefinition2
  # source://idlc//lib/idlc/idl_parser.rb#9402
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#9406
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#9412
module Idl::BodyFunctionDefinition3
  # source://idlc//lib/idlc/idl_parser.rb#9413
  def type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#9418
module Idl::BodyFunctionDefinition4
  # source://idlc//lib/idlc/idl_parser.rb#9419
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#9423
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#9429
module Idl::BodyFunctionDefinition5
  # source://idlc//lib/idlc/idl_parser.rb#9430
  def single_declaration; end
end

# source://idlc//lib/idlc/idl_parser.rb#9435
module Idl::BodyFunctionDefinition6
  # source://idlc//lib/idlc/idl_parser.rb#9436
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#9440
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#9446
module Idl::BodyFunctionDefinition7
  # source://idlc//lib/idlc/idl_parser.rb#9447
  def function_body; end
end

# source://idlc//lib/idlc/idl_parser.rb#9453
module Idl::BodyFunctionDefinition8
  # source://idlc//lib/idlc/idl_parser.rb#9470
  def args; end

  # source://idlc//lib/idlc/idl_parser.rb#9478
  def body_block; end

  # source://idlc//lib/idlc/idl_parser.rb#9474
  def desc; end

  # source://idlc//lib/idlc/idl_parser.rb#9458
  def function_name; end

  # source://idlc//lib/idlc/idl_parser.rb#9466
  def ret; end

  # source://idlc//lib/idlc/idl_parser.rb#9462
  def targs; end

  # source://idlc//lib/idlc/idl_parser.rb#9454
  def type; end
end

# source://idlc//lib/idlc/type.rb#987
Idl::BoolType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#1513
class Idl::BuiltinEnumDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1519
  def initialize(input, interval, user_type); end

  # source://idlc//lib/idlc/ast.rb#1546
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1517
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1532
  def element_names(symtab); end

  # source://idlc//lib/idlc/ast.rb#1536
  def element_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#1551
  def name; end

  # source://idlc//lib/idlc/ast.rb#1555
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1541
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1525
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1502
class Idl::BuiltinEnumDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1503
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#10201
module Idl::BuiltinFunctionDefinition0
  # source://idlc//lib/idlc/idl_parser.rb#10202
  def first; end
end

# source://idlc//lib/idlc/idl_parser.rb#10208
module Idl::BuiltinFunctionDefinition1
  # source://idlc//lib/idlc/idl_parser.rb#10209
  def single_declaration; end
end

# source://idlc//lib/idlc/idl_parser.rb#10214
module Idl::BuiltinFunctionDefinition2
  # source://idlc//lib/idlc/idl_parser.rb#10215
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#10219
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#10225
module Idl::BuiltinFunctionDefinition3
  # source://idlc//lib/idlc/idl_parser.rb#10238
  def args; end

  # source://idlc//lib/idlc/idl_parser.rb#10242
  def desc; end

  # source://idlc//lib/idlc/idl_parser.rb#10230
  def function_name; end

  # source://idlc//lib/idlc/idl_parser.rb#10234
  def ret; end

  # source://idlc//lib/idlc/idl_parser.rb#10226
  def type; end
end

# source://idlc//lib/idlc/idl_parser.rb#14559
module Idl::BuiltinTypeName0; end

# source://idlc//lib/idlc/idl_parser.rb#14562
module Idl::BuiltinTypeName1
  # source://idlc//lib/idlc/idl_parser.rb#14563
  def i; end
end

# source://idlc//lib/idlc/idl_parser.rb#14569
module Idl::BuiltinTypeName2; end

# source://idlc//lib/idlc/idl_parser.rb#14572
module Idl::BuiltinTypeName3; end

# source://idlc//lib/idlc/idl_parser.rb#14575
module Idl::BuiltinTypeName4; end

# source://idlc//lib/idlc/idl_parser.rb#14578
module Idl::BuiltinTypeName5; end

# source://idlc//lib/idlc/ast.rb#5533
class Idl::BuiltinTypeNameAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5540
  def initialize(input, interval, type_name, bits_expression); end

  # source://idlc//lib/idlc/ast.rb#5538
  def bits_expression; end

  # source://idlc//lib/idlc/ast.rb#5536
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5565
  def freeze_tree(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#192
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5618
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5584
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5550
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5512
class Idl::BuiltinTypeNameSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5513
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4541
class Idl::BuiltinVariableAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#4557
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#4544
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#213
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4555
  def name; end

  # source://idlc//lib/idlc/ast.rb#4585
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4565
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4561
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4580
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4535
class Idl::BuiltinVariableSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4536
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#15820
module Idl::Comment0; end

# source://idlc//lib/idlc/idl_parser.rb#15823
module Idl::Comment1
  # source://idlc//lib/idlc/idl_parser.rb#15824
  def content; end
end

# source://idlc//lib/idlc/ast.rb#5491
class Idl::CommentAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5495
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5493
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5505
  def content; end

  # source://idlc//lib/idlc/ast.rb#5508
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5500
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5486
class Idl::CommentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5487
  def to_ast; end
end

# source://idlc//lib/idlc.rb#57
class Idl::Compiler
  # source://idlc//lib/idlc.rb#62
  def initialize; end

  # source://idlc//lib/idlc.rb#353
  sig { params(body: ::String, symtab: ::Idl::SymbolTable, pass_error: T::Boolean).returns(::Idl::ConstraintBodyAst) }
  def compile_constraint(body, symtab, pass_error: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#309
  def compile_expression(expression, symtab, pass_error: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#66
  def compile_file(path); end

  # source://idlc//lib/idlc.rb#128
  sig { params(loop: ::String, symtab: ::Idl::SymbolTable, pass_error: T::Boolean).returns(::Idl::ForLoopAst) }
  def compile_for_loop(loop, symtab, pass_error: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#181
  def compile_func_body(body, return_type: T.unsafe(nil), symtab: T.unsafe(nil), name: T.unsafe(nil), input_file: T.unsafe(nil), input_line: T.unsafe(nil), no_rescue: T.unsafe(nil), extra_syms: T.unsafe(nil), type_check: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#270
  def compile_inst_operation(inst, symtab:, input_file: T.unsafe(nil), input_line: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#243
  def compile_inst_scope(idl, symtab:, input_file:, input_line: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#60
  def parser; end

  # source://idlc//lib/idlc.rb#281
  def type_check(ast, symtab, what); end

  class << self
    # source://idlc//lib/idlc/version.rb#8
    def version; end
  end
end

# source://idlc//lib/idlc/idl_parser.rb#5730
module Idl::ConcatenationExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5731
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#5736
module Idl::ConcatenationExpression1
  # source://idlc//lib/idlc/idl_parser.rb#5737
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#5741
  def rest; end
end

# source://idlc//lib/idlc/ast.rb#4342
class Idl::ConcatenationExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4346
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4348
  def expressions; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#97
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4411
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4364
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4351
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4399
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4332
class Idl::ConcatenationExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4333
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5427
class Idl::ConditionalReturnStatementAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#5436
  def initialize(input, interval, return_expression, condition); end

  # source://idlc//lib/idlc/ast.rb#5434
  def condition; end

  # source://idlc//lib/idlc/ast.rb#5431
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#25
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/prune.rb#413
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#150
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#137
  def reachable_functions(symtab, cache); end

  # source://idlc//lib/idlc/ast.rb#5433
  def return_expression; end

  # source://idlc//lib/idlc/ast.rb#5448
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5453
  def return_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#5459
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5468
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#5482
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5441
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5421
class Idl::ConditionalReturnStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5422
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5129
class Idl::ConditionalStatementAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5136
  def initialize(input, interval, action, condition); end

  # source://idlc//lib/idlc/ast.rb#5130
  def action; end

  # source://idlc//lib/idlc/ast.rb#5131
  def condition; end

  # source://idlc//lib/idlc/ast.rb#5134
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5150
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#5166
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#283
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/prune.rb#428
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#166
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#154
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5172
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5141
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5119
class Idl::ConditionalStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5120
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#985
Idl::ConstBitsUnknownType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#986
Idl::ConstBoolType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/idl_parser.rb#8471
module Idl::ConstraintBody0
  # source://idlc//lib/idlc/idl_parser.rb#8472
  def i; end
end

# source://idlc//lib/idlc/idl_parser.rb#8478
module Idl::ConstraintBody1
  # source://idlc//lib/idlc/idl_parser.rb#8479
  def b; end
end

# source://idlc//lib/idlc/ast.rb#3263
class Idl::ConstraintBodyAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#3271
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      stmts: T::Array[T.any(::Idl::ForLoopAst, ::Idl::ImplicationStatementAst)]
    ).void
  end
  def initialize(input, interval, stmts); end

  # source://idlc//lib/idlc/ast.rb#3276
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3289
  sig { params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def satisfied?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3279
  sig { returns(T::Array[T.any(::Idl::ForLoopAst, ::Idl::ImplicationStatementAst)]) }
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#3296
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#53
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#3282
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3252
class Idl::ConstraintBodySyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3254
  sig { override.returns(::Idl::ConstraintBodyAst) }
  def to_ast; end
end

# source://idlc//lib/idlc/interfaces.rb#119
module Idl::Csr
  interface!

  # source://idlc//lib/idlc/interfaces.rb#134
  sig { abstract.returns(T::Boolean) }
  def dynamic_length?; end

  # source://idlc//lib/idlc/interfaces.rb#137
  sig { abstract.returns(T::Array[::Idl::CsrField]) }
  def fields; end

  # source://idlc//lib/idlc/interfaces.rb#128
  sig { abstract.params(base: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def length(base); end

  # source://idlc//lib/idlc/interfaces.rb#131
  sig { abstract.returns(::Integer) }
  def max_length; end

  # source://idlc//lib/idlc/interfaces.rb#125
  sig { abstract.returns(::String) }
  def name; end

  # source://idlc//lib/idlc/interfaces.rb#142
  sig { abstract.returns(T.nilable(::Integer)) }
  def value; end
end

# source://idlc//lib/idlc/interfaces.rb#73
module Idl::CsrField
  interface!

  # source://idlc//lib/idlc/interfaces.rb#97
  sig { abstract.returns(T::Boolean) }
  def base32_only?; end

  # source://idlc//lib/idlc/interfaces.rb#93
  sig { abstract.returns(T::Boolean) }
  def base64_only?; end

  # source://idlc//lib/idlc/interfaces.rb#83
  sig { abstract.returns(T::Boolean) }
  def defined_in_all_bases?; end

  # source://idlc//lib/idlc/interfaces.rb#86
  sig { abstract.returns(T::Boolean) }
  def defined_in_base32?; end

  # source://idlc//lib/idlc/interfaces.rb#89
  sig { abstract.returns(T::Boolean) }
  def defined_in_base64?; end

  # source://idlc//lib/idlc/interfaces.rb#113
  sig { abstract.returns(T::Boolean) }
  def exists?; end

  # source://idlc//lib/idlc/interfaces.rb#102
  sig { abstract.params(base: T.nilable(::Integer)).returns(T::Range[::Integer]) }
  def location(base); end

  # source://idlc//lib/idlc/interfaces.rb#79
  sig { abstract.returns(::String) }
  def name; end

  # source://idlc//lib/idlc/interfaces.rb#116
  sig do
    abstract
      .returns(T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)]))
  end
  def reset_value; end

  # source://idlc//lib/idlc/interfaces.rb#108
  sig { abstract.params(base: T.nilable(::Integer)).returns(T.nilable(::String)) }
  def type(base); end

  # source://idlc//lib/idlc/interfaces.rb#105
  sig { abstract.params(base: T.nilable(::Integer)).returns(::Integer) }
  def width(base); end
end

# source://idlc//lib/idlc/idl_parser.rb#5878
module Idl::CsrFieldAccessExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5879
  def csr; end

  # source://idlc//lib/idlc/idl_parser.rb#5883
  def csr_field_name; end
end

# source://idlc//lib/idlc/ast.rb#2564
class Idl::CsrFieldAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2573
  def initialize(input, interval, csr_field, write_value); end

  # source://idlc//lib/idlc/ast.rb#2568
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2570
  def csr_field; end

  # source://idlc//lib/idlc/ast.rb#2605
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2610
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#2593
  def field(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#112
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2613
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2577
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2597
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2571
  def write_value; end
end

# source://idlc//lib/idlc/ast.rb#2558
class Idl::CsrFieldAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2559
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#16323
module Idl::CsrFieldName0; end

# source://idlc//lib/idlc/ast.rb#7511
class Idl::CsrFieldReadExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#7525
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      csr: ::Idl::CsrReadExpressionAst,
      field_name: ::String
    ).void
  end
  def initialize(input, interval, csr, field_name); end

  # source://idlc//lib/idlc/ast.rb#7585
  sig { params(symtab: ::Idl::SymbolTable).void }
  def calc_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7629
  sig { params(symtab: ::Idl::SymbolTable).void }
  def calc_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#7522
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7554
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Csr) }
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7559
  sig { returns(::String) }
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7534
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Csr) }
  def csr_obj(symtab); end

  # source://idlc//lib/idlc/ast.rb#7562
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::CsrField) }
  def field_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7567
  sig { params(symtab: ::Idl::SymbolTable).returns(::String) }
  def field_name(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#316
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7573
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7579
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7546
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7617
  sig do
    override
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)]))
  end
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7514
class Idl::CsrFieldReadExpressionAst::MemoizedState < ::T::Struct
  prop :csr, T.nilable(::Idl::Csr)
  prop :type, T.nilable(::Idl::Type)
  prop :value_calculated, T::Boolean
  prop :value, T.nilable(::Integer)

  class << self
    # source://sorbet-runtime/0.6.12638/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/ast.rb#7650
class Idl::CsrFieldReadExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7651
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#7779
class Idl::CsrFunctionCallAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#7797
  def initialize(input, interval, function_name, csr, args); end

  # source://idlc//lib/idlc/ast.rb#7795
  def args; end

  # source://idlc//lib/idlc/ast.rb#7783
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7794
  def csr; end

  # source://idlc//lib/idlc/ast.rb#7835
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7829
  def csr_known?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7833
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7792
  def function_name; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#76
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7859
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7812
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7802
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7840
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7764
class Idl::CsrFunctionCallSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7765
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#16268
module Idl::CsrName0; end

# source://idlc//lib/idlc/ast.rb#7656
class Idl::CsrReadExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#7664
  def initialize(input, interval, csr_name); end

  # source://idlc//lib/idlc/ast.rb#7660
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7690
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7694
  def csr_known?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7662
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7670
  def freeze_tree(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#322
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7709
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7683
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7686
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7699
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7644
class Idl::CsrReadExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7645
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#5955
module Idl::CsrRegisterAccessExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5956
  def csr_name; end
end

# source://idlc//lib/idlc/ast.rb#7718
class Idl::CsrSoftwareWriteAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#7727
  def initialize(input, interval, csr, expression); end

  # source://idlc//lib/idlc/ast.rb#7722
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7724
  def csr; end

  # source://idlc//lib/idlc/ast.rb#7741
  def csr_known?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7745
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7753
  def execute(_symtab); end

  # source://idlc//lib/idlc/ast.rb#7756
  def execute_unknown(_symtab); end

  # source://idlc//lib/idlc/ast.rb#7725
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#82
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7760
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7731
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7748
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#7712
class Idl::CsrSoftwareWriteSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7713
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#729
class Idl::CsrType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#736
  sig { params(csr: ::Idl::Csr, qualifiers: T::Array[::Symbol]).void }
  def initialize(csr, qualifiers: T.unsafe(nil)); end

  # source://idlc//lib/idlc/type.rb#733
  sig { returns(::Idl::Csr) }
  def csr; end

  # source://idlc//lib/idlc/type.rb#741
  sig { returns(T::Array[::Idl::CsrField]) }
  def fields; end
end

# source://idlc//lib/idlc/ast.rb#7868
class Idl::CsrWriteAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#7876
  def initialize(input, interval, idx); end

  # source://idlc//lib/idlc/ast.rb#7872
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7892
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7911
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#7916
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#7874
  def idx; end

  # source://idlc//lib/idlc/ast.rb#7906
  def name(symtab); end

  # source://idlc//lib/idlc/ast.rb#7920
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7902
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7881
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7864
class Idl::CsrWriteSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7865
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#714
module Idl::Declaration
  interface!

  # source://idlc//lib/idlc/ast.rb#724
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def add_symbol(symtab); end
end

# source://idlc//lib/idlc/idl_parser.rb#12059
module Idl::Declaration0
  # source://idlc//lib/idlc/idl_parser.rb#12060
  def id; end
end

# source://idlc//lib/idlc/idl_parser.rb#12065
module Idl::Declaration1
  # source://idlc//lib/idlc/idl_parser.rb#12070
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#12074
  def rest; end

  # source://idlc//lib/idlc/idl_parser.rb#12066
  def type_name; end
end

# source://idlc//lib/idlc/ast.rb#5233
class Idl::DontCareLvalueAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#5239
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5237
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5255
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5247
  def type(_symtab); end

  # source://idlc//lib/idlc/ast.rb#5242
  def type_check(_symtab); end

  # source://idlc//lib/idlc/ast.rb#5252
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#5229
class Idl::DontCareLvalueSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5230
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5187
class Idl::DontCareReturnAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#5193
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5191
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#61
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5221
  def set_expected_type(t); end

  # source://idlc//lib/idlc/ast.rb#5226
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5203
  def type(_symtab); end

  # source://idlc//lib/idlc/ast.rb#5198
  def type_check(_symtab); end

  # source://idlc//lib/idlc/ast.rb#5208
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#5177
class Idl::DontCareReturnSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5178
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#34
Idl::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#7147
class Idl::ElseIfAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#7161
  def initialize(input, interval, body_interval, cond, body_stmts); end

  # source://idlc//lib/idlc/ast.rb#7159
  sig { returns(::Idl::IfBodyAst) }
  def body; end

  # source://idlc//lib/idlc/ast.rb#7156
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def cond; end

  # source://idlc//lib/idlc/ast.rb#7151
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#343
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#7182
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7187
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#7198
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#7210
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7166
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1351
class Idl::EnumArrayCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1359
  def initialize(input, interval, enum_class_name); end

  # source://idlc//lib/idlc/ast.rb#1357
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1354
  def enum_class; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#132
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1381
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1367
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1363
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1376
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1342
class Idl::EnumArrayCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1343
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1297
class Idl::EnumCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1309
  def initialize(input, interval, user_type_name, expression); end

  # source://idlc//lib/idlc/ast.rb#1301
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1304
  def enum_name; end

  # source://idlc//lib/idlc/ast.rb#1307
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#107
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1339
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1331
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1313
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1336
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1291
class Idl::EnumCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1292
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#433
module Idl::EnumDefinition0
  # source://idlc//lib/idlc/idl_parser.rb#434
  def user_type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#440
module Idl::EnumDefinition1
  # source://idlc//lib/idlc/idl_parser.rb#441
  def int; end
end

# source://idlc//lib/idlc/idl_parser.rb#447
module Idl::EnumDefinition2
  # source://idlc//lib/idlc/idl_parser.rb#452
  def i; end

  # source://idlc//lib/idlc/idl_parser.rb#448
  def user_type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#457
module Idl::EnumDefinition3
  # source://idlc//lib/idlc/idl_parser.rb#462
  def e; end

  # source://idlc//lib/idlc/idl_parser.rb#458
  def user_type_name; end
end

# source://idlc//lib/idlc/type.rb#12
class Idl::EnumDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1423
  def initialize(input, interval, user_type, element_names, element_values); end

  # source://idlc//lib/idlc/ast.rb#1472
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1421
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1447
  sig { returns(T::Array[::String]) }
  def element_names; end

  # source://idlc//lib/idlc/ast.rb#1457
  sig { returns(T::Array[::Integer]) }
  def element_values; end

  # source://idlc//lib/idlc/ast.rb#1488
  def name; end

  # source://idlc//lib/idlc/ast.rb#1492
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1480
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1460
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1485
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#1384
class Idl::EnumDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1385
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1265
class Idl::EnumElementSizeAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1271
  def initialize(input, interval, enum_class_name); end

  # source://idlc//lib/idlc/ast.rb#1269
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1266
  def enum_class; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#127
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1288
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1279
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1275
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1283
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1256
class Idl::EnumElementSizeSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1257
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#770
module Idl::EnumRef0
  # source://idlc//lib/idlc/idl_parser.rb#771
  def enum_class; end

  # source://idlc//lib/idlc/idl_parser.rb#775
  def member; end
end

# source://idlc//lib/idlc/ast.rb#4739
class Idl::EnumRefAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4748
  def initialize(input, interval, class_name, member_name); end

  # source://idlc//lib/idlc/ast.rb#4745
  def class_name; end

  # source://idlc//lib/idlc/ast.rb#4743
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4757
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#117
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#148
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#4746
  def member_name; end

  # source://idlc//lib/idlc/ast.rb#4804
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4780
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4770
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4788
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4728
class Idl::EnumRefSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4729
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1226
class Idl::EnumSizeAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1232
  def initialize(input, interval, enum_class_name); end

  # source://idlc//lib/idlc/ast.rb#1230
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1227
  def enum_class; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#122
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1253
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1240
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1236
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1248
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1217
class Idl::EnumSizeSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1218
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#6692
module Idl::EnumToA0
  # source://idlc//lib/idlc/idl_parser.rb#6693
  def user_type_name; end
end

# source://idlc//lib/idlc/type.rb#626
class Idl::EnumerationType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#656
  sig do
    params(
      type_name: ::String,
      element_names: T::Array[::String],
      element_values: T::Array[::Integer],
      builtin: T::Boolean
    ).void
  end
  def initialize(type_name, element_names, element_values, builtin: T.unsafe(nil)); end

  # source://idlc//lib/idlc/type.rb#671
  sig { returns(T::Boolean) }
  def builtin?; end

  # source://idlc//lib/idlc/type.rb#674
  sig { returns(::Idl::EnumerationType) }
  def clone; end

  # source://idlc//lib/idlc/type.rb#687
  sig { params(element_value: ::Integer).returns(T.nilable(::String)) }
  def element_name(element_value); end

  # source://idlc//lib/idlc/type.rb#635
  sig { returns(T::Array[::String]) }
  def element_names; end

  # source://idlc//lib/idlc/type.rb#639
  sig { returns(T::Array[::Integer]) }
  def element_values; end

  # source://idlc//lib/idlc/type.rb#643
  sig { returns(::Idl::Type) }
  def ref_type; end

  # source://idlc//lib/idlc/type.rb#679
  sig { params(element_name: ::String).returns(T.nilable(::Integer)) }
  def value(element_name); end

  # source://idlc//lib/idlc/type.rb#631
  sig { returns(::Integer) }
  def width; end
end

# source://idlc//lib/idlc/ast.rb#485
module Idl::Executable
  interface!

  # source://idlc//lib/idlc/ast.rb#507
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#511
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end
end

# source://idlc//lib/idlc/ast.rb#514
Idl::ExecutableAst = T.type_alias { T.all(::Idl::AstNode, ::Idl::Executable) }

# source://idlc//lib/idlc/idl_parser.rb#13572
module Idl::ExecuteIfBlock0
  # source://idlc//lib/idlc/idl_parser.rb#13573
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#13579
module Idl::ExecuteIfBlock1
  # source://idlc//lib/idlc/idl_parser.rb#13580
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#13586
module Idl::ExecuteIfBlock2
  # source://idlc//lib/idlc/idl_parser.rb#13591
  def body; end

  # source://idlc//lib/idlc/idl_parser.rb#13587
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#13597
module Idl::ExecuteIfBlock3
  # source://idlc//lib/idlc/idl_parser.rb#13598
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#13604
module Idl::ExecuteIfBlock4
  # source://idlc//lib/idlc/idl_parser.rb#13605
  def body; end
end

# source://idlc//lib/idlc/idl_parser.rb#13611
module Idl::ExecuteIfBlock5
  # source://idlc//lib/idlc/idl_parser.rb#13620
  def elseifs; end

  # source://idlc//lib/idlc/idl_parser.rb#13624
  def final_else; end

  # source://idlc//lib/idlc/idl_parser.rb#13616
  def if_body; end

  # source://idlc//lib/idlc/idl_parser.rb#13612
  def if_cond; end
end

# source://idlc//lib/idlc/ast.rb#787
class Idl::FalseExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#791
  sig { params(input: ::String, interval: T::Range[::Integer]).void }
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#796
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#153
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#93
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#808
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#71
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#802
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#799
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#805
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::FalseClass) }
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#783
class Idl::FalseExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#784
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#10696
module Idl::Fetch0
  # source://idlc//lib/idlc/idl_parser.rb#10697
  def function_body; end
end

# source://idlc//lib/idlc/ast.rb#6376
class Idl::FetchAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#6382
  def initialize(input, interval, body); end

  # source://idlc//lib/idlc/ast.rb#6380
  def body; end

  # source://idlc//lib/idlc/ast.rb#6378
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6390
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6395
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6386
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#6370
class Idl::FetchSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6371
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#6096
module Idl::FieldAccessExpression0
  # source://idlc//lib/idlc/idl_parser.rb#6097
  def field_access_eligible_expression; end

  # source://idlc//lib/idlc/idl_parser.rb#6101
  def field_name; end
end

# source://idlc//lib/idlc/ast.rb#4662
class Idl::FieldAccessExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4671
  def initialize(input, interval, bitfield, field_name); end

  # source://idlc//lib/idlc/ast.rb#4666
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#87
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4677
  def kind(symtab); end

  # source://idlc//lib/idlc/ast.rb#4669
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def obj; end

  # source://idlc//lib/idlc/ast.rb#4725
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4682
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4694
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4712
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4652
class Idl::FieldAccessExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4653
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2452
class Idl::FieldAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2480
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      id: ::Idl::IdAst,
      field_name: ::String,
      rhs: T.all(::Idl::AstNode, ::Idl::Rvalue)
    ).void
  end
  def initialize(input, interval, id, field_name, rhs); end

  # source://idlc//lib/idlc/ast.rb#2465
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2525
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2548
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#2462
  sig { returns(::String) }
  def field_name; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#92
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2456
  sig { returns(::Idl::IdAst) }
  def id; end

  # source://idlc//lib/idlc/ast.rb#2459
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2555
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2486
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2500
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2440
class Idl::FieldAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2441
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#15701
module Idl::FieldName0; end

# source://idlc//lib/idlc/idl_parser.rb#14212
module Idl::ForLoop0
  # source://idlc//lib/idlc/idl_parser.rb#14213
  def s; end
end

# source://idlc//lib/idlc/idl_parser.rb#14219
module Idl::ForLoop1
  # source://idlc//lib/idlc/idl_parser.rb#14228
  def action; end

  # source://idlc//lib/idlc/idl_parser.rb#14224
  def condition; end

  # source://idlc//lib/idlc/idl_parser.rb#14220
  def for_loop_iteration_variable_declaration; end

  # source://idlc//lib/idlc/idl_parser.rb#14232
  def stmts; end
end

# source://idlc//lib/idlc/ast.rb#6841
class Idl::ForLoopAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#6866
  def initialize(input, interval, init, condition, update, stmts); end

  # source://idlc//lib/idlc/ast.rb#6857
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def condition; end

  # source://idlc//lib/idlc/ast.rb#6846
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6984
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#6987
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#202
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6854
  sig { returns(::Idl::VariableDeclarationWithInitializationAst) }
  def init; end

  # source://idlc//lib/idlc/passes/prune.rb#118
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#197
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#174
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6933
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6900
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#6939
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#6883
  sig { params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def satisfied?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6864
  sig do
    returns(T::Array[T.any(::Idl::ForLoopAst, ::Idl::IfAst, ::Idl::ImplicationStatementAst, ::Idl::ReturnStatementAst, ::Idl::StatementAst)])
  end
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#7009
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#88
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#6871
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#6860
  sig { returns(T.all(::Idl::AstNode, ::Idl::Executable)) }
  def update; end
end

# source://idlc//lib/idlc/ast.rb#6862
Idl::ForLoopAst::StmtType = T.type_alias { T.any(::Idl::ForLoopAst, ::Idl::IfAst, ::Idl::ImplicationStatementAst, ::Idl::ReturnStatementAst, ::Idl::StatementAst) }

# source://idlc//lib/idlc/idl_parser.rb#11930
module Idl::ForLoopIterationVariableDeclaration0
  # source://idlc//lib/idlc/idl_parser.rb#11939
  def ary_size; end

  # source://idlc//lib/idlc/idl_parser.rb#11935
  def id; end

  # source://idlc//lib/idlc/idl_parser.rb#11943
  def rval; end

  # source://idlc//lib/idlc/idl_parser.rb#11931
  def type_name; end
end

# source://idlc//lib/idlc/ast.rb#2941
class Idl::ForLoopIterationVariableDeclarationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2942
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#6829
class Idl::ForLoopSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6830
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#9286
module Idl::FunctionArgList0
  # source://idlc//lib/idlc/idl_parser.rb#9287
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#9292
module Idl::FunctionArgList1
  # source://idlc//lib/idlc/idl_parser.rb#9293
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#9297
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#15965
module Idl::FunctionBody0
  # source://idlc//lib/idlc/idl_parser.rb#15966
  def choice; end
end

# source://idlc//lib/idlc/idl_parser.rb#15972
module Idl::FunctionBody1
  # source://idlc//lib/idlc/idl_parser.rb#15973
  def func_stmt_list; end
end

# source://idlc//lib/idlc/ast.rb#6251
class Idl::FunctionBodyAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#6262
  def initialize(input, interval, stmts); end

  # source://idlc//lib/idlc/ast.rb#6256
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6325
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#6328
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#310
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#22
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#67
  def pass_find_return_values(symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#161
  def prune(symtab, args_already_applied: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6294
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6309
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#6335
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#6266
  def statements; end

  # source://idlc//lib/idlc/ast.rb#6268
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#6365
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6271
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#6244
class Idl::FunctionBodySyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6246
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#8739
module Idl::FunctionCall0
  # source://idlc//lib/idlc/idl_parser.rb#8740
  def csr; end

  # source://idlc//lib/idlc/idl_parser.rb#8744
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#8750
module Idl::FunctionCall1
  # source://idlc//lib/idlc/idl_parser.rb#8751
  def csr; end

  # source://idlc//lib/idlc/idl_parser.rb#8759
  def function_arg_list; end

  # source://idlc//lib/idlc/idl_parser.rb#8755
  def function_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#8765
module Idl::FunctionCall2
  # source://idlc//lib/idlc/idl_parser.rb#8766
  def targs; end
end

# source://idlc//lib/idlc/idl_parser.rb#8772
module Idl::FunctionCall3
  # source://idlc//lib/idlc/idl_parser.rb#8781
  def function_arg_list; end

  # source://idlc//lib/idlc/idl_parser.rb#8773
  def function_name; end

  # source://idlc//lib/idlc/idl_parser.rb#8777
  def t; end
end

# source://idlc//lib/idlc/ast.rb#5965
class Idl::FunctionCallExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#5980
  def initialize(input, interval, function_name, targs, args); end

  # source://idlc//lib/idlc/ast.rb#6022
  def arg_nodes; end

  # source://idlc//lib/idlc/ast.rb#5978
  def args; end

  # source://idlc//lib/idlc/ast.rb#5971
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6178
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#6186
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#6026
  def func_type(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#289
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#28
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#6180
  def name; end

  # source://idlc//lib/idlc/passes/prune.rb#82
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#25
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#21
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5977
  def targs; end

  # source://idlc//lib/idlc/ast.rb#5993
  def template?; end

  # source://idlc//lib/idlc/ast.rb#5998
  def template_arg_nodes; end

  # source://idlc//lib/idlc/ast.rb#6002
  def template_values(symtab, unknown_ok: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6190
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#163
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#6092
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6041
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#6101
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5955
class Idl::FunctionCallExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5956
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#8638
module Idl::FunctionCallTemplateArguments0
  # source://idlc//lib/idlc/idl_parser.rb#8639
  def arg; end
end

# source://idlc//lib/idlc/idl_parser.rb#8644
module Idl::FunctionCallTemplateArguments1
  # source://idlc//lib/idlc/idl_parser.rb#8645
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#8649
  def rest; end
end

# source://idlc//lib/idlc/ast.rb#6424
class Idl::FunctionDefAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#6438
  def initialize(input, interval, name, targs, return_types, arguments, desc, type, body); end

  # source://idlc//lib/idlc/ast.rb#6706
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#6668
  def apply_template_and_arg_syms(symtab); end

  # source://idlc//lib/idlc/ast.rb#6459
  def argument_nodes; end

  # source://idlc//lib/idlc/ast.rb#6489
  def arguments(symtab); end

  # source://idlc//lib/idlc/ast.rb#6520
  def arguments_list_str; end

  # source://idlc//lib/idlc/ast.rb#6758
  def body; end

  # source://idlc//lib/idlc/ast.rb#6764
  def builtin?; end

  # source://idlc//lib/idlc/ast.rb#6600
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6474
  def description; end

  # source://idlc//lib/idlc/ast.rb#6772
  def external?; end

  # source://idlc//lib/idlc/ast.rb#6462
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/ast.rb#6768
  def generated?; end

  # source://idlc//lib/idlc/ast.rb#6629
  def name; end

  # source://idlc//lib/idlc/ast.rb#6484
  def num_args; end

  # source://idlc//lib/idlc/passes/prune.rb#141
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#6459
  def reachable_functions_cache; end

  # source://idlc//lib/idlc/ast.rb#6525
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6588
  def return_type_list_str; end

  # source://idlc//lib/idlc/ast.rb#6427
  def return_type_nodes; end

  # source://idlc//lib/idlc/ast.rb#6720
  def template_names; end

  # source://idlc//lib/idlc/ast.rb#6726
  def template_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#6479
  def templated?; end

  # source://idlc//lib/idlc/ast.rb#6777
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6679
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#6748
  def type_check_args(symtab); end

  # source://idlc//lib/idlc/ast.rb#6752
  def type_check_body(symtab); end

  # source://idlc//lib/idlc/ast.rb#6652
  def type_check_from_call(symtab); end

  # source://idlc//lib/idlc/ast.rb#6744
  def type_check_return(symtab); end

  # source://idlc//lib/idlc/ast.rb#6739
  def type_check_targs(symtab); end

  # source://idlc//lib/idlc/ast.rb#6634
  def type_check_template_instance(symtab); end
end

# source://idlc//lib/idlc/ast.rb#6404
class Idl::FunctionDefSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6405
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#12914
module Idl::FunctionIfBlock0
  # source://idlc//lib/idlc/idl_parser.rb#12915
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#12921
module Idl::FunctionIfBlock1
  # source://idlc//lib/idlc/idl_parser.rb#12922
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#12928
module Idl::FunctionIfBlock2
  # source://idlc//lib/idlc/idl_parser.rb#12933
  def body; end

  # source://idlc//lib/idlc/idl_parser.rb#12929
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#12939
module Idl::FunctionIfBlock3
  # source://idlc//lib/idlc/idl_parser.rb#12940
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#12946
module Idl::FunctionIfBlock4
  # source://idlc//lib/idlc/idl_parser.rb#12947
  def body; end
end

# source://idlc//lib/idlc/idl_parser.rb#12953
module Idl::FunctionIfBlock5
  # source://idlc//lib/idlc/idl_parser.rb#12962
  def elseifs; end

  # source://idlc//lib/idlc/idl_parser.rb#12966
  def final_else; end

  # source://idlc//lib/idlc/idl_parser.rb#12958
  def if_body; end

  # source://idlc//lib/idlc/idl_parser.rb#12954
  def if_cond; end
end

# source://idlc//lib/idlc/idl_parser.rb#9204
module Idl::FunctionName0; end

# source://idlc//lib/idlc/type.rb#748
class Idl::FunctionType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#751
  def initialize(func_name, func_def_ast, symtab); end

  # source://idlc//lib/idlc/type.rb#830
  sig do
    params(
      symtab: ::Idl::SymbolTable,
      argument_nodes: T::Array[::Idl::Rvalue],
      call_site_symtab: ::Idl::SymbolTable,
      func_call_ast: ::Idl::FunctionCallExpressionAst
    ).returns(T::Array[T.any(::Integer, ::Symbol)])
  end
  def apply_arguments(symtab, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#801
  def apply_template_values(template_values, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#934
  def argument_name(index, template_values = T.unsafe(nil), func_call_ast); end

  # source://idlc//lib/idlc/type.rb#919
  def argument_type(index, template_values, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#851
  def argument_values(symtab, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#949
  def body; end

  # source://idlc//lib/idlc/type.rb#763
  def builtin?; end

  # source://idlc//lib/idlc/type.rb#759
  def clone; end

  # source://idlc//lib/idlc/type.rb#767
  def external?; end

  # source://idlc//lib/idlc/type.rb#749
  def func_def_ast; end

  # source://idlc//lib/idlc/type.rb#765
  def generated?; end

  # source://idlc//lib/idlc/type.rb#769
  def num_args; end

  # source://idlc//lib/idlc/type.rb#877
  sig do
    params(
      template_values: T::Array[::Integer],
      argument_nodes: T::Array[::Idl::Rvalue],
      func_call_ast: ::Idl::FunctionCallExpressionAst
    ).returns(::Idl::Type)
  end
  def return_type(template_values, argument_nodes, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#906
  def return_types(template_values, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#890
  def return_value(template_values, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#795
  def template_names; end

  # source://idlc//lib/idlc/type.rb#797
  def template_types(symtab); end

  # source://idlc//lib/idlc/type.rb#799
  def templated?; end

  # source://idlc//lib/idlc/type.rb#771
  def type_check_call(template_values, argument_nodes, call_site_symtab, func_call_ast); end
end

# source://idlc//lib/idlc/ast.rb#992
class Idl::GlobalAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1007
  def initialize(input, interval, declaration); end

  # source://idlc//lib/idlc/ast.rb#1020
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#996
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1003
  def declaration; end

  # source://idlc//lib/idlc/ast.rb#998
  def id; end

  # source://idlc//lib/idlc/ast.rb#1027
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1016
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1012
  def type_check(symtab); end
end

# source://idlc//lib/idlc/idl_parser.rb#269
module Idl::GlobalDefinition0; end

# source://idlc//lib/idlc/idl_parser.rb#272
module Idl::GlobalDefinition1
  # source://idlc//lib/idlc/idl_parser.rb#273
  def const; end

  # source://idlc//lib/idlc/idl_parser.rb#277
  def single_declaration_with_initialization; end
end

# source://idlc//lib/idlc/idl_parser.rb#283
module Idl::GlobalDefinition2
  # source://idlc//lib/idlc/idl_parser.rb#284
  def declaration; end
end

# source://idlc//lib/idlc/ast.rb#986
class Idl::GlobalSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#987
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#930
class Idl::GlobalWithInitializationAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#945
  def initialize(input, interval, var_decl_with_init); end

  # source://idlc//lib/idlc/ast.rb#972
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#938
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#966
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#969
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#934
  def id; end

  # source://idlc//lib/idlc/ast.rb#935
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#981
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#956
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#951
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#961
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#941
  def var_decl_with_init; end
end

# source://idlc//lib/idlc/ast.rb#915
class Idl::GlobalWithInitializationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#916
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#16153
module Idl::Id0; end

# source://idlc//lib/idlc/ast.rb#818
class Idl::IdAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#829
  sig { params(input: ::String, interval: T::Range[::Integer]).void }
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#859
  sig { returns(T::Boolean) }
  def const?; end

  # source://idlc//lib/idlc/ast.rb#822
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#158
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#97
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#875
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def max_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#893
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def min_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#826
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/ast.rb#912
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#76
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#841
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#835
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#862
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#811
class Idl::IdSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#812
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#7249
class Idl::IfAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#7273
  def initialize(input, interval, if_cond, if_body, elseifs, final_else_body); end

  # source://idlc//lib/idlc/ast.rb#7254
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7268
  sig { returns(T::Array[::Idl::ElseIfAst]) }
  def elseifs; end

  # source://idlc//lib/idlc/ast.rb#7442
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#7488
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#7271
  sig { returns(::Idl::IfBodyAst) }
  def final_else_body; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#328
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#34
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#7265
  sig { returns(::Idl::IfBodyAst) }
  def if_body; end

  # source://idlc//lib/idlc/ast.rb#7262
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def if_cond; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#35
  def pass_find_return_values(values, current_conditions, symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#355
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#101
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#84
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7335
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7344
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#7385
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#7322
  def taken_body(symtab); end

  # source://idlc//lib/idlc/ast.rb#7495
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7284
  def type_check(symtab); end

  private

  # source://idlc//lib/idlc/ast.rb#7403
  def execute_after_if(symtab); end

  # source://idlc//lib/idlc/ast.rb#7479
  def execute_unknown_after_if(symtab); end

  # source://idlc//lib/idlc/ast.rb#7353
  def return_values_after_if(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7019
class Idl::IfBodyAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#7030
  def initialize(input, interval, body_stmts); end

  # source://idlc//lib/idlc/ast.rb#7024
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7107
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#7133
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#35
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#71
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/prune.rb#331
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#7052
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7058
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#7079
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#7028
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#7141
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7039
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7215
class Idl::IfSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7216
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#8010
module Idl::ImplicationExpression0
  # source://idlc//lib/idlc/idl_parser.rb#8011
  def antecedent; end

  # source://idlc//lib/idlc/idl_parser.rb#8015
  def consequent; end
end

# source://idlc//lib/idlc/ast.rb#3171
class Idl::ImplicationExpressionAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#3180
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      antecedent: T.all(::Idl::AstNode, ::Idl::Rvalue),
      consequent: T.all(::Idl::AstNode, ::Idl::Rvalue)
    ).void
  end
  def initialize(input, interval, antecedent, consequent); end

  # source://idlc//lib/idlc/ast.rb#3191
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def antecedent; end

  # source://idlc//lib/idlc/ast.rb#3194
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def consequent; end

  # source://idlc//lib/idlc/ast.rb#3186
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3203
  sig { params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def satisfied?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3209
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#25
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#3197
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3160
class Idl::ImplicationExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3162
  sig { override.returns(::Idl::ImplicationExpressionAst) }
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#8092
module Idl::ImplicationForLoop0
  # source://idlc//lib/idlc/idl_parser.rb#8093
  def s; end
end

# source://idlc//lib/idlc/idl_parser.rb#8099
module Idl::ImplicationForLoop1
  # source://idlc//lib/idlc/idl_parser.rb#8108
  def action; end

  # source://idlc//lib/idlc/idl_parser.rb#8104
  def condition; end

  # source://idlc//lib/idlc/idl_parser.rb#8100
  def for_loop_iteration_variable_declaration; end

  # source://idlc//lib/idlc/idl_parser.rb#8112
  def stmts; end
end

# source://idlc//lib/idlc/idl_parser.rb#8414
module Idl::ImplicationStatement0
  # source://idlc//lib/idlc/idl_parser.rb#8415
  def implication_expression; end
end

# source://idlc//lib/idlc/ast.rb#3220
class Idl::ImplicationStatementAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#3228
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      implication_expression: ::Idl::ImplicationExpressionAst
    ).void
  end
  def initialize(input, interval, implication_expression); end

  # source://idlc//lib/idlc/ast.rb#3233
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3236
  sig { returns(::Idl::ImplicationExpressionAst) }
  def expression; end

  # source://idlc//lib/idlc/ast.rb#3244
  sig { params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def satisfied?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3249
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#46
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#3239
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3213
class Idl::ImplicationStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3215
  sig { override.returns(::Idl::ImplicationStatementAst) }
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#189
module Idl::IncludeStatement0
  # source://idlc//lib/idlc/idl_parser.rb#190
  def string; end
end

# source://idlc//lib/idlc/ast.rb#735
class Idl::IncludeStatementAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#744
  sig { params(input: ::String, interval: T::Range[T.untyped], filename: ::Idl::AstNode).void }
  def initialize(input, interval, filename); end

  # source://idlc//lib/idlc/ast.rb#737
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#741
  sig { returns(::String) }
  def filename; end

  # source://idlc//lib/idlc/ast.rb#749
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#752
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#727
class Idl::IncludeStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#729
  sig { override.returns(::Idl::IncludeStatementAst) }
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#16049
module Idl::InstructionOperation0
  # source://idlc//lib/idlc/idl_parser.rb#16050
  def choice; end
end

# source://idlc//lib/idlc/idl_parser.rb#16056
module Idl::InstructionOperation1
  # source://idlc//lib/idlc/idl_parser.rb#16057
  def op_stmt_list; end
end

# source://idlc//lib/idlc/ast.rb#6238
class Idl::InstructionOperationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6239
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#1478
module Idl::Int0; end

# source://idlc//lib/idlc/idl_parser.rb#1481
module Idl::Int1; end

# source://idlc//lib/idlc/idl_parser.rb#1508
module Idl::Int10; end

# source://idlc//lib/idlc/idl_parser.rb#1511
module Idl::Int11; end

# source://idlc//lib/idlc/idl_parser.rb#1514
module Idl::Int12; end

# source://idlc//lib/idlc/idl_parser.rb#1517
module Idl::Int13; end

# source://idlc//lib/idlc/idl_parser.rb#1520
module Idl::Int14; end

# source://idlc//lib/idlc/idl_parser.rb#1523
module Idl::Int15; end

# source://idlc//lib/idlc/idl_parser.rb#1526
module Idl::Int16; end

# source://idlc//lib/idlc/idl_parser.rb#1484
module Idl::Int2; end

# source://idlc//lib/idlc/idl_parser.rb#1487
module Idl::Int3; end

# source://idlc//lib/idlc/idl_parser.rb#1490
module Idl::Int4; end

# source://idlc//lib/idlc/idl_parser.rb#1493
module Idl::Int5; end

# source://idlc//lib/idlc/idl_parser.rb#1496
module Idl::Int6; end

# source://idlc//lib/idlc/idl_parser.rb#1499
module Idl::Int7; end

# source://idlc//lib/idlc/idl_parser.rb#1502
module Idl::Int8; end

# source://idlc//lib/idlc/idl_parser.rb#1505
module Idl::Int9; end

# source://idlc//lib/idlc/ast.rb#5709
class Idl::IntLiteralAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#5715
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5713
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5719
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#142
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#103
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#5943
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5946
  sig { override.returns(::String) }
  def to_idl_verbose; end

  # source://idlc//lib/idlc/ast.rb#5745
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5729
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#5862
  def unsigned_value; end

  # source://idlc//lib/idlc/ast.rb#5815
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5780
  def width(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5666
module Idl::IntLiteralSyntaxNode
  # source://idlc//lib/idlc/ast.rb#5667
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#16
module Idl::Isa0
  # source://idlc//lib/idlc/idl_parser.rb#21
  def definitions; end

  # source://idlc//lib/idlc/idl_parser.rb#17
  def version_string; end
end

# source://idlc//lib/idlc/ast.rb#1044
class Idl::IsaAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1071
  def add_global_symbols(symtab); end

  # source://idlc//lib/idlc/ast.rb#1057
  def bitfields; end

  # source://idlc//lib/idlc/ast.rb#1048
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1045
  def definitions; end

  # source://idlc//lib/idlc/ast.rb#1054
  def enums; end

  # source://idlc//lib/idlc/ast.rb#1066
  def fetch; end

  # source://idlc//lib/idlc/ast.rb#1063
  def functions; end

  # source://idlc//lib/idlc/ast.rb#1051
  def globals; end

  # source://idlc//lib/idlc/ast.rb#1086
  def replace_include!(include_ast, isa_ast); end

  # source://idlc//lib/idlc/ast.rb#1060
  def structs; end

  # source://idlc//lib/idlc/ast.rb#1105
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1096
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1031
class Idl::IsaSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1032
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#14910
module Idl::Keyword0; end

# source://idlc//lib/idlc/idl_parser.rb#14913
module Idl::Keyword1; end

# source://idlc//lib/idlc/idl_parser.rb#14940
module Idl::Keyword10; end

# source://idlc//lib/idlc/idl_parser.rb#14943
module Idl::Keyword11; end

# source://idlc//lib/idlc/idl_parser.rb#14946
module Idl::Keyword12; end

# source://idlc//lib/idlc/idl_parser.rb#14949
module Idl::Keyword13; end

# source://idlc//lib/idlc/idl_parser.rb#14952
module Idl::Keyword14; end

# source://idlc//lib/idlc/idl_parser.rb#14955
module Idl::Keyword15; end

# source://idlc//lib/idlc/idl_parser.rb#14916
module Idl::Keyword2; end

# source://idlc//lib/idlc/idl_parser.rb#14919
module Idl::Keyword3; end

# source://idlc//lib/idlc/idl_parser.rb#14922
module Idl::Keyword4; end

# source://idlc//lib/idlc/idl_parser.rb#14925
module Idl::Keyword5; end

# source://idlc//lib/idlc/idl_parser.rb#14928
module Idl::Keyword6; end

# source://idlc//lib/idlc/idl_parser.rb#14931
module Idl::Keyword7; end

# source://idlc//lib/idlc/idl_parser.rb#14934
module Idl::Keyword8; end

# source://idlc//lib/idlc/idl_parser.rb#14937
module Idl::Keyword9; end

# source://idlc//lib/idlc/ast.rb#2626
class Idl::MultiVariableAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2648
  def initialize(input, interval, variables, function_call); end

  # source://idlc//lib/idlc/ast.rb#2630
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2693
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2717
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#2646
  def function_call; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#71
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2657
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2725
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2662
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2645
  def variables; end

  # source://idlc//lib/idlc/ast.rb#2653
  def vars; end
end

# source://idlc//lib/idlc/ast.rb#2616
class Idl::MultiVariableAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2617
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2739
class Idl::MultiVariableDeclarationAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#2754
  def initialize(input, interval, type_name, var_names); end

  # source://idlc//lib/idlc/ast.rb#2787
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#2743
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#180
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2761
  def make_global; end

  # source://idlc//lib/idlc/ast.rb#2795
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2778
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2771
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2749
  def type_name; end

  # source://idlc//lib/idlc/ast.rb#2752
  def var_name_nodes; end

  # source://idlc//lib/idlc/ast.rb#2766
  def var_names; end
end

# source://idlc//lib/idlc/ast.rb#2728
class Idl::MultiVariableDeclarationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2729
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5049
class Idl::NoopAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5053
  def initialize; end

  # source://idlc//lib/idlc/ast.rb#5051
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5061
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#5064
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#17
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5068
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5058
  def type_check(symtab); end
end

# source://idlc//lib/idlc/idl_parser.rb#3497
module Idl::P0BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#3498
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#3502
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3507
module Idl::P0BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#3508
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#3512
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3615
module Idl::P1BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#3616
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#3620
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3625
module Idl::P1BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#3626
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#3630
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3733
module Idl::P2BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#3734
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#3738
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3743
module Idl::P2BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#3744
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#3748
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3851
module Idl::P3BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#3852
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#3856
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3861
module Idl::P3BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#3862
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#3866
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4087
module Idl::P4BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4088
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4092
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4097
module Idl::P4BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4098
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4102
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4323
module Idl::P5BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4324
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4328
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4333
module Idl::P5BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4334
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4338
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3257
module Idl::P5BinaryOperator0; end

# source://idlc//lib/idlc/idl_parser.rb#4559
module Idl::P6BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4560
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4564
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4569
module Idl::P6BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4570
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4574
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4795
module Idl::P7BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4796
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4800
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4805
module Idl::P7BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4806
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4810
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3337
module Idl::P7BinaryOperator0; end

# source://idlc//lib/idlc/idl_parser.rb#5031
module Idl::P8BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5032
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#5036
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5041
module Idl::P8BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#5042
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#5046
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5267
module Idl::P9BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5268
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#5272
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5277
module Idl::P9BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#5278
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#5282
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5503
module Idl::ParenExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5504
  def e; end
end

# source://idlc//lib/idlc/ast.rb#4265
class Idl::ParenExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4271
  def initialize(input, interval, exp); end

  # source://idlc//lib/idlc/ast.rb#4269
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4273
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#137
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4275
  def invert(symtab); end

  # source://idlc//lib/idlc/ast.rb#4288
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#39
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#4281
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4278
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4284
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4255
class Idl::ParenExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4256
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2056
class Idl::PcAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2067
  sig { params(input: ::String, interval: T::Range[::Integer], rval: T.all(::Idl::AstNode, ::Idl::Rvalue)).void }
  def initialize(input, interval, rval); end

  # source://idlc//lib/idlc/ast.rb#2060
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2073
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2077
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#247
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2064
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2087
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2081
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2050
class Idl::PcAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2051
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#6455
module Idl::PostDec0
  # source://idlc//lib/idlc/idl_parser.rb#6456
  def rval; end
end

# source://idlc//lib/idlc/ast.rb#4485
class Idl::PostDecrementExpressionAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#4494
  def initialize(input, interval, rval); end

  # source://idlc//lib/idlc/ast.rb#4489
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4511
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4527
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#50
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4492
  sig { returns(T.any(::Idl::BuiltinVariableAst, ::Idl::IdAst, ::Idl::IntLiteralAst, ::Idl::StringLiteralAst)) }
  def rval; end

  # source://idlc//lib/idlc/ast.rb#4532
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4506
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4498
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4475
class Idl::PostDecrementExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4476
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#6512
module Idl::PostInc0
  # source://idlc//lib/idlc/idl_parser.rb#6513
  def rval; end
end

# source://idlc//lib/idlc/ast.rb#4598
class Idl::PostIncrementExpressionAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#4606
  def initialize(input, interval, rval); end

  # source://idlc//lib/idlc/ast.rb#4602
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4626
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4643
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#45
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4604
  def rval; end

  # source://idlc//lib/idlc/ast.rb#4649
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4621
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4611
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4588
class Idl::PostIncrementExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4589
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#5583
module Idl::ReplicationExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5584
  def n; end

  # source://idlc//lib/idlc/idl_parser.rb#5588
  def v; end
end

# source://idlc//lib/idlc/ast.rb#4424
class Idl::ReplicationExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4434
  def initialize(input, interval, n, v); end

  # source://idlc//lib/idlc/ast.rb#4428
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#277
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4431
  def n; end

  # source://idlc//lib/idlc/ast.rb#4472
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4460
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4439
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4432
  def v; end

  # source://idlc//lib/idlc/ast.rb#4451
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4414
class Idl::ReplicationExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4415
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#12568
module Idl::ReturnExpression0
  # source://idlc//lib/idlc/idl_parser.rb#12569
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#12574
module Idl::ReturnExpression1
  # source://idlc//lib/idlc/idl_parser.rb#12575
  def e; end
end

# source://idlc//lib/idlc/idl_parser.rb#12580
module Idl::ReturnExpression2
  # source://idlc//lib/idlc/idl_parser.rb#12581
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#12585
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#12590
module Idl::ReturnExpression3
  # source://idlc//lib/idlc/idl_parser.rb#12591
  def vals; end
end

# source://idlc//lib/idlc/ast.rb#5339
class Idl::ReturnExpressionAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#5347
  def initialize(input, interval, return_nodes); end

  # source://idlc//lib/idlc/ast.rb#5343
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5391
  def enclosing_function; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#30
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#115
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#5364
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5353
  def return_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#5396
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5345
  def return_value_nodes; end

  # source://idlc//lib/idlc/ast.rb#5407
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#5418
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5376
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5326
class Idl::ReturnExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5327
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#12760
module Idl::ReturnStatement0
  # source://idlc//lib/idlc/idl_parser.rb#12765
  def expression; end

  # source://idlc//lib/idlc/idl_parser.rb#12761
  def return_expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#12771
module Idl::ReturnStatement1
  # source://idlc//lib/idlc/idl_parser.rb#12772
  def return_expression; end
end

# source://idlc//lib/idlc/ast.rb#5269
class Idl::ReturnStatementAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#5279
  def initialize(input, interval, return_expression); end

  # source://idlc//lib/idlc/ast.rb#5273
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5308
  def enclosing_function; end

  # source://idlc//lib/idlc/ast.rb#5294
  def expected_return_type(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#271
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#77
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#19
  def pass_find_return_values(values, current_conditions, symtab); end

  # source://idlc//lib/idlc/ast.rb#5275
  def return_expression; end

  # source://idlc//lib/idlc/ast.rb#5289
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5284
  def return_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#5313
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5304
  def return_value_nodes; end

  # source://idlc//lib/idlc/ast.rb#5318
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#5323
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5299
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5258
class Idl::ReturnStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5259
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#517
module Idl::Returns
  abstract!

  # source://idlc//lib/idlc/ast.rb#558
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def expected_return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#535
  sig { abstract.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#540
  sig do
    abstract
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T.nilable(T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)])))
  end
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#554
  sig do
    abstract
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T::Array[T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)])])
  end
  def return_values(symtab); end
end

# source://idlc//lib/idlc/interfaces.rb#13
module Idl::RuntimeParam
  include ::Kernel

  interface!

  # source://idlc//lib/idlc/interfaces.rb#39
  sig { abstract.returns(T::Array[::Idl::Schema]) }
  def all_schemas; end

  # source://idlc//lib/idlc/interfaces.rb#27
  sig { abstract.returns(::String) }
  def description; end

  # source://idlc//lib/idlc/interfaces.rb#48
  sig { abstract.returns(::Idl::Type) }
  def idl_type; end

  # source://idlc//lib/idlc/interfaces.rb#24
  sig { abstract.returns(::String) }
  def name; end

  # source://idlc//lib/idlc/interfaces.rb#36
  sig { abstract.returns(T::Array[::Idl::Schema]) }
  def possible_schemas; end

  # source://idlc//lib/idlc/interfaces.rb#33
  sig { abstract.returns(::Idl::Schema) }
  def schema; end

  # source://idlc//lib/idlc/interfaces.rb#30
  sig { abstract.returns(T::Boolean) }
  def schema_known?; end

  # source://idlc//lib/idlc/interfaces.rb#45
  sig { abstract.returns(T.any(::Integer, ::String, T::Array[::Integer], T::Array[T::Boolean], T::Boolean)) }
  def value; end

  # source://idlc//lib/idlc/interfaces.rb#42
  sig { abstract.returns(T::Boolean) }
  def value_known?; end
end

# source://idlc//lib/idlc/interfaces.rb#20
Idl::RuntimeParam::ValueType = T.type_alias { T.any(::Integer, ::String, T::Array[::Integer], T::Array[T::Boolean], T::Boolean) }

# source://idlc//lib/idlc/ast.rb#609
module Idl::Rvalue
  abstract!

  # source://idlc//lib/idlc/ast.rb#659
  sig { params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def max_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#669
  sig { params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def min_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#694
  sig { params(value: ::Integer, width: ::Integer, signed: T::Boolean).returns(::Integer) }
  def truncate(value, width, signed); end

  # source://idlc//lib/idlc/ast.rb#632
  sig { abstract.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#656
  sig do
    abstract
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)]))
  end
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#691
  sig do
    params(
      symtab: ::Idl::SymbolTable
    ).returns(T::Array[T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)])])
  end
  def values(symtab); end
end

# source://idlc//lib/idlc/ast.rb#711
Idl::RvalueAst = T.type_alias { T.all(::Idl::AstNode, ::Idl::Rvalue) }

# source://idlc//lib/idlc/interfaces.rb#52
module Idl::Schema
  interface!

  # source://idlc//lib/idlc/interfaces.rb#61
  sig { abstract.returns(::Integer) }
  def max_val; end

  # source://idlc//lib/idlc/interfaces.rb#58
  sig { abstract.returns(T::Boolean) }
  def max_val_known?; end

  # source://idlc//lib/idlc/interfaces.rb#67
  sig { abstract.returns(::Integer) }
  def min_val; end

  # source://idlc//lib/idlc/interfaces.rb#64
  sig { abstract.returns(T::Boolean) }
  def min_val_known?; end

  # source://idlc//lib/idlc/interfaces.rb#70
  sig { abstract.returns(::Idl::Type) }
  def to_idl_type; end
end

# source://idlc//lib/idlc/ast.rb#3355
class Idl::SignCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3363
  def initialize(input, interval, exp); end

  # source://idlc//lib/idlc/ast.rb#3359
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3361
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#163
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3389
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3371
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3366
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3374
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3349
class Idl::SignCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3350
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#12232
module Idl::SingleDeclaration0
  # source://idlc//lib/idlc/idl_parser.rb#12233
  def ary_size_decl; end
end

# source://idlc//lib/idlc/idl_parser.rb#12238
module Idl::SingleDeclaration1
  # source://idlc//lib/idlc/idl_parser.rb#12247
  def ary_size; end

  # source://idlc//lib/idlc/idl_parser.rb#12243
  def id; end

  # source://idlc//lib/idlc/idl_parser.rb#12239
  def type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#11801
module Idl::SingleDeclarationWithInitialization0
  # source://idlc//lib/idlc/idl_parser.rb#11810
  def ary_size; end

  # source://idlc//lib/idlc/idl_parser.rb#11806
  def id; end

  # source://idlc//lib/idlc/idl_parser.rb#11814
  def rval; end

  # source://idlc//lib/idlc/idl_parser.rb#11802
  def type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#16592
module Idl::Space0
  # source://idlc//lib/idlc/idl_parser.rb#16593
  def space?; end
end

# source://idlc//lib/idlc/idl_parser.rb#12332
module Idl::Statement0
  # source://idlc//lib/idlc/idl_parser.rb#12333
  def a; end

  # source://idlc//lib/idlc/idl_parser.rb#12337
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#12343
module Idl::Statement1
  # source://idlc//lib/idlc/idl_parser.rb#12344
  def a; end
end

# source://idlc//lib/idlc/ast.rb#5077
class Idl::StatementAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#5085
  def initialize(input, interval, action); end

  # source://idlc//lib/idlc/ast.rb#5083
  def action; end

  # source://idlc//lib/idlc/ast.rb#5081
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5095
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#5105
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#259
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#83
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/prune.rb#222
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#82
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#69
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5116
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5090
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5043
class Idl::StatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5044
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#16495
module Idl::String0; end

# source://idlc//lib/idlc/idl_parser.rb#16498
module Idl::String1; end

# source://idlc//lib/idlc/ast.rb#5639
class Idl::StringLiteralAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#5645
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5643
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#55
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5663
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5653
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5651
  def type_check(_symtab); end

  # source://idlc//lib/idlc/ast.rb#5658
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#5627
module Idl::StringLiteralSyntaxNode
  # source://idlc//lib/idlc/ast.rb#5628
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#989
Idl::StringType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/idl_parser.rb#1191
module Idl::StructDefinition0
  # source://idlc//lib/idlc/idl_parser.rb#1196
  def id; end

  # source://idlc//lib/idlc/idl_parser.rb#1192
  def type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#1202
module Idl::StructDefinition1
  # source://idlc//lib/idlc/idl_parser.rb#1207
  def member; end

  # source://idlc//lib/idlc/idl_parser.rb#1203
  def user_type_name; end
end

# source://idlc//lib/idlc/ast.rb#1768
class Idl::StructDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1783
  def initialize(input, interval, name, member_types, member_names); end

  # source://idlc//lib/idlc/ast.rb#1811
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1781
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1778
  def member_names; end

  # source://idlc//lib/idlc/ast.rb#1822
  def member_type(name, symtab); end

  # source://idlc//lib/idlc/ast.rb#1775
  def member_types; end

  # source://idlc//lib/idlc/ast.rb#1772
  def name; end

  # source://idlc//lib/idlc/ast.rb#1829
  def num_members; end

  # source://idlc//lib/idlc/ast.rb#1832
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1800
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1792
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1747
class Idl::StructDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1748
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#584
class Idl::StructType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#589
  sig { params(type_name: ::String, member_types: T::Array[::Idl::Type], member_names: T::Array[::String]).void }
  def initialize(type_name, member_types, member_names); end

  # source://idlc//lib/idlc/type.rb#599
  def clone; end

  # source://idlc//lib/idlc/type.rb#603
  def default; end

  # source://idlc//lib/idlc/type.rb#611
  def member?(name); end

  # source://idlc//lib/idlc/type.rb#613
  def member_type(member_name); end

  # source://idlc//lib/idlc/type.rb#597
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/type.rb#621
  def runtime?; end

  # source://idlc//lib/idlc/type.rb#586
  sig { returns(::String) }
  def type_name; end
end

# source://idlc//lib/idlc/symbol_table.rb#121
class Idl::SymbolTable
  # source://idlc//lib/idlc/symbol_table.rb#235
  sig do
    params(
      mxlen: T.nilable(::Integer),
      possible_xlens_cb: T.nilable(T.proc.returns(T::Array[::Integer])),
      builtin_global_vars: T::Array[::Idl::Var],
      builtin_enums: T::Array[::Idl::SymbolTable::EnumDef],
      builtin_funcs: T.nilable(::Idl::SymbolTable::BuiltinFunctionCallbacks),
      csrs: T::Array[::Idl::Csr],
      params: T::Array[::Idl::RuntimeParam],
      name: ::String
    ).void
  end
  def initialize(mxlen: T.unsafe(nil), possible_xlens_cb: T.unsafe(nil), builtin_global_vars: T.unsafe(nil), builtin_enums: T.unsafe(nil), builtin_funcs: T.unsafe(nil), csrs: T.unsafe(nil), params: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://idlc//lib/idlc/symbol_table.rb#407
  def add(name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#416
  def add!(name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#433
  def add_above!(name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#442
  def add_at!(level, name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#466
  def at_global_scope?; end

  # source://idlc//lib/idlc/symbol_table.rb#204
  def builtin_funcs; end

  # source://idlc//lib/idlc/symbol_table.rb#341
  def callstack; end

  # source://idlc//lib/idlc/symbol_table.rb#213
  sig { params(csr_name: ::String).returns(T.nilable(::Idl::Csr)) }
  def csr(csr_name); end

  # source://idlc//lib/idlc/symbol_table.rb#207
  sig { params(csr_name: ::String).returns(T::Boolean) }
  def csr?(csr_name); end

  # source://idlc//lib/idlc/symbol_table.rb#210
  sig { returns(T::Hash[::String, ::Idl::Csr]) }
  def csr_hash; end

  # source://idlc//lib/idlc/symbol_table.rb#516
  def deep_clone(clone_values: T.unsafe(nil), freeze_global: T.unsafe(nil)); end

  # source://idlc//lib/idlc/symbol_table.rb#285
  def deep_freeze; end

  # source://idlc//lib/idlc/symbol_table.rb#426
  def del(name); end

  # source://idlc//lib/idlc/symbol_table.rb#387
  def find_all(single_scope: T.unsafe(nil), &block); end

  # source://idlc//lib/idlc/symbol_table.rb#357
  def get(name); end

  # source://idlc//lib/idlc/symbol_table.rb#365
  def get_from(name, level); end

  # source://idlc//lib/idlc/symbol_table.rb#377
  def get_global(name); end

  # source://idlc//lib/idlc/symbol_table.rb#471
  def global_clone; end

  # source://idlc//lib/idlc/symbol_table.rb#135
  def hash; end

  # source://idlc//lib/idlc/symbol_table.rb#513
  def in_use?; end

  # source://idlc//lib/idlc/symbol_table.rb#280
  sig { returns(::String) }
  def inspect; end

  # source://idlc//lib/idlc/symbol_table.rb#346
  def key?(name); end

  # source://idlc//lib/idlc/symbol_table.rb#350
  def keys_pretty; end

  # source://idlc//lib/idlc/symbol_table.rb#451
  def levels; end

  # source://idlc//lib/idlc/symbol_table.rb#158
  sig { returns(T::Boolean) }
  def multi_xlen?; end

  # source://idlc//lib/idlc/symbol_table.rb#127
  sig { returns(T.nilable(::Integer)) }
  def mxlen; end

  # source://idlc//lib/idlc/symbol_table.rb#130
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/symbol_table.rb#216
  sig { params(param_name: ::String).returns(T.nilable(::Idl::RuntimeParam)) }
  def param(param_name); end

  # source://idlc//lib/idlc/symbol_table.rb#219
  sig { returns(T::Hash[::String, ::Idl::RuntimeParam]) }
  def params_hash; end

  # source://idlc//lib/idlc/symbol_table.rb#331
  def pop; end

  # source://idlc//lib/idlc/symbol_table.rb#165
  sig { returns(T::Array[::Integer]) }
  def possible_xlens; end

  # source://idlc//lib/idlc/symbol_table.rb#457
  sig { void }
  def print; end

  # source://idlc//lib/idlc/symbol_table.rb#319
  def push(ast); end

  # source://idlc//lib/idlc/symbol_table.rb#502
  def release; end

  class << self
    # source://idlc//lib/idlc/symbol_table.rb#182
    sig do
      params(
        blk: T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean))
      ).returns(T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean)))
    end
    def make_implemented_callback(&blk); end

    # source://idlc//lib/idlc/symbol_table.rb#196
    sig do
      params(
        blk: T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean))
      ).returns(T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean)))
    end
    def make_implemented_csr_callback(&blk); end

    # source://idlc//lib/idlc/symbol_table.rb#189
    sig do
      params(
        blk: T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean))
      ).returns(T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean)))
    end
    def make_implemented_version_callback(&blk); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#198
class Idl::SymbolTable::BuiltinFunctionCallbacks < ::T::Struct
  prop :implemented, T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean))
  prop :implemented_version, T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean))
  prop :implemented_csr, T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean))

  class << self
    # source://sorbet-runtime/0.6.12638/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#132
class Idl::SymbolTable::DuplicateSymError < ::StandardError; end

# source://idlc//lib/idlc/symbol_table.rb#141
class Idl::SymbolTable::EnumDef < ::T::Struct
  prop :name, ::String
  prop :element_values, T::Array[::Integer]
  prop :element_names, T::Array[::String]

  # source://idlc//lib/idlc/symbol_table.rb#149
  sig { params(name: ::String, element_values: T::Array[::Integer], element_names: T::Array[::String]).void }
  def initialize(name:, element_values:, element_names:); end

  class << self
    # source://sorbet-runtime/0.6.12638/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#177
Idl::SymbolTable::ImplementedCallbackType = T.type_alias { T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean)) }

# source://idlc//lib/idlc/symbol_table.rb#191
Idl::SymbolTable::ImplementedCsrCallbackType = T.type_alias { T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean)) }

# source://idlc//lib/idlc/symbol_table.rb#184
Idl::SymbolTable::ImplementedVersionCallbackType = T.type_alias { T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean)) }

# source://idlc//lib/idlc/symbol_table.rb#160
class Idl::SymbolTable::MemoizedState < ::T::Struct
  prop :possible_xlens, T.nilable(T::Array[::Integer])

  class << self
    # source://sorbet-runtime/0.6.12638/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#155
Idl::SymbolTable::PossibleXlensCallbackType = T.type_alias { T.proc.returns(T::Array[::Integer]) }

# source://idlc//lib/idlc/syntax_node.rb#49
class Idl::SyntaxNode < ::Treetop::Runtime::SyntaxNode
  # source://idlc//lib/idlc/syntax_node.rb#54
  sig { overridable.returns(::Idl::AstNode) }
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#3969
module Idl::TemplateSafeP3BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#3970
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#3974
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#3979
module Idl::TemplateSafeP3BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#3980
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#3984
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4205
module Idl::TemplateSafeP4BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4206
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4210
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4215
module Idl::TemplateSafeP4BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4216
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4220
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4441
module Idl::TemplateSafeP5BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4442
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4446
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4451
module Idl::TemplateSafeP5BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4452
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4456
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4677
module Idl::TemplateSafeP6BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4678
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4682
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4687
module Idl::TemplateSafeP6BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4688
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4692
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4913
module Idl::TemplateSafeP7BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#4914
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#4918
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#4923
module Idl::TemplateSafeP7BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#4924
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#4928
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5149
module Idl::TemplateSafeP8BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5150
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#5154
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5159
module Idl::TemplateSafeP8BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#5160
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#5164
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5385
module Idl::TemplateSafeP9BinaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#5386
  def op; end

  # source://idlc//lib/idlc/idl_parser.rb#5390
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#5395
module Idl::TemplateSafeP9BinaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#5396
  def l; end

  # source://idlc//lib/idlc/idl_parser.rb#5400
  def r; end
end

# source://idlc//lib/idlc/idl_parser.rb#7889
module Idl::TemplateSafeTernaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#7890
  def e; end

  # source://idlc//lib/idlc/idl_parser.rb#7898
  def f; end

  # source://idlc//lib/idlc/idl_parser.rb#7894
  def t; end
end

# source://idlc//lib/idlc/idl_parser.rb#7768
module Idl::TernaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#7769
  def e; end

  # source://idlc//lib/idlc/idl_parser.rb#7777
  def f; end

  # source://idlc//lib/idlc/idl_parser.rb#7773
  def t; end
end

# source://idlc//lib/idlc/ast.rb#4941
class Idl::TernaryOperatorExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4951
  def initialize(input, interval, condition, true_expression, false_expression); end

  # source://idlc//lib/idlc/ast.rb#4947
  def condition; end

  # source://idlc//lib/idlc/ast.rb#4945
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4949
  def false_expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#186
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#123
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/prune.rb#456
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#5040
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4948
  def true_expression; end

  # source://idlc//lib/idlc/ast.rb#4983
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4956
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#5024
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5029
  def values(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4930
class Idl::TernaryOperatorExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4931
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#759
class Idl::TrueExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#763
  sig { params(input: ::String, interval: T::Range[::Integer]).void }
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#768
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#148
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#89
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#780
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#66
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#774
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#771
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#777
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::TrueClass) }
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#755
class Idl::TrueExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#756
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#15
class Idl::Type
  # source://idlc//lib/idlc/type.rb#119
  def initialize(kind, qualifiers: T.unsafe(nil), width: T.unsafe(nil), width_ast: T.unsafe(nil), max_width: T.unsafe(nil), sub_type: T.unsafe(nil), name: T.unsafe(nil), tuple_types: T.unsafe(nil), return_type: T.unsafe(nil), arguments: T.unsafe(nil), enum_class: T.unsafe(nil), csr: T.unsafe(nil)); end

  # source://idlc//lib/idlc/type.rb#382
  def ary?; end

  # source://idlc//lib/idlc/type.rb#235
  def ary_type(ary); end

  # source://idlc//lib/idlc/type.rb#160
  def clone; end

  # source://idlc//lib/idlc/type.rb#175
  def comparable_to?(type); end

  # source://idlc//lib/idlc/type.rb#386
  def const?; end

  # source://idlc//lib/idlc/type.rb#245
  def convertable_to?(type); end

  # source://idlc//lib/idlc/type.rb#56
  def default; end

  # source://idlc//lib/idlc/type.rb#98
  sig { returns(::Idl::EnumerationType) }
  def enum_class; end

  # source://idlc//lib/idlc/type.rb#207
  def equal_to?(type); end

  # source://idlc//lib/idlc/type.rb#334
  def fully_qualified_name; end

  # source://idlc//lib/idlc/type.rb#398
  def global?; end

  # source://idlc//lib/idlc/type.rb#44
  sig { returns(T::Boolean) }
  def integral?; end

  # source://idlc//lib/idlc/type.rb#80
  sig { returns(::Symbol) }
  def kind; end

  # source://idlc//lib/idlc/type.rb#406
  def known?; end

  # source://idlc//lib/idlc/type.rb#424
  sig { returns(::Idl::Type) }
  def make_const; end

  # source://idlc//lib/idlc/type.rb#417
  sig { returns(::Idl::Type) }
  def make_const!; end

  # source://idlc//lib/idlc/type.rb#429
  def make_global; end

  # source://idlc//lib/idlc/type.rb#434
  def make_known; end

  # source://idlc//lib/idlc/type.rb#410
  def make_signed; end

  # source://idlc//lib/idlc/type.rb#390
  def mutable?; end

  # source://idlc//lib/idlc/type.rb#364
  def name; end

  # source://idlc//lib/idlc/type.rb#83
  sig { returns(T::Array[::Symbol]) }
  def qualifiers; end

  # source://idlc//lib/idlc/type.rb#100
  def qualify(qualifier); end

  # source://idlc//lib/idlc/type.rb#48
  def runtime?; end

  # source://idlc//lib/idlc/type.rb#394
  def signed?; end

  # source://idlc//lib/idlc/type.rb#92
  sig { returns(::Idl::Type) }
  def sub_type; end

  # source://idlc//lib/idlc/type.rb#402
  def template_var?; end

  # source://idlc//lib/idlc/type.rb#314
  sig { returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/type.rb#334
  def to_s; end

  # source://idlc//lib/idlc/type.rb#95
  sig { returns(T::Array[::Idl::Type]) }
  def tuple_types; end

  # source://idlc//lib/idlc/type.rb#86
  sig { returns(T.any(::Integer, ::Symbol)) }
  def width; end

  # source://idlc//lib/idlc/type.rb#89
  sig { returns(T.nilable(::Idl::AstNode)) }
  def width_ast; end

  class << self
    # source://idlc//lib/idlc/type.rb#567
    sig { params(schema: T::Hash[::String, T.untyped]).returns(T.nilable(::Idl::Type)) }
    def from_json_schema(schema); end

    # source://idlc//lib/idlc/type.rb#106
    def from_typename(type_name, cfg_arch); end

    private

    # source://idlc//lib/idlc/type.rb#529
    sig { params(schema: T::Hash[::String, T.untyped]).returns(::Idl::Type) }
    def from_json_schema_array_type(schema); end

    # source://idlc//lib/idlc/type.rb#442
    sig { params(schema: T::Hash[::String, T.untyped]).returns(T.nilable(::Idl::Type)) }
    def from_json_schema_scalar_type(schema); end
  end
end

# source://idlc//lib/idlc/type.rb#18
Idl::Type::KINDS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/type.rb#34
Idl::Type::QUALIFIERS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/type.rb#158
Idl::Type::TYPE_FROM_KIND = T.let(T.unsafe(nil), Hash)

# source://idlc//lib/idlc/ast.rb#6236
Idl::TypeNameAst = T.type_alias { T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst) }

# source://idlc//lib/idlc/idl_parser.rb#6782
module Idl::UnaryExpression0
  # source://idlc//lib/idlc/idl_parser.rb#6783
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#6788
module Idl::UnaryExpression1
  # source://idlc//lib/idlc/idl_parser.rb#6789
  def first; end

  # source://idlc//lib/idlc/idl_parser.rb#6793
  def rest; end
end

# source://idlc//lib/idlc/idl_parser.rb#6799
module Idl::UnaryExpression2
  # source://idlc//lib/idlc/idl_parser.rb#6800
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#6806
module Idl::UnaryExpression3
  # source://idlc//lib/idlc/idl_parser.rb#6807
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#6813
module Idl::UnaryExpression4
  # source://idlc//lib/idlc/idl_parser.rb#6814
  def user_type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#6820
module Idl::UnaryExpression5
  # source://idlc//lib/idlc/idl_parser.rb#6821
  def user_type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#6827
module Idl::UnaryExpression6
  # source://idlc//lib/idlc/idl_parser.rb#6832
  def expression; end

  # source://idlc//lib/idlc/idl_parser.rb#6828
  def user_type_name; end
end

# source://idlc//lib/idlc/idl_parser.rb#6838
module Idl::UnaryExpression7
  # source://idlc//lib/idlc/idl_parser.rb#6839
  def expression; end
end

# source://idlc//lib/idlc/idl_parser.rb#6845
module Idl::UnaryExpression8
  # source://idlc//lib/idlc/idl_parser.rb#6846
  def ary; end

  # source://idlc//lib/idlc/idl_parser.rb#6850
  def value; end
end

# source://idlc//lib/idlc/idl_parser.rb#6856
module Idl::UnaryExpression9
  # source://idlc//lib/idlc/idl_parser.rb#6861
  def e; end

  # source://idlc//lib/idlc/idl_parser.rb#6857
  def o; end
end

# source://idlc//lib/idlc/ast.rb#4819
class Idl::UnaryOperatorExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4827
  def initialize(input, interval, op, expression); end

  # source://idlc//lib/idlc/ast.rb#4823
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4916
  def exp; end

  # source://idlc//lib/idlc/ast.rb#4825
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#265
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4833
  def invert(symtab); end

  # source://idlc//lib/idlc/ast.rb#4921
  def op; end

  # source://idlc//lib/idlc/ast.rb#4927
  sig { override.returns(::String) }
  def to_idl; end

  # source://udb/0.1.0/lib/udb/idl/condition_to_udb.rb#126
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(T::Boolean, T::Hash[::String, T.untyped])) }
  def to_udb_h(symtab); end

  # source://idlc//lib/idlc/ast.rb#4844
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4860
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4888
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4807
class Idl::UnaryOperatorExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4808
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5673
class Idl::UnknownLiteral
  # source://idlc//lib/idlc/ast.rb#5674
  def initialize(known_value, unknown_mask); end

  # source://idlc//lib/idlc/ast.rb#5678
  def bit_length; end

  # source://idlc//lib/idlc/ast.rb#5681
  def to_s; end
end

# source://idlc//lib/idlc/idl_parser.rb#15634
module Idl::UserTypeName0; end

# source://idlc//lib/idlc/ast.rb#6206
class Idl::UserTypeNameAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#6210
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#6208
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#66
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6233
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6224
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6216
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#6200
class Idl::UserTypeNameSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6201
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#27
Idl::ValueRbType = T.type_alias { T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)]) }

# source://idlc//lib/idlc/symbol_table.rb#16
class Idl::Var
  # source://idlc//lib/idlc/symbol_table.rb#21
  def initialize(name, type, value = T.unsafe(nil), decode_var: T.unsafe(nil), template_index: T.unsafe(nil), function_name: T.unsafe(nil), param: T.unsafe(nil), for_loop_iter: T.unsafe(nil)); end

  # source://idlc//lib/idlc/symbol_table.rb#67
  def clone; end

  # source://idlc//lib/idlc/symbol_table.rb#79
  def const?; end

  # source://idlc//lib/idlc/symbol_table.rb#46
  sig { returns(T::Boolean) }
  def const_eval?; end

  # source://idlc//lib/idlc/symbol_table.rb#41
  sig { void }
  def const_incompatible!; end

  # source://idlc//lib/idlc/symbol_table.rb#83
  def decode_var?; end

  # source://idlc//lib/idlc/symbol_table.rb#55
  sig { returns(T::Boolean) }
  def for_loop_iter?; end

  # source://idlc//lib/idlc/symbol_table.rb#59
  def hash; end

  # source://idlc//lib/idlc/symbol_table.rb#19
  def name; end

  # source://idlc//lib/idlc/symbol_table.rb#87
  def param?; end

  # source://idlc//lib/idlc/symbol_table.rb#101
  def template_index; end

  # source://idlc//lib/idlc/symbol_table.rb#107
  def template_val?; end

  # source://idlc//lib/idlc/symbol_table.rb#97
  def template_value?; end

  # source://idlc//lib/idlc/symbol_table.rb#93
  def template_value_for?(function_name); end

  # source://idlc//lib/idlc/symbol_table.rb#111
  def to_cxx; end

  # source://idlc//lib/idlc/symbol_table.rb#63
  def to_s; end

  # source://idlc//lib/idlc/symbol_table.rb#19
  def type; end

  # source://idlc//lib/idlc/symbol_table.rb#19
  def value; end

  # source://idlc//lib/idlc/symbol_table.rb#115
  def value=(new_value); end
end

# source://idlc//lib/idlc/idl_parser.rb#16378
module Idl::VarWrite0
  # source://idlc//lib/idlc/idl_parser.rb#16379
  def csr_name; end
end

# source://idlc//lib/idlc/ast.rb#2101
class Idl::VariableAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2125
  def initialize(input, interval, lhs_ast, rhs_ast); end

  # source://idlc//lib/idlc/ast.rb#2105
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2156
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2177
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#241
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2120
  sig { returns(::Idl::IdAst) }
  def lhs; end

  # source://idlc//lib/idlc/passes/prune.rb#74
  def nullify_assignments(symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#69
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#2123
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2191
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2131
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2146
  def var(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2090
class Idl::VariableAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2091
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2809
class Idl::VariableDeclarationAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#2839
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      type_name: T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst),
      id: ::Idl::IdAst,
      ary_size: T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue))
    ).void
  end
  def initialize(input, interval, type_name, id, ary_size); end

  # source://idlc//lib/idlc/ast.rb#2909
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#2825
  sig { returns(T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue))) }
  def ary_size; end

  # source://idlc//lib/idlc/ast.rb#2813
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2855
  sig { params(symtab: ::Idl::SymbolTable).returns(T.nilable(::Idl::Type)) }
  def decl_type(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#174
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2822
  sig { returns(::Idl::IdAst) }
  def id; end

  # source://idlc//lib/idlc/ast.rb#2850
  sig { void }
  def make_global; end

  # source://idlc//lib/idlc/ast.rb#2828
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/ast.rb#2921
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2880
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2883
  def type_check(symtab, add_sym = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2819
  sig { returns(T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst)) }
  def type_name; end
end

# source://idlc//lib/idlc/ast.rb#2798
class Idl::VariableDeclarationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2799
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2957
class Idl::VariableDeclarationWithInitializationAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#2999
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      type_name_ast: T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst),
      var_write_ast: ::Idl::IdAst,
      ary_size: T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue)),
      rval_ast: T.all(::Idl::AstNode, ::Idl::Rvalue),
      is_for_loop_iteration_var: T::Boolean
    ).void
  end
  def initialize(input, interval, type_name_ast, var_write_ast, ary_size, rval_ast, is_for_loop_iteration_var); end

  # source://idlc//lib/idlc/ast.rb#3073
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#2980
  sig { returns(T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue))) }
  def ary_size; end

  # source://idlc//lib/idlc/ast.rb#2962
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3103
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#3119
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#219
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2986
  sig { returns(::String) }
  def id; end

  # source://idlc//lib/idlc/ast.rb#2977
  sig { returns(::Idl::IdAst) }
  def lhs; end

  # source://idlc//lib/idlc/ast.rb#3013
  def lhs_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3009
  def make_global; end

  # source://idlc//lib/idlc/passes/prune.rb#93
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#2983
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#3125
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3040
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2974
  sig { returns(T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst)) }
  def type_name; end
end

# source://idlc//lib/idlc/ast.rb#2930
class Idl::VariableDeclarationWithInitializationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2931
  def to_ast; end
end

# source://idlc//lib/idlc/idl_parser.rb#1394
module Idl::VersionString0; end

# source://idlc//lib/idlc/type.rb#988
Idl::VoidType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#3307
class Idl::WidthRevealAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3317
  sig { params(input: ::String, interval: T::Range[::Integer], e: ::Idl::AstNode).void }
  def initialize(input, interval, e); end

  # source://idlc//lib/idlc/ast.rb#3311
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3314
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def expression; end

  # source://idlc//lib/idlc/ast.rb#3346
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3330
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3322
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3339
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Integer) }
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3301
class Idl::WidthRevealSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3302
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#966
class Idl::XregType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#967
  def initialize(xlen); end

  # source://idlc//lib/idlc/type.rb#975
  def to_cxx; end

  # source://idlc//lib/idlc/type.rb#971
  def to_s; end
end

# source://idlc//lib/idlc/idl_parser.rb#16640
class IdlParser < ::Treetop::Runtime::CompiledParser
  include ::Idl
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::Udb::Helpers::WavedromUtil

  private

  # source://idlc//lib/idlc/passes/prune.rb#19
  def create_bool_literal(value); end

  # source://idlc//lib/idlc/passes/prune.rb#14
  def create_int_literal(value); end

  # source://idlc//lib/idlc/passes/prune.rb#27
  def create_literal(symtab, value, type); end
end

# source://idlc//lib/idlc/syntax_node.rb#11
module Treetop
  class << self
    # source://treetop/1.6.12/lib/treetop/compiler/grammar_compiler.rb#35
    def load(path); end

    # source://treetop/1.6.12/lib/treetop/compiler/grammar_compiler.rb#48
    def load_from_string(s); end
  end
end

# source://idlc//lib/idlc/syntax_node.rb#12
module Treetop::Runtime; end

# source://idlc//lib/idlc.rb#17
class Treetop::Runtime::CompiledParser
  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#11
  def initialize; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#8
  def consume_all_input; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#8
  def consume_all_input=(_arg0); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#8
  def consume_all_input?; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#38
  def failure_column; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#30
  def failure_index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#34
  def failure_line; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#43
  def failure_reason; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#6
  def index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#6
  def input; end

  # source://idlc//lib/idlc.rb#18
  def input_file; end

  # source://idlc//lib/idlc.rb#29
  def instantiate_node(node_type, *args); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#6
  def max_terminal_failure_index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#15
  def parse(input, options = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#7
  def root=(_arg0); end

  # source://idlc//lib/idlc.rb#20
  def set_input_file(filename, starting_line = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#54
  def terminal_failures; end

  protected

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#78
  def forget_failures_to_here; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#106
  def has_terminal?(terminal, mode, index); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#98
  def idlc_instantiate_node(node_type, *args); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#66
  def index=(_arg0); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#65
  def input_length; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#65
  def node_cache; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#87
  def parse_anything(node_class = T.unsafe(nil), inline_module = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#68
  def prepare_to_parse(input); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#83
  def reset_index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#120
  def terminal_parse_failure(expected_string, unexpected = T.unsafe(nil)); end
end

# source://idlc//lib/idlc/syntax_node.rb#13
class Treetop::Runtime::SyntaxNode
  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#7
  def initialize(input, interval, elements = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#47
  def <=>(other); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#98
  def dot_id; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#15
  def elements; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#43
  def empty?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#51
  def extension_modules; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#4
  def input; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#91
  def inspect(indent = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#78
  def inspect_children(indent = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#63
  def inspect_self(indent = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#4
  def interval; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#35
  def nonterminal?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#5
  def parent; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#5
  def parent=(_arg0); end

  # source://idlc//lib/idlc/syntax_node.rb#20
  sig { params(filename: T.nilable(::String), starting_line: ::Integer).void }
  def set_input_file(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/syntax_node.rb#39
  sig { params(filename: T.nilable(::String), starting_line: ::Integer).void }
  def set_input_file_unless_already_set(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/syntax_node.rb#30
  sig { returns(T::Boolean) }
  def space?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#31
  def terminal?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#39
  def text_value; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#102
  def write_dot(io); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#113
  def write_dot_file(fname); end
end
