# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `idlc` gem.
# Please instead update this file by running `bin/tapioca gem idlc`.


# source://idlc//lib/idlc/syntax_node.rb#48
module Idl
  include ::Treetop::Runtime

  def _nt_ary_access; end
  def _nt_ary_eligible_expression; end
  def _nt_ary_size_decl; end
  def _nt_assignment; end
  def _nt_bitfield_definition; end
  def _nt_bits_cast; end
  def _nt_body_function_definition; end
  def _nt_builtin_function_definition; end
  def _nt_builtin_read_only_var; end
  def _nt_builtin_read_write_var; end
  def _nt_builtin_type_name; end
  def _nt_comment; end
  def _nt_concatenation_expression; end
  def _nt_csr_field_access_expression; end
  def _nt_csr_field_name; end
  def _nt_csr_name; end
  def _nt_csr_register_access_expression; end
  def _nt_declaration; end
  def _nt_dontcare_lvalue; end
  def _nt_dontcare_return; end
  def _nt_enum_definition; end
  def _nt_enum_ref; end
  def _nt_execute_if_block; end
  def _nt_expression; end
  def _nt_fetch; end
  def _nt_field_access_eligible_expression; end
  def _nt_field_access_expression; end
  def _nt_field_name; end
  def _nt_for_loop; end
  def _nt_function_arg_list; end
  def _nt_function_body; end
  def _nt_function_call; end
  def _nt_function_call_template_arguments; end
  def _nt_function_definition; end
  def _nt_function_if_block; end
  def _nt_function_name; end
  def _nt_function_statement; end
  def _nt_global_definition; end
  def _nt_id; end
  def _nt_include_statement; end
  def _nt_instruction_operation; end
  def _nt_int; end
  def _nt_isa; end
  def _nt_keyword; end
  def _nt_p0_binary_expression; end
  def _nt_p0_binary_operator; end
  def _nt_p1_binary_expression; end
  def _nt_p1_binary_operator; end
  def _nt_p2_binary_expression; end
  def _nt_p2_binary_operator; end
  def _nt_p3_binary_expression; end
  def _nt_p3_binary_operator; end
  def _nt_p3_template_binary_operator; end
  def _nt_p4_binary_expression; end
  def _nt_p4_binary_operator; end
  def _nt_p5_binary_expression; end
  def _nt_p5_binary_operator; end
  def _nt_p6_binary_expression; end
  def _nt_p6_binary_operator; end
  def _nt_p7_binary_expression; end
  def _nt_p7_binary_operator; end
  def _nt_p8_binary_expression; end
  def _nt_p8_binary_operator; end
  def _nt_p9_binary_expression; end
  def _nt_p9_binary_operator; end
  def _nt_paren_expression; end
  def _nt_post_dec; end
  def _nt_post_inc; end
  def _nt_replication_expression; end
  def _nt_reserved; end
  def _nt_return_expression; end
  def _nt_return_statement; end
  def _nt_rval; end
  def _nt_single_declaration; end
  def _nt_single_declaration_with_initialization; end
  def _nt_space; end
  def _nt_statement; end
  def _nt_string; end
  def _nt_struct_definition; end
  def _nt_template_safe_expression; end
  def _nt_template_safe_p3_binary_expression; end
  def _nt_template_safe_p4_binary_expression; end
  def _nt_template_safe_p5_binary_expression; end
  def _nt_template_safe_p6_binary_expression; end
  def _nt_template_safe_p7_binary_expression; end
  def _nt_template_safe_p8_binary_expression; end
  def _nt_template_safe_p9_binary_expression; end
  def _nt_template_safe_ternary_expression; end
  def _nt_ternary_expression; end
  def _nt_type_name; end
  def _nt_unary_expression; end
  def _nt_unary_operator; end
  def _nt_user_type_name; end
  def _nt_var_write; end
  def _nt_version_string; end
  def root; end
end

# source://idlc//lib/idlc/ast.rb#3935
class Idl::ArrayLiteralAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3939
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3943
  def element_nodes; end

  # source://idlc//lib/idlc/ast.rb#3941
  def entries; end

  # source://idlc//lib/idlc/ast.rb#3967
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3958
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3948
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3962
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3929
class Idl::ArrayLiteralSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3930
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1055
class Idl::ArraySizeAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1062
  def initialize(input, interval, expression); end

  # source://idlc//lib/idlc/ast.rb#1060
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1057
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#287
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1088
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1073
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1066
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1083
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1049
class Idl::ArraySizeSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1050
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1740
class Idl::AryAccessSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1744
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1760
class Idl::AryElementAccessAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1775
  def initialize(input, interval, var, index); end

  # source://idlc//lib/idlc/ast.rb#1764
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#218
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1773
  def index; end

  # source://idlc//lib/idlc/ast.rb#1841
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1810
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1780
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1821
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#1772
  def var; end
end

# source://idlc//lib/idlc/ast.rb#2059
class Idl::AryElementAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2081
  def initialize(input, interval, lhs, idx, rhs); end

  # source://idlc//lib/idlc/ast.rb#2063
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2120
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2150
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#242
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2078
  def idx; end

  # source://idlc//lib/idlc/ast.rb#2077
  def lhs; end

  # source://idlc//lib/idlc/ast.rb#2079
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2185
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2086
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2049
class Idl::AryElementAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2050
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1844
class Idl::AryRangeAccessAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1860
  def initialize(input, interval, var, msb, lsb); end

  # source://idlc//lib/idlc/ast.rb#1848
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#157
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1858
  def lsb; end

  # source://idlc//lib/idlc/ast.rb#1857
  def msb; end

  # source://idlc//lib/idlc/ast.rb#1909
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1890
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1865
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1902
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#1856
  def var; end
end

# source://idlc//lib/idlc/ast.rb#2198
class Idl::AryRangeAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2221
  def initialize(input, interval, variable, msb, lsb, write_value); end

  # source://idlc//lib/idlc/ast.rb#2202
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2258
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2286
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#19
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2218
  def lsb; end

  # source://idlc//lib/idlc/ast.rb#2217
  def msb; end

  # source://idlc//lib/idlc/ast.rb#2253
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2292
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2226
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2216
  def variable; end

  # source://idlc//lib/idlc/ast.rb#2219
  def write_value; end
end

# source://idlc//lib/idlc/ast.rb#2188
class Idl::AryRangeAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2189
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#11
class Idl::AstNode
  abstract!

  # source://idlc//lib/idlc/ast.rb#193
  sig { params(input: ::String, interval: T::Range[T.untyped], children: T::Array[::Idl::AstNode]).void }
  def initialize(input, interval, children); end

  # source://idlc//lib/idlc/ast.rb#70
  sig { returns(T::Array[::Idl::AstNode]) }
  def children; end

  # source://idlc//lib/idlc/ast.rb#187
  sig { abstract.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#245
  sig { params(klass: ::Class).returns(T.nilable(::Idl::AstNode)) }
  def find_ancestor(klass); end

  # source://idlc//lib/idlc/ast.rb#422
  sig { params(global_symtab: ::Idl::SymbolTable).returns(::Idl::AstNode) }
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#9
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#15
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#53
  sig { returns(::String) }
  def input; end

  # source://idlc//lib/idlc/ast.rb#45
  sig { returns(::Pathname) }
  def input_file; end

  # source://idlc//lib/idlc/ast.rb#469
  sig { returns(::String) }
  def inspect; end

  # source://idlc//lib/idlc/ast.rb#356
  sig { params(reason: ::String).returns(T.noreturn) }
  def internal_error(reason); end

  # source://idlc//lib/idlc/ast.rb#57
  sig { returns(T::Range[T.untyped]) }
  def interval; end

  # source://idlc//lib/idlc/ast.rb#238
  sig { returns(::Integer) }
  def lineno; end

  # source://idlc//lib/idlc/ast.rb#263
  sig { returns(::Idl::AstNode::LinesDescriptor) }
  def lines_around; end

  # source://idlc//lib/idlc/passes/prune.rb#63
  def nullify_assignments(symtab); end

  # source://idlc//lib/idlc/ast.rb#66
  sig { returns(T.nilable(::Idl::AstNode)) }
  def parent; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#11
  def pass_find_return_values(values, current_conditions); end

  # source://idlc//lib/idlc/ast.rb#431
  sig { returns(::String) }
  def path; end

  # source://idlc//lib/idlc/ast.rb#405
  sig { params(indent: ::Integer, indent_size: ::Integer, io: ::IO).void }
  def print_ast(indent = T.unsafe(nil), indent_size: T.unsafe(nil), io: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/prune.rb#44
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#13
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#11
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#227
  sig { params(filename: T.any(::Pathname, ::String), starting_line: ::Integer).void }
  def set_input_file(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#211
  sig { params(filename: T.any(::Pathname, ::String), starting_line: ::Integer).void }
  def set_input_file_unless_already_set(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#49
  sig { returns(::Integer) }
  def starting_line; end

  # source://idlc//lib/idlc/ast.rb#61
  sig { returns(::String) }
  def text_value; end

  # source://idlc//lib/idlc/ast.rb#463
  sig { abstract.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#466
  sig { overridable.returns(::String) }
  def to_idl_verbose; end

  # source://idlc//lib/idlc/ast.rb#291
  sig { params(reason: ::String).void }
  def truncation_warn(reason); end

  # source://idlc//lib/idlc/ast.rb#453
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#307
  sig { params(reason: ::String).returns(T.noreturn) }
  def type_error(reason); end

  # source://idlc//lib/idlc/ast.rb#395
  sig { params(s: ::String).returns(::String) }
  def unindent(s); end

  # source://idlc//lib/idlc/ast.rb#181
  sig { params(value_result: T.untyped, block: T.proc.returns(T.untyped)).returns(T.untyped) }
  def value_else(value_result, &block); end

  # source://idlc//lib/idlc/ast.rb#386
  sig { params(reason: ::String).returns(T.noreturn) }
  def value_error(reason); end

  # source://idlc//lib/idlc/ast.rb#172
  sig { params(block: T.proc.params(arg0: ::Object).returns(T.untyped)).returns(T.untyped) }
  def value_try(&block); end

  class << self
    # source://idlc//lib/idlc/ast.rb#175
    sig { params(value_result: T.untyped, _block: T.proc.returns(T.untyped)).returns(T.untyped) }
    def value_else(value_result, &_block); end

    # source://idlc//lib/idlc/ast.rb#377
    sig { params(reason: ::String, ast: T.nilable(::Idl::AstNode)).returns(T.noreturn) }
    def value_error(reason, ast = T.unsafe(nil)); end

    # source://idlc//lib/idlc/ast.rb#369
    def value_error_ast; end

    # source://idlc//lib/idlc/ast.rb#369
    def value_error_ast=(_arg0); end

    # source://idlc//lib/idlc/ast.rb#369
    def value_error_reason; end

    # source://idlc//lib/idlc/ast.rb#369
    def value_error_reason=(_arg0); end

    # source://idlc//lib/idlc/ast.rb#168
    sig { params(block: T.proc.params(arg0: ::Object).returns(T.untyped)).returns(T.untyped) }
    def value_try(&block); end
  end
end

# source://idlc//lib/idlc/ast.rb#103
class Idl::AstNode::InternalError < ::StandardError
  # source://idlc//lib/idlc/ast.rb#119
  sig { params(what: ::String).void }
  def initialize(what); end

  # source://idlc//lib/idlc/ast.rb#116
  sig { returns(T::Array[::String]) }
  def bt; end

  # source://idlc//lib/idlc/ast.rb#108
  sig { returns(::String) }
  def what; end
end

# source://idlc//lib/idlc/ast.rb#255
class Idl::AstNode::LinesDescriptor < ::T::Struct
  const :lines, ::String
  const :problem_interval, T::Range[T.untyped]
  const :lines_interval, T::Range[T.untyped]

  class << self
    # source://sorbet-runtime/0.5.12189/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/ast.rb#73
class Idl::AstNode::TypeError < ::StandardError
  # source://idlc//lib/idlc/ast.rb#90
  sig { params(what: ::String).void }
  def initialize(what); end

  # source://idlc//lib/idlc/ast.rb#86
  sig { returns(T::Array[::String]) }
  def bt; end

  # source://idlc//lib/idlc/ast.rb#78
  sig { returns(::String) }
  def what; end
end

# source://idlc//lib/idlc/ast.rb#133
class Idl::AstNode::ValueError < ::StandardError
  # source://idlc//lib/idlc/ast.rb#146
  sig { params(lineno: ::Integer, file: ::String, reason: ::String).void }
  def initialize(lineno, file, reason); end

  # source://idlc//lib/idlc/ast.rb#140
  sig { returns(::String) }
  def file; end

  # source://idlc//lib/idlc/ast.rb#137
  sig { returns(::Integer) }
  def lineno; end

  # source://idlc//lib/idlc/ast.rb#157
  sig { returns(::String) }
  def message; end

  # source://idlc//lib/idlc/ast.rb#143
  sig { returns(::String) }
  def reason; end

  # source://idlc//lib/idlc/ast.rb#154
  sig { returns(::String) }
  def what; end
end

# source://idlc//lib/idlc/ast.rb#16
Idl::BasicValueRbType = T.type_alias { T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean) }

# source://idlc//lib/idlc/ast.rb#3167
class Idl::BinaryExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3186
  def initialize(input, interval, lhs, op, rhs); end

  # source://idlc//lib/idlc/ast.rb#3376
  def bits_needed(value, signed); end

  # source://idlc//lib/idlc/ast.rb#3176
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#224
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3193
  def invert(symtab); end

  # source://idlc//lib/idlc/ast.rb#3182
  def lhs; end

  # source://idlc//lib/idlc/ast.rb#3403
  def max_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#3546
  def min_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#3890
  def op; end

  # source://idlc//lib/idlc/passes/prune.rb#237
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#3183
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#3224
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3229
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3297
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3696
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3172
Idl::BinaryExpressionAst::ARITH_OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3171
Idl::BinaryExpressionAst::BIT_OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3170
Idl::BinaryExpressionAst::LOGICAL_OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#3173
Idl::BinaryExpressionAst::OPS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#2970
class Idl::BinaryExpressionRightSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2974
  def to_ast; end

  # source://idlc//lib/idlc/ast.rb#2991
  def type_check(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#1522
class Idl::BitfieldDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1528
  def initialize(input, interval, name, size, fields); end

  # source://idlc//lib/idlc/ast.rb#1581
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1526
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1553
  def element_names; end

  # source://idlc//lib/idlc/ast.rb#1561
  def element_ranges(symtab); end

  # source://idlc//lib/idlc/ast.rb#1537
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/ast.rb#1603
  def name; end

  # source://idlc//lib/idlc/ast.rb#1548
  def size(symtab); end

  # source://idlc//lib/idlc/ast.rb#1610
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1591
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1568
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1606
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#1491
class Idl::BitfieldDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1492
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1431
class Idl::BitfieldFieldDefinitionAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1438
  def initialize(input, interval, name, msb, lsb); end

  # source://idlc//lib/idlc/ast.rb#1436
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1433
  def name; end

  # source://idlc//lib/idlc/ast.rb#1473
  def range(symtab); end

  # source://idlc//lib/idlc/ast.rb#1482
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1451
  def type_check(symtab); end
end

# source://idlc//lib/idlc/type.rb#617
class Idl::BitfieldType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#618
  def initialize(type_name, width, field_names, field_ranges); end

  # source://idlc//lib/idlc/type.rb#638
  def clone; end

  # source://idlc//lib/idlc/type.rb#634
  def field_names; end

  # source://idlc//lib/idlc/type.rb#627
  def range(field_name); end
end

# source://idlc//lib/idlc/type.rb#902
Idl::Bits1Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#903
Idl::Bits32Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#904
Idl::Bits64Type = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#3098
class Idl::BitsCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3109
  def initialize(input, interval, exp); end

  # source://idlc//lib/idlc/ast.rb#3102
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3107
  def expr; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#101
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3164
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3121
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3112
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3141
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3087
class Idl::BitsCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3088
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#905
Idl::BitsUnknownType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#908
Idl::BoolType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#1386
class Idl::BuiltinEnumDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1392
  def initialize(input, interval, user_type); end

  # source://idlc//lib/idlc/ast.rb#1419
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1390
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1405
  def element_names(symtab); end

  # source://idlc//lib/idlc/ast.rb#1409
  def element_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#1424
  def name; end

  # source://idlc//lib/idlc/ast.rb#1428
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1414
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1398
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1375
class Idl::BuiltinEnumDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1376
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5132
class Idl::BuiltinTypeNameAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5139
  def initialize(input, interval, type_name, bits_expression); end

  # source://idlc//lib/idlc/ast.rb#5137
  def bits_expression; end

  # source://idlc//lib/idlc/ast.rb#5135
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5164
  def freeze_tree(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#181
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5215
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5183
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5149
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5111
class Idl::BuiltinTypeNameSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5112
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4152
class Idl::BuiltinVariableAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#4168
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#4155
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#202
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4166
  def name; end

  # source://idlc//lib/idlc/ast.rb#4196
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4176
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4172
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4191
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4146
class Idl::BuiltinVariableSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4147
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5090
class Idl::CommentAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5094
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5092
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5104
  def content; end

  # source://idlc//lib/idlc/ast.rb#5107
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5099
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5085
class Idl::CommentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5086
  def to_ast; end
end

# source://idlc//lib/idlc.rb#46
class Idl::Compiler
  # source://idlc//lib/idlc.rb#49
  def initialize; end

  # source://idlc//lib/idlc.rb#244
  def compile_expression(expression, symtab, pass_error: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#53
  def compile_file(path); end

  # source://idlc//lib/idlc.rb#124
  def compile_func_body(body, return_type: T.unsafe(nil), symtab: T.unsafe(nil), name: T.unsafe(nil), input_file: T.unsafe(nil), input_line: T.unsafe(nil), no_rescue: T.unsafe(nil), extra_syms: T.unsafe(nil), type_check: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#205
  def compile_inst_operation(inst, symtab:, input_file: T.unsafe(nil), input_line: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#178
  def compile_inst_scope(idl, symtab:, input_file:, input_line: T.unsafe(nil)); end

  # source://idlc//lib/idlc.rb#47
  def parser; end

  # source://idlc//lib/idlc.rb#216
  def type_check(ast, symtab, what); end

  class << self
    # source://idlc//lib/idlc/version.rb#8
    def version; end
  end
end

# source://idlc//lib/idlc/ast.rb#3980
class Idl::ConcatenationExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3984
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3986
  def expressions; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#96
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4026
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4002
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3989
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4014
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3970
class Idl::ConcatenationExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3971
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5026
class Idl::ConditionalReturnStatementAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#5035
  def initialize(input, interval, return_expression, condition); end

  # source://idlc//lib/idlc/ast.rb#5033
  def condition; end

  # source://idlc//lib/idlc/ast.rb#5030
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#24
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/prune.rb#411
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#150
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#130
  def reachable_functions(symtab, cache); end

  # source://idlc//lib/idlc/ast.rb#5032
  def return_expression; end

  # source://idlc//lib/idlc/ast.rb#5047
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5052
  def return_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#5058
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5067
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#5081
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5040
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5020
class Idl::ConditionalReturnStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5021
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4728
class Idl::ConditionalStatementAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#4735
  def initialize(input, interval, action, condition); end

  # source://idlc//lib/idlc/ast.rb#4729
  def action; end

  # source://idlc//lib/idlc/ast.rb#4730
  def condition; end

  # source://idlc//lib/idlc/ast.rb#4733
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4749
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4765
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#272
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/prune.rb#426
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#166
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#147
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4771
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4740
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4718
class Idl::ConditionalStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4719
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#906
Idl::ConstBitsUnknownType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/type.rb#907
Idl::ConstBoolType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/interfaces.rb#96
module Idl::Csr
  interface!

  # source://idlc//lib/idlc/interfaces.rb#111
  sig { abstract.returns(T::Boolean) }
  def dynamic_length?; end

  # source://idlc//lib/idlc/interfaces.rb#114
  sig { abstract.returns(T::Array[::Idl::CsrField]) }
  def fields; end

  # source://idlc//lib/idlc/interfaces.rb#123
  sig { abstract.params(ext_name: ::String).returns(T::Boolean) }
  def implemented_without?(ext_name); end

  # source://idlc//lib/idlc/interfaces.rb#105
  sig { abstract.params(base: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def length(base); end

  # source://idlc//lib/idlc/interfaces.rb#108
  sig { abstract.returns(::Integer) }
  def max_length; end

  # source://idlc//lib/idlc/interfaces.rb#102
  sig { abstract.returns(::String) }
  def name; end

  # source://idlc//lib/idlc/interfaces.rb#119
  sig { abstract.returns(T.nilable(::Integer)) }
  def value; end
end

# source://idlc//lib/idlc/interfaces.rb#59
module Idl::CsrField
  interface!

  # source://idlc//lib/idlc/interfaces.rb#83
  sig { abstract.returns(T::Boolean) }
  def base32_only?; end

  # source://idlc//lib/idlc/interfaces.rb#79
  sig { abstract.returns(T::Boolean) }
  def base64_only?; end

  # source://idlc//lib/idlc/interfaces.rb#69
  sig { abstract.returns(T::Boolean) }
  def defined_in_all_bases?; end

  # source://idlc//lib/idlc/interfaces.rb#72
  sig { abstract.returns(T::Boolean) }
  def defined_in_base32?; end

  # source://idlc//lib/idlc/interfaces.rb#75
  sig { abstract.returns(T::Boolean) }
  def defined_in_base64?; end

  # source://idlc//lib/idlc/interfaces.rb#93
  sig { abstract.returns(T::Boolean) }
  def exists?; end

  # source://idlc//lib/idlc/interfaces.rb#88
  sig { abstract.params(base: T.nilable(::Integer)).returns(T::Range[::Integer]) }
  def location(base); end

  # source://idlc//lib/idlc/interfaces.rb#65
  sig { abstract.returns(::String) }
  def name; end
end

# source://idlc//lib/idlc/ast.rb#2419
class Idl::CsrFieldAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2428
  def initialize(input, interval, csr_field, write_value); end

  # source://idlc//lib/idlc/ast.rb#2423
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2425
  def csr_field; end

  # source://idlc//lib/idlc/ast.rb#2460
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2465
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#2448
  def field(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#111
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2468
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2432
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2452
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2426
  def write_value; end
end

# source://idlc//lib/idlc/ast.rb#2413
class Idl::CsrFieldAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2414
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#7038
class Idl::CsrFieldReadExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#7044
  def initialize(input, interval, csr, field_name); end

  # source://idlc//lib/idlc/ast.rb#7105
  def calc_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7133
  def calc_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#7042
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7080
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7084
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7086
  def field_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7090
  def field_name(symtab); end

  # source://idlc//lib/idlc/ast.rb#7051
  def freeze_tree(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#299
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7096
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7101
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7072
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7125
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7154
class Idl::CsrFieldReadExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7155
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#7283
class Idl::CsrFunctionCallAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#7301
  def initialize(input, interval, function_name, csr, args); end

  # source://idlc//lib/idlc/ast.rb#7299
  def args; end

  # source://idlc//lib/idlc/ast.rb#7287
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7298
  def csr; end

  # source://idlc//lib/idlc/ast.rb#7344
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7338
  def csr_known?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7342
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7296
  def function_name; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#75
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7377
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7319
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7306
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7349
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7268
class Idl::CsrFunctionCallSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7269
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#7160
class Idl::CsrReadExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#7168
  def initialize(input, interval, csr_name); end

  # source://idlc//lib/idlc/ast.rb#7164
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7194
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7198
  def csr_known?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7166
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7174
  def freeze_tree(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#305
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7213
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7187
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7190
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7203
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7148
class Idl::CsrReadExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7149
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#7222
class Idl::CsrSoftwareWriteAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#7231
  def initialize(input, interval, csr, expression); end

  # source://idlc//lib/idlc/ast.rb#7226
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7228
  def csr; end

  # source://idlc//lib/idlc/ast.rb#7245
  def csr_known?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7249
  def csr_name; end

  # source://idlc//lib/idlc/ast.rb#7257
  def execute(_symtab); end

  # source://idlc//lib/idlc/ast.rb#7260
  def execute_unknown(_symtab); end

  # source://idlc//lib/idlc/ast.rb#7229
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#81
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#7264
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7235
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#7252
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#7216
class Idl::CsrSoftwareWriteSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7217
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#650
class Idl::CsrType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#657
  sig { params(csr: ::Idl::Csr, qualifiers: T::Array[::Symbol]).void }
  def initialize(csr, qualifiers: T.unsafe(nil)); end

  # source://idlc//lib/idlc/type.rb#654
  sig { returns(::Idl::Csr) }
  def csr; end

  # source://idlc//lib/idlc/type.rb#662
  sig { returns(T::Array[::Idl::CsrField]) }
  def fields; end
end

# source://idlc//lib/idlc/ast.rb#7386
class Idl::CsrWriteAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#7394
  def initialize(input, interval, idx); end

  # source://idlc//lib/idlc/ast.rb#7390
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#7410
  def csr_def(symtab); end

  # source://idlc//lib/idlc/ast.rb#7429
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#7434
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#7392
  def idx; end

  # source://idlc//lib/idlc/ast.rb#7424
  def name(symtab); end

  # source://idlc//lib/idlc/ast.rb#7438
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#7420
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#7399
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#7382
class Idl::CsrWriteSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#7383
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#700
module Idl::Declaration
  interface!

  # source://idlc//lib/idlc/ast.rb#710
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def add_symbol(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4832
class Idl::DontCareLvalueAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4838
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#4836
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4854
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4846
  def type(_symtab); end

  # source://idlc//lib/idlc/ast.rb#4841
  def type_check(_symtab); end

  # source://idlc//lib/idlc/ast.rb#4851
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#4828
class Idl::DontCareLvalueSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4829
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4786
class Idl::DontCareReturnAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4792
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#4790
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#60
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4820
  def set_expected_type(t); end

  # source://idlc//lib/idlc/ast.rb#4825
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4802
  def type(_symtab); end

  # source://idlc//lib/idlc/ast.rb#4797
  def type_check(_symtab); end

  # source://idlc//lib/idlc/ast.rb#4807
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#4776
class Idl::DontCareReturnSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4777
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#34
Idl::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/ast.rb#6674
class Idl::ElseIfAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#6688
  def initialize(input, interval, body_interval, cond, body_stmts); end

  # source://idlc//lib/idlc/ast.rb#6686
  sig { returns(::Idl::IfBodyAst) }
  def body; end

  # source://idlc//lib/idlc/ast.rb#6683
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def cond; end

  # source://idlc//lib/idlc/ast.rb#6678
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#341
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#6709
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6714
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#6725
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#6737
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6693
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1226
class Idl::EnumArrayCastAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1232
  def initialize(input, interval, enum_class_name); end

  # source://idlc//lib/idlc/ast.rb#1230
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1227
  def enum_class; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#131
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1254
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1240
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1236
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1249
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1217
class Idl::EnumArrayCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1218
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1172
class Idl::EnumCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#1184
  def initialize(input, interval, user_type_name, expression); end

  # source://idlc//lib/idlc/ast.rb#1176
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1179
  def enum_name; end

  # source://idlc//lib/idlc/ast.rb#1182
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#106
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1214
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1206
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1188
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1211
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1166
class Idl::EnumCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1167
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#12
class Idl::EnumDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1296
  def initialize(input, interval, user_type, element_names, element_values); end

  # source://idlc//lib/idlc/ast.rb#1345
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1294
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1320
  sig { returns(T::Array[::String]) }
  def element_names; end

  # source://idlc//lib/idlc/ast.rb#1330
  sig { returns(T::Array[::Integer]) }
  def element_values; end

  # source://idlc//lib/idlc/ast.rb#1361
  def name; end

  # source://idlc//lib/idlc/ast.rb#1365
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1353
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1333
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1358
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#1257
class Idl::EnumDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1258
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1140
class Idl::EnumElementSizeAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1146
  def initialize(input, interval, enum_class_name); end

  # source://idlc//lib/idlc/ast.rb#1144
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1141
  def enum_class; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#126
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1163
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1154
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1150
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1158
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1131
class Idl::EnumElementSizeSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1132
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4347
class Idl::EnumRefAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4356
  def initialize(input, interval, class_name, member_name); end

  # source://idlc//lib/idlc/ast.rb#4353
  def class_name; end

  # source://idlc//lib/idlc/ast.rb#4351
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4365
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#116
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#139
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#4354
  def member_name; end

  # source://idlc//lib/idlc/ast.rb#4412
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4388
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4378
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4396
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4336
class Idl::EnumRefSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4337
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1101
class Idl::EnumSizeAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1107
  def initialize(input, interval, enum_class_name); end

  # source://idlc//lib/idlc/ast.rb#1105
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1102
  def enum_class; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#121
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1128
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1115
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1111
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#1123
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1092
class Idl::EnumSizeSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1093
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#547
class Idl::EnumerationType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#577
  sig do
    params(
      type_name: ::String,
      element_names: T::Array[::String],
      element_values: T::Array[::Integer],
      builtin: T::Boolean
    ).void
  end
  def initialize(type_name, element_names, element_values, builtin: T.unsafe(nil)); end

  # source://idlc//lib/idlc/type.rb#592
  sig { returns(T::Boolean) }
  def builtin?; end

  # source://idlc//lib/idlc/type.rb#595
  sig { returns(::Idl::EnumerationType) }
  def clone; end

  # source://idlc//lib/idlc/type.rb#608
  sig { params(element_value: ::Integer).returns(T.nilable(::String)) }
  def element_name(element_value); end

  # source://idlc//lib/idlc/type.rb#556
  sig { returns(T::Array[::String]) }
  def element_names; end

  # source://idlc//lib/idlc/type.rb#560
  sig { returns(T::Array[::Integer]) }
  def element_values; end

  # source://idlc//lib/idlc/type.rb#564
  sig { returns(::Idl::Type) }
  def ref_type; end

  # source://idlc//lib/idlc/type.rb#600
  sig { params(element_name: ::String).returns(T.nilable(::Integer)) }
  def value(element_name); end

  # source://idlc//lib/idlc/type.rb#552
  sig { returns(::Integer) }
  def width; end
end

# source://idlc//lib/idlc/ast.rb#473
module Idl::Executable
  interface!

  # source://idlc//lib/idlc/ast.rb#495
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#499
  sig { abstract.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5940
class Idl::FetchAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5946
  def initialize(input, interval, body); end

  # source://idlc//lib/idlc/ast.rb#5944
  def body; end

  # source://idlc//lib/idlc/ast.rb#5942
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5954
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5959
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5950
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5934
class Idl::FetchSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5935
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4270
class Idl::FieldAccessExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4279
  def initialize(input, interval, bitfield, field_name); end

  # source://idlc//lib/idlc/ast.rb#4274
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#86
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4285
  def kind(symtab); end

  # source://idlc//lib/idlc/ast.rb#4277
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def obj; end

  # source://idlc//lib/idlc/ast.rb#4333
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4290
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4302
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4320
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4260
class Idl::FieldAccessExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4261
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2307
class Idl::FieldAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2335
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      id: ::Idl::IdAst,
      field_name: ::String,
      rhs: T.all(::Idl::AstNode, ::Idl::Rvalue)
    ).void
  end
  def initialize(input, interval, id, field_name, rhs); end

  # source://idlc//lib/idlc/ast.rb#2320
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2380
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2403
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#2317
  sig { returns(::String) }
  def field_name; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#91
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2311
  sig { returns(::Idl::IdAst) }
  def id; end

  # source://idlc//lib/idlc/ast.rb#2314
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2410
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2341
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2355
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2295
class Idl::FieldAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2296
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#6399
class Idl::ForLoopAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#6416
  def initialize(input, interval, init, condition, update, stmts); end

  # source://idlc//lib/idlc/ast.rb#6412
  def condition; end

  # source://idlc//lib/idlc/ast.rb#6404
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6433
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#6516
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#191
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6411
  def init; end

  # source://idlc//lib/idlc/passes/prune.rb#116
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#197
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#167
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6464
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6433
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#6470
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#6414
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#6536
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6421
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#6413
  def update; end
end

# source://idlc//lib/idlc/ast.rb#6387
class Idl::ForLoopSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6388
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5816
class Idl::FunctionBodyAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#5827
  def initialize(input, interval, stmts); end

  # source://idlc//lib/idlc/ast.rb#5821
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5874
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#5892
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#293
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#21
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#67
  def pass_find_return_values(symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#159
  def prune(symtab, args_already_applied: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5859
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5874
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5899
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#5831
  def statements; end

  # source://idlc//lib/idlc/ast.rb#5833
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#5929
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5836
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5809
class Idl::FunctionBodySyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5811
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5531
class Idl::FunctionCallExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#5546
  def initialize(input, interval, function_name, targs, args); end

  # source://idlc//lib/idlc/ast.rb#5588
  def arg_nodes; end

  # source://idlc//lib/idlc/ast.rb#5544
  def args; end

  # source://idlc//lib/idlc/ast.rb#5537
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5667
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#5751
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#5592
  def func_type(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#278
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#27
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#5745
  def name; end

  # source://idlc//lib/idlc/passes/prune.rb#81
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#25
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#20
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5543
  def targs; end

  # source://idlc//lib/idlc/ast.rb#5559
  def template?; end

  # source://idlc//lib/idlc/ast.rb#5564
  def template_arg_nodes; end

  # source://idlc//lib/idlc/ast.rb#5568
  def template_values(symtab, unknown_ok: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5755
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5658
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5607
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#5667
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5521
class Idl::FunctionCallExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5522
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5984
class Idl::FunctionDefAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#5998
  def initialize(input, interval, name, targs, return_types, arguments, desc, type, body); end

  # source://idlc//lib/idlc/ast.rb#6264
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#6226
  def apply_template_and_arg_syms(symtab); end

  # source://idlc//lib/idlc/ast.rb#6049
  def arguments(symtab); end

  # source://idlc//lib/idlc/ast.rb#6080
  def arguments_list_str; end

  # source://idlc//lib/idlc/ast.rb#6316
  def body; end

  # source://idlc//lib/idlc/ast.rb#6322
  def builtin?; end

  # source://idlc//lib/idlc/ast.rb#6160
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6034
  def description; end

  # source://idlc//lib/idlc/ast.rb#6330
  def external?; end

  # source://idlc//lib/idlc/ast.rb#6022
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/ast.rb#6326
  def generated?; end

  # source://idlc//lib/idlc/ast.rb#6187
  def name; end

  # source://idlc//lib/idlc/ast.rb#6044
  def num_args; end

  # source://idlc//lib/idlc/passes/prune.rb#139
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#6019
  def reachable_functions_cache; end

  # source://idlc//lib/idlc/ast.rb#6085
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6148
  def return_type_list_str; end

  # source://idlc//lib/idlc/ast.rb#5987
  def return_type_nodes; end

  # source://idlc//lib/idlc/ast.rb#6278
  def template_names; end

  # source://idlc//lib/idlc/ast.rb#6284
  def template_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#6039
  def templated?; end

  # source://idlc//lib/idlc/ast.rb#6335
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6237
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#6306
  def type_check_args(symtab); end

  # source://idlc//lib/idlc/ast.rb#6310
  def type_check_body(symtab); end

  # source://idlc//lib/idlc/ast.rb#6210
  def type_check_from_call(symtab); end

  # source://idlc//lib/idlc/ast.rb#6302
  def type_check_return(symtab); end

  # source://idlc//lib/idlc/ast.rb#6297
  def type_check_targs(symtab); end

  # source://idlc//lib/idlc/ast.rb#6192
  def type_check_template_instance(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5968
class Idl::FunctionDefSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5969
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#669
class Idl::FunctionType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#672
  def initialize(func_name, func_def_ast, symtab); end

  # source://idlc//lib/idlc/type.rb#751
  sig do
    params(
      symtab: ::Idl::SymbolTable,
      argument_nodes: T::Array[::Idl::Rvalue],
      call_site_symtab: ::Idl::SymbolTable,
      func_call_ast: ::Idl::FunctionCallExpressionAst
    ).returns(T::Array[T.any(::Integer, ::Symbol)])
  end
  def apply_arguments(symtab, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#722
  def apply_template_values(template_values, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#855
  def argument_name(index, template_values = T.unsafe(nil), func_call_ast); end

  # source://idlc//lib/idlc/type.rb#840
  def argument_type(index, template_values, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#772
  def argument_values(symtab, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#870
  def body; end

  # source://idlc//lib/idlc/type.rb#684
  def builtin?; end

  # source://idlc//lib/idlc/type.rb#680
  def clone; end

  # source://idlc//lib/idlc/type.rb#688
  def external?; end

  # source://idlc//lib/idlc/type.rb#670
  def func_def_ast; end

  # source://idlc//lib/idlc/type.rb#686
  def generated?; end

  # source://idlc//lib/idlc/type.rb#690
  def num_args; end

  # source://idlc//lib/idlc/type.rb#798
  sig do
    params(
      template_values: T::Array[::Integer],
      argument_nodes: T::Array[::Idl::Rvalue],
      func_call_ast: ::Idl::FunctionCallExpressionAst
    ).returns(::Idl::Type)
  end
  def return_type(template_values, argument_nodes, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#827
  def return_types(template_values, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#811
  def return_value(template_values, argument_nodes, call_site_symtab, func_call_ast); end

  # source://idlc//lib/idlc/type.rb#716
  def template_names; end

  # source://idlc//lib/idlc/type.rb#718
  def template_types(symtab); end

  # source://idlc//lib/idlc/type.rb#720
  def templated?; end

  # source://idlc//lib/idlc/type.rb#692
  def type_check_call(template_values, argument_nodes, call_site_symtab, func_call_ast); end
end

# source://idlc//lib/idlc/ast.rb#922
class Idl::GlobalAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#937
  def initialize(input, interval, declaration); end

  # source://idlc//lib/idlc/ast.rb#950
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#926
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#933
  def declaration; end

  # source://idlc//lib/idlc/ast.rb#928
  def id; end

  # source://idlc//lib/idlc/ast.rb#957
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#946
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#942
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#916
class Idl::GlobalSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#917
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#860
class Idl::GlobalWithInitializationAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#875
  def initialize(input, interval, var_decl_with_init); end

  # source://idlc//lib/idlc/ast.rb#902
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#868
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#896
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#899
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#864
  def id; end

  # source://idlc//lib/idlc/ast.rb#865
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#911
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#886
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#881
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#891
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#871
  def var_decl_with_init; end
end

# source://idlc//lib/idlc/ast.rb#845
class Idl::GlobalWithInitializationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#846
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#748
class Idl::IdAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#759
  sig { params(input: ::String, interval: T::Range[::Integer]).void }
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#789
  sig { returns(T::Boolean) }
  def const?; end

  # source://idlc//lib/idlc/ast.rb#752
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#147
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#88
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#805
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def max_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#823
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def min_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#756
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/ast.rb#842
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#771
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#765
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#792
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#741
class Idl::IdSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#742
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#6776
class Idl::IfAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#6800
  def initialize(input, interval, if_cond, if_body, elseifs, final_else_body); end

  # source://idlc//lib/idlc/ast.rb#6781
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6795
  sig { returns(T::Array[::Idl::ElseIfAst]) }
  def elseifs; end

  # source://idlc//lib/idlc/ast.rb#6969
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#7015
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#6798
  sig { returns(::Idl::IfBodyAst) }
  def final_else_body; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#311
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#33
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#6792
  sig { returns(::Idl::IfBodyAst) }
  def if_body; end

  # source://idlc//lib/idlc/ast.rb#6789
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def if_cond; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#35
  def pass_find_return_values(values, current_conditions, symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#353
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#101
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#77
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#6862
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6871
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#6912
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#6849
  def taken_body(symtab); end

  # source://idlc//lib/idlc/ast.rb#7022
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6811
  def type_check(symtab); end

  private

  # source://idlc//lib/idlc/ast.rb#6930
  def execute_after_if(symtab); end

  # source://idlc//lib/idlc/ast.rb#7006
  def execute_unknown_after_if(symtab); end

  # source://idlc//lib/idlc/ast.rb#6880
  def return_values_after_if(symtab); end
end

# source://idlc//lib/idlc/ast.rb#6546
class Idl::IfBodyAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#6557
  def initialize(input, interval, body_stmts); end

  # source://idlc//lib/idlc/ast.rb#6551
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#6634
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#6660
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#34
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#70
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/prune.rb#329
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#6579
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#6585
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#6606
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#6555
  def stmts; end

  # source://idlc//lib/idlc/ast.rb#6668
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#6566
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#6742
class Idl::IfSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#6743
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#721
class Idl::IncludeStatementAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#730
  sig { params(input: ::String, interval: T::Range[T.untyped], filename: ::Idl::AstNode).void }
  def initialize(input, interval, filename); end

  # source://idlc//lib/idlc/ast.rb#723
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#727
  sig { returns(::String) }
  def filename; end

  # source://idlc//lib/idlc/ast.rb#735
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#738
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#713
class Idl::IncludeStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#715
  sig { override.returns(::Idl::IncludeStatementAst) }
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5803
class Idl::InstructionOperationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5804
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5278
class Idl::IntLiteralAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#5284
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5282
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#5288
  def freeze_tree(global_symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#141
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#94
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#5509
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5512
  sig { override.returns(::String) }
  def to_idl_verbose; end

  # source://idlc//lib/idlc/ast.rb#5314
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5298
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#5428
  def unsigned_value; end

  # source://idlc//lib/idlc/ast.rb#5381
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#5346
  def width(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5263
module Idl::IntLiteralSyntaxNode
  # source://idlc//lib/idlc/ast.rb#5264
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#974
class Idl::IsaAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#1001
  def add_global_symbols(symtab); end

  # source://idlc//lib/idlc/ast.rb#987
  def bitfields; end

  # source://idlc//lib/idlc/ast.rb#978
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#975
  def definitions; end

  # source://idlc//lib/idlc/ast.rb#984
  def enums; end

  # source://idlc//lib/idlc/ast.rb#996
  def fetch; end

  # source://idlc//lib/idlc/ast.rb#993
  def functions; end

  # source://idlc//lib/idlc/ast.rb#981
  def globals; end

  # source://idlc//lib/idlc/ast.rb#1016
  def replace_include!(include_ast, isa_ast); end

  # source://idlc//lib/idlc/ast.rb#990
  def structs; end

  # source://idlc//lib/idlc/ast.rb#1035
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1026
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#961
class Idl::IsaSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#962
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2481
class Idl::MultiVariableAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#2503
  def initialize(input, interval, variables, function_call); end

  # source://idlc//lib/idlc/ast.rb#2485
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2548
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2572
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/ast.rb#2501
  def function_call; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#70
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2512
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2580
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2517
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2500
  def variables; end

  # source://idlc//lib/idlc/ast.rb#2508
  def vars; end
end

# source://idlc//lib/idlc/ast.rb#2471
class Idl::MultiVariableAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2472
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2594
class Idl::MultiVariableDeclarationAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#2609
  def initialize(input, interval, type_name, var_names); end

  # source://idlc//lib/idlc/ast.rb#2642
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#2598
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#169
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2616
  def make_global; end

  # source://idlc//lib/idlc/ast.rb#2650
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2633
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2626
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2604
  def type_name; end

  # source://idlc//lib/idlc/ast.rb#2607
  def var_name_nodes; end

  # source://idlc//lib/idlc/ast.rb#2621
  def var_names; end
end

# source://idlc//lib/idlc/ast.rb#2583
class Idl::MultiVariableDeclarationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2584
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4648
class Idl::NoopAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#4652
  def initialize; end

  # source://idlc//lib/idlc/ast.rb#4650
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4660
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4663
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#16
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4667
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4657
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3903
class Idl::ParenExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3909
  def initialize(input, interval, exp); end

  # source://idlc//lib/idlc/ast.rb#3907
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3911
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#136
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3913
  def invert(symtab); end

  # source://idlc//lib/idlc/ast.rb#3926
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3919
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3916
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3922
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3893
class Idl::ParenExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3894
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#1919
class Idl::PcAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#1930
  sig { params(input: ::String, interval: T::Range[::Integer], rval: T.all(::Idl::AstNode, ::Idl::Rvalue)).void }
  def initialize(input, interval, rval); end

  # source://idlc//lib/idlc/ast.rb#1923
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1936
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#1940
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#236
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1927
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#1950
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1944
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1913
class Idl::PcAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1914
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4100
class Idl::PostDecrementExpressionAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#4108
  def initialize(input, interval, rval); end

  # source://idlc//lib/idlc/ast.rb#4104
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4122
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4138
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#49
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4106
  def rval; end

  # source://idlc//lib/idlc/ast.rb#4143
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4117
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4112
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4090
class Idl::PostDecrementExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4091
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4209
class Idl::PostIncrementExpressionAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#4217
  def initialize(input, interval, rval); end

  # source://idlc//lib/idlc/ast.rb#4213
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4234
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4251
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#44
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4215
  def rval; end

  # source://idlc//lib/idlc/ast.rb#4257
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4229
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4222
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4199
class Idl::PostIncrementExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4200
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4039
class Idl::ReplicationExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4049
  def initialize(input, interval, n, v); end

  # source://idlc//lib/idlc/ast.rb#4043
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#266
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4046
  def n; end

  # source://idlc//lib/idlc/ast.rb#4087
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4075
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4054
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4047
  def v; end

  # source://idlc//lib/idlc/ast.rb#4066
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4029
class Idl::ReplicationExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4030
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4938
class Idl::ReturnExpressionAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#4946
  def initialize(input, interval, return_nodes); end

  # source://idlc//lib/idlc/ast.rb#4942
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4990
  def enclosing_function; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#29
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#106
  def gen_option_adoc; end

  # source://idlc//lib/idlc/ast.rb#4963
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4952
  def return_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#4995
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#4944
  def return_value_nodes; end

  # source://idlc//lib/idlc/ast.rb#5006
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#5017
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4975
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4925
class Idl::ReturnExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4926
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4868
class Idl::ReturnStatementAst < ::Idl::AstNode
  include ::Idl::Returns

  # source://idlc//lib/idlc/ast.rb#4878
  def initialize(input, interval, return_expression); end

  # source://idlc//lib/idlc/ast.rb#4872
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4907
  def enclosing_function; end

  # source://idlc//lib/idlc/ast.rb#4893
  def expected_return_type(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#260
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#76
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/find_return_values.rb#19
  def pass_find_return_values(values, current_conditions, symtab); end

  # source://idlc//lib/idlc/ast.rb#4874
  def return_expression; end

  # source://idlc//lib/idlc/ast.rb#4888
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4883
  def return_types(symtab); end

  # source://idlc//lib/idlc/ast.rb#4912
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#4903
  def return_value_nodes; end

  # source://idlc//lib/idlc/ast.rb#4917
  def return_values(symtab); end

  # source://idlc//lib/idlc/ast.rb#4922
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4898
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4857
class Idl::ReturnStatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4858
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#503
module Idl::Returns
  abstract!

  # source://idlc//lib/idlc/ast.rb#544
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def expected_return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#521
  sig { abstract.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def return_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#526
  sig do
    abstract
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T.nilable(T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)])))
  end
  def return_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#540
  sig do
    abstract
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T::Array[T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)])])
  end
  def return_values(symtab); end
end

# source://idlc//lib/idlc/interfaces.rb#13
module Idl::RuntimeParam
  interface!

  # source://idlc//lib/idlc/interfaces.rb#25
  sig { abstract.returns(::String) }
  def desc; end

  # source://idlc//lib/idlc/interfaces.rb#37
  sig { abstract.returns(::Idl::Type) }
  def idl_type; end

  # source://idlc//lib/idlc/interfaces.rb#22
  sig { abstract.returns(::String) }
  def name; end

  # source://idlc//lib/idlc/interfaces.rb#28
  sig { abstract.returns(::Idl::Schema) }
  def schema; end

  # source://idlc//lib/idlc/interfaces.rb#34
  sig { abstract.returns(T.any(::Integer, ::String, T::Array[::Integer], T::Array[T::Boolean], T::Boolean)) }
  def value; end

  # source://idlc//lib/idlc/interfaces.rb#31
  sig { abstract.returns(T::Boolean) }
  def value_known?; end
end

# source://idlc//lib/idlc/interfaces.rb#18
Idl::RuntimeParam::ValueType = T.type_alias { T.any(::Integer, ::String, T::Array[::Integer], T::Array[T::Boolean], T::Boolean) }

# source://idlc//lib/idlc/ast.rb#595
module Idl::Rvalue
  abstract!

  # source://idlc//lib/idlc/ast.rb#645
  sig { params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def max_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#655
  sig { params(symtab: ::Idl::SymbolTable).returns(T.any(::Integer, ::Symbol)) }
  def min_value(symtab); end

  # source://idlc//lib/idlc/ast.rb#680
  sig { params(value: ::Integer, width: ::Integer, signed: T::Boolean).returns(::Integer) }
  def truncate(value, width, signed); end

  # source://idlc//lib/idlc/ast.rb#618
  sig { abstract.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#642
  sig do
    abstract
      .params(
        symtab: ::Idl::SymbolTable
      ).returns(T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)]))
  end
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#677
  sig do
    params(
      symtab: ::Idl::SymbolTable
    ).returns(T::Array[T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)])])
  end
  def values(symtab); end
end

# source://idlc//lib/idlc/ast.rb#697
Idl::RvalueAst = T.type_alias { T.all(::Idl::AstNode, ::Idl::Rvalue) }

# source://idlc//lib/idlc/interfaces.rb#41
module Idl::Schema
  interface!

  # source://idlc//lib/idlc/interfaces.rb#50
  sig { abstract.returns(::Integer) }
  def max_val; end

  # source://idlc//lib/idlc/interfaces.rb#47
  sig { abstract.returns(T::Boolean) }
  def max_val_known?; end

  # source://idlc//lib/idlc/interfaces.rb#56
  sig { abstract.returns(::Integer) }
  def min_val; end

  # source://idlc//lib/idlc/interfaces.rb#53
  sig { abstract.returns(T::Boolean) }
  def min_val_known?; end
end

# source://idlc//lib/idlc/ast.rb#3050
class Idl::SignCastAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3058
  def initialize(input, interval, exp); end

  # source://idlc//lib/idlc/ast.rb#3054
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3056
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#152
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#3084
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3066
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3061
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3069
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#3044
class Idl::SignCastSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#3045
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4676
class Idl::StatementAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#4684
  def initialize(input, interval, action); end

  # source://idlc//lib/idlc/ast.rb#4682
  def action; end

  # source://idlc//lib/idlc/ast.rb#4680
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4694
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#4704
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#248
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#82
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/prune.rb#220
  def prune(symtab); end

  # source://idlc//lib/idlc/passes/reachable_exceptions.rb#82
  def reachable_exceptions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/reachable_functions.rb#62
  def reachable_functions(symtab, cache = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4715
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4689
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4642
class Idl::StatementSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4643
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5236
class Idl::StringLiteralAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#5242
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5240
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#54
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5260
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5250
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5248
  def type_check(_symtab); end

  # source://idlc//lib/idlc/ast.rb#5255
  def value(_symtab); end
end

# source://idlc//lib/idlc/ast.rb#5224
module Idl::StringLiteralSyntaxNode
  # source://idlc//lib/idlc/ast.rb#5225
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#910
Idl::StringType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#1641
class Idl::StructDefinitionAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#1656
  def initialize(input, interval, name, member_types, member_names); end

  # source://idlc//lib/idlc/ast.rb#1684
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#1654
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#1651
  def member_names; end

  # source://idlc//lib/idlc/ast.rb#1695
  def member_type(name, symtab); end

  # source://idlc//lib/idlc/ast.rb#1648
  def member_types; end

  # source://idlc//lib/idlc/ast.rb#1645
  def name; end

  # source://idlc//lib/idlc/ast.rb#1702
  def num_members; end

  # source://idlc//lib/idlc/ast.rb#1705
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1673
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#1665
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1620
class Idl::StructDefinitionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1621
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#510
class Idl::StructType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#515
  sig { params(type_name: ::String, member_types: T::Array[::Idl::Type], member_names: T::Array[::String]).void }
  def initialize(type_name, member_types, member_names); end

  # source://idlc//lib/idlc/type.rb#525
  def clone; end

  # source://idlc//lib/idlc/type.rb#529
  def default; end

  # source://idlc//lib/idlc/type.rb#537
  def member?(name); end

  # source://idlc//lib/idlc/type.rb#539
  def member_type(member_name); end

  # source://idlc//lib/idlc/type.rb#523
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/type.rb#512
  sig { returns(::String) }
  def type_name; end
end

# source://idlc//lib/idlc/symbol_table.rb#114
class Idl::SymbolTable
  # source://idlc//lib/idlc/symbol_table.rb#207
  sig do
    params(
      mxlen: T.nilable(::Integer),
      possible_xlens: T::Array[::Integer],
      params: T::Array[::Idl::RuntimeParam],
      builtin_enums: T::Array[::Idl::SymbolTable::EnumDef],
      builtin_funcs: T.nilable(::Idl::SymbolTable::BuiltinFunctionCallbacks),
      csrs: T::Array[::Idl::Csr],
      name: ::String
    ).void
  end
  def initialize(mxlen: T.unsafe(nil), possible_xlens: T.unsafe(nil), params: T.unsafe(nil), builtin_enums: T.unsafe(nil), builtin_funcs: T.unsafe(nil), csrs: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://idlc//lib/idlc/symbol_table.rb#381
  def add(name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#390
  def add!(name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#407
  def add_above!(name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#416
  def add_at!(level, name, var); end

  # source://idlc//lib/idlc/symbol_table.rb#439
  def at_global_scope?; end

  # source://idlc//lib/idlc/symbol_table.rb#315
  def callstack; end

  # source://idlc//lib/idlc/symbol_table.rb#188
  sig { params(csr_name: ::String).returns(T.nilable(::Idl::Csr)) }
  def csr(csr_name); end

  # source://idlc//lib/idlc/symbol_table.rb#182
  sig { params(csr_name: ::String).returns(T::Boolean) }
  def csr?(csr_name); end

  # source://idlc//lib/idlc/symbol_table.rb#185
  sig { returns(T::Hash[::String, ::Idl::Csr]) }
  def csr_hash; end

  # source://idlc//lib/idlc/symbol_table.rb#488
  def deep_clone(clone_values: T.unsafe(nil), freeze_global: T.unsafe(nil)); end

  # source://idlc//lib/idlc/symbol_table.rb#257
  def deep_freeze; end

  # source://idlc//lib/idlc/symbol_table.rb#400
  def del(name); end

  # source://idlc//lib/idlc/symbol_table.rb#361
  def find_all(single_scope: T.unsafe(nil), &block); end

  # source://idlc//lib/idlc/symbol_table.rb#331
  def get(name); end

  # source://idlc//lib/idlc/symbol_table.rb#339
  def get_from(name, level); end

  # source://idlc//lib/idlc/symbol_table.rb#351
  def get_global(name); end

  # source://idlc//lib/idlc/symbol_table.rb#444
  def global_clone; end

  # source://idlc//lib/idlc/symbol_table.rb#128
  def hash; end

  # source://idlc//lib/idlc/symbol_table.rb#485
  def in_use?; end

  # source://idlc//lib/idlc/symbol_table.rb#252
  sig { returns(::String) }
  def inspect; end

  # source://idlc//lib/idlc/symbol_table.rb#320
  def key?(name); end

  # source://idlc//lib/idlc/symbol_table.rb#324
  def keys_pretty; end

  # source://idlc//lib/idlc/symbol_table.rb#425
  def levels; end

  # source://idlc//lib/idlc/symbol_table.rb#149
  sig { returns(T::Boolean) }
  def multi_xlen?; end

  # source://idlc//lib/idlc/symbol_table.rb#120
  sig { returns(T.nilable(::Integer)) }
  def mxlen; end

  # source://idlc//lib/idlc/symbol_table.rb#123
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/symbol_table.rb#191
  sig { params(param_name: ::String).returns(T.nilable(::Idl::RuntimeParam)) }
  def param(param_name); end

  # source://idlc//lib/idlc/symbol_table.rb#194
  sig { returns(T::Hash[::String, ::Idl::RuntimeParam]) }
  def params_hash; end

  # source://idlc//lib/idlc/symbol_table.rb#305
  def pop; end

  # source://idlc//lib/idlc/symbol_table.rb#152
  sig { returns(T::Array[::Integer]) }
  def possible_xlens; end

  # source://idlc//lib/idlc/symbol_table.rb#430
  def print; end

  # source://idlc//lib/idlc/symbol_table.rb#293
  def push(ast); end

  # source://idlc//lib/idlc/symbol_table.rb#474
  def release; end

  class << self
    # source://idlc//lib/idlc/symbol_table.rb#159
    sig do
      params(
        blk: T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean))
      ).returns(T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean)))
    end
    def make_implemented_callback(&blk); end

    # source://idlc//lib/idlc/symbol_table.rb#173
    sig do
      params(
        blk: T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean))
      ).returns(T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean)))
    end
    def make_implemented_csr_callback(&blk); end

    # source://idlc//lib/idlc/symbol_table.rb#166
    sig do
      params(
        blk: T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean))
      ).returns(T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean)))
    end
    def make_implemented_version_callback(&blk); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#175
class Idl::SymbolTable::BuiltinFunctionCallbacks < ::T::Struct
  prop :implemented, T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean))
  prop :implemented_version, T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean))
  prop :implemented_csr, T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean))

  class << self
    # source://sorbet-runtime/0.5.12189/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#125
class Idl::SymbolTable::DuplicateSymError < ::StandardError; end

# source://idlc//lib/idlc/symbol_table.rb#134
class Idl::SymbolTable::EnumDef < ::T::Struct
  prop :name, ::String
  prop :element_values, T::Array[::Integer]
  prop :element_names, T::Array[::String]

  # source://idlc//lib/idlc/symbol_table.rb#142
  sig { params(name: ::String, element_values: T::Array[::Integer], element_names: T::Array[::String]).void }
  def initialize(name:, element_values:, element_names:); end

  class << self
    # source://sorbet-runtime/0.5.12189/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://idlc//lib/idlc/symbol_table.rb#154
Idl::SymbolTable::ImplementedCallbackType = T.type_alias { T.proc.params(arg0: ::String).returns(T.nilable(T::Boolean)) }

# source://idlc//lib/idlc/symbol_table.rb#168
Idl::SymbolTable::ImplementedCsrCallbackType = T.type_alias { T.proc.params(arg0: ::Integer).returns(T.nilable(T::Boolean)) }

# source://idlc//lib/idlc/symbol_table.rb#161
Idl::SymbolTable::ImplementedVersionCallbackType = T.type_alias { T.proc.params(arg0: ::String, arg1: ::String).returns(T.nilable(T::Boolean)) }

# source://idlc//lib/idlc/syntax_node.rb#49
class Idl::SyntaxNode < ::Treetop::Runtime::SyntaxNode
  # source://idlc//lib/idlc/syntax_node.rb#54
  sig { overridable.returns(::Idl::AstNode) }
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#4549
class Idl::TernaryOperatorExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4559
  def initialize(input, interval, condition, true_expression, false_expression); end

  # source://idlc//lib/idlc/ast.rb#4555
  def condition; end

  # source://idlc//lib/idlc/ast.rb#4553
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4557
  def false_expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#175
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/passes/gen_option_adoc.rb#114
  def gen_option_adoc; end

  # source://idlc//lib/idlc/passes/prune.rb#454
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#4639
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4556
  def true_expression; end

  # source://idlc//lib/idlc/ast.rb#4591
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4564
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4623
  def value(symtab); end

  # source://idlc//lib/idlc/ast.rb#4628
  def values(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4538
class Idl::TernaryOperatorExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4539
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#15
class Idl::Type
  # source://idlc//lib/idlc/type.rb#107
  def initialize(kind, qualifiers: T.unsafe(nil), width: T.unsafe(nil), sub_type: T.unsafe(nil), name: T.unsafe(nil), tuple_types: T.unsafe(nil), enum_class: T.unsafe(nil), csr: T.unsafe(nil)); end

  # source://idlc//lib/idlc/type.rb#368
  def ary?; end

  # source://idlc//lib/idlc/type.rb#221
  def ary_type(ary); end

  # source://idlc//lib/idlc/type.rb#146
  def clone; end

  # source://idlc//lib/idlc/type.rb#161
  def comparable_to?(type); end

  # source://idlc//lib/idlc/type.rb#372
  def const?; end

  # source://idlc//lib/idlc/type.rb#231
  def convertable_to?(type); end

  # source://idlc//lib/idlc/type.rb#47
  def default; end

  # source://idlc//lib/idlc/type.rb#86
  sig { returns(::Idl::EnumerationType) }
  def enum_class; end

  # source://idlc//lib/idlc/type.rb#193
  def equal_to?(type); end

  # source://idlc//lib/idlc/type.rb#320
  def fully_qualified_name; end

  # source://idlc//lib/idlc/type.rb#384
  def global?; end

  # source://idlc//lib/idlc/type.rb#43
  sig { returns(T::Boolean) }
  def integral?; end

  # source://idlc//lib/idlc/type.rb#71
  sig { returns(::Symbol) }
  def kind; end

  # source://idlc//lib/idlc/type.rb#406
  sig { returns(::Idl::Type) }
  def make_const; end

  # source://idlc//lib/idlc/type.rb#399
  sig { returns(::Idl::Type) }
  def make_const!; end

  # source://idlc//lib/idlc/type.rb#411
  def make_global; end

  # source://idlc//lib/idlc/type.rb#392
  def make_signed; end

  # source://idlc//lib/idlc/type.rb#376
  def mutable?; end

  # source://idlc//lib/idlc/type.rb#350
  def name; end

  # source://idlc//lib/idlc/type.rb#74
  sig { returns(T::Array[::Symbol]) }
  def qualifiers; end

  # source://idlc//lib/idlc/type.rb#88
  def qualify(qualifier); end

  # source://idlc//lib/idlc/type.rb#380
  def signed?; end

  # source://idlc//lib/idlc/type.rb#80
  sig { returns(::Idl::Type) }
  def sub_type; end

  # source://idlc//lib/idlc/type.rb#388
  def template_var?; end

  # source://idlc//lib/idlc/type.rb#300
  sig { returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/type.rb#320
  def to_s; end

  # source://idlc//lib/idlc/type.rb#83
  sig { returns(T::Array[::Idl::Type]) }
  def tuple_types; end

  # source://idlc//lib/idlc/type.rb#77
  sig { returns(T.any(::Integer, ::Symbol)) }
  def width; end

  class << self
    # source://idlc//lib/idlc/type.rb#499
    def from_json_schema(schema); end

    # source://idlc//lib/idlc/type.rb#94
    def from_typename(type_name, cfg_arch); end

    private

    # source://idlc//lib/idlc/type.rb#459
    def from_json_schema_array_type(schema); end

    # source://idlc//lib/idlc/type.rb#418
    def from_json_schema_scalar_type(schema); end
  end
end

# source://idlc//lib/idlc/type.rb#18
Idl::Type::KINDS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/type.rb#34
Idl::Type::QUALIFIERS = T.let(T.unsafe(nil), Array)

# source://idlc//lib/idlc/type.rb#144
Idl::Type::TYPE_FROM_KIND = T.let(T.unsafe(nil), Hash)

# source://idlc//lib/idlc/ast.rb#5801
Idl::TypeNameAst = T.type_alias { T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst) }

# source://idlc//lib/idlc/ast.rb#4427
class Idl::UnaryOperatorExpressionAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#4435
  def initialize(input, interval, op, expression); end

  # source://idlc//lib/idlc/ast.rb#4431
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#4524
  def exp; end

  # source://idlc//lib/idlc/ast.rb#4433
  def expression; end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#254
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#4441
  def invert(symtab); end

  # source://idlc//lib/idlc/ast.rb#4529
  def op; end

  # source://idlc//lib/idlc/ast.rb#4535
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#4452
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#4468
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#4496
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#4415
class Idl::UnaryOperatorExpressionSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#4416
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#5270
class Idl::UnknownLiteral
  # source://idlc//lib/idlc/ast.rb#5271
  def initialize(known_value, unknown_mask); end
end

# source://idlc//lib/idlc/ast.rb#5771
class Idl::UserTypeNameAst < ::Idl::AstNode
  # source://idlc//lib/idlc/ast.rb#5775
  def initialize(input, interval); end

  # source://idlc//lib/idlc/ast.rb#5773
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#65
  def gen_adoc(indent, indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#5798
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#5789
  sig { params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#5781
  def type_check(symtab); end
end

# source://idlc//lib/idlc/ast.rb#5765
class Idl::UserTypeNameSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#5766
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#27
Idl::ValueRbType = T.type_alias { T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean, T::Hash[::String, T.any(::Integer, ::String, T::Array[::Integer], T::Array[::String], T::Array[T::Boolean], T::Boolean)]) }

# source://idlc//lib/idlc/symbol_table.rb#15
class Idl::Var
  # source://idlc//lib/idlc/symbol_table.rb#20
  def initialize(name, type, value = T.unsafe(nil), decode_var: T.unsafe(nil), template_index: T.unsafe(nil), function_name: T.unsafe(nil), param: T.unsafe(nil)); end

  # source://idlc//lib/idlc/symbol_table.rb#60
  def clone; end

  # source://idlc//lib/idlc/symbol_table.rb#72
  def const?; end

  # source://idlc//lib/idlc/symbol_table.rb#44
  sig { returns(T::Boolean) }
  def const_eval?; end

  # source://idlc//lib/idlc/symbol_table.rb#39
  sig { void }
  def const_incompatible!; end

  # source://idlc//lib/idlc/symbol_table.rb#76
  def decode_var?; end

  # source://idlc//lib/idlc/symbol_table.rb#52
  def hash; end

  # source://idlc//lib/idlc/symbol_table.rb#18
  def name; end

  # source://idlc//lib/idlc/symbol_table.rb#80
  def param?; end

  # source://idlc//lib/idlc/symbol_table.rb#94
  def template_index; end

  # source://idlc//lib/idlc/symbol_table.rb#100
  def template_val?; end

  # source://idlc//lib/idlc/symbol_table.rb#90
  def template_value?; end

  # source://idlc//lib/idlc/symbol_table.rb#86
  def template_value_for?(function_name); end

  # source://idlc//lib/idlc/symbol_table.rb#104
  def to_cxx; end

  # source://idlc//lib/idlc/symbol_table.rb#56
  def to_s; end

  # source://idlc//lib/idlc/symbol_table.rb#18
  def type; end

  # source://idlc//lib/idlc/symbol_table.rb#18
  def value; end

  # source://idlc//lib/idlc/symbol_table.rb#108
  def value=(new_value); end
end

# source://idlc//lib/idlc/ast.rb#1964
class Idl::VariableAssignmentAst < ::Idl::AstNode
  include ::Idl::Executable

  # source://idlc//lib/idlc/ast.rb#1985
  def initialize(input, interval, lhs_ast, rhs_ast); end

  # source://idlc//lib/idlc/ast.rb#1968
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2011
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2032
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#230
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#1982
  def lhs; end

  # source://idlc//lib/idlc/passes/prune.rb#73
  def nullify_assignments(symtab); end

  # source://idlc//lib/idlc/passes/prune.rb#68
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#1983
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2046
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#1991
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2001
  def var(symtab); end
end

# source://idlc//lib/idlc/ast.rb#1953
class Idl::VariableAssignmentSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#1954
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2664
class Idl::VariableDeclarationAst < ::Idl::AstNode
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#2694
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      type_name: T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst),
      id: ::Idl::IdAst,
      ary_size: T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue))
    ).void
  end
  def initialize(input, interval, type_name, id, ary_size); end

  # source://idlc//lib/idlc/ast.rb#2764
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#2680
  sig { returns(T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue))) }
  def ary_size; end

  # source://idlc//lib/idlc/ast.rb#2668
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2710
  sig { params(symtab: ::Idl::SymbolTable).returns(T.nilable(::Idl::Type)) }
  def decl_type(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#163
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2677
  sig { returns(::Idl::IdAst) }
  def id; end

  # source://idlc//lib/idlc/ast.rb#2705
  sig { void }
  def make_global; end

  # source://idlc//lib/idlc/ast.rb#2683
  sig { returns(::String) }
  def name; end

  # source://idlc//lib/idlc/ast.rb#2776
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2735
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2738
  def type_check(symtab, add_sym = T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2674
  sig { returns(T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst)) }
  def type_name; end
end

# source://idlc//lib/idlc/ast.rb#2653
class Idl::VariableDeclarationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2654
  def to_ast; end
end

# source://idlc//lib/idlc/ast.rb#2800
class Idl::VariableDeclarationWithInitializationAst < ::Idl::AstNode
  include ::Idl::Executable
  include ::Idl::Declaration

  # source://idlc//lib/idlc/ast.rb#2841
  sig do
    params(
      input: ::String,
      interval: T::Range[::Integer],
      type_name_ast: T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst),
      var_write_ast: ::Idl::IdAst,
      ary_size: T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue)),
      rval_ast: T.all(::Idl::AstNode, ::Idl::Rvalue)
    ).void
  end
  def initialize(input, interval, type_name_ast, var_write_ast, ary_size, rval_ast); end

  # source://idlc//lib/idlc/ast.rb#2914
  def add_symbol(symtab); end

  # source://idlc//lib/idlc/ast.rb#2823
  sig { returns(T.nilable(T.all(::Idl::AstNode, ::Idl::Rvalue))) }
  def ary_size; end

  # source://idlc//lib/idlc/ast.rb#2805
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#2939
  def execute(symtab); end

  # source://idlc//lib/idlc/ast.rb#2955
  def execute_unknown(symtab); end

  # source://idlc//lib/idlc/passes/gen_adoc.rb#208
  def gen_adoc(indent = T.unsafe(nil), indent_spaces: T.unsafe(nil)); end

  # source://idlc//lib/idlc/ast.rb#2829
  sig { returns(::String) }
  def id; end

  # source://idlc//lib/idlc/ast.rb#2820
  sig { returns(::Idl::IdAst) }
  def lhs; end

  # source://idlc//lib/idlc/ast.rb#2854
  def lhs_type(symtab); end

  # source://idlc//lib/idlc/ast.rb#2850
  def make_global; end

  # source://idlc//lib/idlc/passes/prune.rb#92
  def prune(symtab); end

  # source://idlc//lib/idlc/ast.rb#2826
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def rhs; end

  # source://idlc//lib/idlc/ast.rb#2961
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#2881
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#2817
  sig { returns(T.any(::Idl::BuiltinTypeNameAst, ::Idl::UserTypeNameAst)) }
  def type_name; end
end

# source://idlc//lib/idlc/ast.rb#2785
class Idl::VariableDeclarationWithInitializationSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2786
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#909
Idl::VoidType = T.let(T.unsafe(nil), Idl::Type)

# source://idlc//lib/idlc/ast.rb#3002
class Idl::WidthRevealAst < ::Idl::AstNode
  include ::Idl::Rvalue

  # source://idlc//lib/idlc/ast.rb#3012
  sig { params(input: ::String, interval: T::Range[::Integer], e: ::Idl::AstNode).void }
  def initialize(input, interval, e); end

  # source://idlc//lib/idlc/ast.rb#3006
  sig { override.params(symtab: ::Idl::SymbolTable).returns(T::Boolean) }
  def const_eval?(symtab); end

  # source://idlc//lib/idlc/ast.rb#3009
  sig { returns(T.all(::Idl::AstNode, ::Idl::Rvalue)) }
  def expression; end

  # source://idlc//lib/idlc/ast.rb#3041
  sig { override.returns(::String) }
  def to_idl; end

  # source://idlc//lib/idlc/ast.rb#3025
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Idl::Type) }
  def type(symtab); end

  # source://idlc//lib/idlc/ast.rb#3017
  sig { override.params(symtab: ::Idl::SymbolTable).void }
  def type_check(symtab); end

  # source://idlc//lib/idlc/ast.rb#3034
  sig { override.params(symtab: ::Idl::SymbolTable).returns(::Integer) }
  def value(symtab); end
end

# source://idlc//lib/idlc/ast.rb#2996
class Idl::WidthRevealSyntaxNode < ::Idl::SyntaxNode
  # source://idlc//lib/idlc/ast.rb#2997
  def to_ast; end
end

# source://idlc//lib/idlc/type.rb#887
class Idl::XregType < ::Idl::Type
  # source://idlc//lib/idlc/type.rb#888
  def initialize(xlen); end

  # source://idlc//lib/idlc/type.rb#896
  def to_cxx; end

  # source://idlc//lib/idlc/type.rb#892
  def to_s; end
end

# source://idlc//lib/idlc.rb#41
class IdlParser < ::Treetop::Runtime::CompiledParser
  include ::Idl
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://idlc//lib/idlc/passes/prune.rb#18
  def create_bool_literal(value); end

  # source://idlc//lib/idlc/passes/prune.rb#13
  def create_int_literal(value); end

  # source://idlc//lib/idlc/passes/prune.rb#26
  def create_literal(symtab, value, type); end
end

# source://idlc//lib/idlc/syntax_node.rb#11
module Treetop
  class << self
    # source://treetop/1.6.12/lib/treetop/compiler/grammar_compiler.rb#35
    def load(path); end

    # source://treetop/1.6.12/lib/treetop/compiler/grammar_compiler.rb#48
    def load_from_string(s); end
  end
end

# source://idlc//lib/idlc/syntax_node.rb#12
module Treetop::Runtime; end

# source://idlc//lib/idlc.rb#16
class Treetop::Runtime::CompiledParser
  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#11
  def initialize; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#8
  def consume_all_input; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#8
  def consume_all_input=(_arg0); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#8
  def consume_all_input?; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#38
  def failure_column; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#30
  def failure_index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#34
  def failure_line; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#43
  def failure_reason; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#6
  def index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#6
  def input; end

  # source://idlc//lib/idlc.rb#17
  def input_file; end

  # source://idlc//lib/idlc.rb#28
  def instantiate_node(node_type, *args); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#6
  def max_terminal_failure_index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#15
  def parse(input, options = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#7
  def root=(_arg0); end

  # source://idlc//lib/idlc.rb#19
  def set_input_file(filename, starting_line = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#54
  def terminal_failures; end

  protected

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#78
  def forget_failures_to_here; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#106
  def has_terminal?(terminal, mode, index); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#98
  def idlc_instantiate_node(node_type, *args); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#66
  def index=(_arg0); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#65
  def input_length; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#65
  def node_cache; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#87
  def parse_anything(node_class = T.unsafe(nil), inline_module = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#68
  def prepare_to_parse(input); end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#83
  def reset_index; end

  # source://treetop/1.6.12/lib/treetop/runtime/compiled_parser.rb#120
  def terminal_parse_failure(expected_string, unexpected = T.unsafe(nil)); end
end

# source://idlc//lib/idlc/syntax_node.rb#13
class Treetop::Runtime::SyntaxNode
  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#7
  def initialize(input, interval, elements = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#47
  def <=>(other); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#98
  def dot_id; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#15
  def elements; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#43
  def empty?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#51
  def extension_modules; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#4
  def input; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#91
  def inspect(indent = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#78
  def inspect_children(indent = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#63
  def inspect_self(indent = T.unsafe(nil)); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#4
  def interval; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#35
  def nonterminal?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#5
  def parent; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#5
  def parent=(_arg0); end

  # source://idlc//lib/idlc/syntax_node.rb#20
  sig { params(filename: T.nilable(::String), starting_line: ::Integer).void }
  def set_input_file(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/syntax_node.rb#39
  sig { params(filename: T.nilable(::String), starting_line: ::Integer).void }
  def set_input_file_unless_already_set(filename, starting_line = T.unsafe(nil)); end

  # source://idlc//lib/idlc/syntax_node.rb#30
  sig { returns(T::Boolean) }
  def space?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#31
  def terminal?; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#39
  def text_value; end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#102
  def write_dot(io); end

  # source://treetop/1.6.12/lib/treetop/runtime/syntax_node.rb#113
  def write_dot_file(fname); end
end
