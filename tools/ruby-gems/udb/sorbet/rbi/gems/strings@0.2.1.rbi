# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `strings` gem.
# Please instead update this file by running `bin/tapioca gem strings`.


# source://strings//lib/strings/align.rb#6
module Strings
  private

  # source://strings//lib/strings.rb#18
  def align(*args, **kws); end

  # source://strings//lib/strings.rb#38
  def align_center(*args); end

  # source://strings//lib/strings.rb#28
  def align_left(*args); end

  # source://strings//lib/strings.rb#48
  def align_right(*args); end

  # source://strings//lib/strings.rb#58
  def ansi?(string); end

  # source://strings//lib/strings.rb#68
  def fold(*args); end

  # source://strings//lib/strings.rb#78
  def pad(*args); end

  # source://strings//lib/strings.rb#88
  def sanitize(string); end

  # source://strings//lib/strings.rb#98
  def truncate(*args); end

  # source://strings//lib/strings.rb#108
  def wrap(*args); end

  class << self
    # source://strings//lib/strings.rb#18
    def align(*args, **kws); end

    # source://strings//lib/strings.rb#38
    def align_center(*args); end

    # source://strings//lib/strings.rb#28
    def align_left(*args); end

    # source://strings//lib/strings.rb#48
    def align_right(*args); end

    # source://strings//lib/strings.rb#58
    def ansi?(string); end

    # source://strings//lib/strings.rb#68
    def fold(*args); end

    # source://strings//lib/strings.rb#78
    def pad(*args); end

    # source://strings//lib/strings.rb#88
    def sanitize(string); end

    # source://strings//lib/strings.rb#98
    def truncate(*args); end

    # source://strings//lib/strings.rb#108
    def wrap(*args); end
  end
end

# source://strings//lib/strings/align.rb#8
module Strings::Align
  private

  # source://strings//lib/strings/align.rb#39
  def align(text, width, direction: T.unsafe(nil), **options); end

  # source://strings//lib/strings/align.rb#86
  def align_center(text, width, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

  # source://strings//lib/strings/align.rb#66
  def align_left(text, width, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

  # source://strings//lib/strings/align.rb#108
  def align_right(text, width, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

  # source://strings//lib/strings/align.rb#142
  def display_width(string); end

  # source://strings//lib/strings/align.rb#130
  def each_line(text, separator); end

  # source://strings//lib/strings/align.rb#50
  def to_alignment(direction); end

  class << self
    # source://strings//lib/strings/align.rb#39
    def align(text, width, direction: T.unsafe(nil), **options); end

    # source://strings//lib/strings/align.rb#86
    def align_center(text, width, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

    # source://strings//lib/strings/align.rb#66
    def align_left(text, width, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

    # source://strings//lib/strings/align.rb#108
    def align_right(text, width, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

    # source://strings//lib/strings/align.rb#142
    def display_width(string); end

    # source://strings//lib/strings/align.rb#130
    def each_line(text, separator); end

    # source://strings//lib/strings/align.rb#50
    def to_alignment(direction); end
  end
end

# source://strings//lib/strings/align.rb#11
Strings::Align::LINE_BREAK = T.let(T.unsafe(nil), Regexp)

# source://strings//lib/strings/align.rb#9
Strings::Align::NEWLINE = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/align.rb#10
Strings::Align::SPACE = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/fold.rb#4
module Strings::Fold
  private

  # source://strings//lib/strings/fold.rb#20
  def fold(text, separator = T.unsafe(nil)); end

  class << self
    # source://strings//lib/strings/fold.rb#20
    def fold(text, separator = T.unsafe(nil)); end
  end
end

# source://strings//lib/strings/fold.rb#5
Strings::Fold::LINE_BREAK = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/pad.rb#10
module Strings::Pad
  private

  # source://strings//lib/strings/pad.rb#91
  def display_width(string); end

  # source://strings//lib/strings/pad.rb#80
  def max_line_length(text, separator); end

  # source://strings//lib/strings/pad.rb#34
  def pad(text, padding, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

  # source://strings//lib/strings/pad.rb#67
  def pad_around(text, padding, fill: T.unsafe(nil)); end

  class << self
    # source://strings//lib/strings/pad.rb#91
    def display_width(string); end

    # source://strings//lib/strings/pad.rb#80
    def max_line_length(text, separator); end

    # source://strings//lib/strings/pad.rb#34
    def pad(text, padding, fill: T.unsafe(nil), separator: T.unsafe(nil)); end

    # source://strings//lib/strings/pad.rb#67
    def pad_around(text, padding, fill: T.unsafe(nil)); end
  end
end

# source://strings//lib/strings/pad.rb#13
Strings::Pad::LINE_BREAK = T.let(T.unsafe(nil), Regexp)

# source://strings//lib/strings/pad.rb#11
Strings::Pad::NEWLINE = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/pad.rb#12
Strings::Pad::SPACE = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/padder.rb#9
class Strings::Padder
  # source://strings//lib/strings/padder.rb#60
  def initialize(padding); end

  # source://strings//lib/strings/padder.rb#107
  def bottom; end

  # source://strings//lib/strings/padder.rb#118
  def bottom=(value); end

  # source://strings//lib/strings/padder.rb#147
  def empty?; end

  # source://strings//lib/strings/padder.rb#127
  def left; end

  # source://strings//lib/strings/padder.rb#138
  def left=(value); end

  # source://strings//lib/strings/padder.rb#55
  def padding; end

  # source://strings//lib/strings/padder.rb#89
  def right; end

  # source://strings//lib/strings/padder.rb#98
  def right=(value); end

  # source://strings//lib/strings/padder.rb#156
  def to_s; end

  # source://strings//lib/strings/padder.rb#69
  def top; end

  # source://strings//lib/strings/padder.rb#80
  def top=(value); end

  class << self
    # source://strings//lib/strings/padder.rb#38
    def convert_to_ary(value); end

    # source://strings//lib/strings/padder.rb#26
    def parse(value = T.unsafe(nil)); end
  end
end

# source://strings//lib/strings/padder.rb#10
class Strings::Padder::ParseError < ::ArgumentError; end

# source://strings//lib/strings/truncate.rb#9
module Strings::Truncate
  private

  # source://strings//lib/strings/truncate.rb#102
  def display_width(string); end

  # source://strings//lib/strings/truncate.rb#71
  def shorten(original_chars, chars, length_without_trailing); end

  # source://strings//lib/strings/truncate.rb#94
  def to_chars(text); end

  # source://strings//lib/strings/truncate.rb#42
  def truncate(text, truncate_at = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # source://strings//lib/strings/truncate.rb#102
    def display_width(string); end

    # source://strings//lib/strings/truncate.rb#71
    def shorten(original_chars, chars, length_without_trailing); end

    # source://strings//lib/strings/truncate.rb#94
    def to_chars(text); end

    # source://strings//lib/strings/truncate.rb#42
    def truncate(text, truncate_at = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://strings//lib/strings/truncate.rb#12
Strings::Truncate::DEFAULT_LENGTH = T.let(T.unsafe(nil), Integer)

# source://strings//lib/strings/truncate.rb#10
Strings::Truncate::DEFAULT_TRAILING = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/version.rb#4
Strings::VERSION = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/wrap.rb#8
module Strings::Wrap
  private

  # source://strings//lib/strings/wrap.rb#170
  def display_width(string); end

  # source://strings//lib/strings/wrap.rb#46
  def format_line(text_line, wrap_at, ansi_stack); end

  # source://strings//lib/strings/wrap.rb#131
  def insert_ansi(string, ansi_stack = T.unsafe(nil)); end

  # source://strings//lib/strings/wrap.rb#23
  def wrap(text, wrap_at = T.unsafe(nil), separator: T.unsafe(nil)); end

  class << self
    # source://strings//lib/strings/wrap.rb#170
    def display_width(string); end

    # source://strings//lib/strings/wrap.rb#46
    def format_line(text_line, wrap_at, ansi_stack); end

    # source://strings//lib/strings/wrap.rb#131
    def insert_ansi(string, ansi_stack = T.unsafe(nil)); end

    # source://strings//lib/strings/wrap.rb#23
    def wrap(text, wrap_at = T.unsafe(nil), separator: T.unsafe(nil)); end
  end
end

# source://strings//lib/strings/wrap.rb#9
Strings::Wrap::DEFAULT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://strings//lib/strings/wrap.rb#12
Strings::Wrap::LINE_BREAK = T.let(T.unsafe(nil), Regexp)

# source://strings//lib/strings/wrap.rb#13
Strings::Wrap::LINE_BREAKS = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/wrap.rb#10
Strings::Wrap::NEWLINE = T.let(T.unsafe(nil), String)

# source://strings//lib/strings/wrap.rb#11
Strings::Wrap::SPACE = T.let(T.unsafe(nil), String)
