# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kramdown` gem.
# Please instead update this file by running `bin/tapioca gem kramdown`.


# source://kramdown//lib/kramdown/version.rb#10
module Kramdown
  class << self
    # source://kramdown//lib/kramdown/document.rb#49
    def data_dir; end
  end
end

# source://kramdown//lib/kramdown/converter.rb#20
module Kramdown::Converter
  extend ::Kramdown::Utils::Configurable

  class << self
    # source://kramdown//lib/kramdown/utils/configurable.rb#37
    def add_math_engine(data, *args, &block); end

    # source://kramdown//lib/kramdown/utils/configurable.rb#37
    def add_syntax_highlighter(data, *args, &block); end

    # source://kramdown//lib/kramdown/utils/configurable.rb#30
    def configurables; end

    # source://kramdown//lib/kramdown/utils/configurable.rb#34
    def math_engine(data); end

    # source://kramdown//lib/kramdown/utils/configurable.rb#34
    def syntax_highlighter(data); end
  end
end

# source://kramdown//lib/kramdown/converter/base.rb#40
class Kramdown::Converter::Base
  # source://kramdown//lib/kramdown/converter/base.rb#55
  def initialize(root, options); end

  # source://kramdown//lib/kramdown/converter/base.rb#73
  def apply_template_after?; end

  # source://kramdown//lib/kramdown/converter/base.rb#66
  def apply_template_before?; end

  # source://kramdown//lib/kramdown/converter/base.rb#237
  def basic_generate_id(str); end

  # source://kramdown//lib/kramdown/converter/base.rb#122
  def convert(_el); end

  # source://kramdown//lib/kramdown/converter/base.rb#43
  def data; end

  # source://kramdown//lib/kramdown/converter/base.rb#174
  def extract_code_language(attr); end

  # source://kramdown//lib/kramdown/converter/base.rb#183
  def extract_code_language!(attr); end

  # source://kramdown//lib/kramdown/converter/base.rb#206
  def format_math(el, opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/base.rb#222
  def generate_id(str); end

  # source://kramdown//lib/kramdown/converter/base.rb#192
  def highlight_code(text, lang, type, opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/base.rb#162
  def in_toc?(el); end

  # source://kramdown//lib/kramdown/converter/base.rb#46
  def options; end

  # source://kramdown//lib/kramdown/converter/base.rb#169
  def output_header_level(level); end

  # source://kramdown//lib/kramdown/converter/base.rb#49
  def root; end

  # source://kramdown//lib/kramdown/converter/base.rb#248
  def smart_quote_entity(el); end

  # source://kramdown//lib/kramdown/converter/base.rb#156
  def warning(text); end

  # source://kramdown//lib/kramdown/converter/base.rb#52
  def warnings; end

  class << self
    # source://kramdown//lib/kramdown/converter/base.rb#130
    def apply_template(converter, body); end

    # source://kramdown//lib/kramdown/converter/base.rb#101
    def convert(tree, options = T.unsafe(nil)); end

    # source://kramdown//lib/kramdown/converter/base.rb#139
    def get_template(template); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://kramdown//lib/kramdown/converter/base.rb#245
Kramdown::Converter::Base::SMART_QUOTE_INDICES = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/hash_ast.rb#19
class Kramdown::Converter::HashAST < ::Kramdown::Converter::Base
  # source://kramdown//lib/kramdown/converter/hash_ast.rb#21
  def convert(el); end
end

# source://kramdown//lib/kramdown/converter/hash_ast.rb#35
Kramdown::Converter::HashAst = Kramdown::Converter::HashAST

# source://kramdown//lib/kramdown/converter/html.rb#30
class Kramdown::Converter::Html < ::Kramdown::Converter::Base
  include ::Kramdown::Utils::Html
  include ::Kramdown::Parser::Html::Constants

  # source://kramdown//lib/kramdown/converter/html.rb#39
  def initialize(root, options); end

  # source://kramdown//lib/kramdown/converter/html.rb#417
  def add_syntax_highlighter_to_class_attr(attr, lang = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/html.rb#57
  def convert(el, indent = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/html.rb#283
  def convert_a(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#377
  def convert_abbreviation(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#77
  def convert_blank(_el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#145
  def convert_blockquote(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#279
  def convert_br(_el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#115
  def convert_codeblock(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#291
  def convert_codespan(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#271
  def convert_comment(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#189
  def convert_dd(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#185
  def convert_dl(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#201
  def convert_dt(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#331
  def convert_em(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#336
  def convert_entity(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#305
  def convert_footnote(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#149
  def convert_header(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#166
  def convert_hr(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#212
  def convert_html_element(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#287
  def convert_img(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#189
  def convert_li(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#363
  def convert_math(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#173
  def convert_ol(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#86
  def convert_p(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#323
  def convert_raw(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#384
  def convert_root(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#359
  def convert_smart_quote(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#99
  def convert_standalone_image(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#331
  def convert_strong(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#249
  def convert_table(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#249
  def convert_tbody(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#259
  def convert_td(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#81
  def convert_text(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#249
  def convert_tfoot(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#249
  def convert_thead(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#249
  def convert_tr(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#351
  def convert_typographic_sym(el, _indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#173
  def convert_ul(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#239
  def convert_xml_comment(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#239
  def convert_xml_pi(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#461
  def fix_for_toc_entry(elements); end

  # source://kramdown//lib/kramdown/converter/html.rb#496
  def footnote_content; end

  # source://kramdown//lib/kramdown/converter/html.rb#405
  def format_as_block_html(name, attr, body, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#411
  def format_as_indented_block_html(name, attr, body, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#400
  def format_as_span_html(name, attr, body); end

  # source://kramdown//lib/kramdown/converter/html.rb#423
  def generate_toc_tree(toc, type, attr); end

  # source://kramdown//lib/kramdown/converter/html.rb#36
  def indent; end

  # source://kramdown//lib/kramdown/converter/html.rb#36
  def indent=(_arg0); end

  # source://kramdown//lib/kramdown/converter/html.rb#66
  def inner(el, indent); end

  # source://kramdown//lib/kramdown/converter/html.rb#484
  def obfuscate(text); end

  # source://kramdown//lib/kramdown/converter/html.rb#476
  def remove_footnotes(elements); end

  # source://kramdown//lib/kramdown/converter/html.rb#468
  def unwrap_links(elements); end
end

# source://kramdown//lib/kramdown/converter/html.rb#257
Kramdown::Converter::Html::ENTITY_NBSP = T.let(T.unsafe(nil), Kramdown::Utils::Entities::Entity)

# source://kramdown//lib/kramdown/converter/html.rb#493
Kramdown::Converter::Html::FOOTNOTE_BACKLINK_FMT = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/converter/html.rb#340
Kramdown::Converter::Html::TYPOGRAPHIC_SYMS = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/html.rb#170
Kramdown::Converter::Html::ZERO_TO_ONETWENTYEIGHT = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/converter/kramdown.rb#18
class Kramdown::Converter::Kramdown < ::Kramdown::Converter::Base
  include ::Kramdown::Utils::Html

  # source://kramdown//lib/kramdown/converter/kramdown.rb#24
  def initialize(root, options); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#34
  def convert(el, opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#296
  def convert_a(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#382
  def convert_abbreviation(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#71
  def convert_blank(_el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#111
  def convert_blockquote(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#292
  def convert_br(_el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#107
  def convert_codeblock(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#329
  def convert_codespan(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#284
  def convert_comment(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#163
  def convert_dd(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#129
  def convert_dl(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#187
  def convert_dt(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#351
  def convert_em(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#361
  def convert_entity(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#334
  def convert_footnote(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#116
  def convert_header(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#125
  def convert_hr(_el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#200
  def convert_html_element(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#313
  def convert_img(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#135
  def convert_li(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#378
  def convert_math(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#129
  def convert_ol(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#92
  def convert_p(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#339
  def convert_raw(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#386
  def convert_root(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#374
  def convert_smart_quote(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#356
  def convert_strong(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#244
  def convert_table(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#265
  def convert_tbody(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#280
  def convert_td(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#77
  def convert_text(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#272
  def convert_tfoot(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#249
  def convert_thead(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#276
  def convert_tr(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#370
  def convert_typographic_sym(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#129
  def convert_ul(el, opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#234
  def convert_xml_comment(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#234
  def convert_xml_pi(el, _opts); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#413
  def create_abbrev_defs; end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#404
  def create_footnote_defs; end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#394
  def create_link_defs; end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#424
  def ial_for_element(el); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#55
  def inner(el, opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/kramdown.rb#449
  def parse_title(attr); end
end

# source://kramdown//lib/kramdown/converter/kramdown.rb#75
Kramdown::Converter::Kramdown::ESCAPED_CHAR_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/converter/kramdown.rb#197
Kramdown::Converter::Kramdown::HTML_ELEMENT_TYPES = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/converter/kramdown.rb#195
Kramdown::Converter::Kramdown::HTML_TAGS_WITH_BODY = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/converter/kramdown.rb#365
Kramdown::Converter::Kramdown::TYPOGRAPHIC_SYMS = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/latex.rb#31
class Kramdown::Converter::Latex < ::Kramdown::Converter::Base
  # source://kramdown//lib/kramdown/converter/latex.rb#34
  def initialize(root, options); end

  # source://kramdown//lib/kramdown/converter/latex.rb#600
  def attribute_list(el); end

  # source://kramdown//lib/kramdown/converter/latex.rb#41
  def convert(el, opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/latex.rb#217
  def convert_a(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#570
  def convert_abbreviation(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#61
  def convert_blank(_el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#110
  def convert_blockquote(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#210
  def convert_br(_el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#87
  def convert_codeblock(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#240
  def convert_codespan(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#206
  def convert_comment(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#151
  def convert_dd(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#139
  def convert_dl(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#147
  def convert_dt(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#264
  def convert_em(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#534
  def convert_entity(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#251
  def convert_footnote(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#114
  def convert_header(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#124
  def convert_hr(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#155
  def convert_html_element(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#226
  def convert_img(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#143
  def convert_li(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#557
  def convert_math(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#129
  def convert_ol(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#69
  def convert_p(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#256
  def convert_raw(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#57
  def convert_root(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#551
  def convert_smart_quote(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#80
  def convert_standalone_image(el, _opts, img); end

  # source://kramdown//lib/kramdown/converter/latex.rb#268
  def convert_strong(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#178
  def convert_table(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#190
  def convert_tbody(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#202
  def convert_td(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#65
  def convert_text(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#194
  def convert_tfoot(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#186
  def convert_thead(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#198
  def convert_tr(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#543
  def convert_typographic_sym(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#129
  def convert_ul(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#167
  def convert_xml_comment(el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#171
  def convert_xml_pi(_el, _opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#523
  def entity_to_latex(entity); end

  # source://kramdown//lib/kramdown/converter/latex.rb#619
  def escape(str); end

  # source://kramdown//lib/kramdown/converter/latex.rb#46
  def inner(el, opts); end

  # source://kramdown//lib/kramdown/converter/latex.rb#583
  def latex_environment(type, el, text); end

  # source://kramdown//lib/kramdown/converter/latex.rb#591
  def latex_link_target(el, add_label = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/latex.rb#576
  def normalize_abbreviation_key(key); end
end

# source://kramdown//lib/kramdown/converter/latex.rb#274
Kramdown::Converter::Latex::ENTITY_CONV_TABLE = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/latex.rb#606
Kramdown::Converter::Latex::ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/latex.rb#616
Kramdown::Converter::Latex::ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/converter/latex.rb#176
Kramdown::Converter::Latex::TABLE_ALIGNMENT_CHAR = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/latex.rb#538
Kramdown::Converter::Latex::TYPOGRAPHIC_SYMS = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/man.rb#18
class Kramdown::Converter::Man < ::Kramdown::Converter::Base
  # source://kramdown//lib/kramdown/converter/man.rb#20
  def convert(el, opts = T.unsafe(nil)); end

  private

  # source://kramdown//lib/kramdown/converter/man.rb#191
  def convert_a(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#229
  def convert_abbreviation(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#47
  def convert_blank(*_arg0); end

  # source://kramdown//lib/kramdown/converter/man.rb#95
  def convert_blockquote(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#225
  def convert_br(_el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#89
  def convert_codeblock(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#221
  def convert_codespan(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#186
  def convert_comment(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#127
  def convert_dd(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#101
  def convert_dl(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#121
  def convert_dt(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#209
  def convert_em(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#255
  def convert_entity(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#241
  def convert_footnote(*_arg0); end

  # source://kramdown//lib/kramdown/converter/man.rb#61
  def convert_header(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#47
  def convert_hr(*_arg0); end

  # source://kramdown//lib/kramdown/converter/man.rb#182
  def convert_html_element(*_arg0); end

  # source://kramdown//lib/kramdown/converter/man.rb#205
  def convert_img(_el, _opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#110
  def convert_li(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#233
  def convert_math(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#101
  def convert_ol(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#52
  def convert_p(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#245
  def convert_raw(*_arg0); end

  # source://kramdown//lib/kramdown/converter/man.rb#40
  def convert_root(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#259
  def convert_smart_quote(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#215
  def convert_strong(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#139
  def convert_table(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#154
  def convert_tbody(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#170
  def convert_td(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#249
  def convert_text(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#161
  def convert_tfoot(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#148
  def convert_thead(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#165
  def convert_tr(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#268
  def convert_typographic_sym(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#101
  def convert_ul(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#186
  def convert_xml_comment(el, opts); end

  # source://kramdown//lib/kramdown/converter/man.rb#47
  def convert_xml_pi(*_arg0); end

  # source://kramdown//lib/kramdown/converter/man.rb#285
  def escape(text, preserve_whitespace = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/man.rb#26
  def inner(el, opts, use = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/converter/man.rb#272
  def macro(name, *args); end

  # source://kramdown//lib/kramdown/converter/man.rb#276
  def newline(text); end

  # source://kramdown//lib/kramdown/converter/man.rb#281
  def quote(text); end

  # source://kramdown//lib/kramdown/converter/man.rb#293
  def unicode_char(codepoint); end
end

# source://kramdown//lib/kramdown/converter/man.rb#137
Kramdown::Converter::Man::TABLE_CELL_ALIGNMENT = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/man.rb#263
Kramdown::Converter::Man::TYPOGRAPHIC_SYMS_MAP = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/converter/remove_html_tags.rb#25
class Kramdown::Converter::RemoveHtmlTags < ::Kramdown::Converter::Base
  # source://kramdown//lib/kramdown/converter/remove_html_tags.rb#27
  def initialize(root, options); end

  # source://kramdown//lib/kramdown/converter/remove_html_tags.rb#32
  def convert(el); end
end

# source://kramdown//lib/kramdown/converter/toc.rb#25
class Kramdown::Converter::Toc < ::Kramdown::Converter::Base
  # source://kramdown//lib/kramdown/converter/toc.rb#27
  def initialize(root, options); end

  # source://kramdown//lib/kramdown/converter/toc.rb#34
  def convert(el); end

  private

  # source://kramdown//lib/kramdown/converter/toc.rb#47
  def add_to_toc(el, id); end
end

# source://kramdown//lib/kramdown/document.rb#73
class Kramdown::Document
  # source://kramdown//lib/kramdown/document.rb#96
  def initialize(source, options = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/document.rb#124
  def inspect; end

  # source://kramdown//lib/kramdown/document.rb#113
  def method_missing(id, *attr, &block); end

  # source://kramdown//lib/kramdown/document.rb#80
  def options; end

  # source://kramdown//lib/kramdown/document.rb#77
  def root; end

  # source://kramdown//lib/kramdown/document.rb#77
  def root=(_arg0); end

  # source://kramdown//lib/kramdown/document.rb#84
  def warnings; end

  protected

  # source://kramdown//lib/kramdown/document.rb#129
  def try_require(type, name); end
end

# source://kramdown//lib/kramdown/element.rb#482
class Kramdown::Element
  # source://kramdown//lib/kramdown/element.rb#496
  def initialize(type, value = T.unsafe(nil), attr = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/element.rb#502
  def attr; end

  # source://kramdown//lib/kramdown/element.rb#537
  def block?; end

  # source://kramdown//lib/kramdown/element.rb#492
  def children; end

  # source://kramdown//lib/kramdown/element.rb#492
  def children=(_arg0); end

  # source://kramdown//lib/kramdown/element.rb#511
  def inspect; end

  # source://kramdown//lib/kramdown/element.rb#507
  def options; end

  # source://kramdown//lib/kramdown/element.rb#545
  def span?; end

  # source://kramdown//lib/kramdown/element.rb#485
  def type; end

  # source://kramdown//lib/kramdown/element.rb#485
  def type=(_arg0); end

  # source://kramdown//lib/kramdown/element.rb#489
  def value; end

  # source://kramdown//lib/kramdown/element.rb#489
  def value=(_arg0); end

  class << self
    # source://kramdown//lib/kramdown/element.rb#529
    def category(el); end
  end
end

# source://kramdown//lib/kramdown/element.rb#519
Kramdown::Element::CATEGORY = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/error.rb#15
class Kramdown::Error < ::RuntimeError; end

# source://kramdown//lib/kramdown/options.rb#16
module Kramdown::Options
  class << self
    # source://kramdown//lib/kramdown/options.rb#72
    def defaults; end

    # source://kramdown//lib/kramdown/options.rb#51
    def define(name, type, default, desc, &block); end

    # source://kramdown//lib/kramdown/options.rb#67
    def defined?(name); end

    # source://kramdown//lib/kramdown/options.rb#62
    def definitions; end

    # source://kramdown//lib/kramdown/options.rb#83
    def merge(hash); end

    # source://kramdown//lib/kramdown/options.rb#97
    def parse(name, data); end

    # source://kramdown//lib/kramdown/options.rb#142
    def simple_array_validator(val, name, size = T.unsafe(nil)); end

    # source://kramdown//lib/kramdown/options.rb#159
    def simple_hash_validator(val, name); end

    # source://kramdown//lib/kramdown/options.rb#123
    def str_to_sym(data); end
  end
end

# source://kramdown//lib/kramdown/options.rb#39
Kramdown::Options::ALLOWED_TYPES = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/options.rb#20
class Kramdown::Options::Boolean
  class << self
    # source://kramdown//lib/kramdown/options.rb#23
    def ===(other); end
  end
end

# source://kramdown//lib/kramdown/options.rb#36
class Kramdown::Options::Definition < ::Struct
  def default; end
  def default=(_); end
  def desc; end
  def desc=(_); end
  def name; end
  def name=(_); end
  def type; end
  def type=(_); end
  def validator; end
  def validator=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://kramdown//lib/kramdown/options.rb#406
Kramdown::Options::SMART_QUOTES_ENTITIES = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/options.rb#407
Kramdown::Options::SMART_QUOTES_STR = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/options.rb#346
Kramdown::Options::TOC_LEVELS_ARRAY = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/options.rb#345
Kramdown::Options::TOC_LEVELS_RANGE = T.let(T.unsafe(nil), Range)

# source://kramdown//lib/kramdown/parser.rb#17
module Kramdown::Parser; end

# source://kramdown//lib/kramdown/parser/base.rb#34
class Kramdown::Parser::Base
  # source://kramdown//lib/kramdown/parser/base.rb#52
  def initialize(source, options); end

  # source://kramdown//lib/kramdown/parser/base.rb#97
  def adapt_source(source); end

  # source://kramdown//lib/kramdown/parser/base.rb#109
  def add_text(text, tree = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/base.rb#121
  def extract_string(range, strscan); end

  # source://kramdown//lib/kramdown/parser/base.rb#37
  def options; end

  # source://kramdown//lib/kramdown/parser/base.rb#85
  def parse; end

  # source://kramdown//lib/kramdown/parser/base.rb#46
  def root; end

  # source://kramdown//lib/kramdown/parser/base.rb#43
  def source; end

  # source://kramdown//lib/kramdown/parser/base.rb#90
  def warning(text); end

  # source://kramdown//lib/kramdown/parser/base.rb#40
  def warnings; end

  class << self
    # source://kramdown//lib/kramdown/parser/base.rb#73
    def parse(source, options = T.unsafe(nil)); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://kramdown//lib/kramdown/parser/html.rb#22
class Kramdown::Parser::Html < ::Kramdown::Parser::Base
  include ::Kramdown::Parser::Html::Constants
  include ::Kramdown::Parser::Html::Parser

  # source://kramdown//lib/kramdown/parser/html.rb#593
  def parse; end
end

# source://kramdown//lib/kramdown/parser/html.rb#25
module Kramdown::Parser::Html::Constants; end

# source://kramdown//lib/kramdown/parser/html.rb#33
Kramdown::Parser::Html::Constants::HTML_ATTRIBUTE_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#60
Kramdown::Parser::Html::Constants::HTML_BLOCK_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#32
Kramdown::Parser::Html::Constants::HTML_CDATA_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#30
Kramdown::Parser::Html::Constants::HTML_COMMENT_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#49
Kramdown::Parser::Html::Constants::HTML_CONTENT_MODEL = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/html.rb#38
Kramdown::Parser::Html::Constants::HTML_CONTENT_MODEL_BLOCK = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#45
Kramdown::Parser::Html::Constants::HTML_CONTENT_MODEL_RAW = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#42
Kramdown::Parser::Html::Constants::HTML_CONTENT_MODEL_SPAN = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#29
Kramdown::Parser::Html::Constants::HTML_DOCTYPE_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#67
Kramdown::Parser::Html::Constants::HTML_ELEMENT = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/html.rb#64
Kramdown::Parser::Html::Constants::HTML_ELEMENTS_WITHOUT_BODY = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#36
Kramdown::Parser::Html::Constants::HTML_ENTITY_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#31
Kramdown::Parser::Html::Constants::HTML_INSTRUCTION_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#57
Kramdown::Parser::Html::Constants::HTML_SPAN_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#35
Kramdown::Parser::Html::Constants::HTML_TAG_CLOSE_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#34
Kramdown::Parser::Html::Constants::HTML_TAG_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/html.rb#200
class Kramdown::Parser::Html::ElementConverter
  include ::Kramdown::Parser::Html::Constants
  include ::Kramdown::Utils::Entities

  # source://kramdown//lib/kramdown/parser/html.rb#219
  def initialize(root); end

  # source://kramdown//lib/kramdown/parser/html.rb#388
  def convert_a(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#398
  def convert_b(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#421
  def convert_code(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#398
  def convert_em(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#412
  def convert_h1(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#412
  def convert_h2(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#412
  def convert_h3(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#412
  def convert_h4(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#412
  def convert_h5(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#412
  def convert_h6(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#398
  def convert_i(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#421
  def convert_pre(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#570
  def convert_script(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#398
  def convert_strong(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#465
  def convert_table(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#384
  def convert_textarea(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#379
  def extract_text(el, raw); end

  # source://kramdown//lib/kramdown/parser/html.rb#582
  def handle_math_tag(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#578
  def is_math_tag?(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#508
  def is_simple_table?(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#228
  def process(el, do_conversion = T.unsafe(nil), preserve_text = T.unsafe(nil), parent = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#282
  def process_children(el, do_conversion = T.unsafe(nil), preserve_text = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#324
  def process_html_element(el, do_conversion = T.unsafe(nil), preserve_text = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#295
  def process_text(raw, preserve = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#330
  def remove_text_children(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#363
  def remove_whitespace_children(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#373
  def set_basics(el, type, opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#353
  def strip_whitespace(el); end

  # source://kramdown//lib/kramdown/parser/html.rb#334
  def wrap_text_children(el); end

  class << self
    # source://kramdown//lib/kramdown/parser/html.rb#223
    def convert(root, el = T.unsafe(nil)); end
  end
end

# source://kramdown//lib/kramdown/parser/html.rb#397
Kramdown::Parser::Html::ElementConverter::EMPHASIS_TYPE_MAP = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/html.rb#207
Kramdown::Parser::Html::ElementConverter::REMOVE_TEXT_CHILDREN = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#211
Kramdown::Parser::Html::ElementConverter::REMOVE_WHITESPACE_CHILDREN = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#216
Kramdown::Parser::Html::ElementConverter::SIMPLE_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#213
Kramdown::Parser::Html::ElementConverter::STRIP_WHITESPACE = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#209
Kramdown::Parser::Html::ElementConverter::WRAP_TEXT_CHILDREN = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/html.rb#78
module Kramdown::Parser::Html::Parser
  include ::Kramdown::Parser::Html::Constants

  # source://kramdown//lib/kramdown/parser/html.rb#88
  def handle_html_start_tag(line = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#128
  def handle_raw_html_tag(name); end

  # source://kramdown//lib/kramdown/parser/html.rb#115
  def parse_html_attributes(str, line = T.unsafe(nil), in_html_tag = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/html.rb#151
  def parse_raw_html(el, &block); end
end

# source://kramdown//lib/kramdown/parser/html.rb#140
Kramdown::Parser::Html::Parser::HTML_RAW_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown.rb#60
class Kramdown::Parser::Kramdown < ::Kramdown::Parser::Base
  include ::Kramdown
  include ::Kramdown::Parser::Html::Constants
  include ::Kramdown::Parser::Html::Parser
  include ::Kramdown::Utils::Html

  # source://kramdown//lib/kramdown/parser/kramdown.rb#65
  def initialize(source, options); end

  # source://kramdown//lib/kramdown/parser/kramdown/link.rb#39
  def add_link(el, href, title, alt_text = T.unsafe(nil), ial = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown/block_boundary.rb#21
  def after_block_boundary?; end

  # source://kramdown//lib/kramdown/parser/kramdown/block_boundary.rb#28
  def before_block_boundary?; end

  # source://kramdown//lib/kramdown/parser/kramdown/abbreviation.rb#34
  def correct_abbreviations_attributes; end

  # source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#96
  def handle_extension(name, opts, body, type, line_no = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown/html.rb#26
  def handle_kramdown_html_tag(el, closed, handle_body); end

  # source://kramdown//lib/kramdown/parser/kramdown/link.rb#17
  def normalize_link_id(id); end

  # source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#56
  def paragraph_end; end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#88
  def parse; end

  # source://kramdown//lib/kramdown/parser/kramdown/abbreviation.rb#17
  def parse_abbrev_definition; end

  # source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#18
  def parse_attribute_list(str, opts); end

  # source://kramdown//lib/kramdown/parser/kramdown/header.rb#32
  def parse_atx_header; end

  # source://kramdown//lib/kramdown/parser/kramdown/autolink.rb#19
  def parse_autolink; end

  # source://kramdown//lib/kramdown/parser/kramdown/blank_line.rb#17
  def parse_blank_line; end

  # source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#164
  def parse_block_extensions; end

  # source://kramdown//lib/kramdown/parser/kramdown/html.rb#73
  def parse_block_html; end

  # source://kramdown//lib/kramdown/parser/kramdown/math.rb#19
  def parse_block_math; end

  # source://kramdown//lib/kramdown/parser/kramdown/blockquote.rb#21
  def parse_blockquote; end

  # source://kramdown//lib/kramdown/parser/kramdown/codeblock.rb#23
  def parse_codeblock; end

  # source://kramdown//lib/kramdown/parser/kramdown/codeblock.rb#37
  def parse_codeblock_fenced; end

  # source://kramdown//lib/kramdown/parser/kramdown/codespan.rb#17
  def parse_codespan; end

  # source://kramdown//lib/kramdown/parser/kramdown/list.rb#153
  def parse_definition_list; end

  # source://kramdown//lib/kramdown/parser/kramdown/emphasis.rb#17
  def parse_emphasis; end

  # source://kramdown//lib/kramdown/parser/kramdown/eob.rb#17
  def parse_eob_marker; end

  # source://kramdown//lib/kramdown/parser/kramdown/escaped_chars.rb#17
  def parse_escaped_chars; end

  # source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#54
  def parse_extension_start_tag(type); end

  # source://kramdown//lib/kramdown/parser/kramdown/list.rb#32
  def parse_first_list_line(indentation, content); end

  # source://kramdown//lib/kramdown/parser/kramdown/footnote.rb#21
  def parse_footnote_definition; end

  # source://kramdown//lib/kramdown/parser/kramdown/footnote.rb#40
  def parse_footnote_marker; end

  # source://kramdown//lib/kramdown/parser/kramdown/horizontal_rule.rb#17
  def parse_horizontal_rule; end

  # source://kramdown//lib/kramdown/parser/kramdown/html_entity.rb#17
  def parse_html_entity; end

  # source://kramdown//lib/kramdown/parser/kramdown/math.rb#44
  def parse_inline_math; end

  # source://kramdown//lib/kramdown/parser/kramdown/line_break.rb#17
  def parse_line_break; end

  # source://kramdown//lib/kramdown/parser/kramdown/link.rb#61
  def parse_link; end

  # source://kramdown//lib/kramdown/parser/kramdown/link.rb#24
  def parse_link_definition; end

  # source://kramdown//lib/kramdown/parser/kramdown/list.rb#54
  def parse_list; end

  # source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#31
  def parse_paragraph; end

  # source://kramdown//lib/kramdown/parser/kramdown/header.rb#20
  def parse_setext_header; end

  # source://kramdown//lib/kramdown/parser/kramdown/smart_quotes.rb#158
  def parse_smart_quotes; end

  # source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#192
  def parse_span_extensions; end

  # source://kramdown//lib/kramdown/parser/kramdown/html.rb#102
  def parse_span_html; end

  # source://kramdown//lib/kramdown/parser/kramdown/table.rb#25
  def parse_table; end

  # source://kramdown//lib/kramdown/parser/kramdown/typographic_symbol.rb#22
  def parse_typographic_syms; end

  # source://kramdown//lib/kramdown/parser/kramdown/abbreviation.rb#41
  def replace_abbreviations(el, regexps = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#41
  def update_ial_with_ial(ial, opts); end

  protected

  # source://kramdown//lib/kramdown/parser/kramdown/header.rb#59
  def add_header(level, text, id); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#121
  def configure_parser; end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#306
  def new_block_el(*args); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#140
  def parse_blocks(el, text = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown/header.rb#47
  def parse_header_contents; end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#215
  def parse_spans(el, stop_re = T.unsafe(nil), parsers = T.unsafe(nil), text_type = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#254
  def reset_env(opts = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#269
  def restore_env(env); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#264
  def save_env; end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#134
  def span_parser_regexps(parsers = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#275
  def update_attr_with_ial(attr, ial); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#116
  def update_link_definitions(link_defs); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#289
  def update_raw_text(item); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#166
  def update_tree(element); end

  private

  # source://kramdown//lib/kramdown/parser/kramdown/list.rb#258
  def fetch_pattern(type, indentation); end

  # source://kramdown//lib/kramdown/parser/kramdown.rb#201
  def span_pattern_cache(stop_re, span_start); end

  class << self
    # source://kramdown//lib/kramdown/parser/kramdown.rb#329
    def define_parser(name, start_re, span_start = T.unsafe(nil), meth_name = T.unsafe(nil)); end

    # source://kramdown//lib/kramdown/parser/kramdown.rb#340
    def has_parser?(name); end

    # source://kramdown//lib/kramdown/parser/kramdown.rb#335
    def parser(name = T.unsafe(nil)); end
  end
end

# source://kramdown//lib/kramdown/parser/kramdown/abbreviation.rb#14
Kramdown::Parser::Kramdown::ABBREV_DEFINITION_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/autolink.rb#14
Kramdown::Parser::Kramdown::ACHARS = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#140
Kramdown::Parser::Kramdown::ALD_ANY_CHARS = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#142
Kramdown::Parser::Kramdown::ALD_CLASS_NAME = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#139
Kramdown::Parser::Kramdown::ALD_ID_CHARS = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#141
Kramdown::Parser::Kramdown::ALD_ID_NAME = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#150
Kramdown::Parser::Kramdown::ALD_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#149
Kramdown::Parser::Kramdown::ALD_TYPE_ANY = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#144
Kramdown::Parser::Kramdown::ALD_TYPE_CLASS_NAME = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#145
Kramdown::Parser::Kramdown::ALD_TYPE_ID_NAME = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#146
Kramdown::Parser::Kramdown::ALD_TYPE_ID_OR_CLASS = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#147
Kramdown::Parser::Kramdown::ALD_TYPE_ID_OR_CLASS_MULTI = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#143
Kramdown::Parser::Kramdown::ALD_TYPE_KEY_VALUE_PAIR = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#148
Kramdown::Parser::Kramdown::ALD_TYPE_REF = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/header.rb#29
Kramdown::Parser::Kramdown::ATX_HEADER_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/autolink.rb#16
Kramdown::Parser::Kramdown::AUTOLINK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/autolink.rb#15
Kramdown::Parser::Kramdown::AUTOLINK_START_STR = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/blank_line.rb#14
Kramdown::Parser::Kramdown::BLANK_LINE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/blockquote.rb#18
Kramdown::Parser::Kramdown::BLOCKQUOTE_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/block_boundary.rb#18
Kramdown::Parser::Kramdown::BLOCK_BOUNDARY = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#160
Kramdown::Parser::Kramdown::BLOCK_EXTENSIONS_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/math.rb#16
Kramdown::Parser::Kramdown::BLOCK_MATH_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/codeblock.rb#20
Kramdown::Parser::Kramdown::CODEBLOCK_MATCH = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/codeblock.rb#19
Kramdown::Parser::Kramdown::CODEBLOCK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/codespan.rb#14
Kramdown::Parser::Kramdown::CODESPAN_DELIMITER = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#150
Kramdown::Parser::Kramdown::DEFINITION_LIST_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown.rb#318
class Kramdown::Parser::Kramdown::Data < ::Struct
  def method; end
  def method=(_); end
  def name; end
  def name=(_); end
  def span_start; end
  def span_start=(_); end
  def start_re; end
  def start_re=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://kramdown//lib/kramdown/parser/kramdown/emphasis.rb#14
Kramdown::Parser::Kramdown::EMPHASIS_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/eob.rb#14
Kramdown::Parser::Kramdown::EOB_MARKER = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/escaped_chars.rb#14
Kramdown::Parser::Kramdown::ESCAPED_CHARS = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#154
Kramdown::Parser::Kramdown::EXT_BLOCK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#155
Kramdown::Parser::Kramdown::EXT_BLOCK_STOP_STR = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#187
Kramdown::Parser::Kramdown::EXT_SPAN_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#153
Kramdown::Parser::Kramdown::EXT_START_STR = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#152
Kramdown::Parser::Kramdown::EXT_STOP_STR = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/codeblock.rb#34
Kramdown::Parser::Kramdown::FENCED_CODEBLOCK_MATCH = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/codeblock.rb#33
Kramdown::Parser::Kramdown::FENCED_CODEBLOCK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/footnote.rb#18
Kramdown::Parser::Kramdown::FOOTNOTE_DEFINITION_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/footnote.rb#37
Kramdown::Parser::Kramdown::FOOTNOTE_MARKER_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/header.rb#44
Kramdown::Parser::Kramdown::HEADER_ID = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/horizontal_rule.rb#14
Kramdown::Parser::Kramdown::HR_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/html.rb#70
Kramdown::Parser::Kramdown::HTML_BLOCK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/html.rb#22
Kramdown::Parser::Kramdown::HTML_MARKDOWN_ATTR_MAP = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/kramdown/html.rb#99
Kramdown::Parser::Kramdown::HTML_SPAN_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#157
Kramdown::Parser::Kramdown::IAL_BLOCK = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#158
Kramdown::Parser::Kramdown::IAL_BLOCK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#14
Kramdown::Parser::Kramdown::IAL_CLASS_ATTR = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#188
Kramdown::Parser::Kramdown::IAL_SPAN_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown.rb#345
Kramdown::Parser::Kramdown::INDENT = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/math.rb#41
Kramdown::Parser::Kramdown::INLINE_MATH_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#24
Kramdown::Parser::Kramdown::LAZY_END = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#20
Kramdown::Parser::Kramdown::LAZY_END_HTML_SPAN_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#21
Kramdown::Parser::Kramdown::LAZY_END_HTML_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#22
Kramdown::Parser::Kramdown::LAZY_END_HTML_STOP = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/line_break.rb#14
Kramdown::Parser::Kramdown::LINE_BREAK = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/link.rb#53
Kramdown::Parser::Kramdown::LINK_BRACKET_STOP_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/link.rb#21
Kramdown::Parser::Kramdown::LINK_DEFINITION_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/link.rb#55
Kramdown::Parser::Kramdown::LINK_INLINE_ID_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/link.rb#56
Kramdown::Parser::Kramdown::LINK_INLINE_TITLE_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/link.rb#54
Kramdown::Parser::Kramdown::LINK_PAREN_STOP_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/link.rb#57
Kramdown::Parser::Kramdown::LINK_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#19
Kramdown::Parser::Kramdown::LIST_ITEM_IAL = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#20
Kramdown::Parser::Kramdown::LIST_ITEM_IAL_CHECK = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#51
Kramdown::Parser::Kramdown::LIST_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#50
Kramdown::Parser::Kramdown::LIST_START_OL = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#49
Kramdown::Parser::Kramdown::LIST_START_UL = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown.rb#347
Kramdown::Parser::Kramdown::OPT_SPACE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#28
Kramdown::Parser::Kramdown::PARAGRAPH_END = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#27
Kramdown::Parser::Kramdown::PARAGRAPH_MATCH = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/paragraph.rb#26
Kramdown::Parser::Kramdown::PARAGRAPH_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#22
Kramdown::Parser::Kramdown::PARSE_FIRST_LIST_LINE_REGEXP_CACHE = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/kramdown/list.rb#47
Kramdown::Parser::Kramdown::PATTERN_TAIL = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/header.rb#17
Kramdown::Parser::Kramdown::SETEXT_HEADER_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/smart_quotes.rb#155
Kramdown::Parser::Kramdown::SMART_QUOTES_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/extensions.rb#189
Kramdown::Parser::Kramdown::SPAN_EXTENSIONS_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/smart_quotes.rb#122
Kramdown::Parser::Kramdown::SQ_CLOSE = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/smart_quotes.rb#121
Kramdown::Parser::Kramdown::SQ_PUNCT = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/kramdown/smart_quotes.rb#124
Kramdown::Parser::Kramdown::SQ_RULES = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/kramdown/smart_quotes.rb#145
Kramdown::Parser::Kramdown::SQ_SUBSTS = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#18
Kramdown::Parser::Kramdown::TABLE_FSEP_LINE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#17
Kramdown::Parser::Kramdown::TABLE_HSEP_ALIGN = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#21
Kramdown::Parser::Kramdown::TABLE_LINE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#20
Kramdown::Parser::Kramdown::TABLE_PIPE_CHECK = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#19
Kramdown::Parser::Kramdown::TABLE_ROW_LINE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#16
Kramdown::Parser::Kramdown::TABLE_SEP_LINE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/table.rb#22
Kramdown::Parser::Kramdown::TABLE_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/html.rb#24
Kramdown::Parser::Kramdown::TRAILING_WHITESPACE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/typographic_symbol.rb#14
Kramdown::Parser::Kramdown::TYPOGRAPHIC_SYMS = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/kramdown/typographic_symbol.rb#19
Kramdown::Parser::Kramdown::TYPOGRAPHIC_SYMS_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/kramdown/typographic_symbol.rb#18
Kramdown::Parser::Kramdown::TYPOGRAPHIC_SYMS_SUBST = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/parser/markdown.rb#25
class Kramdown::Parser::Markdown < ::Kramdown::Parser::Kramdown
  # source://kramdown//lib/kramdown/parser/markdown.rb#32
  def initialize(source, options); end
end

# source://kramdown//lib/kramdown/parser/markdown.rb#40
Kramdown::Parser::Markdown::BLOCK_BOUNDARY = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/markdown.rb#43
Kramdown::Parser::Markdown::CODEBLOCK_MATCH = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/markdown.rb#28
Kramdown::Parser::Markdown::EXTENDED = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/markdown.rb#46
Kramdown::Parser::Markdown::IAL_RAND_CHARS = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/parser/markdown.rb#47
Kramdown::Parser::Markdown::IAL_RAND_STRING = T.let(T.unsafe(nil), String)

# source://kramdown//lib/kramdown/parser/markdown.rb#49
Kramdown::Parser::Markdown::IAL_SPAN_START = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/markdown.rb#41
Kramdown::Parser::Markdown::LAZY_END = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/markdown.rb#48
Kramdown::Parser::Markdown::LIST_ITEM_IAL = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/parser/markdown.rb#44
Kramdown::Parser::Markdown::PARAGRAPH_END = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/utils.rb#16
module Kramdown::Utils
  class << self
    # source://kramdown//lib/kramdown/utils.rb#26
    def camelize(name); end

    # source://kramdown//lib/kramdown/utils.rb#39
    def deep_const_get(str); end

    # source://kramdown//lib/kramdown/utils.rb#31
    def snake_case(name); end
  end
end

# source://kramdown//lib/kramdown/utils/configurable.rb#14
module Kramdown::Utils::Configurable
  # source://kramdown//lib/kramdown/utils/configurable.rb#28
  def configurable(name); end
end

# source://kramdown//lib/kramdown/utils/entities.rb#15
module Kramdown::Utils::Entities
  private

  # source://kramdown//lib/kramdown/utils/entities.rb#990
  def entity(point_or_name); end

  class << self
    # source://kramdown//lib/kramdown/utils/entities.rb#990
    def entity(point_or_name); end
  end
end

# source://kramdown//lib/kramdown/utils/entities.rb#973
Kramdown::Utils::Entities::ENTITY_MAP = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/utils/entities.rb#29
Kramdown::Utils::Entities::ENTITY_TABLE = T.let(T.unsafe(nil), Array)

# source://kramdown//lib/kramdown/utils/entities.rb#18
class Kramdown::Utils::Entities::Entity < ::Struct
  # source://kramdown//lib/kramdown/utils/entities.rb#20
  def char; end

  def code_point; end
  def code_point=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://kramdown//lib/kramdown/utils/html.rb#21
module Kramdown::Utils::Html
  # source://kramdown//lib/kramdown/utils/html.rb#27
  def entity_to_str(e, original = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/utils/html.rb#69
  def escape_html(str, type = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/utils/html.rb#74
  def fix_cjk_line_break(str); end

  # source://kramdown//lib/kramdown/utils/html.rb#44
  def html_attributes(attr); end
end

# source://kramdown//lib/kramdown/utils/html.rb#59
Kramdown::Utils::Html::ESCAPE_ALL_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/utils/html.rb#61
Kramdown::Utils::Html::ESCAPE_ATTRIBUTE_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/utils/html.rb#53
Kramdown::Utils::Html::ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/utils/html.rb#62
Kramdown::Utils::Html::ESCAPE_RE_FROM_TYPE = T.let(T.unsafe(nil), Hash)

# source://kramdown//lib/kramdown/utils/html.rb#60
Kramdown::Utils::Html::ESCAPE_TEXT_RE = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/utils/html.rb#73
Kramdown::Utils::Html::REDUNDANT_LINE_BREAK_REGEX = T.let(T.unsafe(nil), Regexp)

# source://kramdown//lib/kramdown/utils/lru_cache.rb#18
class Kramdown::Utils::LRUCache
  # source://kramdown//lib/kramdown/utils/lru_cache.rb#21
  def initialize(size); end

  # source://kramdown//lib/kramdown/utils/lru_cache.rb#27
  def [](key); end

  # source://kramdown//lib/kramdown/utils/lru_cache.rb#32
  def []=(key, value); end
end

# source://kramdown//lib/kramdown/utils/string_scanner.rb#17
class Kramdown::Utils::StringScanner < ::StringScanner
  # source://kramdown//lib/kramdown/utils/string_scanner.rb#26
  def initialize(string, start_line_number = T.unsafe(nil)); end

  # source://kramdown//lib/kramdown/utils/string_scanner.rb#67
  def current_line_number; end

  # source://kramdown//lib/kramdown/utils/string_scanner.rb#37
  def pos=(pos); end

  # source://kramdown//lib/kramdown/utils/string_scanner.rb#56
  def revert_pos(data); end

  # source://kramdown//lib/kramdown/utils/string_scanner.rb#51
  def save_pos; end

  # source://kramdown//lib/kramdown/utils/string_scanner.rb#21
  def start_line_number; end
end

# source://kramdown//lib/kramdown/version.rb#13
Kramdown::VERSION = T.let(T.unsafe(nil), String)
