# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `unicode-emoji` gem.
# Please instead update this file by running `bin/tapioca gem unicode-emoji`.


# source://unicode-emoji//lib/unicode/emoji/constants.rb#3
module Unicode; end

# source://unicode-emoji//lib/unicode/emoji/constants.rb#4
module Unicode::Emoji
  class << self
    # source://unicode-emoji//lib/unicode/emoji.rb#80
    def list(key = T.unsafe(nil), sub_key = T.unsafe(nil)); end

    # source://unicode-emoji//lib/unicode/emoji.rb#68
    def properties(char); end

    private

    # source://unicode-emoji//lib/unicode/emoji.rb#88
    def get_codepoint_value(char); end
  end
end

# source://unicode-emoji//lib/unicode/emoji/constants.rb#31
Unicode::Emoji::CANCEL_TAG = T.let(T.unsafe(nil), Integer)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#7
Unicode::Emoji::CLDR_VERSION = T.let(T.unsafe(nil), String)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#8
Unicode::Emoji::DATA_DIRECTORY = T.let(T.unsafe(nil), String)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#8
Unicode::Emoji::EMOJI_CHAR = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#21
Unicode::Emoji::EMOJI_COMPONENT = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#42
Unicode::Emoji::EMOJI_KEYCAPS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#37
Unicode::Emoji::EMOJI_KEYCAP_SUFFIX = T.let(T.unsafe(nil), Integer)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#31
Unicode::Emoji::EMOJI_MODIFIERS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#26
Unicode::Emoji::EMOJI_MODIFIER_BASES = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#13
Unicode::Emoji::EMOJI_PRESENTATION = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#28
Unicode::Emoji::EMOJI_TAG_BASE_FLAG = T.let(T.unsafe(nil), Integer)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#22
Unicode::Emoji::EMOJI_VARIATION_SELECTOR = T.let(T.unsafe(nil), Integer)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#6
Unicode::Emoji::EMOJI_VERSION = T.let(T.unsafe(nil), String)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#36
Unicode::Emoji::EXTENDED_PICTOGRAPHIC = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#39
Unicode::Emoji::EXTENDED_PICTOGRAPHIC_NO_EMOJI = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/index.rb#11
Unicode::Emoji::INDEX = T.let(T.unsafe(nil), Hash)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#9
Unicode::Emoji::INDEX_FILENAME = T.let(T.unsafe(nil), String)

# source://unicode-emoji//lib/unicode/emoji/list.rb#6
Unicode::Emoji::LIST = T.let(T.unsafe(nil), Hash)

# source://unicode-emoji//lib/unicode/emoji/list.rb#9
Unicode::Emoji::LIST_REMOVED_KEYS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#12
Unicode::Emoji::PROPERTY_NAMES = T.let(T.unsafe(nil), Hash)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#51
Unicode::Emoji::RECOMMENDED_SUBDIVISION_FLAGS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#54
Unicode::Emoji::RECOMMENDED_ZWJ_SEQUENCES = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/generated/regex.rb#6
Unicode::Emoji::REGEX = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_basic.rb#6
Unicode::Emoji::REGEX_BASIC = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_emoji_keycap.rb#6
Unicode::Emoji::REGEX_EMOJI_KEYCAP = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_include_mqe.rb#6
Unicode::Emoji::REGEX_INCLUDE_MQE = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_include_mqe_uqe.rb#6
Unicode::Emoji::REGEX_INCLUDE_MQE_UQE = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_include_text.rb#6
Unicode::Emoji::REGEX_INCLUDE_TEXT = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_picto.rb#6
Unicode::Emoji::REGEX_PICTO = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_picto_no_emoji.rb#6
Unicode::Emoji::REGEX_PICTO_NO_EMOJI = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_possible.rb#6
Unicode::Emoji::REGEX_POSSIBLE = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_prop_component.rb#6
Unicode::Emoji::REGEX_PROP_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_prop_emoji.rb#6
Unicode::Emoji::REGEX_PROP_EMOJI = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_prop_modifier.rb#6
Unicode::Emoji::REGEX_PROP_MODIFIER = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_prop_modifier_base.rb#6
Unicode::Emoji::REGEX_PROP_MODIFIER_BASE = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_prop_presentation.rb#6
Unicode::Emoji::REGEX_PROP_PRESENTATION = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_text.rb#6
Unicode::Emoji::REGEX_TEXT = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_text_presentation.rb#6
Unicode::Emoji::REGEX_TEXT_PRESENTATION = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_valid.rb#6
Unicode::Emoji::REGEX_VALID = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_valid_include_text.rb#6
Unicode::Emoji::REGEX_VALID_INCLUDE_TEXT = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_well_formed.rb#6
Unicode::Emoji::REGEX_WELL_FORMED = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/generated/regex_well_formed_include_text.rb#6
Unicode::Emoji::REGEX_WELL_FORMED_INCLUDE_TEXT = T.let(T.unsafe(nil), Regexp)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#43
Unicode::Emoji::REGIONAL_INDICATORS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#34
Unicode::Emoji::SPEC_TAGS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#16
Unicode::Emoji::TEXT_PRESENTATION = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#25
Unicode::Emoji::TEXT_VARIATION_SELECTOR = T.let(T.unsafe(nil), Integer)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#45
Unicode::Emoji::VALID_REGION_FLAGS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/lazy_constants.rb#48
Unicode::Emoji::VALID_SUBDIVISIONS = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#5
Unicode::Emoji::VERSION = T.let(T.unsafe(nil), String)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#47
Unicode::Emoji::VISUAL_COMPONENT = T.let(T.unsafe(nil), Array)

# source://unicode-emoji//lib/unicode/emoji/constants.rb#40
Unicode::Emoji::ZWJ = T.let(T.unsafe(nil), Integer)
