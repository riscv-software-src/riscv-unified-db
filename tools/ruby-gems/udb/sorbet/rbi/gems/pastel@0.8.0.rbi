# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pastel` gem.
# Please instead update this file by running `bin/tapioca gem pastel`.


# source://pastel//lib/pastel/alias_importer.rb#3
module Pastel
  private

  # source://pastel//lib/pastel.rb#31
  def new(enabled: T.unsafe(nil), eachline: T.unsafe(nil)); end

  class << self
    # source://pastel//lib/pastel.rb#31
    def new(enabled: T.unsafe(nil), eachline: T.unsafe(nil)); end
  end
end

# source://pastel//lib/pastel/ansi.rb#5
module Pastel::ANSI
  private

  # source://pastel//lib/pastel/ansi.rb#62
  def background?(code); end

  # source://pastel//lib/pastel/ansi.rb#58
  def foreground?(code); end

  # source://pastel//lib/pastel/ansi.rb#66
  def style?(code); end

  class << self
    # source://pastel//lib/pastel/ansi.rb#62
    def background?(code); end

    # source://pastel//lib/pastel/ansi.rb#58
    def foreground?(code); end

    # source://pastel//lib/pastel/ansi.rb#66
    def style?(code); end
  end
end

# source://pastel//lib/pastel/ansi.rb#6
Pastel::ANSI::ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# source://pastel//lib/pastel/alias_importer.rb#5
class Pastel::AliasImporter
  # source://pastel//lib/pastel/alias_importer.rb#12
  def initialize(color, env, output = T.unsafe(nil)); end

  # source://pastel//lib/pastel/alias_importer.rb#27
  def import; end

  protected

  # source://pastel//lib/pastel/alias_importer.rb#44
  def color; end

  # source://pastel//lib/pastel/alias_importer.rb#44
  def env; end

  # source://pastel//lib/pastel/alias_importer.rb#44
  def output; end
end

# source://pastel//lib/pastel/color.rb#7
class Pastel::Color
  include ::Pastel::ANSI

  # source://pastel//lib/pastel/color.rb#24
  def initialize(enabled: T.unsafe(nil), eachline: T.unsafe(nil)); end

  # source://pastel//lib/pastel/color.rb#235
  def ==(other); end

  # source://pastel//lib/pastel/color.rb#206
  def alias_color(alias_name, *colors); end

  # source://pastel//lib/pastel/color.rb#78
  def apply_codes(string, ansi_colors); end

  # source://pastel//lib/pastel/color.rb#85
  def clear; end

  # source://pastel//lib/pastel/color.rb#148
  def code(*colors); end

  # source://pastel//lib/pastel/color.rb#117
  def colored?(string); end

  # source://pastel//lib/pastel/color.rb#54
  def decorate(string, *colors); end

  # source://pastel//lib/pastel/color.rb#33
  def disable!; end

  # source://pastel//lib/pastel/color.rb#19
  def eachline; end

  # source://pastel//lib/pastel/color.rb#16
  def enabled; end

  # source://pastel//lib/pastel/color.rb#16
  def enabled?; end

  # source://pastel//lib/pastel/color.rb#225
  def eql?(other); end

  # source://pastel//lib/pastel/color.rb#254
  def hash; end

  # source://pastel//lib/pastel/color.rb#245
  def inspect; end

  # source://pastel//lib/pastel/color.rb#136
  def lookup(*colors); end

  # source://pastel//lib/pastel/color.rb#103
  def strip(*strings); end

  # source://pastel//lib/pastel/color.rb#175
  def style_names; end

  # source://pastel//lib/pastel/color.rb#166
  def styles; end

  # source://pastel//lib/pastel/color.rb#191
  def valid?(*colors); end

  private

  # source://pastel//lib/pastel/color.rb#265
  def blank?(value); end

  # source://pastel//lib/pastel/color.rb#270
  def validate(*colors); end
end

# source://pastel//lib/pastel/color.rb#11
Pastel::Color::ALIASES = T.let(T.unsafe(nil), Hash)

# source://pastel//lib/pastel/color.rb#14
Pastel::Color::ANSI_COLOR_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://pastel//lib/pastel/color_parser.rb#13
class Pastel::ColorParser
  include ::Pastel::ANSI

  class << self
    # source://pastel//lib/pastel/color_parser.rb#104
    def attribute_name(ansi); end

    # source://pastel//lib/pastel/color_parser.rb#119
    def color_name(ansi_code); end

    # source://pastel//lib/pastel/color_parser.rb#33
    def parse(text); end

    # source://pastel//lib/pastel/color_parser.rb#90
    def unpack_ansi(ansi_stack); end
  end
end

# source://pastel//lib/pastel/color_parser.rb#17
Pastel::ColorParser::CSI = T.let(T.unsafe(nil), String)

# source://pastel//lib/pastel/color_parser.rb#16
Pastel::ColorParser::ESC = T.let(T.unsafe(nil), String)

# source://pastel//lib/pastel/color_resolver.rb#11
class Pastel::ColorResolver
  # source://pastel//lib/pastel/color_resolver.rb#21
  def initialize(color); end

  # source://pastel//lib/pastel/color_resolver.rb#14
  def color; end

  # source://pastel//lib/pastel/color_resolver.rb#28
  def resolve(base, unprocessed_string); end
end

# source://pastel//lib/pastel/decorator_chain.rb#7
class Pastel::DecoratorChain
  include ::Enumerable

  # source://pastel//lib/pastel/decorator_chain.rb#22
  def initialize(decorators = T.unsafe(nil)); end

  # source://pastel//lib/pastel/decorator_chain.rb#60
  def ==(other); end

  # source://pastel//lib/pastel/decorator_chain.rb#31
  def add(decorator); end

  # source://pastel//lib/pastel/decorator_chain.rb#42
  def each(&block); end

  # source://pastel//lib/pastel/decorator_chain.rb#51
  def eql?(other); end

  # source://pastel//lib/pastel/decorator_chain.rb#78
  def hash; end

  # source://pastel//lib/pastel/decorator_chain.rb#69
  def inspect; end

  protected

  # source://pastel//lib/pastel/decorator_chain.rb#84
  def decorators; end

  class << self
    # source://pastel//lib/pastel/decorator_chain.rb#15
    def empty; end
  end
end

# source://pastel//lib/pastel/delegator.rb#13
class Pastel::Delegator
  extend ::Forwardable

  # source://pastel//lib/pastel/delegator.rb#38
  def initialize(resolver, chain); end

  # source://pastel//lib/pastel/delegator.rb#57
  def ==(other); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def alias_color(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def colored?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def decorate(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def enabled?(*args, **_arg1, &block); end

  # source://pastel//lib/pastel/delegator.rb#48
  def eql?(other); end

  # source://pastel//lib/pastel/delegator.rb#76
  def hash; end

  # source://pastel//lib/pastel/delegator.rb#66
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def lookup(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def parse(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def strip(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def styles(*args, **_arg1, &block); end

  # source://pastel//lib/pastel/delegator.rb#66
  def to_s; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def undecorate(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def valid?(*args, **_arg1, &block); end

  protected

  # source://pastel//lib/pastel/delegator.rb#82
  def chain; end

  # source://pastel//lib/pastel/delegator.rb#112
  def evaluate_block(&block); end

  # source://pastel//lib/pastel/delegator.rb#89
  def method_missing(method_name, *args, &block); end

  # source://pastel//lib/pastel/delegator.rb#84
  def resolver; end

  private

  # source://pastel//lib/pastel/delegator.rb#104
  def respond_to_missing?(name, include_all = T.unsafe(nil)); end

  class << self
    # source://pastel//lib/pastel/delegator.rb#25
    def wrap(resolver, chain = T.unsafe(nil)); end
  end
end

# source://pastel//lib/pastel/detached.rb#5
class Pastel::Detached
  # source://pastel//lib/pastel/detached.rb#14
  def initialize(color, *styles); end

  # source://pastel//lib/pastel/detached.rb#57
  def ==(other); end

  # source://pastel//lib/pastel/detached.rb#32
  def [](*args); end

  # source://pastel//lib/pastel/detached.rb#32
  def call(*args); end

  # source://pastel//lib/pastel/detached.rb#48
  def eql?(other); end

  # source://pastel//lib/pastel/detached.rb#75
  def hash; end

  # source://pastel//lib/pastel/detached.rb#66
  def inspect; end

  # source://pastel//lib/pastel/detached.rb#39
  def to_proc; end

  protected

  # source://pastel//lib/pastel/detached.rb#82
  def styles; end
end

# source://pastel//lib/pastel.rb#16
class Pastel::InvalidAliasNameError < ::ArgumentError; end

# source://pastel//lib/pastel.rb#13
class Pastel::InvalidAttributeNameError < ::ArgumentError; end

# source://pastel//lib/pastel/version.rb#4
Pastel::VERSION = T.let(T.unsafe(nil), String)
