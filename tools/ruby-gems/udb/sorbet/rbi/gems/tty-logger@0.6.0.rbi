# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-logger` gem.
# Please instead update this file by running `bin/tapioca gem tty-logger`.


# source://tty-logger//lib/tty/logger/handlers/base.rb#3
module TTY; end

# source://tty-logger//lib/tty/logger/handlers/base.rb#4
class TTY::Logger
  include ::TTY::Logger::Levels

  # source://tty-logger//lib/tty/logger.rb#91
  def initialize(output: T.unsafe(nil), fields: T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger.rb#233
  def <<(*msg); end

  # source://tty-logger//lib/tty/logger.rb#147
  def add_handler(handler, **options); end

  # source://tty-logger//lib/tty/logger.rb#123
  def add_type(name, log_level); end

  # source://tty-logger//lib/tty/logger.rb#178
  def coerce_handler(name); end

  # source://tty-logger//lib/tty/logger.rb#75
  def configure; end

  # source://tty-logger//lib/tty/logger.rb#209
  def copy(new_fields); end

  # source://tty-logger//lib/tty/logger.rb#333
  def copy_error(error, message, backtrace = T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger.rb#44
  def debug(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#44
  def error(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#44
  def fatal(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#312
  def filter(*objects); end

  # source://tty-logger//lib/tty/logger.rb#44
  def info(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#253
  def log(current_level, *msg); end

  # source://tty-logger//lib/tty/logger.rb#223
  def log?(level, other_level); end

  # source://tty-logger//lib/tty/logger.rb#296
  def log_at(tmp_level, &block); end

  # source://tty-logger//lib/tty/logger.rb#194
  def raise_handler_error; end

  # source://tty-logger//lib/tty/logger.rb#162
  def remove_handler(handler); end

  # source://tty-logger//lib/tty/logger.rb#44
  def success(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#344
  def swap_filtered(obj); end

  # source://tty-logger//lib/tty/logger.rb#44
  def wait(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#44
  def warn(*msg, &block); end

  # source://tty-logger//lib/tty/logger.rb#233
  def write(*msg); end

  class << self
    # source://tty-logger//lib/tty/logger.rb#61
    def config; end

    # source://tty-logger//lib/tty/logger.rb#68
    def configure; end

    # source://tty-logger//lib/tty/logger.rb#34
    def define_level(name, log_level = T.unsafe(nil)); end
  end
end

# source://tty-logger//lib/tty/logger/config.rb#7
class TTY::Logger::Config
  # source://tty-logger//lib/tty/logger/config.rb#43
  def initialize(**options); end

  # source://tty-logger//lib/tty/logger/config.rb#11
  def date_format; end

  # source://tty-logger//lib/tty/logger/config.rb#11
  def date_format=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#79
  def filters; end

  # source://tty-logger//lib/tty/logger/config.rb#84
  def filters=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#17
  def formatter; end

  # source://tty-logger//lib/tty/logger/config.rb#17
  def formatter=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#20
  def handlers; end

  # source://tty-logger//lib/tty/logger/config.rb#20
  def handlers=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#23
  def level; end

  # source://tty-logger//lib/tty/logger/config.rb#23
  def level=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#26
  def max_bytes; end

  # source://tty-logger//lib/tty/logger/config.rb#26
  def max_bytes=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#29
  def max_depth; end

  # source://tty-logger//lib/tty/logger/config.rb#29
  def max_depth=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#32
  def metadata; end

  # source://tty-logger//lib/tty/logger/config.rb#32
  def metadata=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#35
  def output; end

  # source://tty-logger//lib/tty/logger/config.rb#35
  def output=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#14
  def time_format; end

  # source://tty-logger//lib/tty/logger/config.rb#14
  def time_format=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#111
  def to_h; end

  # source://tty-logger//lib/tty/logger/config.rb#89
  def to_proc; end

  # source://tty-logger//lib/tty/logger/config.rb#38
  def types; end

  # source://tty-logger//lib/tty/logger/config.rb#38
  def types=(_arg0); end
end

# source://tty-logger//lib/tty/logger/config.rb#8
TTY::Logger::Config::FILTERED = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/config.rb#56
class TTY::Logger::Config::FiltersProvider
  # source://tty-logger//lib/tty/logger/config.rb#59
  def initialize; end

  # source://tty-logger//lib/tty/logger/config.rb#57
  def data; end

  # source://tty-logger//lib/tty/logger/config.rb#57
  def data=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#57
  def mask; end

  # source://tty-logger//lib/tty/logger/config.rb#57
  def mask=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#57
  def message; end

  # source://tty-logger//lib/tty/logger/config.rb#57
  def message=(_arg0); end

  # source://tty-logger//lib/tty/logger/config.rb#65
  def to_h; end

  # source://tty-logger//lib/tty/logger/config.rb#69
  def to_s; end
end

# source://tty-logger//lib/tty/logger/data_filter.rb#5
class TTY::Logger::DataFilter
  # source://tty-logger//lib/tty/logger/data_filter.rb#20
  def initialize(filters = T.unsafe(nil), mask: T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger/data_filter.rb#9
  def compiled_filters; end

  # source://tty-logger//lib/tty/logger/data_filter.rb#37
  def filter(obj); end

  # source://tty-logger//lib/tty/logger/data_filter.rb#9
  def filters; end

  # source://tty-logger//lib/tty/logger/data_filter.rb#9
  def mask; end

  private

  # source://tty-logger//lib/tty/logger/data_filter.rb#47
  def compile(filters); end

  # source://tty-logger//lib/tty/logger/data_filter.rb#111
  def filter_arr(key, obj, composite); end

  # source://tty-logger//lib/tty/logger/data_filter.rb#105
  def filter_obj(_key, obj, composite); end

  # source://tty-logger//lib/tty/logger/data_filter.rb#87
  def filter_val(key, val, composite = T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger/data_filter.rb#97
  def filtered?(key, composite); end
end

# source://tty-logger//lib/tty/logger/data_filter.rb#7
TTY::Logger::DataFilter::DOT = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/data_filter.rb#6
TTY::Logger::DataFilter::FILTERED = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger.rb#19
class TTY::Logger::Error < ::StandardError; end

# source://tty-logger//lib/tty/logger/event.rb#5
class TTY::Logger::Event
  # source://tty-logger//lib/tty/logger/event.rb#14
  def initialize(message, fields = T.unsafe(nil), metadata = T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger/event.rb#12
  def backtrace; end

  # source://tty-logger//lib/tty/logger/event.rb#8
  def fields; end

  # source://tty-logger//lib/tty/logger/event.rb#6
  def message; end

  # source://tty-logger//lib/tty/logger/event.rb#10
  def metadata; end

  private

  # source://tty-logger//lib/tty/logger/event.rb#28
  def evaluate_message; end
end

# source://tty-logger//lib/tty/logger/formatters/json.rb#7
module TTY::Logger::Formatters; end

# source://tty-logger//lib/tty/logger/formatters/json.rb#9
class TTY::Logger::Formatters::JSON
  # source://tty-logger//lib/tty/logger/formatters/json.rb#20
  def dump(obj, max_bytes: T.unsafe(nil), max_depth: T.unsafe(nil)); end

  private

  # source://tty-logger//lib/tty/logger/formatters/json.rb#40
  def dump_val(val, depth); end

  # source://tty-logger//lib/tty/logger/formatters/json.rb#55
  def enc_arr(obj, depth); end

  # source://tty-logger//lib/tty/logger/formatters/json.rb#49
  def enc_obj(obj, depth); end
end

# source://tty-logger//lib/tty/logger/formatters/json.rb#10
TTY::Logger::Formatters::JSON::ELLIPSIS = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#7
class TTY::Logger::Formatters::Text
  # source://tty-logger//lib/tty/logger/formatters/text.rb#32
  def dump(obj, max_bytes: T.unsafe(nil), max_depth: T.unsafe(nil)); end

  private

  # source://tty-logger//lib/tty/logger/formatters/text.rb#56
  def dump_key(key); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#68
  def dump_val(val, depth); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#93
  def enc_arr(array, depth); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#99
  def enc_cpx(val); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#103
  def enc_float(val); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#107
  def enc_num(val); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#85
  def enc_obj(obj, depth); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#111
  def enc_str(str); end

  # source://tty-logger//lib/tty/logger/formatters/text.rb#124
  def enc_time(time); end
end

# source://tty-logger//lib/tty/logger/formatters/text.rb#15
TTY::Logger::Formatters::Text::ELLIPSIS = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#20
TTY::Logger::Formatters::Text::ESCAPE_DOUBLE_QUOTE = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#21
TTY::Logger::Formatters::Text::ESCAPE_STR_REGEX = T.let(T.unsafe(nil), Regexp)

# source://tty-logger//lib/tty/logger/formatters/text.rb#11
TTY::Logger::Formatters::Text::LBRACE = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#13
TTY::Logger::Formatters::Text::LBRACKET = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#17
TTY::Logger::Formatters::Text::LITERAL_FALSE = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#18
TTY::Logger::Formatters::Text::LITERAL_NIL = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#16
TTY::Logger::Formatters::Text::LITERAL_TRUE = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#9
TTY::Logger::Formatters::Text::LPAREN = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#22
TTY::Logger::Formatters::Text::NUM_REGEX = T.let(T.unsafe(nil), Regexp)

# source://tty-logger//lib/tty/logger/formatters/text.rb#12
TTY::Logger::Formatters::Text::RBRACE = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#14
TTY::Logger::Formatters::Text::RBRACKET = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#10
TTY::Logger::Formatters::Text::RPAREN = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/formatters/text.rb#19
TTY::Logger::Formatters::Text::SINGLE_QUOTE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://tty-logger//lib/tty/logger/formatters/text.rb#8
TTY::Logger::Formatters::Text::SPACE = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/handlers/base.rb#5
module TTY::Logger::Handlers; end

# source://tty-logger//lib/tty/logger/handlers/base.rb#6
module TTY::Logger::Handlers::Base
  # source://tty-logger//lib/tty/logger/handlers/base.rb#23
  def coerce_formatter(name); end

  # source://tty-logger//lib/tty/logger/handlers/base.rb#66
  def format_filepath(event); end

  # source://tty-logger//lib/tty/logger/handlers/base.rb#13
  def log_at(tmp_level); end

  # source://tty-logger//lib/tty/logger/handlers/base.rb#53
  def metadata; end

  # source://tty-logger//lib/tty/logger/handlers/base.rb#44
  def raise_formatter_error(name); end
end

# source://tty-logger//lib/tty/logger/handlers/console.rb#10
class TTY::Logger::Handlers::Console
  include ::TTY::Logger::Handlers::Base

  # source://tty-logger//lib/tty/logger/handlers/console.rb#84
  def initialize(output: T.unsafe(nil), formatter: T.unsafe(nil), config: T.unsafe(nil), level: T.unsafe(nil), styles: T.unsafe(nil), enable_color: T.unsafe(nil), message_format: T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#104
  def call(event); end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#74
  def config; end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#78
  def level; end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#82
  def message_format; end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#70
  def output; end

  private

  # source://tty-logger//lib/tty/logger/handlers/console.rb#171
  def configure_color(style); end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#163
  def configure_styles(event); end

  # source://tty-logger//lib/tty/logger/handlers/console.rb#150
  def format_backtrace(event); end
end

# source://tty-logger//lib/tty/logger/handlers/console.rb#13
TTY::Logger::Handlers::Console::ARROW = T.let(T.unsafe(nil), String)

# source://tty-logger//lib/tty/logger/handlers/console.rb#63
TTY::Logger::Handlers::Console::COLOR_PATTERNS = T.let(T.unsafe(nil), Hash)

# source://tty-logger//lib/tty/logger/handlers/console.rb#61
TTY::Logger::Handlers::Console::JSON_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://tty-logger//lib/tty/logger/handlers/console.rb#15
TTY::Logger::Handlers::Console::STYLES = T.let(T.unsafe(nil), Hash)

# source://tty-logger//lib/tty/logger/handlers/console.rb#60
TTY::Logger::Handlers::Console::TEXT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://tty-logger//lib/tty/logger/handlers/null.rb#6
class TTY::Logger::Handlers::Null
  # source://tty-logger//lib/tty/logger/handlers/null.rb#7
  def initialize(*_arg0); end

  # source://tty-logger//lib/tty/logger/handlers/null.rb#10
  def call(*_arg0); end
end

# source://tty-logger//lib/tty/logger/handlers/stream.rb#8
class TTY::Logger::Handlers::Stream
  include ::TTY::Logger::Handlers::Base

  # source://tty-logger//lib/tty/logger/handlers/stream.rb#17
  def initialize(output: T.unsafe(nil), formatter: T.unsafe(nil), config: T.unsafe(nil), level: T.unsafe(nil)); end

  # source://tty-logger//lib/tty/logger/handlers/stream.rb#26
  def call(event); end

  # source://tty-logger//lib/tty/logger/handlers/stream.rb#13
  def config; end

  # source://tty-logger//lib/tty/logger/handlers/stream.rb#15
  def level; end

  # source://tty-logger//lib/tty/logger/handlers/stream.rb#11
  def output; end
end

# source://tty-logger//lib/tty/logger.rb#21
TTY::Logger::LOG_TYPES = T.let(T.unsafe(nil), Hash)

# source://tty-logger//lib/tty/logger/levels.rb#5
module TTY::Logger::Levels
  # source://tty-logger//lib/tty/logger/levels.rb#58
  def compare_levels(left, right); end

  # source://tty-logger//lib/tty/logger/levels.rb#25
  def level_names; end

  # source://tty-logger//lib/tty/logger/levels.rb#36
  def level_to_number(level); end

  # source://tty-logger//lib/tty/logger/levels.rb#48
  def number_to_level(number); end
end

# source://tty-logger//lib/tty/logger/levels.rb#6
TTY::Logger::Levels::DEBUG_LEVEL = T.let(T.unsafe(nil), Integer)

# source://tty-logger//lib/tty/logger/levels.rb#9
TTY::Logger::Levels::ERROR_LEVEL = T.let(T.unsafe(nil), Integer)

# source://tty-logger//lib/tty/logger/levels.rb#10
TTY::Logger::Levels::FATAL_LEVEL = T.let(T.unsafe(nil), Integer)

# source://tty-logger//lib/tty/logger/levels.rb#7
TTY::Logger::Levels::INFO_LEVEL = T.let(T.unsafe(nil), Integer)

# source://tty-logger//lib/tty/logger/levels.rb#12
TTY::Logger::Levels::LEVEL_NAMES = T.let(T.unsafe(nil), Hash)

# source://tty-logger//lib/tty/logger/levels.rb#8
TTY::Logger::Levels::WARN_LEVEL = T.let(T.unsafe(nil), Integer)

# source://tty-logger//lib/tty/logger/version.rb#5
TTY::Logger::VERSION = T.let(T.unsafe(nil), String)
