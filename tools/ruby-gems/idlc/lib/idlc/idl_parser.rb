# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# Autogenerated from a Treetop grammar. Edits may be lost.


# SPDX-License-Identifier: BSD-3-Clause-Clear

# grammar for the ISA Description Language

module Idl
  include Treetop::Runtime

  def root
    @root ||= :isa
  end

  module Isa0
    def version_string
      elements[3]
    end

    def definitions
      elements[5]
    end
  end

  def _nt_isa
    start_index = index
    if node_cache[:isa].has_key?(index)
      cached = node_cache[:isa][index]
      if cached
        node_cache[:isa][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if (match_len = has_terminal?('%version:', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'%version:\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          r6 = _nt_version_string
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            if s7.empty?
              @index = i7
              r7 = nil
            else
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            end
            s0 << r7
            if r7
              s9, i9 = [], index
              loop do
                i10 = index
                r11 = _nt_include_statement
                if r11
                  r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                  r10 = r11
                else
                  r12 = _nt_global_definition
                  if r12
                    r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                    r10 = r12
                  else
                    r13 = _nt_enum_definition
                    if r13
                      r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                      r10 = r13
                    else
                      r14 = _nt_bitfield_definition
                      if r14
                        r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                        r10 = r14
                      else
                        r15 = _nt_struct_definition
                        if r15
                          r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                          r10 = r15
                        else
                          r16 = _nt_function_definition
                          if r16
                            r16 = SyntaxNode.new(input, (index-1)...index) if r16 == true
                            r10 = r16
                          else
                            r17 = _nt_fetch
                            if r17
                              r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
                              r10 = r17
                            else
                              s18, i18 = [], index
                              loop do
                                r19 = _nt_space
                                if r19
                                  s18 << r19
                                else
                                  break
                                end
                              end
                              if s18.empty?
                                @index = i18
                                r18 = nil
                              else
                                r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                              end
                              if r18
                                r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
                                r10 = r18
                              else
                                @index = i10
                                r10 = nil
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
                if r10
                  s9 << r10
                else
                  break
                end
              end
              if s9.empty?
                @index = i9
                r9 = nil
              else
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              end
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::IsaSyntaxNode,input, i0...index, s0)
      r0.extend(Isa0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:isa][start_index] = r0

    r0
  end

  module IncludeStatement0
    def string
      elements[2]
    end

  end

  def _nt_include_statement
    start_index = index
    if node_cache[:include_statement].has_key?(index)
      cached = node_cache[:include_statement][index]
      if cached
        node_cache[:include_statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('include', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'include\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_string
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::IncludeStatementSyntaxNode,input, i0...index, s0)
      r0.extend(IncludeStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:include_statement][start_index] = r0

    r0
  end

  module GlobalDefinition0
  end

  module GlobalDefinition1
    def const
      elements[0]
    end

    def single_declaration_with_initialization
      elements[1]
    end

  end

  module GlobalDefinition2
    def declaration
      elements[0]
    end

  end

  def _nt_global_definition
    start_index = index
    if node_cache[:global_definition].has_key?(index)
      cached = node_cache[:global_definition][index]
      if cached
        node_cache[:global_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3, s3 = index, []
    if (match_len = has_terminal?('const', false, index))
      r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'const\'')
      r5 = nil
    end
    if r5
      r4 = r5
    else
      r4 = instantiate_node(SyntaxNode,input, index...index)
    end
    s3 << r4
    if r4
      s6, i6 = [], index
      loop do
        r7 = _nt_space
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      s3 << r6
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(GlobalDefinition0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r8 = _nt_single_declaration_with_initialization
      s1 << r8
      if r8
        s9, i9 = [], index
        loop do
          r10 = _nt_space
          if r10
            s9 << r10
          else
            break
          end
        end
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        s1 << r9
        if r9
          if (match_len = has_terminal?(';', false, index))
            r11 = true
            @index += match_len
          else
            terminal_parse_failure('\';\'')
            r11 = nil
          end
          s1 << r11
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::GlobalWithInitializationSyntaxNode,input, i1...index, s1)
      r1.extend(GlobalDefinition1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i12, s12 = index, []
      r13 = _nt_declaration
      s12 << r13
      if r13
        s14, i14 = [], index
        loop do
          r15 = _nt_space
          if r15
            s14 << r15
          else
            break
          end
        end
        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        s12 << r14
        if r14
          if (match_len = has_terminal?(';', false, index))
            r16 = true
            @index += match_len
          else
            terminal_parse_failure('\';\'')
            r16 = nil
          end
          s12 << r16
        end
      end
      if s12.last
        r12 = instantiate_node(GlobalSyntaxNode,input, i12...index, s12)
        r12.extend(GlobalDefinition2)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:global_definition][start_index] = r0

    r0
  end

  module EnumDefinition0
    def user_type_name
      elements[4]
    end

  end

  module EnumDefinition1
    def int
      elements[0]
    end

  end

  module EnumDefinition2
    def user_type_name
      elements[0]
    end

    def i
      elements[2]
    end
  end

  module EnumDefinition3
    def user_type_name
      elements[2]
    end

    def e
      elements[6]
    end

  end

  def _nt_enum_definition
    start_index = index
    if node_cache[:enum_definition].has_key?(index)
      cached = node_cache[:enum_definition][index]
      if cached
        node_cache[:enum_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('generated', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'generated\'')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        if (match_len = has_terminal?('enum', false, index))
          r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'enum\'')
          r5 = nil
        end
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s1 << r6
          if r6
            r8 = _nt_user_type_name
            s1 << r8
            if r8
              s9, i9 = [], index
              loop do
                r10 = _nt_space
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s1 << r9
              if r9
                if (match_len = has_terminal?(';', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\';\'')
                  r11 = nil
                end
                s1 << r11
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::BuiltinEnumDefinitionSyntaxNode,input, i1...index, s1)
      r1.extend(EnumDefinition0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i12, s12 = index, []
      if (match_len = has_terminal?('enum', false, index))
        r13 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'enum\'')
        r13 = nil
      end
      s12 << r13
      if r13
        s14, i14 = [], index
        loop do
          r15 = _nt_space
          if r15
            s14 << r15
          else
            break
          end
        end
        if s14.empty?
          @index = i14
          r14 = nil
        else
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        end
        s12 << r14
        if r14
          r16 = _nt_user_type_name
          s12 << r16
          if r16
            s17, i17 = [], index
            loop do
              r18 = _nt_space
              if r18
                s17 << r18
              else
                break
              end
            end
            if s17.empty?
              @index = i17
              r17 = nil
            else
              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
            end
            s12 << r17
            if r17
              if (match_len = has_terminal?('{', false, index))
                r19 = true
                @index += match_len
              else
                terminal_parse_failure('\'{\'')
                r19 = nil
              end
              s12 << r19
              if r19
                s20, i20 = [], index
                loop do
                  r21 = _nt_space
                  if r21
                    s20 << r21
                  else
                    break
                  end
                end
                r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                s12 << r20
                if r20
                  s22, i22 = [], index
                  loop do
                    i23, s23 = index, []
                    r24 = _nt_user_type_name
                    s23 << r24
                    if r24
                      s25, i25 = [], index
                      loop do
                        r26 = _nt_space
                        if r26
                          s25 << r26
                        else
                          break
                        end
                      end
                      if s25.empty?
                        @index = i25
                        r25 = nil
                      else
                        r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                      end
                      s23 << r25
                      if r25
                        i28, s28 = index, []
                        r29 = _nt_int
                        s28 << r29
                        if r29
                          s30, i30 = [], index
                          loop do
                            r31 = _nt_space
                            if r31
                              s30 << r31
                            else
                              break
                            end
                          end
                          if s30.empty?
                            @index = i30
                            r30 = nil
                          else
                            r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                          end
                          s28 << r30
                        end
                        if s28.last
                          r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                          r28.extend(EnumDefinition1)
                        else
                          @index = i28
                          r28 = nil
                        end
                        if r28
                          r27 = r28
                        else
                          r27 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s23 << r27
                      end
                    end
                    if s23.last
                      r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                      r23.extend(EnumDefinition2)
                    else
                      @index = i23
                      r23 = nil
                    end
                    if r23
                      s22 << r23
                    else
                      break
                    end
                  end
                  if s22.empty?
                    @index = i22
                    r22 = nil
                  else
                    r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                  end
                  s12 << r22
                  if r22
                    s32, i32 = [], index
                    loop do
                      r33 = _nt_space
                      if r33
                        s32 << r33
                      else
                        break
                      end
                    end
                    r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                    s12 << r32
                    if r32
                      if (match_len = has_terminal?('}', false, index))
                        r34 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'}\'')
                        r34 = nil
                      end
                      s12 << r34
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s12.last
        r12 = instantiate_node(Idl::EnumDefinitionSyntaxNode,input, i12...index, s12)
        r12.extend(EnumDefinition3)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:enum_definition][start_index] = r0

    r0
  end

  module EnumRef0
    def enum_class
      elements[0]
    end

    def member
      elements[4]
    end
  end

  def _nt_enum_ref
    start_index = index
    if node_cache[:enum_ref].has_key?(index)
      cached = node_cache[:enum_ref][index]
      if cached
        node_cache[:enum_ref][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_user_type_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('::', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'::\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_user_type_name
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(EnumRefSyntaxNode,input, i0...index, s0)
      r0.extend(EnumRef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:enum_ref][start_index] = r0

    r0
  end

  module BitfieldDefinition0
    def int
      elements[3]
    end
  end

  module BitfieldDefinition1
    def int
      elements[0]
    end

    def lsb
      elements[1]
    end
  end

  module BitfieldDefinition2
    def field_name
      elements[0]
    end

    def range
      elements[2]
    end

  end

  module BitfieldDefinition3
    def int
      elements[4]
    end

    def user_type_name
      elements[8]
    end

    def e
      elements[12]
    end

  end

  def _nt_bitfield_definition
    start_index = index
    if node_cache[:bitfield_definition].has_key?(index)
      cached = node_cache[:bitfield_definition][index]
      if cached
        node_cache[:bitfield_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('bitfield', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'bitfield\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('(', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_int
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(')', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    r13 = _nt_user_type_name
                    s0 << r13
                    if r13
                      s14, i14 = [], index
                      loop do
                        r15 = _nt_space
                        if r15
                          s14 << r15
                        else
                          break
                        end
                      end
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                      s0 << r14
                      if r14
                        if (match_len = has_terminal?('{', false, index))
                          r16 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'{\'')
                          r16 = nil
                        end
                        s0 << r16
                        if r16
                          s17, i17 = [], index
                          loop do
                            r18 = _nt_space
                            if r18
                              s17 << r18
                            else
                              break
                            end
                          end
                          r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                          s0 << r17
                          if r17
                            s19, i19 = [], index
                            loop do
                              i20, s20 = index, []
                              r21 = _nt_field_name
                              s20 << r21
                              if r21
                                s22, i22 = [], index
                                loop do
                                  r23 = _nt_space
                                  if r23
                                    s22 << r23
                                  else
                                    break
                                  end
                                end
                                if s22.empty?
                                  @index = i22
                                  r22 = nil
                                else
                                  r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                                end
                                s20 << r22
                                if r22
                                  i24, s24 = index, []
                                  r25 = _nt_int
                                  s24 << r25
                                  if r25
                                    i27, s27 = index, []
                                    s28, i28 = [], index
                                    loop do
                                      r29 = _nt_space
                                      if r29
                                        s28 << r29
                                      else
                                        break
                                      end
                                    end
                                    r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                                    s27 << r28
                                    if r28
                                      if (match_len = has_terminal?('-', false, index))
                                        r30 = true
                                        @index += match_len
                                      else
                                        terminal_parse_failure('\'-\'')
                                        r30 = nil
                                      end
                                      s27 << r30
                                      if r30
                                        s31, i31 = [], index
                                        loop do
                                          r32 = _nt_space
                                          if r32
                                            s31 << r32
                                          else
                                            break
                                          end
                                        end
                                        r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                                        s27 << r31
                                        if r31
                                          r33 = _nt_int
                                          s27 << r33
                                        end
                                      end
                                    end
                                    if s27.last
                                      r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                                      r27.extend(BitfieldDefinition0)
                                    else
                                      @index = i27
                                      r27 = nil
                                    end
                                    if r27
                                      r26 = r27
                                    else
                                      r26 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s24 << r26
                                  end
                                  if s24.last
                                    r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                                    r24.extend(BitfieldDefinition1)
                                  else
                                    @index = i24
                                    r24 = nil
                                  end
                                  s20 << r24
                                  if r24
                                    s34, i34 = [], index
                                    loop do
                                      r35 = _nt_space
                                      if r35
                                        s34 << r35
                                      else
                                        break
                                      end
                                    end
                                    if s34.empty?
                                      @index = i34
                                      r34 = nil
                                    else
                                      r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                                    end
                                    s20 << r34
                                  end
                                end
                              end
                              if s20.last
                                r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                                r20.extend(BitfieldDefinition2)
                              else
                                @index = i20
                                r20 = nil
                              end
                              if r20
                                s19 << r20
                              else
                                break
                              end
                            end
                            if s19.empty?
                              @index = i19
                              r19 = nil
                            else
                              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                            end
                            s0 << r19
                            if r19
                              s36, i36 = [], index
                              loop do
                                r37 = _nt_space
                                if r37
                                  s36 << r37
                                else
                                  break
                                end
                              end
                              r36 = instantiate_node(SyntaxNode,input, i36...index, s36)
                              s0 << r36
                              if r36
                                if (match_len = has_terminal?('}', false, index))
                                  r38 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'}\'')
                                  r38 = nil
                                end
                                s0 << r38
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::BitfieldDefinitionSyntaxNode,input, i0...index, s0)
      r0.extend(BitfieldDefinition3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bitfield_definition][start_index] = r0

    r0
  end

  module StructDefinition0
    def type_name
      elements[0]
    end

    def id
      elements[2]
    end

  end

  module StructDefinition1
    def user_type_name
      elements[2]
    end

    def member
      elements[6]
    end

  end

  def _nt_struct_definition
    start_index = index
    if node_cache[:struct_definition].has_key?(index)
      cached = node_cache[:struct_definition][index]
      if cached
        node_cache[:struct_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('struct', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'struct\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_user_type_name
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?('{', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\'{\'')
              r7 = nil
            end
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                s10, i10 = [], index
                loop do
                  i11, s11 = index, []
                  r12 = _nt_type_name
                  s11 << r12
                  if r12
                    s13, i13 = [], index
                    loop do
                      r14 = _nt_space
                      if r14
                        s13 << r14
                      else
                        break
                      end
                    end
                    if s13.empty?
                      @index = i13
                      r13 = nil
                    else
                      r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                    end
                    s11 << r13
                    if r13
                      r15 = _nt_id
                      s11 << r15
                      if r15
                        s16, i16 = [], index
                        loop do
                          r17 = _nt_space
                          if r17
                            s16 << r17
                          else
                            break
                          end
                        end
                        r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                        s11 << r16
                        if r16
                          if (match_len = has_terminal?(';', false, index))
                            r18 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\';\'')
                            r18 = nil
                          end
                          s11 << r18
                          if r18
                            s19, i19 = [], index
                            loop do
                              r20 = _nt_space
                              if r20
                                s19 << r20
                              else
                                break
                              end
                            end
                            r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                            s11 << r19
                          end
                        end
                      end
                    end
                  end
                  if s11.last
                    r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                    r11.extend(StructDefinition0)
                  else
                    @index = i11
                    r11 = nil
                  end
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                if s10.empty?
                  @index = i10
                  r10 = nil
                else
                  r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                end
                s0 << r10
                if r10
                  if (match_len = has_terminal?('}', false, index))
                    r21 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'}\'')
                    r21 = nil
                  end
                  s0 << r21
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::StructDefinitionSyntaxNode,input, i0...index, s0)
      r0.extend(StructDefinition1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct_definition][start_index] = r0

    r0
  end

  module VersionString0
  end

  def _nt_version_string
    start_index = index
    if node_cache[:version_string].has_key?(index)
      cached = node_cache[:version_string][index]
      if cached
        node_cache[:version_string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('.', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'.\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VersionString0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:version_string][start_index] = r0

    r0
  end

  module Int0
  end

  module Int1
  end

  module Int2
  end

  module Int3
  end

  module Int4
  end

  module Int5
  end

  module Int6
  end

  module Int7
  end

  module Int8
  end

  module Int9
  end

  module Int10
  end

  module Int11
  end

  module Int12
  end

  module Int13
  end

  module Int14
  end

  module Int15
  end

  module Int16
  end

  def _nt_int
    start_index = index
    if node_cache[:int].has_key?(index)
      cached = node_cache[:int][index]
      if cached
        node_cache[:int][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3 = index
    s4, i4 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r5 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r5 = nil
      end
      if r5
        s4 << r5
      else
        break
      end
    end
    if s4.empty?
      @index = i4
      r4 = nil
    else
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
    end
    if r4
      r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
      r3 = r4
    else
      if (match_len = has_terminal?('MXLEN', false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'MXLEN\'')
        r6 = nil
      end
      if r6
        r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
        r3 = r6
      else
        @index = i3
        r3 = nil
      end
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if (match_len = has_terminal?("'", false, index))
        r7 = true
        @index += match_len
      else
        terminal_parse_failure('"\'"')
        r7 = nil
      end
      s1 << r7
      if r7
        if (match_len = has_terminal?('b', false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('\'b\'')
          r8 = nil
        end
        s1 << r8
        if r8
          if has_terminal?(@regexps[gr = '\A[0-1xX]'] ||= Regexp.new(gr), :regexp, index)
            r9 = true
            @index += 1
          else
            terminal_parse_failure('[0-1xX]')
            r9 = nil
          end
          s1 << r9
          if r9
            s10, i10 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[0-1_xX]'] ||= Regexp.new(gr), :regexp, index)
                r11 = true
                @index += 1
              else
                terminal_parse_failure('[0-1_xX]')
                r11 = nil
              end
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s1 << r10
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i1...index, s1)
      r1.extend(Int0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i12, s12 = index, []
      i14 = index
      s15, i15 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r16 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r16 = nil
        end
        if r16
          s15 << r16
        else
          break
        end
      end
      if s15.empty?
        @index = i15
        r15 = nil
      else
        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
      end
      if r15
        r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
        r14 = r15
      else
        if (match_len = has_terminal?('MXLEN', false, index))
          r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'MXLEN\'')
          r17 = nil
        end
        if r17
          r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
          r14 = r17
        else
          @index = i14
          r14 = nil
        end
      end
      if r14
        r13 = r14
      else
        r13 = instantiate_node(SyntaxNode,input, index...index)
      end
      s12 << r13
      if r13
        if (match_len = has_terminal?("'", false, index))
          r18 = true
          @index += match_len
        else
          terminal_parse_failure('"\'"')
          r18 = nil
        end
        s12 << r18
        if r18
          if (match_len = has_terminal?('o', false, index))
            r19 = true
            @index += match_len
          else
            terminal_parse_failure('\'o\'')
            r19 = nil
          end
          s12 << r19
          if r19
            if has_terminal?(@regexps[gr = '\A[0-7xX]'] ||= Regexp.new(gr), :regexp, index)
              r20 = true
              @index += 1
            else
              terminal_parse_failure('[0-7xX]')
              r20 = nil
            end
            s12 << r20
            if r20
              s21, i21 = [], index
              loop do
                if has_terminal?(@regexps[gr = '\A[0-7_xX]'] ||= Regexp.new(gr), :regexp, index)
                  r22 = true
                  @index += 1
                else
                  terminal_parse_failure('[0-7_xX]')
                  r22 = nil
                end
                if r22
                  s21 << r22
                else
                  break
                end
              end
              r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
              s12 << r21
            end
          end
        end
      end
      if s12.last
        r12 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i12...index, s12)
        r12.extend(Int1)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
        r0 = r12
      else
        i23, s23 = index, []
        i25 = index
        s26, i26 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r27 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r27 = nil
          end
          if r27
            s26 << r27
          else
            break
          end
        end
        if s26.empty?
          @index = i26
          r26 = nil
        else
          r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
        end
        if r26
          r26 = SyntaxNode.new(input, (index-1)...index) if r26 == true
          r25 = r26
        else
          if (match_len = has_terminal?('MXLEN', false, index))
            r28 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'MXLEN\'')
            r28 = nil
          end
          if r28
            r28 = SyntaxNode.new(input, (index-1)...index) if r28 == true
            r25 = r28
          else
            @index = i25
            r25 = nil
          end
        end
        if r25
          r24 = r25
        else
          r24 = instantiate_node(SyntaxNode,input, index...index)
        end
        s23 << r24
        if r24
          if (match_len = has_terminal?("'", false, index))
            r29 = true
            @index += match_len
          else
            terminal_parse_failure('"\'"')
            r29 = nil
          end
          s23 << r29
          if r29
            if (match_len = has_terminal?('d', false, index))
              r31 = true
              @index += match_len
            else
              terminal_parse_failure('\'d\'')
              r31 = nil
            end
            if r31
              r30 = r31
            else
              r30 = instantiate_node(SyntaxNode,input, index...index)
            end
            s23 << r30
            if r30
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r32 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r32 = nil
              end
              s23 << r32
              if r32
                s33, i33 = [], index
                loop do
                  if has_terminal?(@regexps[gr = '\A[0-9_]'] ||= Regexp.new(gr), :regexp, index)
                    r34 = true
                    @index += 1
                  else
                    terminal_parse_failure('[0-9_]')
                    r34 = nil
                  end
                  if r34
                    s33 << r34
                  else
                    break
                  end
                end
                r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                s23 << r33
              end
            end
          end
        end
        if s23.last
          r23 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i23...index, s23)
          r23.extend(Int2)
        else
          @index = i23
          r23 = nil
        end
        if r23
          r23 = SyntaxNode.new(input, (index-1)...index) if r23 == true
          r0 = r23
        else
          i35, s35 = index, []
          i37 = index
          s38, i38 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r39 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r39 = nil
            end
            if r39
              s38 << r39
            else
              break
            end
          end
          if s38.empty?
            @index = i38
            r38 = nil
          else
            r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
          end
          if r38
            r38 = SyntaxNode.new(input, (index-1)...index) if r38 == true
            r37 = r38
          else
            if (match_len = has_terminal?('MXLEN', false, index))
              r40 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'MXLEN\'')
              r40 = nil
            end
            if r40
              r40 = SyntaxNode.new(input, (index-1)...index) if r40 == true
              r37 = r40
            else
              @index = i37
              r37 = nil
            end
          end
          if r37
            r36 = r37
          else
            r36 = instantiate_node(SyntaxNode,input, index...index)
          end
          s35 << r36
          if r36
            if (match_len = has_terminal?("'", false, index))
              r41 = true
              @index += match_len
            else
              terminal_parse_failure('"\'"')
              r41 = nil
            end
            s35 << r41
            if r41
              if (match_len = has_terminal?('h', false, index))
                r42 = true
                @index += match_len
              else
                terminal_parse_failure('\'h\'')
                r42 = nil
              end
              s35 << r42
              if r42
                if has_terminal?(@regexps[gr = '\A[0-9a-fA-FxX]'] ||= Regexp.new(gr), :regexp, index)
                  r43 = true
                  @index += 1
                else
                  terminal_parse_failure('[0-9a-fA-FxX]')
                  r43 = nil
                end
                s35 << r43
                if r43
                  s44, i44 = [], index
                  loop do
                    if has_terminal?(@regexps[gr = '\A[0-9a-fA-F_xX]'] ||= Regexp.new(gr), :regexp, index)
                      r45 = true
                      @index += 1
                    else
                      terminal_parse_failure('[0-9a-fA-F_xX]')
                      r45 = nil
                    end
                    if r45
                      s44 << r45
                    else
                      break
                    end
                  end
                  r44 = instantiate_node(SyntaxNode,input, i44...index, s44)
                  s35 << r44
                end
              end
            end
          end
          if s35.last
            r35 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i35...index, s35)
            r35.extend(Int3)
          else
            @index = i35
            r35 = nil
          end
          if r35
            r35 = SyntaxNode.new(input, (index-1)...index) if r35 == true
            r0 = r35
          else
            i46, s46 = index, []
            i48 = index
            s49, i49 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r50 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r50 = nil
              end
              if r50
                s49 << r50
              else
                break
              end
            end
            if s49.empty?
              @index = i49
              r49 = nil
            else
              r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
            end
            if r49
              r49 = SyntaxNode.new(input, (index-1)...index) if r49 == true
              r48 = r49
            else
              if (match_len = has_terminal?('MXLEN', false, index))
                r51 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'MXLEN\'')
                r51 = nil
              end
              if r51
                r51 = SyntaxNode.new(input, (index-1)...index) if r51 == true
                r48 = r51
              else
                @index = i48
                r48 = nil
              end
            end
            if r48
              r47 = r48
            else
              r47 = instantiate_node(SyntaxNode,input, index...index)
            end
            s46 << r47
            if r47
              if (match_len = has_terminal?("'", false, index))
                r52 = true
                @index += match_len
              else
                terminal_parse_failure('"\'"')
                r52 = nil
              end
              s46 << r52
              if r52
                if (match_len = has_terminal?('sb', false, index))
                  r53 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'sb\'')
                  r53 = nil
                end
                s46 << r53
                if r53
                  if has_terminal?(@regexps[gr = '\A[0-1xX]'] ||= Regexp.new(gr), :regexp, index)
                    r54 = true
                    @index += 1
                  else
                    terminal_parse_failure('[0-1xX]')
                    r54 = nil
                  end
                  s46 << r54
                  if r54
                    s55, i55 = [], index
                    loop do
                      if has_terminal?(@regexps[gr = '\A[0-1_xX]'] ||= Regexp.new(gr), :regexp, index)
                        r56 = true
                        @index += 1
                      else
                        terminal_parse_failure('[0-1_xX]')
                        r56 = nil
                      end
                      if r56
                        s55 << r56
                      else
                        break
                      end
                    end
                    r55 = instantiate_node(SyntaxNode,input, i55...index, s55)
                    s46 << r55
                  end
                end
              end
            end
            if s46.last
              r46 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i46...index, s46)
              r46.extend(Int4)
            else
              @index = i46
              r46 = nil
            end
            if r46
              r46 = SyntaxNode.new(input, (index-1)...index) if r46 == true
              r0 = r46
            else
              i57, s57 = index, []
              i59 = index
              s60, i60 = [], index
              loop do
                if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                  r61 = true
                  @index += 1
                else
                  terminal_parse_failure('[0-9]')
                  r61 = nil
                end
                if r61
                  s60 << r61
                else
                  break
                end
              end
              if s60.empty?
                @index = i60
                r60 = nil
              else
                r60 = instantiate_node(SyntaxNode,input, i60...index, s60)
              end
              if r60
                r60 = SyntaxNode.new(input, (index-1)...index) if r60 == true
                r59 = r60
              else
                if (match_len = has_terminal?('MXLEN', false, index))
                  r62 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'MXLEN\'')
                  r62 = nil
                end
                if r62
                  r62 = SyntaxNode.new(input, (index-1)...index) if r62 == true
                  r59 = r62
                else
                  @index = i59
                  r59 = nil
                end
              end
              if r59
                r58 = r59
              else
                r58 = instantiate_node(SyntaxNode,input, index...index)
              end
              s57 << r58
              if r58
                if (match_len = has_terminal?("'", false, index))
                  r63 = true
                  @index += match_len
                else
                  terminal_parse_failure('"\'"')
                  r63 = nil
                end
                s57 << r63
                if r63
                  if (match_len = has_terminal?('so', false, index))
                    r64 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'so\'')
                    r64 = nil
                  end
                  s57 << r64
                  if r64
                    if has_terminal?(@regexps[gr = '\A[0-7xX]'] ||= Regexp.new(gr), :regexp, index)
                      r65 = true
                      @index += 1
                    else
                      terminal_parse_failure('[0-7xX]')
                      r65 = nil
                    end
                    s57 << r65
                    if r65
                      s66, i66 = [], index
                      loop do
                        if has_terminal?(@regexps[gr = '\A[0-7_xX]'] ||= Regexp.new(gr), :regexp, index)
                          r67 = true
                          @index += 1
                        else
                          terminal_parse_failure('[0-7_xX]')
                          r67 = nil
                        end
                        if r67
                          s66 << r67
                        else
                          break
                        end
                      end
                      r66 = instantiate_node(SyntaxNode,input, i66...index, s66)
                      s57 << r66
                    end
                  end
                end
              end
              if s57.last
                r57 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i57...index, s57)
                r57.extend(Int5)
              else
                @index = i57
                r57 = nil
              end
              if r57
                r57 = SyntaxNode.new(input, (index-1)...index) if r57 == true
                r0 = r57
              else
                i68, s68 = index, []
                i70 = index
                s71, i71 = [], index
                loop do
                  if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                    r72 = true
                    @index += 1
                  else
                    terminal_parse_failure('[0-9]')
                    r72 = nil
                  end
                  if r72
                    s71 << r72
                  else
                    break
                  end
                end
                if s71.empty?
                  @index = i71
                  r71 = nil
                else
                  r71 = instantiate_node(SyntaxNode,input, i71...index, s71)
                end
                if r71
                  r71 = SyntaxNode.new(input, (index-1)...index) if r71 == true
                  r70 = r71
                else
                  if (match_len = has_terminal?('MXLEN', false, index))
                    r73 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'MXLEN\'')
                    r73 = nil
                  end
                  if r73
                    r73 = SyntaxNode.new(input, (index-1)...index) if r73 == true
                    r70 = r73
                  else
                    @index = i70
                    r70 = nil
                  end
                end
                if r70
                  r69 = r70
                else
                  r69 = instantiate_node(SyntaxNode,input, index...index)
                end
                s68 << r69
                if r69
                  if (match_len = has_terminal?("'", false, index))
                    r74 = true
                    @index += match_len
                  else
                    terminal_parse_failure('"\'"')
                    r74 = nil
                  end
                  s68 << r74
                  if r74
                    if (match_len = has_terminal?('s', false, index))
                      r75 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'s\'')
                      r75 = nil
                    end
                    s68 << r75
                    if r75
                      if (match_len = has_terminal?('d', false, index))
                        r77 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'d\'')
                        r77 = nil
                      end
                      if r77
                        r76 = r77
                      else
                        r76 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s68 << r76
                      if r76
                        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                          r78 = true
                          @index += 1
                        else
                          terminal_parse_failure('[0-9]')
                          r78 = nil
                        end
                        s68 << r78
                        if r78
                          s79, i79 = [], index
                          loop do
                            if has_terminal?(@regexps[gr = '\A[0-9_]'] ||= Regexp.new(gr), :regexp, index)
                              r80 = true
                              @index += 1
                            else
                              terminal_parse_failure('[0-9_]')
                              r80 = nil
                            end
                            if r80
                              s79 << r80
                            else
                              break
                            end
                          end
                          r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
                          s68 << r79
                        end
                      end
                    end
                  end
                end
                if s68.last
                  r68 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i68...index, s68)
                  r68.extend(Int6)
                else
                  @index = i68
                  r68 = nil
                end
                if r68
                  r68 = SyntaxNode.new(input, (index-1)...index) if r68 == true
                  r0 = r68
                else
                  i81, s81 = index, []
                  i83 = index
                  s84, i84 = [], index
                  loop do
                    if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                      r85 = true
                      @index += 1
                    else
                      terminal_parse_failure('[0-9]')
                      r85 = nil
                    end
                    if r85
                      s84 << r85
                    else
                      break
                    end
                  end
                  if s84.empty?
                    @index = i84
                    r84 = nil
                  else
                    r84 = instantiate_node(SyntaxNode,input, i84...index, s84)
                  end
                  if r84
                    r84 = SyntaxNode.new(input, (index-1)...index) if r84 == true
                    r83 = r84
                  else
                    if (match_len = has_terminal?('MXLEN', false, index))
                      r86 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'MXLEN\'')
                      r86 = nil
                    end
                    if r86
                      r86 = SyntaxNode.new(input, (index-1)...index) if r86 == true
                      r83 = r86
                    else
                      @index = i83
                      r83 = nil
                    end
                  end
                  if r83
                    r82 = r83
                  else
                    r82 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s81 << r82
                  if r82
                    if (match_len = has_terminal?("'", false, index))
                      r87 = true
                      @index += match_len
                    else
                      terminal_parse_failure('"\'"')
                      r87 = nil
                    end
                    s81 << r87
                    if r87
                      if (match_len = has_terminal?('sh', false, index))
                        r88 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'sh\'')
                        r88 = nil
                      end
                      s81 << r88
                      if r88
                        if has_terminal?(@regexps[gr = '\A[0-9a-fA-FxX]'] ||= Regexp.new(gr), :regexp, index)
                          r89 = true
                          @index += 1
                        else
                          terminal_parse_failure('[0-9a-fA-FxX]')
                          r89 = nil
                        end
                        s81 << r89
                        if r89
                          s90, i90 = [], index
                          loop do
                            if has_terminal?(@regexps[gr = '\A[0-9a-fA-F_xX]'] ||= Regexp.new(gr), :regexp, index)
                              r91 = true
                              @index += 1
                            else
                              terminal_parse_failure('[0-9a-fA-F_xX]')
                              r91 = nil
                            end
                            if r91
                              s90 << r91
                            else
                              break
                            end
                          end
                          r90 = instantiate_node(SyntaxNode,input, i90...index, s90)
                          s81 << r90
                        end
                      end
                    end
                  end
                  if s81.last
                    r81 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i81...index, s81)
                    r81.extend(Int7)
                  else
                    @index = i81
                    r81 = nil
                  end
                  if r81
                    r81 = SyntaxNode.new(input, (index-1)...index) if r81 == true
                    r0 = r81
                  else
                    i92, s92 = index, []
                    if (match_len = has_terminal?('0b', false, index))
                      r93 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'0b\'')
                      r93 = nil
                    end
                    s92 << r93
                    if r93
                      if has_terminal?(@regexps[gr = '\A[0-1]'] ||= Regexp.new(gr), :regexp, index)
                        r94 = true
                        @index += 1
                      else
                        terminal_parse_failure('[0-1]')
                        r94 = nil
                      end
                      s92 << r94
                      if r94
                        s95, i95 = [], index
                        loop do
                          if has_terminal?(@regexps[gr = '\A[0-1_]'] ||= Regexp.new(gr), :regexp, index)
                            r96 = true
                            @index += 1
                          else
                            terminal_parse_failure('[0-1_]')
                            r96 = nil
                          end
                          if r96
                            s95 << r96
                          else
                            break
                          end
                        end
                        r95 = instantiate_node(SyntaxNode,input, i95...index, s95)
                        s92 << r95
                        if r95
                          if (match_len = has_terminal?('s', false, index))
                            r97 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'s\'')
                            r97 = nil
                          end
                          s92 << r97
                        end
                      end
                    end
                    if s92.last
                      r92 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i92...index, s92)
                      r92.extend(Int8)
                    else
                      @index = i92
                      r92 = nil
                    end
                    if r92
                      r92 = SyntaxNode.new(input, (index-1)...index) if r92 == true
                      r0 = r92
                    else
                      i98, s98 = index, []
                      if (match_len = has_terminal?('0', false, index))
                        r99 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'0\'')
                        r99 = nil
                      end
                      s98 << r99
                      if r99
                        if has_terminal?(@regexps[gr = '\A[0-7]'] ||= Regexp.new(gr), :regexp, index)
                          r100 = true
                          @index += 1
                        else
                          terminal_parse_failure('[0-7]')
                          r100 = nil
                        end
                        s98 << r100
                        if r100
                          s101, i101 = [], index
                          loop do
                            if has_terminal?(@regexps[gr = '\A[0-7_]'] ||= Regexp.new(gr), :regexp, index)
                              r102 = true
                              @index += 1
                            else
                              terminal_parse_failure('[0-7_]')
                              r102 = nil
                            end
                            if r102
                              s101 << r102
                            else
                              break
                            end
                          end
                          r101 = instantiate_node(SyntaxNode,input, i101...index, s101)
                          s98 << r101
                          if r101
                            if (match_len = has_terminal?('s', false, index))
                              r103 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'s\'')
                              r103 = nil
                            end
                            s98 << r103
                          end
                        end
                      end
                      if s98.last
                        r98 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i98...index, s98)
                        r98.extend(Int9)
                      else
                        @index = i98
                        r98 = nil
                      end
                      if r98
                        r98 = SyntaxNode.new(input, (index-1)...index) if r98 == true
                        r0 = r98
                      else
                        i104, s104 = index, []
                        if has_terminal?(@regexps[gr = '\A[1-9]'] ||= Regexp.new(gr), :regexp, index)
                          r105 = true
                          @index += 1
                        else
                          terminal_parse_failure('[1-9]')
                          r105 = nil
                        end
                        s104 << r105
                        if r105
                          s106, i106 = [], index
                          loop do
                            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                              r107 = true
                              @index += 1
                            else
                              terminal_parse_failure('[0-9]')
                              r107 = nil
                            end
                            if r107
                              s106 << r107
                            else
                              break
                            end
                          end
                          r106 = instantiate_node(SyntaxNode,input, i106...index, s106)
                          s104 << r106
                          if r106
                            if (match_len = has_terminal?('s', false, index))
                              r108 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'s\'')
                              r108 = nil
                            end
                            s104 << r108
                          end
                        end
                        if s104.last
                          r104 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i104...index, s104)
                          r104.extend(Int10)
                        else
                          @index = i104
                          r104 = nil
                        end
                        if r104
                          r104 = SyntaxNode.new(input, (index-1)...index) if r104 == true
                          r0 = r104
                        else
                          i109, s109 = index, []
                          if (match_len = has_terminal?('0x', false, index))
                            r110 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('\'0x\'')
                            r110 = nil
                          end
                          s109 << r110
                          if r110
                            if has_terminal?(@regexps[gr = '\A[0-9a-fA-F]'] ||= Regexp.new(gr), :regexp, index)
                              r111 = true
                              @index += 1
                            else
                              terminal_parse_failure('[0-9a-fA-F]')
                              r111 = nil
                            end
                            s109 << r111
                            if r111
                              s112, i112 = [], index
                              loop do
                                if has_terminal?(@regexps[gr = '\A[0-9a-fA-F]'] ||= Regexp.new(gr), :regexp, index)
                                  r113 = true
                                  @index += 1
                                else
                                  terminal_parse_failure('[0-9a-fA-F]')
                                  r113 = nil
                                end
                                if r113
                                  s112 << r113
                                else
                                  break
                                end
                              end
                              r112 = instantiate_node(SyntaxNode,input, i112...index, s112)
                              s109 << r112
                              if r112
                                if (match_len = has_terminal?('s', false, index))
                                  r114 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'s\'')
                                  r114 = nil
                                end
                                s109 << r114
                              end
                            end
                          end
                          if s109.last
                            r109 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i109...index, s109)
                            r109.extend(Int11)
                          else
                            @index = i109
                            r109 = nil
                          end
                          if r109
                            r109 = SyntaxNode.new(input, (index-1)...index) if r109 == true
                            r0 = r109
                          else
                            i115, s115 = index, []
                            if (match_len = has_terminal?('0b', false, index))
                              r116 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'0b\'')
                              r116 = nil
                            end
                            s115 << r116
                            if r116
                              if has_terminal?(@regexps[gr = '\A[0-1]'] ||= Regexp.new(gr), :regexp, index)
                                r117 = true
                                @index += 1
                              else
                                terminal_parse_failure('[0-1]')
                                r117 = nil
                              end
                              s115 << r117
                              if r117
                                s118, i118 = [], index
                                loop do
                                  if has_terminal?(@regexps[gr = '\A[0-1_]'] ||= Regexp.new(gr), :regexp, index)
                                    r119 = true
                                    @index += 1
                                  else
                                    terminal_parse_failure('[0-1_]')
                                    r119 = nil
                                  end
                                  if r119
                                    s118 << r119
                                  else
                                    break
                                  end
                                end
                                r118 = instantiate_node(SyntaxNode,input, i118...index, s118)
                                s115 << r118
                              end
                            end
                            if s115.last
                              r115 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i115...index, s115)
                              r115.extend(Int12)
                            else
                              @index = i115
                              r115 = nil
                            end
                            if r115
                              r115 = SyntaxNode.new(input, (index-1)...index) if r115 == true
                              r0 = r115
                            else
                              i120, s120 = index, []
                              if (match_len = has_terminal?('0', false, index))
                                r121 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\'0\'')
                                r121 = nil
                              end
                              s120 << r121
                              if r121
                                if has_terminal?(@regexps[gr = '\A[0-7]'] ||= Regexp.new(gr), :regexp, index)
                                  r122 = true
                                  @index += 1
                                else
                                  terminal_parse_failure('[0-7]')
                                  r122 = nil
                                end
                                s120 << r122
                                if r122
                                  s123, i123 = [], index
                                  loop do
                                    if has_terminal?(@regexps[gr = '\A[0-7_]'] ||= Regexp.new(gr), :regexp, index)
                                      r124 = true
                                      @index += 1
                                    else
                                      terminal_parse_failure('[0-7_]')
                                      r124 = nil
                                    end
                                    if r124
                                      s123 << r124
                                    else
                                      break
                                    end
                                  end
                                  r123 = instantiate_node(SyntaxNode,input, i123...index, s123)
                                  s120 << r123
                                end
                              end
                              if s120.last
                                r120 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i120...index, s120)
                                r120.extend(Int13)
                              else
                                @index = i120
                                r120 = nil
                              end
                              if r120
                                r120 = SyntaxNode.new(input, (index-1)...index) if r120 == true
                                r0 = r120
                              else
                                i125, s125 = index, []
                                if has_terminal?(@regexps[gr = '\A[1-9]'] ||= Regexp.new(gr), :regexp, index)
                                  r126 = true
                                  @index += 1
                                else
                                  terminal_parse_failure('[1-9]')
                                  r126 = nil
                                end
                                s125 << r126
                                if r126
                                  s127, i127 = [], index
                                  loop do
                                    if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                                      r128 = true
                                      @index += 1
                                    else
                                      terminal_parse_failure('[0-9]')
                                      r128 = nil
                                    end
                                    if r128
                                      s127 << r128
                                    else
                                      break
                                    end
                                  end
                                  r127 = instantiate_node(SyntaxNode,input, i127...index, s127)
                                  s125 << r127
                                end
                                if s125.last
                                  r125 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i125...index, s125)
                                  r125.extend(Int14)
                                else
                                  @index = i125
                                  r125 = nil
                                end
                                if r125
                                  r125 = SyntaxNode.new(input, (index-1)...index) if r125 == true
                                  r0 = r125
                                else
                                  i129, s129 = index, []
                                  if (match_len = has_terminal?('0x', false, index))
                                    r130 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\'0x\'')
                                    r130 = nil
                                  end
                                  s129 << r130
                                  if r130
                                    if has_terminal?(@regexps[gr = '\A[0-9a-fA-F]'] ||= Regexp.new(gr), :regexp, index)
                                      r131 = true
                                      @index += 1
                                    else
                                      terminal_parse_failure('[0-9a-fA-F]')
                                      r131 = nil
                                    end
                                    s129 << r131
                                    if r131
                                      s132, i132 = [], index
                                      loop do
                                        if has_terminal?(@regexps[gr = '\A[0-9a-fA-F]'] ||= Regexp.new(gr), :regexp, index)
                                          r133 = true
                                          @index += 1
                                        else
                                          terminal_parse_failure('[0-9a-fA-F]')
                                          r133 = nil
                                        end
                                        if r133
                                          s132 << r133
                                        else
                                          break
                                        end
                                      end
                                      r132 = instantiate_node(SyntaxNode,input, i132...index, s132)
                                      s129 << r132
                                    end
                                  end
                                  if s129.last
                                    r129 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i129...index, s129)
                                    r129.extend(Int15)
                                  else
                                    @index = i129
                                    r129 = nil
                                  end
                                  if r129
                                    r129 = SyntaxNode.new(input, (index-1)...index) if r129 == true
                                    r0 = r129
                                  else
                                    i134, s134 = index, []
                                    if (match_len = has_terminal?('0', false, index))
                                      r135 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'0\'')
                                      r135 = nil
                                    end
                                    s134 << r135
                                    if r135
                                      if (match_len = has_terminal?('s', false, index))
                                        r137 = true
                                        @index += match_len
                                      else
                                        terminal_parse_failure('\'s\'')
                                        r137 = nil
                                      end
                                      if r137
                                        r136 = r137
                                      else
                                        r136 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s134 << r136
                                    end
                                    if s134.last
                                      r134 = instantiate_node(Idl::IntLiteralSyntaxNode,input, i134...index, s134)
                                      r134.extend(Int16)
                                    else
                                      @index = i134
                                      r134 = nil
                                    end
                                    if r134
                                      r134 = SyntaxNode.new(input, (index-1)...index) if r134 == true
                                      r0 = r134
                                    else
                                      @index = i0
                                      r0 = nil
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:int][start_index] = r0

    r0
  end

  def _nt_p0_binary_operator
    start_index = index
    if node_cache[:p0_binary_operator].has_key?(index)
      cached = node_cache[:p0_binary_operator][index]
      if cached
        node_cache[:p0_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('/', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'/\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('%', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'%\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('`*', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'`*\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?('*', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'*\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:p0_binary_operator][start_index] = r0

    r0
  end

  def _nt_p1_binary_operator
    start_index = index
    if node_cache[:p1_binary_operator].has_key?(index)
      cached = node_cache[:p1_binary_operator][index]
      if cached
        node_cache[:p1_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('`+', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'`+\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('`-', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'`-\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('+', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'+\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?('-', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'-\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:p1_binary_operator][start_index] = r0

    r0
  end

  def _nt_p2_binary_operator
    start_index = index
    if node_cache[:p2_binary_operator].has_key?(index)
      cached = node_cache[:p2_binary_operator][index]
      if cached
        node_cache[:p2_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('`<<', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'`<<\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('<<', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'<<\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('>>>', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'>>>\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?('>>', false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'>>\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:p2_binary_operator][start_index] = r0

    r0
  end

  def _nt_p3_binary_operator
    start_index = index
    if node_cache[:p3_binary_operator].has_key?(index)
      cached = node_cache[:p3_binary_operator][index]
      if cached
        node_cache[:p3_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('<=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'<=\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('>=', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'>=\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('<', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'<\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?('>', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'>\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:p3_binary_operator][start_index] = r0

    r0
  end

  def _nt_p3_template_binary_operator
    start_index = index
    if node_cache[:p3_template_binary_operator].has_key?(index)
      cached = node_cache[:p3_template_binary_operator][index]
      if cached
        node_cache[:p3_template_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('<=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'<=\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('<', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'<\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p3_template_binary_operator][start_index] = r0

    r0
  end

  def _nt_p4_binary_operator
    start_index = index
    if node_cache[:p4_binary_operator].has_key?(index)
      cached = node_cache[:p4_binary_operator][index]
      if cached
        node_cache[:p4_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('!=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'!=\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('==', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'==\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p4_binary_operator][start_index] = r0

    r0
  end

  module P5BinaryOperator0
  end

  def _nt_p5_binary_operator
    start_index = index
    if node_cache[:p5_binary_operator].has_key?(index)
      cached = node_cache[:p5_binary_operator][index]
      if cached
        node_cache[:p5_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('&', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'&\'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?('&', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'&\'')
        r3 = nil
      end
      if r3
        @index = i2
        r2 = nil
        terminal_parse_failure('\'&\'', true)
      else
        @terminal_failures.pop
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(P5BinaryOperator0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:p5_binary_operator][start_index] = r0

    r0
  end

  def _nt_p6_binary_operator
    start_index = index
    if node_cache[:p6_binary_operator].has_key?(index)
      cached = node_cache[:p6_binary_operator][index]
      if cached
        node_cache[:p6_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('^', false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'^\'')
      r0 = nil
    end

    node_cache[:p6_binary_operator][start_index] = r0

    r0
  end

  module P7BinaryOperator0
  end

  def _nt_p7_binary_operator
    start_index = index
    if node_cache[:p7_binary_operator].has_key?(index)
      cached = node_cache[:p7_binary_operator][index]
      if cached
        node_cache[:p7_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('|', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'|\'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?('|', false, index))
        r3 = true
        @index += match_len
      else
        terminal_parse_failure('\'|\'')
        r3 = nil
      end
      if r3
        @index = i2
        r2 = nil
        terminal_parse_failure('\'|\'', true)
      else
        @terminal_failures.pop
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(P7BinaryOperator0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:p7_binary_operator][start_index] = r0

    r0
  end

  def _nt_p8_binary_operator
    start_index = index
    if node_cache[:p8_binary_operator].has_key?(index)
      cached = node_cache[:p8_binary_operator][index]
      if cached
        node_cache[:p8_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('&&', false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'&&\'')
      r0 = nil
    end

    node_cache[:p8_binary_operator][start_index] = r0

    r0
  end

  def _nt_p9_binary_operator
    start_index = index
    if node_cache[:p9_binary_operator].has_key?(index)
      cached = node_cache[:p9_binary_operator][index]
      if cached
        node_cache[:p9_binary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('||', false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'||\'')
      r0 = nil
    end

    node_cache[:p9_binary_operator][start_index] = r0

    r0
  end

  def _nt_unary_operator
    start_index = index
    if node_cache[:unary_operator].has_key?(index)
      cached = node_cache[:unary_operator][index]
      if cached
        node_cache[:unary_operator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('~', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'~\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('-', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'-\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('!', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'!\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:unary_operator][start_index] = r0

    r0
  end

  module P0BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P0BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p0_binary_expression
    start_index = index
    if node_cache[:p0_binary_expression].has_key?(index)
      cached = node_cache[:p0_binary_expression][index]
      if cached
        node_cache[:p0_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_unary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p0_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_unary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P0BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P0BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_unary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p0_binary_expression][start_index] = r0

    r0
  end

  module P1BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P1BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p1_binary_expression
    start_index = index
    if node_cache[:p1_binary_expression].has_key?(index)
      cached = node_cache[:p1_binary_expression][index]
      if cached
        node_cache[:p1_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p0_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p1_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p0_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P1BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P1BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p0_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p1_binary_expression][start_index] = r0

    r0
  end

  module P2BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P2BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p2_binary_expression
    start_index = index
    if node_cache[:p2_binary_expression].has_key?(index)
      cached = node_cache[:p2_binary_expression][index]
      if cached
        node_cache[:p2_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p1_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p2_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p1_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P2BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P2BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p1_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p2_binary_expression][start_index] = r0

    r0
  end

  module P3BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P3BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p3_binary_expression
    start_index = index
    if node_cache[:p3_binary_expression].has_key?(index)
      cached = node_cache[:p3_binary_expression][index]
      if cached
        node_cache[:p3_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p2_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p3_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p2_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P3BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P3BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p2_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p3_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP3BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP3BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p3_binary_expression
    start_index = index
    if node_cache[:template_safe_p3_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p3_binary_expression][index]
      if cached
        node_cache[:template_safe_p3_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p2_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p3_template_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p2_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP3BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP3BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p2_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p3_binary_expression][start_index] = r0

    r0
  end

  module P4BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P4BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p4_binary_expression
    start_index = index
    if node_cache[:p4_binary_expression].has_key?(index)
      cached = node_cache[:p4_binary_expression][index]
      if cached
        node_cache[:p4_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p3_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p4_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p3_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P4BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P4BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p3_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p4_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP4BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP4BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p4_binary_expression
    start_index = index
    if node_cache[:template_safe_p4_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p4_binary_expression][index]
      if cached
        node_cache[:template_safe_p4_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_template_safe_p3_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p4_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p3_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP4BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP4BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_template_safe_p3_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p4_binary_expression][start_index] = r0

    r0
  end

  module P5BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P5BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p5_binary_expression
    start_index = index
    if node_cache[:p5_binary_expression].has_key?(index)
      cached = node_cache[:p5_binary_expression][index]
      if cached
        node_cache[:p5_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p4_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p5_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p4_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P5BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P5BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p4_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p5_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP5BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP5BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p5_binary_expression
    start_index = index
    if node_cache[:template_safe_p5_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p5_binary_expression][index]
      if cached
        node_cache[:template_safe_p5_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_template_safe_p4_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p5_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p4_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP5BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP5BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_template_safe_p4_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p5_binary_expression][start_index] = r0

    r0
  end

  module P6BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P6BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p6_binary_expression
    start_index = index
    if node_cache[:p6_binary_expression].has_key?(index)
      cached = node_cache[:p6_binary_expression][index]
      if cached
        node_cache[:p6_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p5_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p6_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p5_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P6BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P6BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p5_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p6_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP6BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP6BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p6_binary_expression
    start_index = index
    if node_cache[:template_safe_p6_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p6_binary_expression][index]
      if cached
        node_cache[:template_safe_p6_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_template_safe_p5_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p6_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p5_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP6BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP6BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_template_safe_p5_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p6_binary_expression][start_index] = r0

    r0
  end

  module P7BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P7BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p7_binary_expression
    start_index = index
    if node_cache[:p7_binary_expression].has_key?(index)
      cached = node_cache[:p7_binary_expression][index]
      if cached
        node_cache[:p7_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p6_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p7_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p6_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P7BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P7BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p6_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p7_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP7BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP7BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p7_binary_expression
    start_index = index
    if node_cache[:template_safe_p7_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p7_binary_expression][index]
      if cached
        node_cache[:template_safe_p7_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_template_safe_p6_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p7_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p6_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP7BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP7BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_template_safe_p6_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p7_binary_expression][start_index] = r0

    r0
  end

  module P8BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P8BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p8_binary_expression
    start_index = index
    if node_cache[:p8_binary_expression].has_key?(index)
      cached = node_cache[:p8_binary_expression][index]
      if cached
        node_cache[:p8_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p7_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p8_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p7_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P8BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P8BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p7_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p8_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP8BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP8BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p8_binary_expression
    start_index = index
    if node_cache[:template_safe_p8_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p8_binary_expression][index]
      if cached
        node_cache[:template_safe_p8_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_template_safe_p7_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p8_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p7_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP8BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP8BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_template_safe_p7_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p8_binary_expression][start_index] = r0

    r0
  end

  module P9BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module P9BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_p9_binary_expression
    start_index = index
    if node_cache[:p9_binary_expression].has_key?(index)
      cached = node_cache[:p9_binary_expression][index]
      if cached
        node_cache[:p9_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_p8_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p9_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p8_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(P9BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(P9BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_p8_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:p9_binary_expression][start_index] = r0

    r0
  end

  module TemplateSafeP9BinaryExpression0
    def op
      elements[1]
    end

    def r
      elements[3]
    end
  end

  module TemplateSafeP9BinaryExpression1
    def l
      elements[0]
    end

    def r
      elements[1]
    end
  end

  def _nt_template_safe_p9_binary_expression
    start_index = index
    if node_cache[:template_safe_p9_binary_expression].has_key?(index)
      cached = node_cache[:template_safe_p9_binary_expression][index]
      if cached
        node_cache[:template_safe_p9_binary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_template_safe_p8_binary_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          r7 = _nt_p9_binary_operator
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_p8_binary_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TemplateSafeP9BinaryExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BinaryExpressionRightSyntaxNode,input, i1...index, s1)
      r1.extend(TemplateSafeP9BinaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r11 = _nt_template_safe_p8_binary_expression
      if r11
        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_p9_binary_expression][start_index] = r0

    r0
  end

  module ParenExpression0
    def e
      elements[2]
    end

  end

  def _nt_paren_expression
    start_index = index
    if node_cache[:paren_expression].has_key?(index)
      cached = node_cache[:paren_expression][index]
      if cached
        node_cache[:paren_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('(', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_expression
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?(')', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\')\'')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::ParenExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(ParenExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:paren_expression][start_index] = r0

    r0
  end

  module ReplicationExpression0
    def n
      elements[2]
    end

    def v
      elements[6]
    end

  end

  def _nt_replication_expression
    start_index = index
    if node_cache[:replication_expression].has_key?(index)
      cached = node_cache[:replication_expression][index]
      if cached
        node_cache[:replication_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('{', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'{\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_expression
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?('{', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\'{\'')
              r7 = nil
            end
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                r10 = _nt_expression
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    if (match_len = has_terminal?('}', false, index))
                      r13 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'}\'')
                      r13 = nil
                    end
                    s0 << r13
                    if r13
                      s14, i14 = [], index
                      loop do
                        r15 = _nt_space
                        if r15
                          s14 << r15
                        else
                          break
                        end
                      end
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                      s0 << r14
                      if r14
                        if (match_len = has_terminal?('}', false, index))
                          r16 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'}\'')
                          r16 = nil
                        end
                        s0 << r16
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::ReplicationExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(ReplicationExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:replication_expression][start_index] = r0

    r0
  end

  module ConcatenationExpression0
    def expression
      elements[3]
    end
  end

  module ConcatenationExpression1
    def first
      elements[2]
    end

    def rest
      elements[3]
    end

  end

  def _nt_concatenation_expression
    start_index = index
    if node_cache[:concatenation_expression].has_key?(index)
      cached = node_cache[:concatenation_expression][index]
      if cached
        node_cache[:concatenation_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('{', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'{\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_expression
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            i6, s6 = index, []
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s6 << r7
            if r7
              if (match_len = has_terminal?(',', false, index))
                r9 = true
                @index += match_len
              else
                terminal_parse_failure('\',\'')
                r9 = nil
              end
              s6 << r9
              if r9
                s10, i10 = [], index
                loop do
                  r11 = _nt_space
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                s6 << r10
                if r10
                  r12 = _nt_expression
                  s6 << r12
                end
              end
            end
            if s6.last
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              r6.extend(ConcatenationExpression0)
            else
              @index = i6
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            s13, i13 = [], index
            loop do
              r14 = _nt_space
              if r14
                s13 << r14
              else
                break
              end
            end
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            s0 << r13
            if r13
              if (match_len = has_terminal?('}', false, index))
                r15 = true
                @index += match_len
              else
                terminal_parse_failure('\'}\'')
                r15 = nil
              end
              s0 << r15
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::ConcatenationExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(ConcatenationExpression1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:concatenation_expression][start_index] = r0

    r0
  end

  module CsrFieldAccessExpression0
    def csr
      elements[0]
    end

    def csr_field_name
      elements[4]
    end
  end

  def _nt_csr_field_access_expression
    start_index = index
    if node_cache[:csr_field_access_expression].has_key?(index)
      cached = node_cache[:csr_field_access_expression][index]
      if cached
        node_cache[:csr_field_access_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_csr_register_access_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('.', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_csr_field_name
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::CsrFieldReadExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(CsrFieldAccessExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:csr_field_access_expression][start_index] = r0

    r0
  end

  module CsrRegisterAccessExpression0
    def csr_name
      elements[4]
    end

  end

  def _nt_csr_register_access_expression
    start_index = index
    if node_cache[:csr_register_access_expression].has_key?(index)
      cached = node_cache[:csr_register_access_expression][index]
      if cached
        node_cache[:csr_register_access_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('CSR', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'CSR\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('[', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'[\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_csr_name
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(']', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\']\'')
                  r10 = nil
                end
                s0 << r10
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::CsrReadExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(CsrRegisterAccessExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:csr_register_access_expression][start_index] = r0

    r0
  end

  def _nt_field_access_eligible_expression
    start_index = index
    if node_cache[:field_access_eligible_expression].has_key?(index)
      cached = node_cache[:field_access_eligible_expression][index]
      if cached
        node_cache[:field_access_eligible_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_paren_expression
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_function_call
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_rval
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:field_access_eligible_expression][start_index] = r0

    r0
  end

  module FieldAccessExpression0
    def field_access_eligible_expression
      elements[0]
    end

    def field_name
      elements[4]
    end
  end

  def _nt_field_access_expression
    start_index = index
    if node_cache[:field_access_expression].has_key?(index)
      cached = node_cache[:field_access_expression][index]
      if cached
        node_cache[:field_access_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_field_access_eligible_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('.', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_field_name
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::FieldAccessExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(FieldAccessExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:field_access_expression][start_index] = r0

    r0
  end

  def _nt_ary_eligible_expression
    start_index = index
    if node_cache[:ary_eligible_expression].has_key?(index)
      cached = node_cache[:ary_eligible_expression][index]
      if cached
        node_cache[:ary_eligible_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_paren_expression
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_replication_expression
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_concatenation_expression
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_field_access_expression
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_function_call
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              r6 = _nt_csr_field_access_expression
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                r7 = _nt_bits_cast
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  r8 = _nt_rval
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:ary_eligible_expression][start_index] = r0

    r0
  end

  module AryAccess0
    def expression
      elements[0]
    end

  end

  module AryAccess1
    def msb
      elements[2]
    end

    def lsb
      elements[3]
    end

  end

  module AryAccess2
    def a
      elements[0]
    end

    def brackets
      elements[2]
    end
  end

  def _nt_ary_access
    start_index = index
    if node_cache[:ary_access].has_key?(index)
      cached = node_cache[:ary_access][index]
      if cached
        node_cache[:ary_access][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_ary_eligible_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          if (match_len = has_terminal?('[', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\'[\'')
            r6 = nil
          end
          s5 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s5 << r7
            if r7
              i10, s10 = index, []
              r11 = _nt_expression
              s10 << r11
              if r11
                s12, i12 = [], index
                loop do
                  r13 = _nt_space
                  if r13
                    s12 << r13
                  else
                    break
                  end
                end
                r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                s10 << r12
                if r12
                  if (match_len = has_terminal?(':', false, index))
                    r14 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\':\'')
                    r14 = nil
                  end
                  s10 << r14
                  if r14
                    s15, i15 = [], index
                    loop do
                      r16 = _nt_space
                      if r16
                        s15 << r16
                      else
                        break
                      end
                    end
                    r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                    s10 << r15
                  end
                end
              end
              if s10.last
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                r10.extend(AryAccess0)
              else
                @index = i10
                r10 = nil
              end
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s5 << r9
              if r9
                r17 = _nt_expression
                s5 << r17
                if r17
                  s18, i18 = [], index
                  loop do
                    r19 = _nt_space
                    if r19
                      s18 << r19
                    else
                      break
                    end
                  end
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                  s5 << r18
                  if r18
                    if (match_len = has_terminal?(']', false, index))
                      r20 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\']\'')
                      r20 = nil
                    end
                    s5 << r20
                    if r20
                      s21, i21 = [], index
                      loop do
                        r22 = _nt_space
                        if r22
                          s21 << r22
                        else
                          break
                        end
                      end
                      r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                      s5 << r21
                    end
                  end
                end
              end
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(AryAccess1)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::AryAccessSyntaxNode,input, i0...index, s0)
      r0.extend(AryAccess2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ary_access][start_index] = r0

    r0
  end

  module PostDec0
    def rval
      elements[0]
    end

  end

  def _nt_post_dec
    start_index = index
    if node_cache[:post_dec].has_key?(index)
      cached = node_cache[:post_dec][index]
      if cached
        node_cache[:post_dec][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_rval
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('--', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'--\'')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::PostDecrementExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(PostDec0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:post_dec][start_index] = r0

    r0
  end

  module PostInc0
    def rval
      elements[0]
    end

  end

  def _nt_post_inc
    start_index = index
    if node_cache[:post_inc].has_key?(index)
      cached = node_cache[:post_inc][index]
      if cached
        node_cache[:post_inc][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_rval
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('++', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'++\'')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::PostIncrementExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(PostInc0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:post_inc][start_index] = r0

    r0
  end

  module BitsCast0
    def expr
      elements[4]
    end

  end

  def _nt_bits_cast
    start_index = index
    if node_cache[:bits_cast].has_key?(index)
      cached = node_cache[:bits_cast][index]
      if cached
        node_cache[:bits_cast][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('$bits', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'$bits\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('(', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            i7 = index
            r8 = _nt_csr_register_access_expression
            if r8
              r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
              r7 = r8
            else
              r9 = _nt_enum_ref
              if r9
                r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                r7 = r9
              else
                r10 = _nt_expression
                if r10
                  r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                  r7 = r10
                else
                  @index = i7
                  r7 = nil
                end
              end
            end
            s0 << r7
            if r7
              s11, i11 = [], index
              loop do
                r12 = _nt_space
                if r12
                  s11 << r12
                else
                  break
                end
              end
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              s0 << r11
              if r11
                if (match_len = has_terminal?(')', false, index))
                  r13 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r13 = nil
                end
                s0 << r13
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::BitsCastSyntaxNode,input, i0...index, s0)
      r0.extend(BitsCast0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bits_cast][start_index] = r0

    r0
  end

  module UnaryExpression0
    def expression
      elements[3]
    end
  end

  module UnaryExpression1
    def first
      elements[2]
    end

    def rest
      elements[3]
    end

  end

  module UnaryExpression2
    def expression
      elements[4]
    end

  end

  module UnaryExpression3
    def expression
      elements[4]
    end

  end

  module UnaryExpression4
    def user_type_name
      elements[4]
    end

  end

  module UnaryExpression5
    def user_type_name
      elements[4]
    end

  end

  module UnaryExpression6
    def user_type_name
      elements[4]
    end

  end

  module UnaryExpression7
    def user_type_name
      elements[4]
    end

    def expression
      elements[8]
    end

  end

  module UnaryExpression8
    def expression
      elements[4]
    end

  end

  module UnaryExpression9
    def o
      elements[0]
    end

    def e
      elements[2]
    end
  end

  def _nt_unary_expression
    start_index = index
    if node_cache[:unary_expression].has_key?(index)
      cached = node_cache[:unary_expression][index]
      if cached
        node_cache[:unary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('[', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'[\'')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        r5 = _nt_expression
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s7 << r8
            if r8
              if (match_len = has_terminal?(',', false, index))
                r10 = true
                @index += match_len
              else
                terminal_parse_failure('\',\'')
                r10 = nil
              end
              s7 << r10
              if r10
                s11, i11 = [], index
                loop do
                  r12 = _nt_space
                  if r12
                    s11 << r12
                  else
                    break
                  end
                end
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                s7 << r11
                if r11
                  r13 = _nt_expression
                  s7 << r13
                end
              end
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(UnaryExpression0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
          if r6
            s14, i14 = [], index
            loop do
              r15 = _nt_space
              if r15
                s14 << r15
              else
                break
              end
            end
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
            s1 << r14
            if r14
              if (match_len = has_terminal?(']', false, index))
                r16 = true
                @index += match_len
              else
                terminal_parse_failure('\']\'')
                r16 = nil
              end
              s1 << r16
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::ArrayLiteralSyntaxNode,input, i1...index, s1)
      r1.extend(UnaryExpression1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r17 = _nt_ary_access
      if r17
        r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
        r0 = r17
      else
        i18, s18 = index, []
        if (match_len = has_terminal?('$width', false, index))
          r19 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'$width\'')
          r19 = nil
        end
        s18 << r19
        if r19
          s20, i20 = [], index
          loop do
            r21 = _nt_space
            if r21
              s20 << r21
            else
              break
            end
          end
          r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
          s18 << r20
          if r20
            if (match_len = has_terminal?('(', false, index))
              r22 = true
              @index += match_len
            else
              terminal_parse_failure('\'(\'')
              r22 = nil
            end
            s18 << r22
            if r22
              s23, i23 = [], index
              loop do
                r24 = _nt_space
                if r24
                  s23 << r24
                else
                  break
                end
              end
              r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
              s18 << r23
              if r23
                r25 = _nt_expression
                s18 << r25
                if r25
                  s26, i26 = [], index
                  loop do
                    r27 = _nt_space
                    if r27
                      s26 << r27
                    else
                      break
                    end
                  end
                  r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                  s18 << r26
                  if r26
                    if (match_len = has_terminal?(')', false, index))
                      r28 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\')\'')
                      r28 = nil
                    end
                    s18 << r28
                  end
                end
              end
            end
          end
        end
        if s18.last
          r18 = instantiate_node(Idl::WidthRevealSyntaxNode,input, i18...index, s18)
          r18.extend(UnaryExpression2)
        else
          @index = i18
          r18 = nil
        end
        if r18
          r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
          r0 = r18
        else
          i29, s29 = index, []
          if (match_len = has_terminal?('$signed', false, index))
            r30 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'$signed\'')
            r30 = nil
          end
          s29 << r30
          if r30
            s31, i31 = [], index
            loop do
              r32 = _nt_space
              if r32
                s31 << r32
              else
                break
              end
            end
            r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
            s29 << r31
            if r31
              if (match_len = has_terminal?('(', false, index))
                r33 = true
                @index += match_len
              else
                terminal_parse_failure('\'(\'')
                r33 = nil
              end
              s29 << r33
              if r33
                s34, i34 = [], index
                loop do
                  r35 = _nt_space
                  if r35
                    s34 << r35
                  else
                    break
                  end
                end
                r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                s29 << r34
                if r34
                  r36 = _nt_expression
                  s29 << r36
                  if r36
                    s37, i37 = [], index
                    loop do
                      r38 = _nt_space
                      if r38
                        s37 << r38
                      else
                        break
                      end
                    end
                    r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                    s29 << r37
                    if r37
                      if (match_len = has_terminal?(')', false, index))
                        r39 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\')\'')
                        r39 = nil
                      end
                      s29 << r39
                    end
                  end
                end
              end
            end
          end
          if s29.last
            r29 = instantiate_node(Idl::SignCastSyntaxNode,input, i29...index, s29)
            r29.extend(UnaryExpression3)
          else
            @index = i29
            r29 = nil
          end
          if r29
            r29 = SyntaxNode.new(input, (index-1)...index) if r29 == true
            r0 = r29
          else
            r40 = _nt_bits_cast
            if r40
              r40 = SyntaxNode.new(input, (index-1)...index) if r40 == true
              r0 = r40
            else
              i41, s41 = index, []
              if (match_len = has_terminal?('$enum_size', false, index))
                r42 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'$enum_size\'')
                r42 = nil
              end
              s41 << r42
              if r42
                s43, i43 = [], index
                loop do
                  r44 = _nt_space
                  if r44
                    s43 << r44
                  else
                    break
                  end
                end
                r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
                s41 << r43
                if r43
                  if (match_len = has_terminal?('(', false, index))
                    r45 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'(\'')
                    r45 = nil
                  end
                  s41 << r45
                  if r45
                    s46, i46 = [], index
                    loop do
                      r47 = _nt_space
                      if r47
                        s46 << r47
                      else
                        break
                      end
                    end
                    r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                    s41 << r46
                    if r46
                      r48 = _nt_user_type_name
                      s41 << r48
                      if r48
                        if (match_len = has_terminal?(')', false, index))
                          r49 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\')\'')
                          r49 = nil
                        end
                        s41 << r49
                      end
                    end
                  end
                end
              end
              if s41.last
                r41 = instantiate_node(Idl::EnumSizeSyntaxNode,input, i41...index, s41)
                r41.extend(UnaryExpression4)
              else
                @index = i41
                r41 = nil
              end
              if r41
                r41 = SyntaxNode.new(input, (index-1)...index) if r41 == true
                r0 = r41
              else
                i50, s50 = index, []
                if (match_len = has_terminal?('$enum_element_size', false, index))
                  r51 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'$enum_element_size\'')
                  r51 = nil
                end
                s50 << r51
                if r51
                  s52, i52 = [], index
                  loop do
                    r53 = _nt_space
                    if r53
                      s52 << r53
                    else
                      break
                    end
                  end
                  r52 = instantiate_node(SyntaxNode,input, i52...index, s52)
                  s50 << r52
                  if r52
                    if (match_len = has_terminal?('(', false, index))
                      r54 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'(\'')
                      r54 = nil
                    end
                    s50 << r54
                    if r54
                      s55, i55 = [], index
                      loop do
                        r56 = _nt_space
                        if r56
                          s55 << r56
                        else
                          break
                        end
                      end
                      r55 = instantiate_node(SyntaxNode,input, i55...index, s55)
                      s50 << r55
                      if r55
                        r57 = _nt_user_type_name
                        s50 << r57
                        if r57
                          if (match_len = has_terminal?(')', false, index))
                            r58 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\')\'')
                            r58 = nil
                          end
                          s50 << r58
                        end
                      end
                    end
                  end
                end
                if s50.last
                  r50 = instantiate_node(Idl::EnumElementSizeSyntaxNode,input, i50...index, s50)
                  r50.extend(UnaryExpression5)
                else
                  @index = i50
                  r50 = nil
                end
                if r50
                  r50 = SyntaxNode.new(input, (index-1)...index) if r50 == true
                  r0 = r50
                else
                  i59, s59 = index, []
                  if (match_len = has_terminal?('$enum_to_a', false, index))
                    r60 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'$enum_to_a\'')
                    r60 = nil
                  end
                  s59 << r60
                  if r60
                    s61, i61 = [], index
                    loop do
                      r62 = _nt_space
                      if r62
                        s61 << r62
                      else
                        break
                      end
                    end
                    r61 = instantiate_node(SyntaxNode,input, i61...index, s61)
                    s59 << r61
                    if r61
                      if (match_len = has_terminal?('(', false, index))
                        r63 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'(\'')
                        r63 = nil
                      end
                      s59 << r63
                      if r63
                        s64, i64 = [], index
                        loop do
                          r65 = _nt_space
                          if r65
                            s64 << r65
                          else
                            break
                          end
                        end
                        r64 = instantiate_node(SyntaxNode,input, i64...index, s64)
                        s59 << r64
                        if r64
                          r66 = _nt_user_type_name
                          s59 << r66
                          if r66
                            if (match_len = has_terminal?(')', false, index))
                              r67 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\')\'')
                              r67 = nil
                            end
                            s59 << r67
                          end
                        end
                      end
                    end
                  end
                  if s59.last
                    r59 = instantiate_node(Idl::EnumArrayCastSyntaxNode,input, i59...index, s59)
                    r59.extend(UnaryExpression6)
                  else
                    @index = i59
                    r59 = nil
                  end
                  if r59
                    r59 = SyntaxNode.new(input, (index-1)...index) if r59 == true
                    r0 = r59
                  else
                    i68, s68 = index, []
                    if (match_len = has_terminal?('$enum', false, index))
                      r69 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'$enum\'')
                      r69 = nil
                    end
                    s68 << r69
                    if r69
                      s70, i70 = [], index
                      loop do
                        r71 = _nt_space
                        if r71
                          s70 << r71
                        else
                          break
                        end
                      end
                      r70 = instantiate_node(SyntaxNode,input, i70...index, s70)
                      s68 << r70
                      if r70
                        if (match_len = has_terminal?('(', false, index))
                          r72 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'(\'')
                          r72 = nil
                        end
                        s68 << r72
                        if r72
                          s73, i73 = [], index
                          loop do
                            r74 = _nt_space
                            if r74
                              s73 << r74
                            else
                              break
                            end
                          end
                          r73 = instantiate_node(SyntaxNode,input, i73...index, s73)
                          s68 << r73
                          if r73
                            r75 = _nt_user_type_name
                            s68 << r75
                            if r75
                              s76, i76 = [], index
                              loop do
                                r77 = _nt_space
                                if r77
                                  s76 << r77
                                else
                                  break
                                end
                              end
                              r76 = instantiate_node(SyntaxNode,input, i76...index, s76)
                              s68 << r76
                              if r76
                                if (match_len = has_terminal?(',', false, index))
                                  r78 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\',\'')
                                  r78 = nil
                                end
                                s68 << r78
                                if r78
                                  s79, i79 = [], index
                                  loop do
                                    r80 = _nt_space
                                    if r80
                                      s79 << r80
                                    else
                                      break
                                    end
                                  end
                                  r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
                                  s68 << r79
                                  if r79
                                    r81 = _nt_expression
                                    s68 << r81
                                    if r81
                                      s82, i82 = [], index
                                      loop do
                                        r83 = _nt_space
                                        if r83
                                          s82 << r83
                                        else
                                          break
                                        end
                                      end
                                      r82 = instantiate_node(SyntaxNode,input, i82...index, s82)
                                      s68 << r82
                                      if r82
                                        if (match_len = has_terminal?(')', false, index))
                                          r84 = true
                                          @index += match_len
                                        else
                                          terminal_parse_failure('\')\'')
                                          r84 = nil
                                        end
                                        s68 << r84
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                    if s68.last
                      r68 = instantiate_node(Idl::EnumCastSyntaxNode,input, i68...index, s68)
                      r68.extend(UnaryExpression7)
                    else
                      @index = i68
                      r68 = nil
                    end
                    if r68
                      r68 = SyntaxNode.new(input, (index-1)...index) if r68 == true
                      r0 = r68
                    else
                      i85, s85 = index, []
                      if (match_len = has_terminal?('$array_size', false, index))
                        r86 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'$array_size\'')
                        r86 = nil
                      end
                      s85 << r86
                      if r86
                        s87, i87 = [], index
                        loop do
                          r88 = _nt_space
                          if r88
                            s87 << r88
                          else
                            break
                          end
                        end
                        r87 = instantiate_node(SyntaxNode,input, i87...index, s87)
                        s85 << r87
                        if r87
                          if (match_len = has_terminal?('(', false, index))
                            r89 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'(\'')
                            r89 = nil
                          end
                          s85 << r89
                          if r89
                            s90, i90 = [], index
                            loop do
                              r91 = _nt_space
                              if r91
                                s90 << r91
                              else
                                break
                              end
                            end
                            r90 = instantiate_node(SyntaxNode,input, i90...index, s90)
                            s85 << r90
                            if r90
                              r92 = _nt_expression
                              s85 << r92
                              if r92
                                if (match_len = has_terminal?(')', false, index))
                                  r93 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\')\'')
                                  r93 = nil
                                end
                                s85 << r93
                              end
                            end
                          end
                        end
                      end
                      if s85.last
                        r85 = instantiate_node(Idl::ArraySizeSyntaxNode,input, i85...index, s85)
                        r85.extend(UnaryExpression8)
                      else
                        @index = i85
                        r85 = nil
                      end
                      if r85
                        r85 = SyntaxNode.new(input, (index-1)...index) if r85 == true
                        r0 = r85
                      else
                        r94 = _nt_paren_expression
                        if r94
                          r94 = SyntaxNode.new(input, (index-1)...index) if r94 == true
                          r0 = r94
                        else
                          i95, s95 = index, []
                          r96 = _nt_unary_operator
                          s95 << r96
                          if r96
                            s97, i97 = [], index
                            loop do
                              r98 = _nt_space
                              if r98
                                s97 << r98
                              else
                                break
                              end
                            end
                            r97 = instantiate_node(SyntaxNode,input, i97...index, s97)
                            s95 << r97
                            if r97
                              r99 = _nt_expression
                              s95 << r99
                            end
                          end
                          if s95.last
                            r95 = instantiate_node(Idl::UnaryOperatorExpressionSyntaxNode,input, i95...index, s95)
                            r95.extend(UnaryExpression9)
                          else
                            @index = i95
                            r95 = nil
                          end
                          if r95
                            r95 = SyntaxNode.new(input, (index-1)...index) if r95 == true
                            r0 = r95
                          else
                            r100 = _nt_post_dec
                            if r100
                              r100 = SyntaxNode.new(input, (index-1)...index) if r100 == true
                              r0 = r100
                            else
                              r101 = _nt_post_inc
                              if r101
                                r101 = SyntaxNode.new(input, (index-1)...index) if r101 == true
                                r0 = r101
                              else
                                r102 = _nt_replication_expression
                                if r102
                                  r102 = SyntaxNode.new(input, (index-1)...index) if r102 == true
                                  r0 = r102
                                else
                                  r103 = _nt_concatenation_expression
                                  if r103
                                    r103 = SyntaxNode.new(input, (index-1)...index) if r103 == true
                                    r0 = r103
                                  else
                                    r104 = _nt_field_access_expression
                                    if r104
                                      r104 = SyntaxNode.new(input, (index-1)...index) if r104 == true
                                      r0 = r104
                                    else
                                      r105 = _nt_function_call
                                      if r105
                                        r105 = SyntaxNode.new(input, (index-1)...index) if r105 == true
                                        r0 = r105
                                      else
                                        r106 = _nt_csr_field_access_expression
                                        if r106
                                          r106 = SyntaxNode.new(input, (index-1)...index) if r106 == true
                                          r0 = r106
                                        else
                                          r107 = _nt_enum_ref
                                          if r107
                                            r107 = SyntaxNode.new(input, (index-1)...index) if r107 == true
                                            r0 = r107
                                          else
                                            r108 = _nt_rval
                                            if r108
                                              r108 = SyntaxNode.new(input, (index-1)...index) if r108 == true
                                              r0 = r108
                                            else
                                              @index = i0
                                              r0 = nil
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:unary_expression][start_index] = r0

    r0
  end

  module TernaryExpression0
    def e
      elements[0]
    end

    def t
      elements[4]
    end

    def f
      elements[8]
    end
  end

  def _nt_ternary_expression
    start_index = index
    if node_cache[:ternary_expression].has_key?(index)
      cached = node_cache[:ternary_expression][index]
      if cached
        node_cache[:ternary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_p9_binary_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('?', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'?\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(':', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\':\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    r13 = _nt_expression
                    s0 << r13
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::TernaryOperatorExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(TernaryExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ternary_expression][start_index] = r0

    r0
  end

  module TemplateSafeTernaryExpression0
    def e
      elements[0]
    end

    def t
      elements[4]
    end

    def f
      elements[8]
    end
  end

  def _nt_template_safe_ternary_expression
    start_index = index
    if node_cache[:template_safe_ternary_expression].has_key?(index)
      cached = node_cache[:template_safe_ternary_expression][index]
      if cached
        node_cache[:template_safe_ternary_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_template_safe_p9_binary_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('?', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'?\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(':', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\':\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    r13 = _nt_expression
                    s0 << r13
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::TernaryOperatorExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(TemplateSafeTernaryExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:template_safe_ternary_expression][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        node_cache[:expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_ternary_expression
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_p9_binary_expression
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  def _nt_template_safe_expression
    start_index = index
    if node_cache[:template_safe_expression].has_key?(index)
      cached = node_cache[:template_safe_expression][index]
      if cached
        node_cache[:template_safe_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_template_safe_ternary_expression
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_template_safe_p9_binary_expression
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:template_safe_expression][start_index] = r0

    r0
  end

  module FunctionCallTemplateArguments0
    def arg
      elements[3]
    end
  end

  module FunctionCallTemplateArguments1
    def first
      elements[0]
    end

    def rest
      elements[1]
    end
  end

  def _nt_function_call_template_arguments
    start_index = index
    if node_cache[:function_call_template_arguments].has_key?(index)
      cached = node_cache[:function_call_template_arguments][index]
      if cached
        node_cache[:function_call_template_arguments][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_template_safe_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s3 << r4
        if r4
          if (match_len = has_terminal?(',', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\',\'')
            r6 = nil
          end
          s3 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s3 << r7
            if r7
              r9 = _nt_template_safe_expression
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(FunctionCallTemplateArguments0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionCallTemplateArguments1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call_template_arguments][start_index] = r0

    r0
  end

  module FunctionCall0
    def csr
      elements[0]
    end

    def expression
      elements[8]
    end

  end

  module FunctionCall1
    def csr
      elements[0]
    end

    def function_name
      elements[4]
    end

    def function_arg_list
      elements[8]
    end

  end

  module FunctionCall2
    def targs
      elements[3]
    end

  end

  module FunctionCall3
    def function_name
      elements[0]
    end

    def t
      elements[1]
    end

    def function_arg_list
      elements[5]
    end

  end

  def _nt_function_call
    start_index = index
    if node_cache[:function_call].has_key?(index)
      cached = node_cache[:function_call][index]
      if cached
        node_cache[:function_call][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_csr_register_access_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if (match_len = has_terminal?('.', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r5 = nil
        end
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
          if r6
            if (match_len = has_terminal?('sw_write', false, index))
              r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'sw_write\'')
              r8 = nil
            end
            s1 << r8
            if r8
              s9, i9 = [], index
              loop do
                r10 = _nt_space
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s1 << r9
              if r9
                if (match_len = has_terminal?('(', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'(\'')
                  r11 = nil
                end
                s1 << r11
                if r11
                  s12, i12 = [], index
                  loop do
                    r13 = _nt_space
                    if r13
                      s12 << r13
                    else
                      break
                    end
                  end
                  r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                  s1 << r12
                  if r12
                    r14 = _nt_expression
                    s1 << r14
                    if r14
                      s15, i15 = [], index
                      loop do
                        r16 = _nt_space
                        if r16
                          s15 << r16
                        else
                          break
                        end
                      end
                      r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                      s1 << r15
                      if r15
                        if (match_len = has_terminal?(')', false, index))
                          r17 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\')\'')
                          r17 = nil
                        end
                        s1 << r17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::CsrSoftwareWriteSyntaxNode,input, i1...index, s1)
      r1.extend(FunctionCall0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i18, s18 = index, []
      r19 = _nt_csr_register_access_expression
      s18 << r19
      if r19
        s20, i20 = [], index
        loop do
          r21 = _nt_space
          if r21
            s20 << r21
          else
            break
          end
        end
        r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
        s18 << r20
        if r20
          if (match_len = has_terminal?('.', false, index))
            r22 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r22 = nil
          end
          s18 << r22
          if r22
            s23, i23 = [], index
            loop do
              r24 = _nt_space
              if r24
                s23 << r24
              else
                break
              end
            end
            r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
            s18 << r23
            if r23
              r25 = _nt_function_name
              s18 << r25
              if r25
                s26, i26 = [], index
                loop do
                  r27 = _nt_space
                  if r27
                    s26 << r27
                  else
                    break
                  end
                end
                r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                s18 << r26
                if r26
                  if (match_len = has_terminal?('(', false, index))
                    r28 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'(\'')
                    r28 = nil
                  end
                  s18 << r28
                  if r28
                    s29, i29 = [], index
                    loop do
                      r30 = _nt_space
                      if r30
                        s29 << r30
                      else
                        break
                      end
                    end
                    r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                    s18 << r29
                    if r29
                      r31 = _nt_function_arg_list
                      s18 << r31
                      if r31
                        s32, i32 = [], index
                        loop do
                          r33 = _nt_space
                          if r33
                            s32 << r33
                          else
                            break
                          end
                        end
                        r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                        s18 << r32
                        if r32
                          if (match_len = has_terminal?(')', false, index))
                            r34 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\')\'')
                            r34 = nil
                          end
                          s18 << r34
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s18.last
        r18 = instantiate_node(Idl::CsrFunctionCallSyntaxNode,input, i18...index, s18)
        r18.extend(FunctionCall1)
      else
        @index = i18
        r18 = nil
      end
      if r18
        r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
        r0 = r18
      else
        i35, s35 = index, []
        r36 = _nt_function_name
        s35 << r36
        if r36
          i38, s38 = index, []
          s39, i39 = [], index
          loop do
            r40 = _nt_space
            if r40
              s39 << r40
            else
              break
            end
          end
          r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
          s38 << r39
          if r39
            if (match_len = has_terminal?('<', false, index))
              r41 = true
              @index += match_len
            else
              terminal_parse_failure('\'<\'')
              r41 = nil
            end
            s38 << r41
            if r41
              s42, i42 = [], index
              loop do
                r43 = _nt_space
                if r43
                  s42 << r43
                else
                  break
                end
              end
              r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
              s38 << r42
              if r42
                r44 = _nt_function_call_template_arguments
                s38 << r44
                if r44
                  s45, i45 = [], index
                  loop do
                    r46 = _nt_space
                    if r46
                      s45 << r46
                    else
                      break
                    end
                  end
                  r45 = instantiate_node(SyntaxNode,input, i45...index, s45)
                  s38 << r45
                  if r45
                    if (match_len = has_terminal?('>', false, index))
                      r47 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'>\'')
                      r47 = nil
                    end
                    s38 << r47
                  end
                end
              end
            end
          end
          if s38.last
            r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
            r38.extend(FunctionCall2)
          else
            @index = i38
            r38 = nil
          end
          if r38
            r37 = r38
          else
            r37 = instantiate_node(SyntaxNode,input, index...index)
          end
          s35 << r37
          if r37
            s48, i48 = [], index
            loop do
              r49 = _nt_space
              if r49
                s48 << r49
              else
                break
              end
            end
            r48 = instantiate_node(SyntaxNode,input, i48...index, s48)
            s35 << r48
            if r48
              if (match_len = has_terminal?('(', false, index))
                r50 = true
                @index += match_len
              else
                terminal_parse_failure('\'(\'')
                r50 = nil
              end
              s35 << r50
              if r50
                s51, i51 = [], index
                loop do
                  r52 = _nt_space
                  if r52
                    s51 << r52
                  else
                    break
                  end
                end
                r51 = instantiate_node(SyntaxNode,input, i51...index, s51)
                s35 << r51
                if r51
                  r53 = _nt_function_arg_list
                  s35 << r53
                  if r53
                    s54, i54 = [], index
                    loop do
                      r55 = _nt_space
                      if r55
                        s54 << r55
                      else
                        break
                      end
                    end
                    r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
                    s35 << r54
                    if r54
                      if (match_len = has_terminal?(')', false, index))
                        r56 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\')\'')
                        r56 = nil
                      end
                      s35 << r56
                    end
                  end
                end
              end
            end
          end
        end
        if s35.last
          r35 = instantiate_node(Idl::FunctionCallExpressionSyntaxNode,input, i35...index, s35)
          r35.extend(FunctionCall3)
        else
          @index = i35
          r35 = nil
        end
        if r35
          r35 = SyntaxNode.new(input, (index-1)...index) if r35 == true
          r0 = r35
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:function_call][start_index] = r0

    r0
  end

  module FunctionName0
  end

  def _nt_function_name
    start_index = index
    if node_cache[:function_name].has_key?(index)
      cached = node_cache[:function_name][index]
      if cached
        node_cache[:function_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_reserved
    if r2
      @index = i1
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z]')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[a-zA-Z0-9_]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?('?', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\'?\'')
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_name][start_index] = r0

    r0
  end

  module FunctionArgList0
    def expression
      elements[3]
    end
  end

  module FunctionArgList1
    def first
      elements[0]
    end

    def rest
      elements[1]
    end
  end

  def _nt_function_arg_list
    start_index = index
    if node_cache[:function_arg_list].has_key?(index)
      cached = node_cache[:function_arg_list][index]
      if cached
        node_cache[:function_arg_list][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_expression
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          r6 = _nt_space
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s4 << r5
        if r5
          if (match_len = has_terminal?(',', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\',\'')
            r7 = nil
          end
          s4 << r7
          if r7
            s8, i8 = [], index
            loop do
              r9 = _nt_space
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s4 << r8
            if r8
              r10 = _nt_expression
              s4 << r10
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(FunctionArgList0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionArgList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_arg_list][start_index] = r0

    r0
  end

  module BodyFunctionDefinition0
  end

  module BodyFunctionDefinition1
    def single_declaration
      elements[3]
    end
  end

  module BodyFunctionDefinition2
    def first
      elements[2]
    end

    def rest
      elements[3]
    end

  end

  module BodyFunctionDefinition3
    def type_name
      elements[3]
    end
  end

  module BodyFunctionDefinition4
    def first
      elements[2]
    end

    def rest
      elements[3]
    end

  end

  module BodyFunctionDefinition5
    def single_declaration
      elements[3]
    end
  end

  module BodyFunctionDefinition6
    def first
      elements[2]
    end

    def rest
      elements[3]
    end

  end

  module BodyFunctionDefinition7
    def function_body
      elements[4]
    end

  end

  module BodyFunctionDefinition8
    def type
      elements[0]
    end

    def function_name
      elements[3]
    end

    def targs
      elements[7]
    end

    def ret
      elements[8]
    end

    def args
      elements[9]
    end

    def desc
      elements[14]
    end

    def body_block
      elements[17]
    end

  end

  def _nt_body_function_definition
    start_index = index
    if node_cache[:body_function_definition].has_key?(index)
      cached = node_cache[:body_function_definition][index]
      if cached
        node_cache[:body_function_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    if (match_len = has_terminal?('external', false, index))
      r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'external\'')
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        r5 = _nt_space
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(BodyFunctionDefinition0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('function', false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'function\'')
        r6 = nil
      end
      s0 << r6
      if r6
        s7, i7 = [], index
        loop do
          r8 = _nt_space
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s0 << r7
        if r7
          r9 = _nt_function_name
          s0 << r9
          if r9
            s10, i10 = [], index
            loop do
              r11 = _nt_space
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s0 << r10
            if r10
              if (match_len = has_terminal?('{', false, index))
                r12 = true
                @index += match_len
              else
                terminal_parse_failure('\'{\'')
                r12 = nil
              end
              s0 << r12
              if r12
                s13, i13 = [], index
                loop do
                  r14 = _nt_space
                  if r14
                    s13 << r14
                  else
                    break
                  end
                end
                r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                s0 << r13
                if r13
                  i16, s16 = index, []
                  if (match_len = has_terminal?('template', false, index))
                    r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'template\'')
                    r17 = nil
                  end
                  s16 << r17
                  if r17
                    s18, i18 = [], index
                    loop do
                      r19 = _nt_space
                      if r19
                        s18 << r19
                      else
                        break
                      end
                    end
                    if s18.empty?
                      @index = i18
                      r18 = nil
                    else
                      r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                    end
                    s16 << r18
                    if r18
                      r20 = _nt_single_declaration
                      s16 << r20
                      if r20
                        s21, i21 = [], index
                        loop do
                          i22, s22 = index, []
                          s23, i23 = [], index
                          loop do
                            r24 = _nt_space
                            if r24
                              s23 << r24
                            else
                              break
                            end
                          end
                          r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                          s22 << r23
                          if r23
                            if (match_len = has_terminal?(',', false, index))
                              r25 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\',\'')
                              r25 = nil
                            end
                            s22 << r25
                            if r25
                              s26, i26 = [], index
                              loop do
                                r27 = _nt_space
                                if r27
                                  s26 << r27
                                else
                                  break
                                end
                              end
                              r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                              s22 << r26
                              if r26
                                r28 = _nt_single_declaration
                                s22 << r28
                              end
                            end
                          end
                          if s22.last
                            r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                            r22.extend(BodyFunctionDefinition1)
                          else
                            @index = i22
                            r22 = nil
                          end
                          if r22
                            s21 << r22
                          else
                            break
                          end
                        end
                        r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                        s16 << r21
                        if r21
                          s29, i29 = [], index
                          loop do
                            r30 = _nt_space
                            if r30
                              s29 << r30
                            else
                              break
                            end
                          end
                          if s29.empty?
                            @index = i29
                            r29 = nil
                          else
                            r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                          end
                          s16 << r29
                        end
                      end
                    end
                  end
                  if s16.last
                    r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                    r16.extend(BodyFunctionDefinition2)
                  else
                    @index = i16
                    r16 = nil
                  end
                  if r16
                    r15 = r16
                  else
                    r15 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r15
                  if r15
                    i32, s32 = index, []
                    if (match_len = has_terminal?('returns', false, index))
                      r33 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'returns\'')
                      r33 = nil
                    end
                    s32 << r33
                    if r33
                      s34, i34 = [], index
                      loop do
                        r35 = _nt_space
                        if r35
                          s34 << r35
                        else
                          break
                        end
                      end
                      if s34.empty?
                        @index = i34
                        r34 = nil
                      else
                        r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                      end
                      s32 << r34
                      if r34
                        r36 = _nt_type_name
                        s32 << r36
                        if r36
                          s37, i37 = [], index
                          loop do
                            i38, s38 = index, []
                            s39, i39 = [], index
                            loop do
                              r40 = _nt_space
                              if r40
                                s39 << r40
                              else
                                break
                              end
                            end
                            r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                            s38 << r39
                            if r39
                              if (match_len = has_terminal?(',', false, index))
                                r41 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\',\'')
                                r41 = nil
                              end
                              s38 << r41
                              if r41
                                s42, i42 = [], index
                                loop do
                                  r43 = _nt_space
                                  if r43
                                    s42 << r43
                                  else
                                    break
                                  end
                                end
                                r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                s38 << r42
                                if r42
                                  r44 = _nt_type_name
                                  s38 << r44
                                end
                              end
                            end
                            if s38.last
                              r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                              r38.extend(BodyFunctionDefinition3)
                            else
                              @index = i38
                              r38 = nil
                            end
                            if r38
                              s37 << r38
                            else
                              break
                            end
                          end
                          r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                          s32 << r37
                          if r37
                            s45, i45 = [], index
                            loop do
                              r46 = _nt_space
                              if r46
                                s45 << r46
                              else
                                break
                              end
                            end
                            if s45.empty?
                              @index = i45
                              r45 = nil
                            else
                              r45 = instantiate_node(SyntaxNode,input, i45...index, s45)
                            end
                            s32 << r45
                          end
                        end
                      end
                    end
                    if s32.last
                      r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                      r32.extend(BodyFunctionDefinition4)
                    else
                      @index = i32
                      r32 = nil
                    end
                    if r32
                      r31 = r32
                    else
                      r31 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r31
                    if r31
                      i48, s48 = index, []
                      if (match_len = has_terminal?('arguments', false, index))
                        r49 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'arguments\'')
                        r49 = nil
                      end
                      s48 << r49
                      if r49
                        s50, i50 = [], index
                        loop do
                          r51 = _nt_space
                          if r51
                            s50 << r51
                          else
                            break
                          end
                        end
                        if s50.empty?
                          @index = i50
                          r50 = nil
                        else
                          r50 = instantiate_node(SyntaxNode,input, i50...index, s50)
                        end
                        s48 << r50
                        if r50
                          r52 = _nt_single_declaration
                          s48 << r52
                          if r52
                            s53, i53 = [], index
                            loop do
                              i54, s54 = index, []
                              s55, i55 = [], index
                              loop do
                                r56 = _nt_space
                                if r56
                                  s55 << r56
                                else
                                  break
                                end
                              end
                              r55 = instantiate_node(SyntaxNode,input, i55...index, s55)
                              s54 << r55
                              if r55
                                if (match_len = has_terminal?(',', false, index))
                                  r57 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\',\'')
                                  r57 = nil
                                end
                                s54 << r57
                                if r57
                                  s58, i58 = [], index
                                  loop do
                                    r59 = _nt_space
                                    if r59
                                      s58 << r59
                                    else
                                      break
                                    end
                                  end
                                  r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                                  s54 << r58
                                  if r58
                                    r60 = _nt_single_declaration
                                    s54 << r60
                                  end
                                end
                              end
                              if s54.last
                                r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
                                r54.extend(BodyFunctionDefinition5)
                              else
                                @index = i54
                                r54 = nil
                              end
                              if r54
                                s53 << r54
                              else
                                break
                              end
                            end
                            r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
                            s48 << r53
                            if r53
                              s61, i61 = [], index
                              loop do
                                r62 = _nt_space
                                if r62
                                  s61 << r62
                                else
                                  break
                                end
                              end
                              if s61.empty?
                                @index = i61
                                r61 = nil
                              else
                                r61 = instantiate_node(SyntaxNode,input, i61...index, s61)
                              end
                              s48 << r61
                            end
                          end
                        end
                      end
                      if s48.last
                        r48 = instantiate_node(SyntaxNode,input, i48...index, s48)
                        r48.extend(BodyFunctionDefinition6)
                      else
                        @index = i48
                        r48 = nil
                      end
                      if r48
                        r47 = r48
                      else
                        r47 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r47
                      if r47
                        if (match_len = has_terminal?('description', false, index))
                          r63 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'description\'')
                          r63 = nil
                        end
                        s0 << r63
                        if r63
                          s64, i64 = [], index
                          loop do
                            r65 = _nt_space
                            if r65
                              s64 << r65
                            else
                              break
                            end
                          end
                          r64 = instantiate_node(SyntaxNode,input, i64...index, s64)
                          s0 << r64
                          if r64
                            if (match_len = has_terminal?('{', false, index))
                              r66 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'{\'')
                              r66 = nil
                            end
                            s0 << r66
                            if r66
                              s67, i67 = [], index
                              loop do
                                r68 = _nt_space
                                if r68
                                  s67 << r68
                                else
                                  break
                                end
                              end
                              r67 = instantiate_node(SyntaxNode,input, i67...index, s67)
                              s0 << r67
                              if r67
                                s69, i69 = [], index
                                loop do
                                  i70 = index
                                  if has_terminal?(@regexps[gr = '\A[^}]'] ||= Regexp.new(gr), :regexp, index)
                                    r71 = true
                                    @index += 1
                                  else
                                    terminal_parse_failure('[^}]')
                                    r71 = nil
                                  end
                                  if r71
                                    r71 = SyntaxNode.new(input, (index-1)...index) if r71 == true
                                    r70 = r71
                                  else
                                    if (match_len = has_terminal?("\n", false, index))
                                      r72 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"\\n"')
                                      r72 = nil
                                    end
                                    if r72
                                      r72 = SyntaxNode.new(input, (index-1)...index) if r72 == true
                                      r70 = r72
                                    else
                                      @index = i70
                                      r70 = nil
                                    end
                                  end
                                  if r70
                                    s69 << r70
                                  else
                                    break
                                  end
                                end
                                if s69.empty?
                                  @index = i69
                                  r69 = nil
                                else
                                  r69 = instantiate_node(SyntaxNode,input, i69...index, s69)
                                end
                                s0 << r69
                                if r69
                                  if (match_len = has_terminal?('}', false, index))
                                    r73 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\'}\'')
                                    r73 = nil
                                  end
                                  s0 << r73
                                  if r73
                                    s74, i74 = [], index
                                    loop do
                                      r75 = _nt_space
                                      if r75
                                        s74 << r75
                                      else
                                        break
                                      end
                                    end
                                    r74 = instantiate_node(SyntaxNode,input, i74...index, s74)
                                    s0 << r74
                                    if r74
                                      i76, s76 = index, []
                                      if (match_len = has_terminal?('body', false, index))
                                        r77 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                        @index += match_len
                                      else
                                        terminal_parse_failure('\'body\'')
                                        r77 = nil
                                      end
                                      s76 << r77
                                      if r77
                                        s78, i78 = [], index
                                        loop do
                                          r79 = _nt_space
                                          if r79
                                            s78 << r79
                                          else
                                            break
                                          end
                                        end
                                        r78 = instantiate_node(SyntaxNode,input, i78...index, s78)
                                        s76 << r78
                                        if r78
                                          if (match_len = has_terminal?('{', false, index))
                                            r80 = true
                                            @index += match_len
                                          else
                                            terminal_parse_failure('\'{\'')
                                            r80 = nil
                                          end
                                          s76 << r80
                                          if r80
                                            s81, i81 = [], index
                                            loop do
                                              r82 = _nt_space
                                              if r82
                                                s81 << r82
                                              else
                                                break
                                              end
                                            end
                                            r81 = instantiate_node(SyntaxNode,input, i81...index, s81)
                                            s76 << r81
                                            if r81
                                              r83 = _nt_function_body
                                              s76 << r83
                                              if r83
                                                s84, i84 = [], index
                                                loop do
                                                  r85 = _nt_space
                                                  if r85
                                                    s84 << r85
                                                  else
                                                    break
                                                  end
                                                end
                                                r84 = instantiate_node(SyntaxNode,input, i84...index, s84)
                                                s76 << r84
                                                if r84
                                                  if (match_len = has_terminal?('}', false, index))
                                                    r86 = true
                                                    @index += match_len
                                                  else
                                                    terminal_parse_failure('\'}\'')
                                                    r86 = nil
                                                  end
                                                  s76 << r86
                                                  if r86
                                                    s87, i87 = [], index
                                                    loop do
                                                      r88 = _nt_space
                                                      if r88
                                                        s87 << r88
                                                      else
                                                        break
                                                      end
                                                    end
                                                    r87 = instantiate_node(SyntaxNode,input, i87...index, s87)
                                                    s76 << r87
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                      if s76.last
                                        r76 = instantiate_node(SyntaxNode,input, i76...index, s76)
                                        r76.extend(BodyFunctionDefinition7)
                                      else
                                        @index = i76
                                        r76 = nil
                                      end
                                      s0 << r76
                                      if r76
                                        if (match_len = has_terminal?('}', false, index))
                                          r89 = true
                                          @index += match_len
                                        else
                                          terminal_parse_failure('\'}\'')
                                          r89 = nil
                                        end
                                        s0 << r89
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::FunctionDefSyntaxNode,input, i0...index, s0)
      r0.extend(BodyFunctionDefinition8)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:body_function_definition][start_index] = r0

    r0
  end

  module BuiltinFunctionDefinition0
    def first
      elements[2]
    end

  end

  module BuiltinFunctionDefinition1
    def single_declaration
      elements[3]
    end
  end

  module BuiltinFunctionDefinition2
    def first
      elements[2]
    end

    def rest
      elements[3]
    end

  end

  module BuiltinFunctionDefinition3
    def type
      elements[0]
    end

    def function_name
      elements[4]
    end

    def ret
      elements[8]
    end

    def args
      elements[9]
    end

    def desc
      elements[14]
    end

  end

  def _nt_builtin_function_definition
    start_index = index
    if node_cache[:builtin_function_definition].has_key?(index)
      cached = node_cache[:builtin_function_definition][index]
      if cached
        node_cache[:builtin_function_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if (match_len = has_terminal?('builtin', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'builtin\'')
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      if (match_len = has_terminal?('generated', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'generated\'')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        r5 = _nt_space
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s0 << r4
      if r4
        if (match_len = has_terminal?('function', false, index))
          r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'function\'')
          r6 = nil
        end
        s0 << r6
        if r6
          s7, i7 = [], index
          loop do
            r8 = _nt_space
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s0 << r7
          if r7
            r9 = _nt_function_name
            s0 << r9
            if r9
              s10, i10 = [], index
              loop do
                r11 = _nt_space
                if r11
                  s10 << r11
                else
                  break
                end
              end
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              s0 << r10
              if r10
                if (match_len = has_terminal?('{', false, index))
                  r12 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'{\'')
                  r12 = nil
                end
                s0 << r12
                if r12
                  s13, i13 = [], index
                  loop do
                    r14 = _nt_space
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  s0 << r13
                  if r13
                    i16, s16 = index, []
                    if (match_len = has_terminal?('returns', false, index))
                      r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'returns\'')
                      r17 = nil
                    end
                    s16 << r17
                    if r17
                      s18, i18 = [], index
                      loop do
                        r19 = _nt_space
                        if r19
                          s18 << r19
                        else
                          break
                        end
                      end
                      if s18.empty?
                        @index = i18
                        r18 = nil
                      else
                        r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                      end
                      s16 << r18
                      if r18
                        r20 = _nt_type_name
                        s16 << r20
                        if r20
                          s21, i21 = [], index
                          loop do
                            r22 = _nt_space
                            if r22
                              s21 << r22
                            else
                              break
                            end
                          end
                          if s21.empty?
                            @index = i21
                            r21 = nil
                          else
                            r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                          end
                          s16 << r21
                        end
                      end
                    end
                    if s16.last
                      r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                      r16.extend(BuiltinFunctionDefinition0)
                    else
                      @index = i16
                      r16 = nil
                    end
                    if r16
                      r15 = r16
                    else
                      r15 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r15
                    if r15
                      i24, s24 = index, []
                      if (match_len = has_terminal?('arguments', false, index))
                        r25 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'arguments\'')
                        r25 = nil
                      end
                      s24 << r25
                      if r25
                        s26, i26 = [], index
                        loop do
                          r27 = _nt_space
                          if r27
                            s26 << r27
                          else
                            break
                          end
                        end
                        if s26.empty?
                          @index = i26
                          r26 = nil
                        else
                          r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                        end
                        s24 << r26
                        if r26
                          r28 = _nt_single_declaration
                          s24 << r28
                          if r28
                            s29, i29 = [], index
                            loop do
                              i30, s30 = index, []
                              s31, i31 = [], index
                              loop do
                                r32 = _nt_space
                                if r32
                                  s31 << r32
                                else
                                  break
                                end
                              end
                              r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                              s30 << r31
                              if r31
                                if (match_len = has_terminal?(',', false, index))
                                  r33 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\',\'')
                                  r33 = nil
                                end
                                s30 << r33
                                if r33
                                  s34, i34 = [], index
                                  loop do
                                    r35 = _nt_space
                                    if r35
                                      s34 << r35
                                    else
                                      break
                                    end
                                  end
                                  r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                                  s30 << r34
                                  if r34
                                    r36 = _nt_single_declaration
                                    s30 << r36
                                  end
                                end
                              end
                              if s30.last
                                r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                r30.extend(BuiltinFunctionDefinition1)
                              else
                                @index = i30
                                r30 = nil
                              end
                              if r30
                                s29 << r30
                              else
                                break
                              end
                            end
                            r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                            s24 << r29
                            if r29
                              s37, i37 = [], index
                              loop do
                                r38 = _nt_space
                                if r38
                                  s37 << r38
                                else
                                  break
                                end
                              end
                              if s37.empty?
                                @index = i37
                                r37 = nil
                              else
                                r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                              end
                              s24 << r37
                            end
                          end
                        end
                      end
                      if s24.last
                        r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                        r24.extend(BuiltinFunctionDefinition2)
                      else
                        @index = i24
                        r24 = nil
                      end
                      if r24
                        r23 = r24
                      else
                        r23 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r23
                      if r23
                        if (match_len = has_terminal?('description', false, index))
                          r39 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'description\'')
                          r39 = nil
                        end
                        s0 << r39
                        if r39
                          s40, i40 = [], index
                          loop do
                            r41 = _nt_space
                            if r41
                              s40 << r41
                            else
                              break
                            end
                          end
                          r40 = instantiate_node(SyntaxNode,input, i40...index, s40)
                          s0 << r40
                          if r40
                            if (match_len = has_terminal?('{', false, index))
                              r42 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'{\'')
                              r42 = nil
                            end
                            s0 << r42
                            if r42
                              s43, i43 = [], index
                              loop do
                                r44 = _nt_space
                                if r44
                                  s43 << r44
                                else
                                  break
                                end
                              end
                              r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
                              s0 << r43
                              if r43
                                s45, i45 = [], index
                                loop do
                                  i46 = index
                                  if has_terminal?(@regexps[gr = '\A[^}]'] ||= Regexp.new(gr), :regexp, index)
                                    r47 = true
                                    @index += 1
                                  else
                                    terminal_parse_failure('[^}]')
                                    r47 = nil
                                  end
                                  if r47
                                    r47 = SyntaxNode.new(input, (index-1)...index) if r47 == true
                                    r46 = r47
                                  else
                                    if (match_len = has_terminal?("\n", false, index))
                                      r48 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"\\n"')
                                      r48 = nil
                                    end
                                    if r48
                                      r48 = SyntaxNode.new(input, (index-1)...index) if r48 == true
                                      r46 = r48
                                    else
                                      @index = i46
                                      r46 = nil
                                    end
                                  end
                                  if r46
                                    s45 << r46
                                  else
                                    break
                                  end
                                end
                                if s45.empty?
                                  @index = i45
                                  r45 = nil
                                else
                                  r45 = instantiate_node(SyntaxNode,input, i45...index, s45)
                                end
                                s0 << r45
                                if r45
                                  if (match_len = has_terminal?('}', false, index))
                                    r49 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\'}\'')
                                    r49 = nil
                                  end
                                  s0 << r49
                                  if r49
                                    s50, i50 = [], index
                                    loop do
                                      r51 = _nt_space
                                      if r51
                                        s50 << r51
                                      else
                                        break
                                      end
                                    end
                                    r50 = instantiate_node(SyntaxNode,input, i50...index, s50)
                                    s0 << r50
                                    if r50
                                      if (match_len = has_terminal?('}', false, index))
                                        r52 = true
                                        @index += match_len
                                      else
                                        terminal_parse_failure('\'}\'')
                                        r52 = nil
                                      end
                                      s0 << r52
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::FunctionDefSyntaxNode,input, i0...index, s0)
      r0.extend(BuiltinFunctionDefinition3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:builtin_function_definition][start_index] = r0

    r0
  end

  module Fetch0
    def function_body
      elements[4]
    end

  end

  def _nt_fetch
    start_index = index
    if node_cache[:fetch].has_key?(index)
      cached = node_cache[:fetch][index]
      if cached
        node_cache[:fetch][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('fetch', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'fetch\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('{', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'{\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_function_body
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?('}', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'}\'')
                  r10 = nil
                end
                s0 << r10
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::FetchSyntaxNode,input, i0...index, s0)
      r0.extend(Fetch0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:fetch][start_index] = r0

    r0
  end

  def _nt_function_definition
    start_index = index
    if node_cache[:function_definition].has_key?(index)
      cached = node_cache[:function_definition][index]
      if cached
        node_cache[:function_definition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_builtin_function_definition
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_body_function_definition
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:function_definition][start_index] = r0

    r0
  end

  def _nt_rval
    start_index = index
    if node_cache[:rval].has_key?(index)
      cached = node_cache[:rval][index]
      if cached
        node_cache[:rval][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_int
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_builtin_read_only_var
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_builtin_read_write_var
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_string
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_id
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:rval][start_index] = r0

    r0
  end

  module Assignment0
    def var
      elements[2]
    end

  end

  module Assignment1
    def first
      elements[1]
    end

    def rest
      elements[3]
    end

    def function_call
      elements[8]
    end
  end

  module Assignment2
    def rval
      elements[4]
    end
  end

  module Assignment3
    def var
      elements[0]
    end

    def rval
      elements[4]
    end
  end

  module Assignment4
    def csr_field_access_expression
      elements[0]
    end

    def rval
      elements[4]
    end
  end

  module Assignment5
    def id
      elements[0]
    end

    def field_name
      elements[4]
    end

    def rval
      elements[8]
    end
  end

  module Assignment6
    def var
      elements[0]
    end

    def msb
      elements[4]
    end

    def lsb
      elements[8]
    end

    def rval
      elements[14]
    end
  end

  module Assignment7
    def var
      elements[0]
    end

    def idx
      elements[4]
    end

    def rval
      elements[10]
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        node_cache[:assignment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('(', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r2 = nil
    end
    s1 << r2
    if r2
      i3 = index
      r4 = _nt_id
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r3 = r4
      else
        r5 = _nt_dontcare_lvalue
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r3 = r5
        else
          @index = i3
          r3 = nil
        end
      end
      s1 << r3
      if r3
        s6, i6 = [], index
        loop do
          r7 = _nt_space
          if r7
            s6 << r7
          else
            break
          end
        end
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        s1 << r6
        if r6
          s8, i8 = [], index
          loop do
            i9, s9 = index, []
            if (match_len = has_terminal?(',', false, index))
              r10 = true
              @index += match_len
            else
              terminal_parse_failure('\',\'')
              r10 = nil
            end
            s9 << r10
            if r10
              s11, i11 = [], index
              loop do
                r12 = _nt_space
                if r12
                  s11 << r12
                else
                  break
                end
              end
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              s9 << r11
              if r11
                i13 = index
                r14 = _nt_id
                if r14
                  r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                  r13 = r14
                else
                  r15 = _nt_dontcare_lvalue
                  if r15
                    r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                    r13 = r15
                  else
                    @index = i13
                    r13 = nil
                  end
                end
                s9 << r13
                if r13
                  s16, i16 = [], index
                  loop do
                    r17 = _nt_space
                    if r17
                      s16 << r17
                    else
                      break
                    end
                  end
                  r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                  s9 << r16
                end
              end
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(Assignment0)
            else
              @index = i9
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          if s8.empty?
            @index = i8
            r8 = nil
          else
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          end
          s1 << r8
          if r8
            if (match_len = has_terminal?(')', false, index))
              r18 = true
              @index += match_len
            else
              terminal_parse_failure('\')\'')
              r18 = nil
            end
            s1 << r18
            if r18
              s19, i19 = [], index
              loop do
                r20 = _nt_space
                if r20
                  s19 << r20
                else
                  break
                end
              end
              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
              s1 << r19
              if r19
                if (match_len = has_terminal?('=', false, index))
                  r21 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'=\'')
                  r21 = nil
                end
                s1 << r21
                if r21
                  s22, i22 = [], index
                  loop do
                    r23 = _nt_space
                    if r23
                      s22 << r23
                    else
                      break
                    end
                  end
                  r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                  s1 << r22
                  if r22
                    r24 = _nt_function_call
                    s1 << r24
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::MultiVariableAssignmentSyntaxNode,input, i1...index, s1)
      r1.extend(Assignment1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r25 = _nt_single_declaration_with_initialization
      if r25
        r25 = SyntaxNode.new(input, (index-1)...index) if r25 == true
        r0 = r25
      else
        i26, s26 = index, []
        if (match_len = has_terminal?('$pc', false, index))
          r27 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'$pc\'')
          r27 = nil
        end
        s26 << r27
        if r27
          s28, i28 = [], index
          loop do
            r29 = _nt_space
            if r29
              s28 << r29
            else
              break
            end
          end
          r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
          s26 << r28
          if r28
            if (match_len = has_terminal?('=', false, index))
              r30 = true
              @index += match_len
            else
              terminal_parse_failure('\'=\'')
              r30 = nil
            end
            s26 << r30
            if r30
              s31, i31 = [], index
              loop do
                r32 = _nt_space
                if r32
                  s31 << r32
                else
                  break
                end
              end
              r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
              s26 << r31
              if r31
                r33 = _nt_expression
                s26 << r33
              end
            end
          end
        end
        if s26.last
          r26 = instantiate_node(Idl::PcAssignmentSyntaxNode,input, i26...index, s26)
          r26.extend(Assignment2)
        else
          @index = i26
          r26 = nil
        end
        if r26
          r26 = SyntaxNode.new(input, (index-1)...index) if r26 == true
          r0 = r26
        else
          i34, s34 = index, []
          r35 = _nt_id
          s34 << r35
          if r35
            s36, i36 = [], index
            loop do
              r37 = _nt_space
              if r37
                s36 << r37
              else
                break
              end
            end
            r36 = instantiate_node(SyntaxNode,input, i36...index, s36)
            s34 << r36
            if r36
              if (match_len = has_terminal?('=', false, index))
                r38 = true
                @index += match_len
              else
                terminal_parse_failure('\'=\'')
                r38 = nil
              end
              s34 << r38
              if r38
                s39, i39 = [], index
                loop do
                  r40 = _nt_space
                  if r40
                    s39 << r40
                  else
                    break
                  end
                end
                r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                s34 << r39
                if r39
                  r41 = _nt_expression
                  s34 << r41
                end
              end
            end
          end
          if s34.last
            r34 = instantiate_node(Idl::VariableAssignmentSyntaxNode,input, i34...index, s34)
            r34.extend(Assignment3)
          else
            @index = i34
            r34 = nil
          end
          if r34
            r34 = SyntaxNode.new(input, (index-1)...index) if r34 == true
            r0 = r34
          else
            i42, s42 = index, []
            r43 = _nt_csr_field_access_expression
            s42 << r43
            if r43
              s44, i44 = [], index
              loop do
                r45 = _nt_space
                if r45
                  s44 << r45
                else
                  break
                end
              end
              r44 = instantiate_node(SyntaxNode,input, i44...index, s44)
              s42 << r44
              if r44
                if (match_len = has_terminal?('=', false, index))
                  r46 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'=\'')
                  r46 = nil
                end
                s42 << r46
                if r46
                  s47, i47 = [], index
                  loop do
                    r48 = _nt_space
                    if r48
                      s47 << r48
                    else
                      break
                    end
                  end
                  r47 = instantiate_node(SyntaxNode,input, i47...index, s47)
                  s42 << r47
                  if r47
                    r49 = _nt_expression
                    s42 << r49
                  end
                end
              end
            end
            if s42.last
              r42 = instantiate_node(Idl::CsrFieldAssignmentSyntaxNode,input, i42...index, s42)
              r42.extend(Assignment4)
            else
              @index = i42
              r42 = nil
            end
            if r42
              r42 = SyntaxNode.new(input, (index-1)...index) if r42 == true
              r0 = r42
            else
              i50, s50 = index, []
              r51 = _nt_id
              s50 << r51
              if r51
                s52, i52 = [], index
                loop do
                  r53 = _nt_space
                  if r53
                    s52 << r53
                  else
                    break
                  end
                end
                r52 = instantiate_node(SyntaxNode,input, i52...index, s52)
                s50 << r52
                if r52
                  if (match_len = has_terminal?('.', false, index))
                    r54 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'.\'')
                    r54 = nil
                  end
                  s50 << r54
                  if r54
                    s55, i55 = [], index
                    loop do
                      r56 = _nt_space
                      if r56
                        s55 << r56
                      else
                        break
                      end
                    end
                    r55 = instantiate_node(SyntaxNode,input, i55...index, s55)
                    s50 << r55
                    if r55
                      r57 = _nt_field_name
                      s50 << r57
                      if r57
                        s58, i58 = [], index
                        loop do
                          r59 = _nt_space
                          if r59
                            s58 << r59
                          else
                            break
                          end
                        end
                        r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                        s50 << r58
                        if r58
                          if (match_len = has_terminal?('=', false, index))
                            r60 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'=\'')
                            r60 = nil
                          end
                          s50 << r60
                          if r60
                            s61, i61 = [], index
                            loop do
                              r62 = _nt_space
                              if r62
                                s61 << r62
                              else
                                break
                              end
                            end
                            r61 = instantiate_node(SyntaxNode,input, i61...index, s61)
                            s50 << r61
                            if r61
                              r63 = _nt_expression
                              s50 << r63
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if s50.last
                r50 = instantiate_node(Idl::FieldAssignmentSyntaxNode,input, i50...index, s50)
                r50.extend(Assignment5)
              else
                @index = i50
                r50 = nil
              end
              if r50
                r50 = SyntaxNode.new(input, (index-1)...index) if r50 == true
                r0 = r50
              else
                i64, s64 = index, []
                r65 = _nt_var_write
                s64 << r65
                if r65
                  s66, i66 = [], index
                  loop do
                    r67 = _nt_space
                    if r67
                      s66 << r67
                    else
                      break
                    end
                  end
                  r66 = instantiate_node(SyntaxNode,input, i66...index, s66)
                  s64 << r66
                  if r66
                    if (match_len = has_terminal?('[', false, index))
                      r68 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'[\'')
                      r68 = nil
                    end
                    s64 << r68
                    if r68
                      s69, i69 = [], index
                      loop do
                        r70 = _nt_space
                        if r70
                          s69 << r70
                        else
                          break
                        end
                      end
                      r69 = instantiate_node(SyntaxNode,input, i69...index, s69)
                      s64 << r69
                      if r69
                        r71 = _nt_expression
                        s64 << r71
                        if r71
                          s72, i72 = [], index
                          loop do
                            r73 = _nt_space
                            if r73
                              s72 << r73
                            else
                              break
                            end
                          end
                          r72 = instantiate_node(SyntaxNode,input, i72...index, s72)
                          s64 << r72
                          if r72
                            if (match_len = has_terminal?(':', false, index))
                              r74 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\':\'')
                              r74 = nil
                            end
                            s64 << r74
                            if r74
                              s75, i75 = [], index
                              loop do
                                r76 = _nt_space
                                if r76
                                  s75 << r76
                                else
                                  break
                                end
                              end
                              r75 = instantiate_node(SyntaxNode,input, i75...index, s75)
                              s64 << r75
                              if r75
                                r77 = _nt_expression
                                s64 << r77
                                if r77
                                  s78, i78 = [], index
                                  loop do
                                    r79 = _nt_space
                                    if r79
                                      s78 << r79
                                    else
                                      break
                                    end
                                  end
                                  r78 = instantiate_node(SyntaxNode,input, i78...index, s78)
                                  s64 << r78
                                  if r78
                                    if (match_len = has_terminal?(']', false, index))
                                      r80 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\']\'')
                                      r80 = nil
                                    end
                                    s64 << r80
                                    if r80
                                      s81, i81 = [], index
                                      loop do
                                        r82 = _nt_space
                                        if r82
                                          s81 << r82
                                        else
                                          break
                                        end
                                      end
                                      r81 = instantiate_node(SyntaxNode,input, i81...index, s81)
                                      s64 << r81
                                      if r81
                                        if (match_len = has_terminal?('=', false, index))
                                          r83 = true
                                          @index += match_len
                                        else
                                          terminal_parse_failure('\'=\'')
                                          r83 = nil
                                        end
                                        s64 << r83
                                        if r83
                                          s84, i84 = [], index
                                          loop do
                                            r85 = _nt_space
                                            if r85
                                              s84 << r85
                                            else
                                              break
                                            end
                                          end
                                          r84 = instantiate_node(SyntaxNode,input, i84...index, s84)
                                          s64 << r84
                                          if r84
                                            r86 = _nt_expression
                                            s64 << r86
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
                if s64.last
                  r64 = instantiate_node(Idl::AryRangeAssignmentSyntaxNode,input, i64...index, s64)
                  r64.extend(Assignment6)
                else
                  @index = i64
                  r64 = nil
                end
                if r64
                  r64 = SyntaxNode.new(input, (index-1)...index) if r64 == true
                  r0 = r64
                else
                  i87, s87 = index, []
                  r88 = _nt_var_write
                  s87 << r88
                  if r88
                    s89, i89 = [], index
                    loop do
                      r90 = _nt_space
                      if r90
                        s89 << r90
                      else
                        break
                      end
                    end
                    r89 = instantiate_node(SyntaxNode,input, i89...index, s89)
                    s87 << r89
                    if r89
                      if (match_len = has_terminal?('[', false, index))
                        r91 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'[\'')
                        r91 = nil
                      end
                      s87 << r91
                      if r91
                        s92, i92 = [], index
                        loop do
                          r93 = _nt_space
                          if r93
                            s92 << r93
                          else
                            break
                          end
                        end
                        r92 = instantiate_node(SyntaxNode,input, i92...index, s92)
                        s87 << r92
                        if r92
                          r94 = _nt_expression
                          s87 << r94
                          if r94
                            s95, i95 = [], index
                            loop do
                              r96 = _nt_space
                              if r96
                                s95 << r96
                              else
                                break
                              end
                            end
                            r95 = instantiate_node(SyntaxNode,input, i95...index, s95)
                            s87 << r95
                            if r95
                              if (match_len = has_terminal?(']', false, index))
                                r97 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\']\'')
                                r97 = nil
                              end
                              s87 << r97
                              if r97
                                s98, i98 = [], index
                                loop do
                                  r99 = _nt_space
                                  if r99
                                    s98 << r99
                                  else
                                    break
                                  end
                                end
                                r98 = instantiate_node(SyntaxNode,input, i98...index, s98)
                                s87 << r98
                                if r98
                                  if (match_len = has_terminal?('=', false, index))
                                    r100 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\'=\'')
                                    r100 = nil
                                  end
                                  s87 << r100
                                  if r100
                                    s101, i101 = [], index
                                    loop do
                                      r102 = _nt_space
                                      if r102
                                        s101 << r102
                                      else
                                        break
                                      end
                                    end
                                    r101 = instantiate_node(SyntaxNode,input, i101...index, s101)
                                    s87 << r101
                                    if r101
                                      r103 = _nt_expression
                                      s87 << r103
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                  if s87.last
                    r87 = instantiate_node(Idl::AryElementAssignmentSyntaxNode,input, i87...index, s87)
                    r87.extend(Assignment7)
                  else
                    @index = i87
                    r87 = nil
                  end
                  if r87
                    r87 = SyntaxNode.new(input, (index-1)...index) if r87 == true
                    r0 = r87
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  module ArySizeDecl0
    def expression
      elements[2]
    end

  end

  def _nt_ary_size_decl
    start_index = index
    if node_cache[:ary_size_decl].has_key?(index)
      cached = node_cache[:ary_size_decl][index]
      if cached
        node_cache[:ary_size_decl][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('[', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'[\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_expression
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?(']', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\']\'')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArySizeDecl0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ary_size_decl][start_index] = r0

    r0
  end

  module SingleDeclarationWithInitialization0
    def type_name
      elements[0]
    end

    def id
      elements[2]
    end

    def ary_size
      elements[4]
    end

    def rval
      elements[8]
    end
  end

  def _nt_single_declaration_with_initialization
    start_index = index
    if node_cache[:single_declaration_with_initialization].has_key?(index)
      cached = node_cache[:single_declaration_with_initialization][index]
      if cached
        node_cache[:single_declaration_with_initialization][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_id
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r8 = _nt_ary_size_decl
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r7
            if r7
              s9, i9 = [], index
              loop do
                r10 = _nt_space
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s0 << r9
              if r9
                if (match_len = has_terminal?('=', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'=\'')
                  r11 = nil
                end
                s0 << r11
                if r11
                  s12, i12 = [], index
                  loop do
                    r13 = _nt_space
                    if r13
                      s12 << r13
                    else
                      break
                    end
                  end
                  r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                  s0 << r12
                  if r12
                    r14 = _nt_expression
                    s0 << r14
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::VariableDeclarationWithInitializationSyntaxNode,input, i0...index, s0)
      r0.extend(SingleDeclarationWithInitialization0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_declaration_with_initialization][start_index] = r0

    r0
  end

  module Declaration0
    def id
      elements[3]
    end
  end

  module Declaration1
    def type_name
      elements[0]
    end

    def first
      elements[2]
    end

    def rest
      elements[4]
    end

  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        node_cache[:declaration][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_type_name
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        r5 = _nt_id
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
          if r6
            s8, i8 = [], index
            loop do
              i9, s9 = index, []
              s10, i10 = [], index
              loop do
                r11 = _nt_space
                if r11
                  s10 << r11
                else
                  break
                end
              end
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              s9 << r10
              if r10
                if (match_len = has_terminal?(',', false, index))
                  r12 = true
                  @index += match_len
                else
                  terminal_parse_failure('\',\'')
                  r12 = nil
                end
                s9 << r12
                if r12
                  s13, i13 = [], index
                  loop do
                    r14 = _nt_space
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  s9 << r13
                  if r13
                    r15 = _nt_id
                    s9 << r15
                  end
                end
              end
              if s9.last
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                r9.extend(Declaration0)
              else
                @index = i9
                r9 = nil
              end
              if r9
                s8 << r9
              else
                break
              end
            end
            if s8.empty?
              @index = i8
              r8 = nil
            else
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            end
            s1 << r8
            if r8
              s16, i16 = [], index
              loop do
                r17 = _nt_space
                if r17
                  s16 << r17
                else
                  break
                end
              end
              r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
              s1 << r16
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::MultiVariableDeclarationSyntaxNode,input, i1...index, s1)
      r1.extend(Declaration1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r18 = _nt_single_declaration
      if r18
        r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
        r0 = r18
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  module SingleDeclaration0
    def ary_size_decl
      elements[1]
    end
  end

  module SingleDeclaration1
    def type_name
      elements[0]
    end

    def id
      elements[2]
    end

    def ary_size
      elements[3]
    end
  end

  def _nt_single_declaration
    start_index = index
    if node_cache[:single_declaration].has_key?(index)
      cached = node_cache[:single_declaration][index]
      if cached
        node_cache[:single_declaration][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_id
        s0 << r4
        if r4
          i6, s6 = index, []
          s7, i7 = [], index
          loop do
            r8 = _nt_space
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s6 << r7
          if r7
            r9 = _nt_ary_size_decl
            s6 << r9
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(SingleDeclaration0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::VariableDeclarationSyntaxNode,input, i0...index, s0)
      r0.extend(SingleDeclaration1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_declaration][start_index] = r0

    r0
  end

  module Statement0
    def a
      elements[0]
    end

    def expression
      elements[4]
    end

  end

  module Statement1
    def a
      elements[0]
    end

  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        node_cache[:statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i2 = index
    r3 = _nt_function_call
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      r4 = _nt_assignment
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    s1 << r2
    if r2
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      s1 << r5
      if r5
        if (match_len = has_terminal?('if', false, index))
          r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'if\'')
          r7 = nil
        end
        s1 << r7
        if r7
          s8, i8 = [], index
          loop do
            r9 = _nt_space
            if r9
              s8 << r9
            else
              break
            end
          end
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          s1 << r8
          if r8
            r10 = _nt_expression
            s1 << r10
            if r10
              s11, i11 = [], index
              loop do
                r12 = _nt_space
                if r12
                  s11 << r12
                else
                  break
                end
              end
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              s1 << r11
              if r11
                if (match_len = has_terminal?(';', false, index))
                  r13 = true
                  @index += match_len
                else
                  terminal_parse_failure('\';\'')
                  r13 = nil
                end
                s1 << r13
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::ConditionalStatementSyntaxNode,input, i1...index, s1)
      r1.extend(Statement0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i14, s14 = index, []
      i15 = index
      r16 = _nt_function_call
      if r16
        r16 = SyntaxNode.new(input, (index-1)...index) if r16 == true
        r15 = r16
      else
        r17 = _nt_assignment
        if r17
          r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
          r15 = r17
        else
          r18 = _nt_declaration
          if r18
            r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
            r15 = r18
          else
            @index = i15
            r15 = nil
          end
        end
      end
      s14 << r15
      if r15
        s19, i19 = [], index
        loop do
          r20 = _nt_space
          if r20
            s19 << r20
          else
            break
          end
        end
        r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
        s14 << r19
        if r19
          if (match_len = has_terminal?(';', false, index))
            r21 = true
            @index += match_len
          else
            terminal_parse_failure('\';\'')
            r21 = nil
          end
          s14 << r21
        end
      end
      if s14.last
        r14 = instantiate_node(Idl::StatementSyntaxNode,input, i14...index, s14)
        r14.extend(Statement1)
      else
        @index = i14
        r14 = nil
      end
      if r14
        r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
        r0 = r14
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  def _nt_dontcare_lvalue
    start_index = index
    if node_cache[:dontcare_lvalue].has_key?(index)
      cached = node_cache[:dontcare_lvalue][index]
      if cached
        node_cache[:dontcare_lvalue][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('-', false, index))
      r0 = instantiate_node(Idl::DontCareLvalueSyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r0 = nil
    end

    node_cache[:dontcare_lvalue][start_index] = r0

    r0
  end

  def _nt_dontcare_return
    start_index = index
    if node_cache[:dontcare_return].has_key?(index)
      cached = node_cache[:dontcare_return][index]
      if cached
        node_cache[:dontcare_return][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('-', false, index))
      r0 = instantiate_node(Idl::DontCareReturnSyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r0 = nil
    end

    node_cache[:dontcare_return][start_index] = r0

    r0
  end

  module ReturnExpression0
    def e
      elements[1]
    end
  end

  module ReturnExpression1
    def e
      elements[3]
    end
  end

  module ReturnExpression2
    def first
      elements[0]
    end

    def rest
      elements[1]
    end
  end

  module ReturnExpression3
    def vals
      elements[1]
    end
  end

  def _nt_return_expression
    start_index = index
    if node_cache[:return_expression].has_key?(index)
      cached = node_cache[:return_expression][index]
      if cached
        node_cache[:return_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('return', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'return\'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2, s2 = index, []
      i4, s4 = index, []
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s4 << r5
      if r5
        i7 = index
        r8 = _nt_expression
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r7 = r8
        else
          r9 = _nt_dontcare_return
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r7 = r9
          else
            @index = i7
            r7 = nil
          end
        end
        s4 << r7
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(ReturnExpression0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r3
      if r3
        s10, i10 = [], index
        loop do
          i11, s11 = index, []
          s12, i12 = [], index
          loop do
            r13 = _nt_space
            if r13
              s12 << r13
            else
              break
            end
          end
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
          s11 << r12
          if r12
            if (match_len = has_terminal?(',', false, index))
              r14 = true
              @index += match_len
            else
              terminal_parse_failure('\',\'')
              r14 = nil
            end
            s11 << r14
            if r14
              s15, i15 = [], index
              loop do
                r16 = _nt_space
                if r16
                  s15 << r16
                else
                  break
                end
              end
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              s11 << r15
              if r15
                i17 = index
                r18 = _nt_expression
                if r18
                  r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
                  r17 = r18
                else
                  r19 = _nt_dontcare_return
                  if r19
                    r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
                    r17 = r19
                  else
                    @index = i17
                    r17 = nil
                  end
                end
                s11 << r17
              end
            end
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(ReturnExpression1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            s10 << r11
          else
            break
          end
        end
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        s2 << r10
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(ReturnExpression2)
      else
        @index = i2
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Idl::ReturnExpressionSyntaxNode,input, i0...index, s0)
      r0.extend(ReturnExpression3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:return_expression][start_index] = r0

    r0
  end

  module ReturnStatement0
    def return_expression
      elements[0]
    end

    def expression
      elements[4]
    end

  end

  module ReturnStatement1
    def return_expression
      elements[0]
    end

  end

  def _nt_return_statement
    start_index = index
    if node_cache[:return_statement].has_key?(index)
      cached = node_cache[:return_statement][index]
      if cached
        node_cache[:return_statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_return_expression
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if (match_len = has_terminal?('if', false, index))
          r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'if\'')
          r5 = nil
        end
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
            if r8
              s9, i9 = [], index
              loop do
                r10 = _nt_space
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s1 << r9
              if r9
                if (match_len = has_terminal?(';', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\';\'')
                  r11 = nil
                end
                s1 << r11
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::ConditionalReturnStatementSyntaxNode,input, i1...index, s1)
      r1.extend(ReturnStatement0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i12, s12 = index, []
      r13 = _nt_return_expression
      s12 << r13
      if r13
        s14, i14 = [], index
        loop do
          r15 = _nt_space
          if r15
            s14 << r15
          else
            break
          end
        end
        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        s12 << r14
        if r14
          if (match_len = has_terminal?(';', false, index))
            r16 = true
            @index += match_len
          else
            terminal_parse_failure('\';\'')
            r16 = nil
          end
          s12 << r16
        end
      end
      if s12.last
        r12 = instantiate_node(Idl::ReturnStatementSyntaxNode,input, i12...index, s12)
        r12.extend(ReturnStatement1)
      else
        @index = i12
        r12 = nil
      end
      if r12
        r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:return_statement][start_index] = r0

    r0
  end

  module FunctionIfBlock0
    def e
      elements[0]
    end

  end

  module FunctionIfBlock1
    def e
      elements[0]
    end

  end

  module FunctionIfBlock2
    def expression
      elements[7]
    end

    def body
      elements[13]
    end

  end

  module FunctionIfBlock3
    def e
      elements[0]
    end

  end

  module FunctionIfBlock4
    def body
      elements[5]
    end

  end

  module FunctionIfBlock5
    def if_cond
      elements[4]
    end

    def if_body
      elements[10]
    end

    def elseifs
      elements[12]
    end

    def final_else
      elements[13]
    end
  end

  def _nt_function_if_block
    start_index = index
    if node_cache[:function_if_block].has_key?(index)
      cached = node_cache[:function_if_block][index]
      if cached
        node_cache[:function_if_block][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('if', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'if\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('(', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(')', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    if (match_len = has_terminal?('{', false, index))
                      r13 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'{\'')
                      r13 = nil
                    end
                    s0 << r13
                    if r13
                      s14, i14 = [], index
                      loop do
                        r15 = _nt_space
                        if r15
                          s14 << r15
                        else
                          break
                        end
                      end
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                      s0 << r14
                      if r14
                        s16, i16 = [], index
                        loop do
                          i17, s17 = index, []
                          i18 = index
                          r19 = _nt_statement
                          if r19
                            r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
                            r18 = r19
                          else
                            r20 = _nt_return_statement
                            if r20
                              r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
                              r18 = r20
                            else
                              r21 = _nt_function_if_block
                              if r21
                                r21 = SyntaxNode.new(input, (index-1)...index) if r21 == true
                                r18 = r21
                              else
                                r22 = _nt_for_loop
                                if r22
                                  r22 = SyntaxNode.new(input, (index-1)...index) if r22 == true
                                  r18 = r22
                                else
                                  @index = i18
                                  r18 = nil
                                end
                              end
                            end
                          end
                          s17 << r18
                          if r18
                            s23, i23 = [], index
                            loop do
                              r24 = _nt_space
                              if r24
                                s23 << r24
                              else
                                break
                              end
                            end
                            r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                            s17 << r23
                          end
                          if s17.last
                            r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                            r17.extend(FunctionIfBlock0)
                          else
                            @index = i17
                            r17 = nil
                          end
                          if r17
                            s16 << r17
                          else
                            break
                          end
                        end
                        if s16.empty?
                          @index = i16
                          r16 = nil
                        else
                          r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                        end
                        s0 << r16
                        if r16
                          if (match_len = has_terminal?('}', false, index))
                            r25 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'}\'')
                            r25 = nil
                          end
                          s0 << r25
                          if r25
                            s26, i26 = [], index
                            loop do
                              i27, s27 = index, []
                              s28, i28 = [], index
                              loop do
                                r29 = _nt_space
                                if r29
                                  s28 << r29
                                else
                                  break
                                end
                              end
                              r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                              s27 << r28
                              if r28
                                if (match_len = has_terminal?('else', false, index))
                                  r30 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'else\'')
                                  r30 = nil
                                end
                                s27 << r30
                                if r30
                                  s31, i31 = [], index
                                  loop do
                                    r32 = _nt_space
                                    if r32
                                      s31 << r32
                                    else
                                      break
                                    end
                                  end
                                  if s31.empty?
                                    @index = i31
                                    r31 = nil
                                  else
                                    r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                                  end
                                  s27 << r31
                                  if r31
                                    if (match_len = has_terminal?('if', false, index))
                                      r33 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'if\'')
                                      r33 = nil
                                    end
                                    s27 << r33
                                    if r33
                                      s34, i34 = [], index
                                      loop do
                                        r35 = _nt_space
                                        if r35
                                          s34 << r35
                                        else
                                          break
                                        end
                                      end
                                      r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                                      s27 << r34
                                      if r34
                                        if (match_len = has_terminal?('(', false, index))
                                          r36 = true
                                          @index += match_len
                                        else
                                          terminal_parse_failure('\'(\'')
                                          r36 = nil
                                        end
                                        s27 << r36
                                        if r36
                                          s37, i37 = [], index
                                          loop do
                                            r38 = _nt_space
                                            if r38
                                              s37 << r38
                                            else
                                              break
                                            end
                                          end
                                          r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                                          s27 << r37
                                          if r37
                                            r39 = _nt_expression
                                            s27 << r39
                                            if r39
                                              s40, i40 = [], index
                                              loop do
                                                r41 = _nt_space
                                                if r41
                                                  s40 << r41
                                                else
                                                  break
                                                end
                                              end
                                              r40 = instantiate_node(SyntaxNode,input, i40...index, s40)
                                              s27 << r40
                                              if r40
                                                if (match_len = has_terminal?(')', false, index))
                                                  r42 = true
                                                  @index += match_len
                                                else
                                                  terminal_parse_failure('\')\'')
                                                  r42 = nil
                                                end
                                                s27 << r42
                                                if r42
                                                  s43, i43 = [], index
                                                  loop do
                                                    r44 = _nt_space
                                                    if r44
                                                      s43 << r44
                                                    else
                                                      break
                                                    end
                                                  end
                                                  r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
                                                  s27 << r43
                                                  if r43
                                                    if (match_len = has_terminal?('{', false, index))
                                                      r45 = true
                                                      @index += match_len
                                                    else
                                                      terminal_parse_failure('\'{\'')
                                                      r45 = nil
                                                    end
                                                    s27 << r45
                                                    if r45
                                                      s46, i46 = [], index
                                                      loop do
                                                        r47 = _nt_space
                                                        if r47
                                                          s46 << r47
                                                        else
                                                          break
                                                        end
                                                      end
                                                      r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                                                      s27 << r46
                                                      if r46
                                                        s48, i48 = [], index
                                                        loop do
                                                          i49, s49 = index, []
                                                          i50 = index
                                                          r51 = _nt_statement
                                                          if r51
                                                            r51 = SyntaxNode.new(input, (index-1)...index) if r51 == true
                                                            r50 = r51
                                                          else
                                                            r52 = _nt_return_statement
                                                            if r52
                                                              r52 = SyntaxNode.new(input, (index-1)...index) if r52 == true
                                                              r50 = r52
                                                            else
                                                              r53 = _nt_function_if_block
                                                              if r53
                                                                r53 = SyntaxNode.new(input, (index-1)...index) if r53 == true
                                                                r50 = r53
                                                              else
                                                                r54 = _nt_for_loop
                                                                if r54
                                                                  r54 = SyntaxNode.new(input, (index-1)...index) if r54 == true
                                                                  r50 = r54
                                                                else
                                                                  @index = i50
                                                                  r50 = nil
                                                                end
                                                              end
                                                            end
                                                          end
                                                          s49 << r50
                                                          if r50
                                                            s55, i55 = [], index
                                                            loop do
                                                              r56 = _nt_space
                                                              if r56
                                                                s55 << r56
                                                              else
                                                                break
                                                              end
                                                            end
                                                            r55 = instantiate_node(SyntaxNode,input, i55...index, s55)
                                                            s49 << r55
                                                          end
                                                          if s49.last
                                                            r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
                                                            r49.extend(FunctionIfBlock1)
                                                          else
                                                            @index = i49
                                                            r49 = nil
                                                          end
                                                          if r49
                                                            s48 << r49
                                                          else
                                                            break
                                                          end
                                                        end
                                                        if s48.empty?
                                                          @index = i48
                                                          r48 = nil
                                                        else
                                                          r48 = instantiate_node(SyntaxNode,input, i48...index, s48)
                                                        end
                                                        s27 << r48
                                                        if r48
                                                          if (match_len = has_terminal?('}', false, index))
                                                            r57 = true
                                                            @index += match_len
                                                          else
                                                            terminal_parse_failure('\'}\'')
                                                            r57 = nil
                                                          end
                                                          s27 << r57
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                              if s27.last
                                r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                                r27.extend(FunctionIfBlock2)
                              else
                                @index = i27
                                r27 = nil
                              end
                              if r27
                                s26 << r27
                              else
                                break
                              end
                            end
                            r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                            s0 << r26
                            if r26
                              i59, s59 = index, []
                              s60, i60 = [], index
                              loop do
                                r61 = _nt_space
                                if r61
                                  s60 << r61
                                else
                                  break
                                end
                              end
                              r60 = instantiate_node(SyntaxNode,input, i60...index, s60)
                              s59 << r60
                              if r60
                                if (match_len = has_terminal?('else', false, index))
                                  r62 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'else\'')
                                  r62 = nil
                                end
                                s59 << r62
                                if r62
                                  s63, i63 = [], index
                                  loop do
                                    r64 = _nt_space
                                    if r64
                                      s63 << r64
                                    else
                                      break
                                    end
                                  end
                                  r63 = instantiate_node(SyntaxNode,input, i63...index, s63)
                                  s59 << r63
                                  if r63
                                    if (match_len = has_terminal?('{', false, index))
                                      r65 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'{\'')
                                      r65 = nil
                                    end
                                    s59 << r65
                                    if r65
                                      s66, i66 = [], index
                                      loop do
                                        r67 = _nt_space
                                        if r67
                                          s66 << r67
                                        else
                                          break
                                        end
                                      end
                                      r66 = instantiate_node(SyntaxNode,input, i66...index, s66)
                                      s59 << r66
                                      if r66
                                        s68, i68 = [], index
                                        loop do
                                          i69, s69 = index, []
                                          i70 = index
                                          r71 = _nt_statement
                                          if r71
                                            r71 = SyntaxNode.new(input, (index-1)...index) if r71 == true
                                            r70 = r71
                                          else
                                            r72 = _nt_return_statement
                                            if r72
                                              r72 = SyntaxNode.new(input, (index-1)...index) if r72 == true
                                              r70 = r72
                                            else
                                              r73 = _nt_function_if_block
                                              if r73
                                                r73 = SyntaxNode.new(input, (index-1)...index) if r73 == true
                                                r70 = r73
                                              else
                                                r74 = _nt_for_loop
                                                if r74
                                                  r74 = SyntaxNode.new(input, (index-1)...index) if r74 == true
                                                  r70 = r74
                                                else
                                                  @index = i70
                                                  r70 = nil
                                                end
                                              end
                                            end
                                          end
                                          s69 << r70
                                          if r70
                                            s75, i75 = [], index
                                            loop do
                                              r76 = _nt_space
                                              if r76
                                                s75 << r76
                                              else
                                                break
                                              end
                                            end
                                            r75 = instantiate_node(SyntaxNode,input, i75...index, s75)
                                            s69 << r75
                                          end
                                          if s69.last
                                            r69 = instantiate_node(SyntaxNode,input, i69...index, s69)
                                            r69.extend(FunctionIfBlock3)
                                          else
                                            @index = i69
                                            r69 = nil
                                          end
                                          if r69
                                            s68 << r69
                                          else
                                            break
                                          end
                                        end
                                        if s68.empty?
                                          @index = i68
                                          r68 = nil
                                        else
                                          r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                                        end
                                        s59 << r68
                                        if r68
                                          if (match_len = has_terminal?('}', false, index))
                                            r77 = true
                                            @index += match_len
                                          else
                                            terminal_parse_failure('\'}\'')
                                            r77 = nil
                                          end
                                          s59 << r77
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                              if s59.last
                                r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                                r59.extend(FunctionIfBlock4)
                              else
                                @index = i59
                                r59 = nil
                              end
                              if r59
                                r58 = r59
                              else
                                r58 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s0 << r58
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::IfSyntaxNode,input, i0...index, s0)
      r0.extend(FunctionIfBlock5)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_if_block][start_index] = r0

    r0
  end

  module ExecuteIfBlock0
    def e
      elements[0]
    end

  end

  module ExecuteIfBlock1
    def e
      elements[0]
    end

  end

  module ExecuteIfBlock2
    def expression
      elements[7]
    end

    def body
      elements[13]
    end

  end

  module ExecuteIfBlock3
    def e
      elements[0]
    end

  end

  module ExecuteIfBlock4
    def body
      elements[5]
    end

  end

  module ExecuteIfBlock5
    def if_cond
      elements[4]
    end

    def if_body
      elements[10]
    end

    def elseifs
      elements[12]
    end

    def final_else
      elements[13]
    end
  end

  def _nt_execute_if_block
    start_index = index
    if node_cache[:execute_if_block].has_key?(index)
      cached = node_cache[:execute_if_block][index]
      if cached
        node_cache[:execute_if_block][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('if', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'if\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('(', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(')', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    if (match_len = has_terminal?('{', false, index))
                      r13 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'{\'')
                      r13 = nil
                    end
                    s0 << r13
                    if r13
                      s14, i14 = [], index
                      loop do
                        r15 = _nt_space
                        if r15
                          s14 << r15
                        else
                          break
                        end
                      end
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                      s0 << r14
                      if r14
                        s16, i16 = [], index
                        loop do
                          i17, s17 = index, []
                          i18 = index
                          r19 = _nt_statement
                          if r19
                            r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
                            r18 = r19
                          else
                            r20 = _nt_execute_if_block
                            if r20
                              r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
                              r18 = r20
                            else
                              r21 = _nt_for_loop
                              if r21
                                r21 = SyntaxNode.new(input, (index-1)...index) if r21 == true
                                r18 = r21
                              else
                                @index = i18
                                r18 = nil
                              end
                            end
                          end
                          s17 << r18
                          if r18
                            s22, i22 = [], index
                            loop do
                              r23 = _nt_space
                              if r23
                                s22 << r23
                              else
                                break
                              end
                            end
                            r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                            s17 << r22
                          end
                          if s17.last
                            r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                            r17.extend(ExecuteIfBlock0)
                          else
                            @index = i17
                            r17 = nil
                          end
                          if r17
                            s16 << r17
                          else
                            break
                          end
                        end
                        if s16.empty?
                          @index = i16
                          r16 = nil
                        else
                          r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                        end
                        s0 << r16
                        if r16
                          if (match_len = has_terminal?('}', false, index))
                            r24 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'}\'')
                            r24 = nil
                          end
                          s0 << r24
                          if r24
                            s25, i25 = [], index
                            loop do
                              i26, s26 = index, []
                              s27, i27 = [], index
                              loop do
                                r28 = _nt_space
                                if r28
                                  s27 << r28
                                else
                                  break
                                end
                              end
                              r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                              s26 << r27
                              if r27
                                if (match_len = has_terminal?('else', false, index))
                                  r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'else\'')
                                  r29 = nil
                                end
                                s26 << r29
                                if r29
                                  s30, i30 = [], index
                                  loop do
                                    r31 = _nt_space
                                    if r31
                                      s30 << r31
                                    else
                                      break
                                    end
                                  end
                                  if s30.empty?
                                    @index = i30
                                    r30 = nil
                                  else
                                    r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                  end
                                  s26 << r30
                                  if r30
                                    if (match_len = has_terminal?('if', false, index))
                                      r32 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'if\'')
                                      r32 = nil
                                    end
                                    s26 << r32
                                    if r32
                                      s33, i33 = [], index
                                      loop do
                                        r34 = _nt_space
                                        if r34
                                          s33 << r34
                                        else
                                          break
                                        end
                                      end
                                      r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                      s26 << r33
                                      if r33
                                        if (match_len = has_terminal?('(', false, index))
                                          r35 = true
                                          @index += match_len
                                        else
                                          terminal_parse_failure('\'(\'')
                                          r35 = nil
                                        end
                                        s26 << r35
                                        if r35
                                          s36, i36 = [], index
                                          loop do
                                            r37 = _nt_space
                                            if r37
                                              s36 << r37
                                            else
                                              break
                                            end
                                          end
                                          r36 = instantiate_node(SyntaxNode,input, i36...index, s36)
                                          s26 << r36
                                          if r36
                                            r38 = _nt_expression
                                            s26 << r38
                                            if r38
                                              s39, i39 = [], index
                                              loop do
                                                r40 = _nt_space
                                                if r40
                                                  s39 << r40
                                                else
                                                  break
                                                end
                                              end
                                              r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                                              s26 << r39
                                              if r39
                                                if (match_len = has_terminal?(')', false, index))
                                                  r41 = true
                                                  @index += match_len
                                                else
                                                  terminal_parse_failure('\')\'')
                                                  r41 = nil
                                                end
                                                s26 << r41
                                                if r41
                                                  s42, i42 = [], index
                                                  loop do
                                                    r43 = _nt_space
                                                    if r43
                                                      s42 << r43
                                                    else
                                                      break
                                                    end
                                                  end
                                                  r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                                  s26 << r42
                                                  if r42
                                                    if (match_len = has_terminal?('{', false, index))
                                                      r44 = true
                                                      @index += match_len
                                                    else
                                                      terminal_parse_failure('\'{\'')
                                                      r44 = nil
                                                    end
                                                    s26 << r44
                                                    if r44
                                                      s45, i45 = [], index
                                                      loop do
                                                        r46 = _nt_space
                                                        if r46
                                                          s45 << r46
                                                        else
                                                          break
                                                        end
                                                      end
                                                      r45 = instantiate_node(SyntaxNode,input, i45...index, s45)
                                                      s26 << r45
                                                      if r45
                                                        s47, i47 = [], index
                                                        loop do
                                                          i48, s48 = index, []
                                                          i49 = index
                                                          r50 = _nt_statement
                                                          if r50
                                                            r50 = SyntaxNode.new(input, (index-1)...index) if r50 == true
                                                            r49 = r50
                                                          else
                                                            r51 = _nt_execute_if_block
                                                            if r51
                                                              r51 = SyntaxNode.new(input, (index-1)...index) if r51 == true
                                                              r49 = r51
                                                            else
                                                              r52 = _nt_for_loop
                                                              if r52
                                                                r52 = SyntaxNode.new(input, (index-1)...index) if r52 == true
                                                                r49 = r52
                                                              else
                                                                @index = i49
                                                                r49 = nil
                                                              end
                                                            end
                                                          end
                                                          s48 << r49
                                                          if r49
                                                            s53, i53 = [], index
                                                            loop do
                                                              r54 = _nt_space
                                                              if r54
                                                                s53 << r54
                                                              else
                                                                break
                                                              end
                                                            end
                                                            r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
                                                            s48 << r53
                                                          end
                                                          if s48.last
                                                            r48 = instantiate_node(SyntaxNode,input, i48...index, s48)
                                                            r48.extend(ExecuteIfBlock1)
                                                          else
                                                            @index = i48
                                                            r48 = nil
                                                          end
                                                          if r48
                                                            s47 << r48
                                                          else
                                                            break
                                                          end
                                                        end
                                                        if s47.empty?
                                                          @index = i47
                                                          r47 = nil
                                                        else
                                                          r47 = instantiate_node(SyntaxNode,input, i47...index, s47)
                                                        end
                                                        s26 << r47
                                                        if r47
                                                          if (match_len = has_terminal?('}', false, index))
                                                            r55 = true
                                                            @index += match_len
                                                          else
                                                            terminal_parse_failure('\'}\'')
                                                            r55 = nil
                                                          end
                                                          s26 << r55
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                              if s26.last
                                r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                                r26.extend(ExecuteIfBlock2)
                              else
                                @index = i26
                                r26 = nil
                              end
                              if r26
                                s25 << r26
                              else
                                break
                              end
                            end
                            r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                            s0 << r25
                            if r25
                              i57, s57 = index, []
                              s58, i58 = [], index
                              loop do
                                r59 = _nt_space
                                if r59
                                  s58 << r59
                                else
                                  break
                                end
                              end
                              r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                              s57 << r58
                              if r58
                                if (match_len = has_terminal?('else', false, index))
                                  r60 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('\'else\'')
                                  r60 = nil
                                end
                                s57 << r60
                                if r60
                                  s61, i61 = [], index
                                  loop do
                                    r62 = _nt_space
                                    if r62
                                      s61 << r62
                                    else
                                      break
                                    end
                                  end
                                  r61 = instantiate_node(SyntaxNode,input, i61...index, s61)
                                  s57 << r61
                                  if r61
                                    if (match_len = has_terminal?('{', false, index))
                                      r63 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'{\'')
                                      r63 = nil
                                    end
                                    s57 << r63
                                    if r63
                                      s64, i64 = [], index
                                      loop do
                                        r65 = _nt_space
                                        if r65
                                          s64 << r65
                                        else
                                          break
                                        end
                                      end
                                      r64 = instantiate_node(SyntaxNode,input, i64...index, s64)
                                      s57 << r64
                                      if r64
                                        s66, i66 = [], index
                                        loop do
                                          i67, s67 = index, []
                                          i68 = index
                                          r69 = _nt_statement
                                          if r69
                                            r69 = SyntaxNode.new(input, (index-1)...index) if r69 == true
                                            r68 = r69
                                          else
                                            r70 = _nt_execute_if_block
                                            if r70
                                              r70 = SyntaxNode.new(input, (index-1)...index) if r70 == true
                                              r68 = r70
                                            else
                                              r71 = _nt_for_loop
                                              if r71
                                                r71 = SyntaxNode.new(input, (index-1)...index) if r71 == true
                                                r68 = r71
                                              else
                                                @index = i68
                                                r68 = nil
                                              end
                                            end
                                          end
                                          s67 << r68
                                          if r68
                                            s72, i72 = [], index
                                            loop do
                                              r73 = _nt_space
                                              if r73
                                                s72 << r73
                                              else
                                                break
                                              end
                                            end
                                            r72 = instantiate_node(SyntaxNode,input, i72...index, s72)
                                            s67 << r72
                                          end
                                          if s67.last
                                            r67 = instantiate_node(SyntaxNode,input, i67...index, s67)
                                            r67.extend(ExecuteIfBlock3)
                                          else
                                            @index = i67
                                            r67 = nil
                                          end
                                          if r67
                                            s66 << r67
                                          else
                                            break
                                          end
                                        end
                                        if s66.empty?
                                          @index = i66
                                          r66 = nil
                                        else
                                          r66 = instantiate_node(SyntaxNode,input, i66...index, s66)
                                        end
                                        s57 << r66
                                        if r66
                                          if (match_len = has_terminal?('}', false, index))
                                            r74 = true
                                            @index += match_len
                                          else
                                            terminal_parse_failure('\'}\'')
                                            r74 = nil
                                          end
                                          s57 << r74
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                              if s57.last
                                r57 = instantiate_node(SyntaxNode,input, i57...index, s57)
                                r57.extend(ExecuteIfBlock4)
                              else
                                @index = i57
                                r57 = nil
                              end
                              if r57
                                r56 = r57
                              else
                                r56 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s0 << r56
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::IfSyntaxNode,input, i0...index, s0)
      r0.extend(ExecuteIfBlock5)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:execute_if_block][start_index] = r0

    r0
  end

  module ForLoop0
    def s
      elements[0]
    end

  end

  module ForLoop1
    def single_declaration_with_initialization
      elements[4]
    end

    def condition
      elements[8]
    end

    def action
      elements[12]
    end

    def stmts
      elements[18]
    end

  end

  def _nt_for_loop
    start_index = index
    if node_cache[:for_loop].has_key?(index)
      cached = node_cache[:for_loop][index]
      if cached
        node_cache[:for_loop][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('for', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'for\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('(', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_single_declaration_with_initialization
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(';', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\';\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    r13 = _nt_expression
                    s0 << r13
                    if r13
                      s14, i14 = [], index
                      loop do
                        r15 = _nt_space
                        if r15
                          s14 << r15
                        else
                          break
                        end
                      end
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                      s0 << r14
                      if r14
                        if (match_len = has_terminal?(';', false, index))
                          r16 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\';\'')
                          r16 = nil
                        end
                        s0 << r16
                        if r16
                          s17, i17 = [], index
                          loop do
                            r18 = _nt_space
                            if r18
                              s17 << r18
                            else
                              break
                            end
                          end
                          r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                          s0 << r17
                          if r17
                            i19 = index
                            r20 = _nt_assignment
                            if r20
                              r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
                              r19 = r20
                            else
                              r21 = _nt_post_inc
                              if r21
                                r21 = SyntaxNode.new(input, (index-1)...index) if r21 == true
                                r19 = r21
                              else
                                r22 = _nt_post_dec
                                if r22
                                  r22 = SyntaxNode.new(input, (index-1)...index) if r22 == true
                                  r19 = r22
                                else
                                  @index = i19
                                  r19 = nil
                                end
                              end
                            end
                            s0 << r19
                            if r19
                              s23, i23 = [], index
                              loop do
                                r24 = _nt_space
                                if r24
                                  s23 << r24
                                else
                                  break
                                end
                              end
                              r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                              s0 << r23
                              if r23
                                if (match_len = has_terminal?(')', false, index))
                                  r25 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\')\'')
                                  r25 = nil
                                end
                                s0 << r25
                                if r25
                                  s26, i26 = [], index
                                  loop do
                                    r27 = _nt_space
                                    if r27
                                      s26 << r27
                                    else
                                      break
                                    end
                                  end
                                  r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                                  s0 << r26
                                  if r26
                                    if (match_len = has_terminal?('{', false, index))
                                      r28 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('\'{\'')
                                      r28 = nil
                                    end
                                    s0 << r28
                                    if r28
                                      s29, i29 = [], index
                                      loop do
                                        r30 = _nt_space
                                        if r30
                                          s29 << r30
                                        else
                                          break
                                        end
                                      end
                                      r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                                      s0 << r29
                                      if r29
                                        s31, i31 = [], index
                                        loop do
                                          i32, s32 = index, []
                                          i33 = index
                                          r34 = _nt_statement
                                          if r34
                                            r34 = SyntaxNode.new(input, (index-1)...index) if r34 == true
                                            r33 = r34
                                          else
                                            r35 = _nt_return_statement
                                            if r35
                                              r35 = SyntaxNode.new(input, (index-1)...index) if r35 == true
                                              r33 = r35
                                            else
                                              r36 = _nt_function_if_block
                                              if r36
                                                r36 = SyntaxNode.new(input, (index-1)...index) if r36 == true
                                                r33 = r36
                                              else
                                                r37 = _nt_for_loop
                                                if r37
                                                  r37 = SyntaxNode.new(input, (index-1)...index) if r37 == true
                                                  r33 = r37
                                                else
                                                  @index = i33
                                                  r33 = nil
                                                end
                                              end
                                            end
                                          end
                                          s32 << r33
                                          if r33
                                            s38, i38 = [], index
                                            loop do
                                              r39 = _nt_space
                                              if r39
                                                s38 << r39
                                              else
                                                break
                                              end
                                            end
                                            r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                                            s32 << r38
                                          end
                                          if s32.last
                                            r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                                            r32.extend(ForLoop0)
                                          else
                                            @index = i32
                                            r32 = nil
                                          end
                                          if r32
                                            s31 << r32
                                          else
                                            break
                                          end
                                        end
                                        if s31.empty?
                                          @index = i31
                                          r31 = nil
                                        else
                                          r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                                        end
                                        s0 << r31
                                        if r31
                                          if (match_len = has_terminal?('}', false, index))
                                            r40 = true
                                            @index += match_len
                                          else
                                            terminal_parse_failure('\'}\'')
                                            r40 = nil
                                          end
                                          s0 << r40
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::ForLoopSyntaxNode,input, i0...index, s0)
      r0.extend(ForLoop1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:for_loop][start_index] = r0

    r0
  end

  module BuiltinTypeName0
  end

  module BuiltinTypeName1
    def i
      elements[4]
    end

  end

  module BuiltinTypeName2
  end

  module BuiltinTypeName3
  end

  module BuiltinTypeName4
  end

  module BuiltinTypeName5
  end

  def _nt_builtin_type_name
    start_index = index
    if node_cache[:builtin_type_name].has_key?(index)
      cached = node_cache[:builtin_type_name][index]
      if cached
        node_cache[:builtin_type_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('XReg', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'XReg\'')
      r2 = nil
    end
    s1 << r2
    if r2
      i3 = index
      if has_terminal?(@regexps[gr = '\A[A-Za-z0-9]'] ||= Regexp.new(gr), :regexp, index)
        r4 = true
        @index += 1
      else
        terminal_parse_failure('[A-Za-z0-9]')
        r4 = nil
      end
      if r4
        @index = i3
        r3 = nil
        terminal_parse_failure('[A-Za-z0-9]', true)
      else
        @terminal_failures.pop
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(Idl::BuiltinTypeNameSyntaxNode,input, i1...index, s1)
      r1.extend(BuiltinTypeName0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i5, s5 = index, []
      if (match_len = has_terminal?('Bits', false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'Bits\'')
        r6 = nil
      end
      s5 << r6
      if r6
        s7, i7 = [], index
        loop do
          r8 = _nt_space
          if r8
            s7 << r8
          else
            break
          end
        end
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        s5 << r7
        if r7
          if (match_len = has_terminal?('<', false, index))
            r9 = true
            @index += match_len
          else
            terminal_parse_failure('\'<\'')
            r9 = nil
          end
          s5 << r9
          if r9
            s10, i10 = [], index
            loop do
              r11 = _nt_space
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s5 << r10
            if r10
              r12 = _nt_template_safe_expression
              s5 << r12
              if r12
                s13, i13 = [], index
                loop do
                  r14 = _nt_space
                  if r14
                    s13 << r14
                  else
                    break
                  end
                end
                r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                s5 << r13
                if r13
                  if (match_len = has_terminal?('>', false, index))
                    r15 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'>\'')
                    r15 = nil
                  end
                  s5 << r15
                  if r15
                    i16 = index
                    if has_terminal?(@regexps[gr = '\A[A-Za-z0-9]'] ||= Regexp.new(gr), :regexp, index)
                      r17 = true
                      @index += 1
                    else
                      terminal_parse_failure('[A-Za-z0-9]')
                      r17 = nil
                    end
                    if r17
                      @index = i16
                      r16 = nil
                      terminal_parse_failure('[A-Za-z0-9]', true)
                    else
                      @terminal_failures.pop
                      @index = i16
                      r16 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s5 << r16
                  end
                end
              end
            end
          end
        end
      end
      if s5.last
        r5 = instantiate_node(Idl::BuiltinTypeNameSyntaxNode,input, i5...index, s5)
        r5.extend(BuiltinTypeName1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
        r0 = r5
      else
        i18, s18 = index, []
        if (match_len = has_terminal?('Boolean', false, index))
          r19 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'Boolean\'')
          r19 = nil
        end
        s18 << r19
        if r19
          i20 = index
          if has_terminal?(@regexps[gr = '\A[A-Za-z0-9]'] ||= Regexp.new(gr), :regexp, index)
            r21 = true
            @index += 1
          else
            terminal_parse_failure('[A-Za-z0-9]')
            r21 = nil
          end
          if r21
            @index = i20
            r20 = nil
            terminal_parse_failure('[A-Za-z0-9]', true)
          else
            @terminal_failures.pop
            @index = i20
            r20 = instantiate_node(SyntaxNode,input, index...index)
          end
          s18 << r20
        end
        if s18.last
          r18 = instantiate_node(Idl::BuiltinTypeNameSyntaxNode,input, i18...index, s18)
          r18.extend(BuiltinTypeName2)
        else
          @index = i18
          r18 = nil
        end
        if r18
          r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
          r0 = r18
        else
          i22, s22 = index, []
          if (match_len = has_terminal?('String', false, index))
            r23 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'String\'')
            r23 = nil
          end
          s22 << r23
          if r23
            i24 = index
            if has_terminal?(@regexps[gr = '\A[A-Za-z0-9]'] ||= Regexp.new(gr), :regexp, index)
              r25 = true
              @index += 1
            else
              terminal_parse_failure('[A-Za-z0-9]')
              r25 = nil
            end
            if r25
              @index = i24
              r24 = nil
              terminal_parse_failure('[A-Za-z0-9]', true)
            else
              @terminal_failures.pop
              @index = i24
              r24 = instantiate_node(SyntaxNode,input, index...index)
            end
            s22 << r24
          end
          if s22.last
            r22 = instantiate_node(Idl::BuiltinTypeNameSyntaxNode,input, i22...index, s22)
            r22.extend(BuiltinTypeName3)
          else
            @index = i22
            r22 = nil
          end
          if r22
            r22 = SyntaxNode.new(input, (index-1)...index) if r22 == true
            r0 = r22
          else
            i26, s26 = index, []
            if (match_len = has_terminal?('U64', false, index))
              r27 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'U64\'')
              r27 = nil
            end
            s26 << r27
            if r27
              i28 = index
              if has_terminal?(@regexps[gr = '\A[A-Za-z0-9]'] ||= Regexp.new(gr), :regexp, index)
                r29 = true
                @index += 1
              else
                terminal_parse_failure('[A-Za-z0-9]')
                r29 = nil
              end
              if r29
                @index = i28
                r28 = nil
                terminal_parse_failure('[A-Za-z0-9]', true)
              else
                @terminal_failures.pop
                @index = i28
                r28 = instantiate_node(SyntaxNode,input, index...index)
              end
              s26 << r28
            end
            if s26.last
              r26 = instantiate_node(Idl::BuiltinTypeNameSyntaxNode,input, i26...index, s26)
              r26.extend(BuiltinTypeName4)
            else
              @index = i26
              r26 = nil
            end
            if r26
              r26 = SyntaxNode.new(input, (index-1)...index) if r26 == true
              r0 = r26
            else
              i30, s30 = index, []
              if (match_len = has_terminal?('U32', false, index))
                r31 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'U32\'')
                r31 = nil
              end
              s30 << r31
              if r31
                i32 = index
                if has_terminal?(@regexps[gr = '\A[A-Za-z0-9]'] ||= Regexp.new(gr), :regexp, index)
                  r33 = true
                  @index += 1
                else
                  terminal_parse_failure('[A-Za-z0-9]')
                  r33 = nil
                end
                if r33
                  @index = i32
                  r32 = nil
                  terminal_parse_failure('[A-Za-z0-9]', true)
                else
                  @terminal_failures.pop
                  @index = i32
                  r32 = instantiate_node(SyntaxNode,input, index...index)
                end
                s30 << r32
              end
              if s30.last
                r30 = instantiate_node(Idl::BuiltinTypeNameSyntaxNode,input, i30...index, s30)
                r30.extend(BuiltinTypeName5)
              else
                @index = i30
                r30 = nil
              end
              if r30
                r30 = SyntaxNode.new(input, (index-1)...index) if r30 == true
                r0 = r30
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:builtin_type_name][start_index] = r0

    r0
  end

  module Keyword0
  end

  module Keyword1
  end

  module Keyword2
  end

  module Keyword3
  end

  module Keyword4
  end

  module Keyword5
  end

  module Keyword6
  end

  module Keyword7
  end

  module Keyword8
  end

  module Keyword9
  end

  module Keyword10
  end

  module Keyword11
  end

  module Keyword12
  end

  module Keyword13
  end

  def _nt_keyword
    start_index = index
    if node_cache[:keyword].has_key?(index)
      cached = node_cache[:keyword][index]
      if cached
        node_cache[:keyword][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('if', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'if\'')
      r2 = nil
    end
    s1 << r2
    if r2
      i3 = index
      if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
        r4 = true
        @index += 1
      else
        terminal_parse_failure('[A-Za-z0-9_]')
        r4 = nil
      end
      if r4
        @index = i3
        r3 = nil
        terminal_parse_failure('[A-Za-z0-9_]', true)
      else
        @terminal_failures.pop
        @index = i3
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Keyword0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i5, s5 = index, []
      if (match_len = has_terminal?('else', false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'else\'')
        r6 = nil
      end
      s5 << r6
      if r6
        i7 = index
        if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
          r8 = true
          @index += 1
        else
          terminal_parse_failure('[A-Za-z0-9_]')
          r8 = nil
        end
        if r8
          @index = i7
          r7 = nil
          terminal_parse_failure('[A-Za-z0-9_]', true)
        else
          @terminal_failures.pop
          @index = i7
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(Keyword1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
        r0 = r5
      else
        i9, s9 = index, []
        if (match_len = has_terminal?('for', false, index))
          r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'for\'')
          r10 = nil
        end
        s9 << r10
        if r10
          i11 = index
          if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
            r12 = true
            @index += 1
          else
            terminal_parse_failure('[A-Za-z0-9_]')
            r12 = nil
          end
          if r12
            @index = i11
            r11 = nil
            terminal_parse_failure('[A-Za-z0-9_]', true)
          else
            @terminal_failures.pop
            @index = i11
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(Keyword2)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
          r0 = r9
        else
          i13, s13 = index, []
          if (match_len = has_terminal?('return', false, index))
            r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'return\'')
            r14 = nil
          end
          s13 << r14
          if r14
            i15 = index
            if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
              r16 = true
              @index += 1
            else
              terminal_parse_failure('[A-Za-z0-9_]')
              r16 = nil
            end
            if r16
              @index = i15
              r15 = nil
              terminal_parse_failure('[A-Za-z0-9_]', true)
            else
              @terminal_failures.pop
              @index = i15
              r15 = instantiate_node(SyntaxNode,input, index...index)
            end
            s13 << r15
          end
          if s13.last
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            r13.extend(Keyword3)
          else
            @index = i13
            r13 = nil
          end
          if r13
            r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
            r0 = r13
          else
            i17, s17 = index, []
            if (match_len = has_terminal?('returns', false, index))
              r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'returns\'')
              r18 = nil
            end
            s17 << r18
            if r18
              i19 = index
              if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                r20 = true
                @index += 1
              else
                terminal_parse_failure('[A-Za-z0-9_]')
                r20 = nil
              end
              if r20
                @index = i19
                r19 = nil
                terminal_parse_failure('[A-Za-z0-9_]', true)
              else
                @terminal_failures.pop
                @index = i19
                r19 = instantiate_node(SyntaxNode,input, index...index)
              end
              s17 << r19
            end
            if s17.last
              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
              r17.extend(Keyword4)
            else
              @index = i17
              r17 = nil
            end
            if r17
              r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
              r0 = r17
            else
              i21, s21 = index, []
              if (match_len = has_terminal?('arguments', false, index))
                r22 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'arguments\'')
                r22 = nil
              end
              s21 << r22
              if r22
                i23 = index
                if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                  r24 = true
                  @index += 1
                else
                  terminal_parse_failure('[A-Za-z0-9_]')
                  r24 = nil
                end
                if r24
                  @index = i23
                  r23 = nil
                  terminal_parse_failure('[A-Za-z0-9_]', true)
                else
                  @terminal_failures.pop
                  @index = i23
                  r23 = instantiate_node(SyntaxNode,input, index...index)
                end
                s21 << r23
              end
              if s21.last
                r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                r21.extend(Keyword5)
              else
                @index = i21
                r21 = nil
              end
              if r21
                r21 = SyntaxNode.new(input, (index-1)...index) if r21 == true
                r0 = r21
              else
                i25, s25 = index, []
                if (match_len = has_terminal?('description', false, index))
                  r26 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'description\'')
                  r26 = nil
                end
                s25 << r26
                if r26
                  i27 = index
                  if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                    r28 = true
                    @index += 1
                  else
                    terminal_parse_failure('[A-Za-z0-9_]')
                    r28 = nil
                  end
                  if r28
                    @index = i27
                    r27 = nil
                    terminal_parse_failure('[A-Za-z0-9_]', true)
                  else
                    @terminal_failures.pop
                    @index = i27
                    r27 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s25 << r27
                end
                if s25.last
                  r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                  r25.extend(Keyword6)
                else
                  @index = i25
                  r25 = nil
                end
                if r25
                  r25 = SyntaxNode.new(input, (index-1)...index) if r25 == true
                  r0 = r25
                else
                  i29, s29 = index, []
                  if (match_len = has_terminal?('body', false, index))
                    r30 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'body\'')
                    r30 = nil
                  end
                  s29 << r30
                  if r30
                    i31 = index
                    if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                      r32 = true
                      @index += 1
                    else
                      terminal_parse_failure('[A-Za-z0-9_]')
                      r32 = nil
                    end
                    if r32
                      @index = i31
                      r31 = nil
                      terminal_parse_failure('[A-Za-z0-9_]', true)
                    else
                      @terminal_failures.pop
                      @index = i31
                      r31 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s29 << r31
                  end
                  if s29.last
                    r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                    r29.extend(Keyword7)
                  else
                    @index = i29
                    r29 = nil
                  end
                  if r29
                    r29 = SyntaxNode.new(input, (index-1)...index) if r29 == true
                    r0 = r29
                  else
                    i33, s33 = index, []
                    if (match_len = has_terminal?('function', false, index))
                      r34 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'function\'')
                      r34 = nil
                    end
                    s33 << r34
                    if r34
                      i35 = index
                      if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                        r36 = true
                        @index += 1
                      else
                        terminal_parse_failure('[A-Za-z0-9_]')
                        r36 = nil
                      end
                      if r36
                        @index = i35
                        r35 = nil
                        terminal_parse_failure('[A-Za-z0-9_]', true)
                      else
                        @terminal_failures.pop
                        @index = i35
                        r35 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s33 << r35
                    end
                    if s33.last
                      r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                      r33.extend(Keyword8)
                    else
                      @index = i33
                      r33 = nil
                    end
                    if r33
                      r33 = SyntaxNode.new(input, (index-1)...index) if r33 == true
                      r0 = r33
                    else
                      i37, s37 = index, []
                      if (match_len = has_terminal?('builtin', false, index))
                        r38 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'builtin\'')
                        r38 = nil
                      end
                      s37 << r38
                      if r38
                        i39 = index
                        if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                          r40 = true
                          @index += 1
                        else
                          terminal_parse_failure('[A-Za-z0-9_]')
                          r40 = nil
                        end
                        if r40
                          @index = i39
                          r39 = nil
                          terminal_parse_failure('[A-Za-z0-9_]', true)
                        else
                          @terminal_failures.pop
                          @index = i39
                          r39 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s37 << r39
                      end
                      if s37.last
                        r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                        r37.extend(Keyword9)
                      else
                        @index = i37
                        r37 = nil
                      end
                      if r37
                        r37 = SyntaxNode.new(input, (index-1)...index) if r37 == true
                        r0 = r37
                      else
                        i41, s41 = index, []
                        if (match_len = has_terminal?('generated', false, index))
                          r42 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'generated\'')
                          r42 = nil
                        end
                        s41 << r42
                        if r42
                          i43 = index
                          if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                            r44 = true
                            @index += 1
                          else
                            terminal_parse_failure('[A-Za-z0-9_]')
                            r44 = nil
                          end
                          if r44
                            @index = i43
                            r43 = nil
                            terminal_parse_failure('[A-Za-z0-9_]', true)
                          else
                            @terminal_failures.pop
                            @index = i43
                            r43 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s41 << r43
                        end
                        if s41.last
                          r41 = instantiate_node(SyntaxNode,input, i41...index, s41)
                          r41.extend(Keyword10)
                        else
                          @index = i41
                          r41 = nil
                        end
                        if r41
                          r41 = SyntaxNode.new(input, (index-1)...index) if r41 == true
                          r0 = r41
                        else
                          i45, s45 = index, []
                          if (match_len = has_terminal?('enum', false, index))
                            r46 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('\'enum\'')
                            r46 = nil
                          end
                          s45 << r46
                          if r46
                            i47 = index
                            if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                              r48 = true
                              @index += 1
                            else
                              terminal_parse_failure('[A-Za-z0-9_]')
                              r48 = nil
                            end
                            if r48
                              @index = i47
                              r47 = nil
                              terminal_parse_failure('[A-Za-z0-9_]', true)
                            else
                              @terminal_failures.pop
                              @index = i47
                              r47 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s45 << r47
                          end
                          if s45.last
                            r45 = instantiate_node(SyntaxNode,input, i45...index, s45)
                            r45.extend(Keyword11)
                          else
                            @index = i45
                            r45 = nil
                          end
                          if r45
                            r45 = SyntaxNode.new(input, (index-1)...index) if r45 == true
                            r0 = r45
                          else
                            i49, s49 = index, []
                            if (match_len = has_terminal?('bitfield', false, index))
                              r50 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'bitfield\'')
                              r50 = nil
                            end
                            s49 << r50
                            if r50
                              i51 = index
                              if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                                r52 = true
                                @index += 1
                              else
                                terminal_parse_failure('[A-Za-z0-9_]')
                                r52 = nil
                              end
                              if r52
                                @index = i51
                                r51 = nil
                                terminal_parse_failure('[A-Za-z0-9_]', true)
                              else
                                @terminal_failures.pop
                                @index = i51
                                r51 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s49 << r51
                            end
                            if s49.last
                              r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
                              r49.extend(Keyword12)
                            else
                              @index = i49
                              r49 = nil
                            end
                            if r49
                              r49 = SyntaxNode.new(input, (index-1)...index) if r49 == true
                              r0 = r49
                            else
                              i53, s53 = index, []
                              if (match_len = has_terminal?('CSR', false, index))
                                r54 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('\'CSR\'')
                                r54 = nil
                              end
                              s53 << r54
                              if r54
                                i55 = index
                                if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                                  r56 = true
                                  @index += 1
                                else
                                  terminal_parse_failure('[A-Za-z0-9_]')
                                  r56 = nil
                                end
                                if r56
                                  @index = i55
                                  r55 = nil
                                  terminal_parse_failure('[A-Za-z0-9_]', true)
                                else
                                  @terminal_failures.pop
                                  @index = i55
                                  r55 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s53 << r55
                              end
                              if s53.last
                                r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
                                r53.extend(Keyword13)
                              else
                                @index = i53
                                r53 = nil
                              end
                              if r53
                                r53 = SyntaxNode.new(input, (index-1)...index) if r53 == true
                                r0 = r53
                              else
                                @index = i0
                                r0 = nil
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:keyword][start_index] = r0

    r0
  end

  module UserTypeName0
  end

  def _nt_user_type_name
    start_index = index
    if node_cache[:user_type_name].has_key?(index)
      cached = node_cache[:user_type_name][index]
      if cached
        node_cache[:user_type_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_reserved
    if r2
      @index = i1
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?(@regexps[gr = '\A[A-Z]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[A-Z]')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[A-Za-z0-9_]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::UserTypeNameSyntaxNode,input, i0...index, s0)
      r0.extend(UserTypeName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:user_type_name][start_index] = r0

    r0
  end

  module FieldName0
  end

  def _nt_field_name
    start_index = index
    if node_cache[:field_name].has_key?(index)
      cached = node_cache[:field_name][index]
      if cached
        node_cache[:field_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[a-zA-Z]')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z0-9_]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FieldName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:field_name][start_index] = r0

    r0
  end

  def _nt_type_name
    start_index = index
    if node_cache[:type_name].has_key?(index)
      cached = node_cache[:type_name][index]
      if cached
        node_cache[:type_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_builtin_type_name
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_user_type_name
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:type_name][start_index] = r0

    r0
  end

  def _nt_reserved
    start_index = index
    if node_cache[:reserved].has_key?(index)
      cached = node_cache[:reserved][index]
      if cached
        node_cache[:reserved][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_builtin_type_name
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_keyword
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:reserved][start_index] = r0

    r0
  end

  module Comment0
  end

  module Comment1
    def content
      elements[1]
    end

  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        node_cache[:comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('#', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'#\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if (match_len = has_terminal?("\n", false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('"\\n"')
          r5 = nil
        end
        if r5
          @index = i4
          r4 = nil
          terminal_parse_failure('"\\n"', true)
        else
          @terminal_failures.pop
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = true
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Comment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?("\n", false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('"\\n"')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt_function_statement
    start_index = index
    if node_cache[:function_statement].has_key?(index)
      cached = node_cache[:function_statement][index]
      if cached
        node_cache[:function_statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_return_statement
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_statement
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_function_if_block
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_for_loop
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:function_statement][start_index] = r0

    r0
  end

  module FunctionBody0
    def choice
      elements[0]
    end

  end

  module FunctionBody1
    def func_stmt_list
      elements[1]
    end
  end

  def _nt_function_body
    start_index = index
    if node_cache[:function_body].has_key?(index)
      cached = node_cache[:function_body][index]
      if cached
        node_cache[:function_body][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r5 = _nt_function_statement
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(FunctionBody0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(Idl::FunctionBodySyntaxNode,input, i0...index, s0)
      r0.extend(FunctionBody1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_body][start_index] = r0

    r0
  end

  module InstructionOperation0
    def choice
      elements[0]
    end

  end

  module InstructionOperation1
    def op_stmt_list
      elements[1]
    end
  end

  def _nt_instruction_operation
    start_index = index
    if node_cache[:instruction_operation].has_key?(index)
      cached = node_cache[:instruction_operation][index]
      if cached
        node_cache[:instruction_operation][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        i5 = index
        r6 = _nt_statement
        if r6
          r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
          r5 = r6
        else
          r7 = _nt_execute_if_block
          if r7
            r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
            r5 = r7
          else
            r8 = _nt_for_loop
            if r8
              r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
              r5 = r8
            else
              @index = i5
              r5 = nil
            end
          end
        end
        s4 << r5
        if r5
          s9, i9 = [], index
          loop do
            r10 = _nt_space
            if r10
              s9 << r10
            else
              break
            end
          end
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          s4 << r9
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(InstructionOperation0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(Idl::InstructionOperationSyntaxNode,input, i0...index, s0)
      r0.extend(InstructionOperation1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instruction_operation][start_index] = r0

    r0
  end

  module Id0
  end

  def _nt_id
    start_index = index
    if node_cache[:id].has_key?(index)
      cached = node_cache[:id][index]
      if cached
        node_cache[:id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_reserved
    if r2
      @index = i1
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?(@regexps[gr = '\A[A-Za-z]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[A-Za-z]')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[A-Za-z_0-9]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[A-Za-z_0-9]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::IdSyntaxNode,input, i0...index, s0)
      r0.extend(Id0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:id][start_index] = r0

    r0
  end

  def _nt_builtin_read_only_var
    start_index = index
    if node_cache[:builtin_read_only_var].has_key?(index)
      cached = node_cache[:builtin_read_only_var][index]
      if cached
        node_cache[:builtin_read_only_var][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?("$encoding", false, index))
      r0 = instantiate_node(Idl::BuiltinVariableSyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"$encoding"')
      r0 = nil
    end

    node_cache[:builtin_read_only_var][start_index] = r0

    r0
  end

  def _nt_builtin_read_write_var
    start_index = index
    if node_cache[:builtin_read_write_var].has_key?(index)
      cached = node_cache[:builtin_read_write_var][index]
      if cached
        node_cache[:builtin_read_write_var][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?("$pc", false, index))
      r0 = instantiate_node(Idl::BuiltinVariableSyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"$pc"')
      r0 = nil
    end

    node_cache[:builtin_read_write_var][start_index] = r0

    r0
  end

  module CsrName0
  end

  def _nt_csr_name
    start_index = index
    if node_cache[:csr_name].has_key?(index)
      cached = node_cache[:csr_name][index]
      if cached
        node_cache[:csr_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(@regexps[gr = '\A[a-z]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[a-z]')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-z0-9_.]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[a-z0-9_.]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CsrName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:csr_name][start_index] = r0

    r0
  end

  module CsrFieldName0
  end

  def _nt_csr_field_name
    start_index = index
    if node_cache[:csr_field_name].has_key?(index)
      cached = node_cache[:csr_field_name][index]
      if cached
        node_cache[:csr_field_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[a-zA-Z]')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z0-9]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CsrFieldName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:csr_field_name][start_index] = r0

    r0
  end

  module VarWrite0
    def csr_name
      elements[4]
    end

  end

  def _nt_var_write
    start_index = index
    if node_cache[:var_write].has_key?(index)
      cached = node_cache[:var_write][index]
      if cached
        node_cache[:var_write][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('CSR', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'CSR\'')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if (match_len = has_terminal?('[', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'[\'')
          r5 = nil
        end
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
          if r6
            r8 = _nt_csr_name
            s1 << r8
            if r8
              s9, i9 = [], index
              loop do
                r10 = _nt_space
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s1 << r9
              if r9
                if (match_len = has_terminal?(']', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\']\'')
                  r11 = nil
                end
                s1 << r11
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Idl::CsrWriteSyntaxNode,input, i1...index, s1)
      r1.extend(VarWrite0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r12 = _nt_id
      if r12
        r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
        r0 = r12
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:var_write][start_index] = r0

    r0
  end

  module String0
  end

  module String1
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'"\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if (match_len = has_terminal?('"', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r5 = nil
        end
        if r5
          @index = i4
          r4 = nil
          terminal_parse_failure('\'"\'', true)
        else
          @terminal_failures.pop
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = true
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(String0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(Idl::StringLiteralSyntaxNode,input, i0...index, s0)
      r0.extend(String1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  module Space0
    def space? = true
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(@regexps[gr = '\A[ \\n]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[ \\n]')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
      r0.extend(Space0)
      r0.extend(Space0)
    else
      r2 = _nt_comment
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
        r0.extend(Space0)
        r0.extend(Space0)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class IdlParser < Treetop::Runtime::CompiledParser
  include Idl
end
