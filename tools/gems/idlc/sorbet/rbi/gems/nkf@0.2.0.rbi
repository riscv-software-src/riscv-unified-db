# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `nkf` gem.
# Please instead update this file by running `bin/tapioca gem nkf`.


# Kanji Converter for Ruby.
#
# source://nkf//lib/kconv.rb#18
module Kconv
  private

  # call-seq:
  #    Kconv.guess(str)   => encoding
  #
  # Guess input encoding by NKF.guess
  #
  # source://nkf//lib/kconv.rb#141
  def guess(str); end

  # call-seq:
  #    Kconv.iseuc(str)   => true or false
  #
  # Returns whether input encoding is EUC-JP or not.
  #
  # *Note* don't expect this return value is MatchData.
  #
  # source://nkf//lib/kconv.rb#156
  def iseuc(str); end

  # call-seq:
  #    Kconv.isjis(str)   => true or false
  #
  # Returns whether input encoding is ISO-2022-JP or not.
  #
  # source://nkf//lib/kconv.rb#174
  def isjis(str); end

  # call-seq:
  #    Kconv.issjis(str)   => true or false
  #
  # Returns whether input encoding is Shift_JIS or not.
  #
  # source://nkf//lib/kconv.rb#165
  def issjis(str); end

  # call-seq:
  #    Kconv.isutf8(str)   => true or false
  #
  # Returns whether input encoding is UTF-8 or not.
  #
  # source://nkf//lib/kconv.rb#193
  def isutf8(str); end

  # call-seq:
  #    Kconv.kconv(str, to_enc, from_enc=nil)
  #
  # Convert <code>str</code> to <code>to_enc</code>.
  # <code>to_enc</code> and <code>from_enc</code> are given as constants of Kconv or Encoding objects.
  #
  # source://nkf//lib/kconv.rb#57
  def kconv(str, to_enc, from_enc = T.unsafe(nil)); end

  # call-seq:
  #    Kconv.toeuc(str)   => string
  #
  # Convert <code>str</code> to EUC-JP
  #
  # source://nkf//lib/kconv.rb#83
  def toeuc(str); end

  # call-seq:
  #    Kconv.tojis(str)   => string
  #
  # Convert <code>str</code> to ISO-2022-JP
  #
  # source://nkf//lib/kconv.rb#74
  def tojis(str); end

  # call-seq:
  #    Kconv.tolocale   => string
  #
  # Convert <code>self</code> to locale encoding
  #
  # source://nkf//lib/kconv.rb#128
  def tolocale(str); end

  # call-seq:
  #    Kconv.tosjis(str)   => string
  #
  # Convert <code>str</code> to Shift_JIS
  #
  # source://nkf//lib/kconv.rb#92
  def tosjis(str); end

  # call-seq:
  #    Kconv.toutf16(str)   => string
  #
  # Convert <code>str</code> to UTF-16
  #
  # source://nkf//lib/kconv.rb#110
  def toutf16(str); end

  # call-seq:
  #    Kconv.toutf32(str)   => string
  #
  # Convert <code>str</code> to UTF-32
  #
  # source://nkf//lib/kconv.rb#119
  def toutf32(str); end

  # call-seq:
  #    Kconv.toutf8(str)   => string
  #
  # Convert <code>str</code> to UTF-8
  #
  # source://nkf//lib/kconv.rb#101
  def toutf8(str); end

  class << self
    # call-seq:
    #    Kconv.guess(str)   => encoding
    #
    # Guess input encoding by NKF.guess
    #
    # source://nkf//lib/kconv.rb#141
    def guess(str); end

    # call-seq:
    #    Kconv.iseuc(str)   => true or false
    #
    # Returns whether input encoding is EUC-JP or not.
    #
    # *Note* don't expect this return value is MatchData.
    #
    # source://nkf//lib/kconv.rb#156
    def iseuc(str); end

    # call-seq:
    #    Kconv.isjis(str)   => true or false
    #
    # Returns whether input encoding is ISO-2022-JP or not.
    #
    # source://nkf//lib/kconv.rb#174
    def isjis(str); end

    # call-seq:
    #    Kconv.issjis(str)   => true or false
    #
    # Returns whether input encoding is Shift_JIS or not.
    #
    # source://nkf//lib/kconv.rb#165
    def issjis(str); end

    # call-seq:
    #    Kconv.isutf8(str)   => true or false
    #
    # Returns whether input encoding is UTF-8 or not.
    #
    # source://nkf//lib/kconv.rb#193
    def isutf8(str); end

    # call-seq:
    #    Kconv.kconv(str, to_enc, from_enc=nil)
    #
    # Convert <code>str</code> to <code>to_enc</code>.
    # <code>to_enc</code> and <code>from_enc</code> are given as constants of Kconv or Encoding objects.
    #
    # source://nkf//lib/kconv.rb#57
    def kconv(str, to_enc, from_enc = T.unsafe(nil)); end

    # call-seq:
    #    Kconv.toeuc(str)   => string
    #
    # Convert <code>str</code> to EUC-JP
    #
    # source://nkf//lib/kconv.rb#83
    def toeuc(str); end

    # call-seq:
    #    Kconv.tojis(str)   => string
    #
    # Convert <code>str</code> to ISO-2022-JP
    #
    # source://nkf//lib/kconv.rb#74
    def tojis(str); end

    # call-seq:
    #    Kconv.tolocale   => string
    #
    # Convert <code>self</code> to locale encoding
    #
    # source://nkf//lib/kconv.rb#128
    def tolocale(str); end

    # call-seq:
    #    Kconv.tosjis(str)   => string
    #
    # Convert <code>str</code> to Shift_JIS
    #
    # source://nkf//lib/kconv.rb#92
    def tosjis(str); end

    # call-seq:
    #    Kconv.toutf16(str)   => string
    #
    # Convert <code>str</code> to UTF-16
    #
    # source://nkf//lib/kconv.rb#110
    def toutf16(str); end

    # call-seq:
    #    Kconv.toutf32(str)   => string
    #
    # Convert <code>str</code> to UTF-32
    #
    # source://nkf//lib/kconv.rb#119
    def toutf32(str); end

    # call-seq:
    #    Kconv.toutf8(str)   => string
    #
    # Convert <code>str</code> to UTF-8
    #
    # source://nkf//lib/kconv.rb#101
    def toutf8(str); end
  end
end

# Auto-Detect
#
# source://nkf//lib/kconv.rb#26
Kconv::AUTO = T.let(T.unsafe(nil), T.untyped)

# NOCONV
#
# source://nkf//lib/kconv.rb#36
Kconv::NOCONV = T.let(T.unsafe(nil), T.untyped)

# UNKNOWN
#
# source://nkf//lib/kconv.rb#46
Kconv::UNKNOWN = T.let(T.unsafe(nil), T.untyped)

# source://nkf//lib/kconv.rb#199
class String
  include ::Comparable

  # call-seq:
  #    String#iseuc   => true or false
  #
  # Returns whether <code>self</code>'s encoding is EUC-JP or not.
  #
  # source://nkf//lib/kconv.rb#264
  def iseuc; end

  # call-seq:
  #    String#isjis   => true or false
  #
  # Returns whether <code>self</code>'s encoding is ISO-2022-JP or not.
  #
  # source://nkf//lib/kconv.rb#276
  def isjis; end

  # call-seq:
  #    String#issjis   => true or false
  #
  # Returns whether <code>self</code>'s encoding is Shift_JIS or not.
  #
  # source://nkf//lib/kconv.rb#270
  def issjis; end

  # call-seq:
  #    String#isutf8   => true or false
  #
  # Returns whether <code>self</code>'s encoding is UTF-8 or not.
  #
  # source://nkf//lib/kconv.rb#282
  def isutf8; end

  # call-seq:
  #    String#kconv(to_enc, from_enc)
  #
  # Convert <code>self</code> to <code>to_enc</code>.
  # <code>to_enc</code> and <code>from_enc</code> are given as constants of Kconv or Encoding objects.
  #
  # source://nkf//lib/kconv.rb#205
  def kconv(to_enc, from_enc = T.unsafe(nil)); end

  # call-seq:
  #    String#toeuc   => string
  #
  # Convert <code>self</code> to EUC-JP
  #
  # source://nkf//lib/kconv.rb#224
  def toeuc; end

  # call-seq:
  #    String#tojis   => string
  #
  # Convert <code>self</code> to ISO-2022-JP
  #
  # source://nkf//lib/kconv.rb#218
  def tojis; end

  # call-seq:
  #    String#tolocale   => string
  #
  # Convert <code>self</code> to locale encoding
  #
  # source://nkf//lib/kconv.rb#254
  def tolocale; end

  # call-seq:
  #    String#tosjis   => string
  #
  # Convert <code>self</code> to Shift_JIS
  #
  # source://nkf//lib/kconv.rb#230
  def tosjis; end

  # call-seq:
  #    String#toutf16   => string
  #
  # Convert <code>self</code> to UTF-16
  #
  # source://nkf//lib/kconv.rb#242
  def toutf16; end

  # call-seq:
  #    String#toutf32   => string
  #
  # Convert <code>self</code> to UTF-32
  #
  # source://nkf//lib/kconv.rb#248
  def toutf32; end

  # call-seq:
  #    String#toutf8   => string
  #
  # Convert <code>self</code> to UTF-8
  #
  # source://nkf//lib/kconv.rb#236
  def toutf8; end
end
