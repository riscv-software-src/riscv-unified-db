# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `write_xlsx` gem.
# Please instead update this file by running `bin/tapioca gem write_xlsx`.


# source://write_xlsx//lib/write_xlsx/col_name.rb#6
class ColName
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [ColName] a new instance of ColName
  #
  # source://write_xlsx//lib/write_xlsx/col_name.rb#9
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/col_name.rb#14
  def col_str(col); end

  # source://write_xlsx//lib/write_xlsx/col_name.rb#18
  def row_str(row); end

  private

  # source://write_xlsx//lib/write_xlsx/col_name.rb#24
  def col_str_build(col); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://write_xlsx//lib/write_xlsx/compatibility.rb#64
  def ruby_18; end

  # source://write_xlsx//lib/write_xlsx/compatibility.rb#68
  def ruby_19; end
end

# Why would we ever use Ruby 1.8.7 when we can backport with something
# as simple as this?
#
# copied from prawn.
# modified by Hideo NAKAMURA
#
# source://write_xlsx//lib/write_xlsx/compatibility.rb#11
class String
  include ::Comparable

  # source://write_xlsx//lib/write_xlsx/compatibility.rb#12
  def first_line; end
end

# write is gem to create a new file in the Excel 2007+ XLSX format,
# and you can use the same interface as writeexcel gem.
# write_xlsx is converted from Perl’s module github.com/jmcnamara/excel-writer-xlsx .
#
# == Description
# The WriteXLSX supports the following features:
#
#    Multiple worksheets
#    Strings and numbers
#    Unicode text
#    Rich string formats
#    Formulas (including array formats)
#    cell formatting
#    Embedded images
#    Charts
#    Autofilters
#    Data validation
#    Conditional formatting
#    Tables
#    Hyperlinks
#    Defined names
#    Grouping/Outlines
#    Cell comments
#    Panes
#    Page set-up and printing options
# WriteXLSX uses the same interface as WriteExcel gem.
#
# == Synopsis
# To write a string, a formatted string, a number and a formula to the
# first worksheet in an Excel XMLX spreadsheet called ruby.xlsx:
#
#   require 'write_xlsx'
#
#   # Create a new Excel workbook
#   workbook = WriteXLSX.new('ruby.xlsx')
#
#   # Add a worksheet
#   worksheet = workbook.add_worksheet
#
#   #  Add and define a format
#   format = workbook.add_format # Add a format
#   format.set_bold
#   format.set_color('red')
#   format.set_align('center')
#
#   # Write a formatted and unformatted string, row and column notation.
#   col = row = 0
#   worksheet.write(row, col, "Hi Excel!", format)
#   worksheet.write(1,   col, "Hi Excel!")
#
#   # Write a number and a formula using A1 notation
#   worksheet.write('A3', 1.2345)
#   worksheet.write('A4', '=SIN(PI()/4)')
#
#   workbook.close
#
# == Description
#
# The WriteXLSX gem can be used to create an Excel file in the 2007+ XLSX
# format.
#
# The XLSX format is the Office Open XML(OOXML) format used by Excel 2007
# and later.
#
# Multiple worksheets can be added to a workbook and formatting can be applied
# to cells. Text, numbers and formulas can be written to the cells.
#
# This module cannot, as yet, be used to write to an exsisting Excel XLSX file.
#
# == WriteXLSX and WriteExcel
#
# WriteXLSX uses the same interface as the WriteExcel gem which produces an
# Excel file in binary XLS format.
#
# WriteXLSX supports all the features of WriteExcel and in some cases has more
# functionally.
#
# == Other Methods
#
# see Writexlsx::Workbook, Writexlsx::Worksheet, Writexlsx::Chart etc.
#
# source://write_xlsx//lib/write_xlsx.rb#88
class WriteXLSX < ::Writexlsx::Workbook; end

# source://write_xlsx//lib/write_xlsx.rb#95
class WriteXLSXDimensionError < ::StandardError; end

# source://write_xlsx//lib/write_xlsx.rb#92
class WriteXLSXInsufficientArgumentError < ::StandardError; end

# source://write_xlsx//lib/write_xlsx.rb#98
class WriteXLSXOptionParameterError < ::StandardError; end

# source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#9
module Writexlsx; end

# source://write_xlsx//lib/write_xlsx/chart/legend.rb#5
class Writexlsx::Chart
  include ::Writexlsx::Utility
  include ::Writexlsx::Gradient

  # @return [Chart] a new instance of Chart
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#215
  def initialize(subtype); end

  # Add a series and it's properties to a chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#268
  def add_series(params); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#175
  def already_inserted=(_arg0); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#563
  def already_inserted?; end

  # Assemble and write the XML file.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#245
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#178
  def axis2_ids; end

  # Add another chart to create a combined chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#457
  def combine(chart); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#174
  def combined; end

  # Assign an id to a each unique series formula or title/axis formula. Repeated
  # formulas such as for categories get the same id. If the series or title
  # has user specified data associated with it then that is also stored. This
  # data is used to populate cached Excel data when creating a chart.
  # If there is no user defined data then it will be populated by the parent
  # workbook in Workbook::_add_chart_data
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#541
  def data_id(full_formula, data); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#175
  def date_category=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#171
  def embedded; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#171
  def formula_data; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#171
  def formula_ids; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#173
  def height; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#169
  def id; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#169
  def id=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#170
  def index=(_arg0); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#567
  def is_secondary?; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#174
  def label_position_default; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#174
  def label_positions; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#169
  def name; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#169
  def name=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#170
  def palette=(_arg0); end

  # Switch name and name_formula parameters if required.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#519
  def process_names(name = T.unsafe(nil), name_formula = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#170
  def protection=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#176
  def series_index=(_arg0); end

  # Set the properties of the chart chartarea.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#365
  def set_chartarea(params); end

  # Set properties for the chart drop lines.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#443
  def set_drop_lines(params = T.unsafe(nil)); end

  # Setup the default configuration data for an embedded chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#464
  def set_embedded_config_data; end

  # Set properties for the chart high-low lines.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#450
  def set_high_low_lines(params = T.unsafe(nil)); end

  # Set the properties of the chart legend.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#349
  def set_legend(params); end

  # Set the properties of the chart plotarea.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#357
  def set_plotarea(params); end

  # Set dimensions for scale for the chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#399
  def set_size(params = T.unsafe(nil)); end

  # Set on of the 42 built-in Excel chart styles. The default style is 2.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#373
  def set_style(style_id = T.unsafe(nil)); end

  # The set_table method adds a data table below the horizontal axis with the
  # data used to plot the chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#415
  def set_table(params = T.unsafe(nil)); end

  # Set the properties of the chart title.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#342
  def set_title(params); end

  # Set properties for the chart up-down bars.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#423
  def set_up_down_bars(params = T.unsafe(nil)); end

  # Set the properties of the secondary X-axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#326
  def set_x2_axis(params = T.unsafe(nil)); end

  # Set the properties of the x-axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#307
  def set_x_axis(params = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#238
  def set_xml_writer(filename); end

  # Set the properties of the secondary Y-axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#334
  def set_y2_axis(params = T.unsafe(nil)); end

  # Set the properties of the Y-axis.
  #
  # The set_y_axis() method is used to set properties of the Y axis.
  # The properties that can be set are the same as for set_x_axis,
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#318
  def set_y_axis(params = T.unsafe(nil)); end

  # Set the option for displaying blank data in a chart. The default is 'gap'.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#381
  def show_blanks_as(option); end

  # Display data in hidden rows or columns on the chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#392
  def show_hidden_data; end

  # Set the option for displaying #N/A as an empty cell in a chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#574
  def show_na_as_empty_cell; end

  # Set dimensions for scale for the chart.
  # Backward compatibility with poorly chosen method name.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#399
  def size(params = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#173
  def width; end

  # Write the <c:barChart> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#471
  def write_bar_chart(params); end

  # Write the <c:valAx> element. Usually the Y axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1295
  def write_val_axis(x_axis, y_axis, axis_ids, position = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#177
  def writer=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#178
  def x2_axis; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#172
  def x_offset; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#172
  def x_scale; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#178
  def y2_axis; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#172
  def y_offset; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#172
  def y_scale; end

  private

  # Add a unique ids for primary or secondary axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#664
  def add_axis_ids(params); end

  # retun primary/secondary series by :primary_axes flag
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#616
  def axes_series(params); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#580
  def axis_setup; end

  # for <c:chartSpace> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#744
  def chart_space_attributes; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#595
  def display_setup; end

  # Find the overall type of the data associated with a series.
  #
  # TODO. Need to handle date type.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#629
  def get_data_type(data); end

  # Returns series which use the primary axes.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#648
  def get_primary_axes_series; end

  # Returns series which use the secondary axes.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#656
  def get_secondary_axes_series; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2016
  def has_fill_formatting(element); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#672
  def ids; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1744
  def position_allowed; end

  # Returns series which use the primary axes.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#648
  def primary_axes_series; end

  # Returns series which use the secondary axes.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#656
  def secondary_axes_series; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2058
  def series_property(object, property); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#697
  def set_axis_defaults; end

  # Setup the default properties for a chart.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#685
  def set_default_properties; end

  # Write the <a:alpha> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2116
  def write_a_alpha(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2971
  def write_a_bg_clr(color); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2967
  def write_a_fg_clr(color); end

  # Write the <a:fillToRect> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2921
  def write_a_fill_to_rect(type); end

  # Write the <a:gradFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2843
  def write_a_grad_fill(gradient); end

  # Write the <a:gsLst> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2870
  def write_a_gs_lst(gradient); end

  # Write the <a:latin> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2653
  def write_a_latin(args); end

  # Write the <a:lin> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2893
  def write_a_lin(angle); end

  # Write the <a:ln> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2069
  def write_a_ln(line); end

  # Write the <a:noFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2109
  def write_a_no_fill; end

  # Write the <a:pPr> element for rich string titles.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1939
  def write_a_p_pr_rich(font); end

  # Write the <a:p> element for rich string titles.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1927
  def write_a_p_rich(title, font, ignore_rich_pr); end

  # Write the <a:path> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2909
  def write_a_path(type); end

  # Write the <a:pattFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2958
  def write_a_patt_fill(pattern); end

  # Write the <a:prstDash> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2125
  def write_a_prst_dash(val); end

  # Write the <a:r> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1946
  def write_a_r(title, font); end

  # Write the <a:rPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1958
  def write_a_r_pr(font); end

  # Write the <a:t> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1969
  def write_a_t(title); end

  # Write the <a:tileRect> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2942
  def write_a_tile_rect(type); end

  # Write the <c:auto> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1607
  def write_auto(val); end

  # Write the <c:autoTitleDeleted> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1846
  def write_auto_title_deleted; end

  # Write the axis font elements.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2637
  def write_axis_font(font); end

  # Write the <c:axId> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1212
  def write_axis_id(val); end

  # Write the <c:axId> elements for the primary or secondary axes.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1194
  def write_axis_ids(params); end

  # Write the <c:axPos> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1512
  def write_axis_pos(val, reverse = T.unsafe(nil)); end

  # Write the <c:backward> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2209
  def write_backward(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2975
  def write_bars_base(tag, format); end

  # Write the <c:crossesAt> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1600
  def write_c_crosses_at(val); end

  # Write the <c:invertIfNegative> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2628
  def write_c_invert_if_negative(invert = T.unsafe(nil)); end

  # Write the <c:logBase> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1480
  def write_c_log_base(val); end

  # Write the <c:majorTimeUnit> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1704
  def write_c_major_time_unit(val); end

  # Write the <c:majorUnit> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1686
  def write_c_major_unit(val = T.unsafe(nil)); end

  # Write the <c:max> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1498
  def write_c_max(max = T.unsafe(nil)); end

  # Write the <c:min> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1505
  def write_c_min(min = T.unsafe(nil)); end

  # Write the <c:minorTimeUnit> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1713
  def write_c_minor_time_unit(val); end

  # Write the <c:minorUnit> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1695
  def write_c_minor_unit(val = T.unsafe(nil)); end

  # Write the <c:smooth> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2814
  def write_c_smooth(smooth); end

  # Write the <c:cat> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1072
  def write_cat(series); end

  # Write the <c:catAx> element. Usually the X axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1219
  def write_cat_axis(params); end

  # Write the <c:numFmt> element. Special case handler for category axes which
  # don't always have a number format.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1535
  def write_cat_number_format(axis); end

  # Write the <c:chart> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#772
  def write_chart; end

  # Write the <c:chartSpace> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#739
  def write_chart_space(&block); end

  # Write the chart type element. This method should be overridden by the
  # subclasses.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#934
  def write_chart_type; end

  # Write the <c:crossAx> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1584
  def write_cross_axis(val = T.unsafe(nil)); end

  # Write the <c:crossBetween> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1677
  def write_cross_between(val = T.unsafe(nil)); end

  # Write the <c:crosses> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1591
  def write_crosses(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1441
  def write_crossing(crossing); end

  # Write the custom error bars type.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2749
  def write_custom_error(error_bars); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2756
  def write_custom_error_base(tag, values, data); end

  # Write parts of the <c:dLbl> element for labels where only the formatting has
  # changed.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2534
  def write_custom_label_format_only(label); end

  # Write parts of the <c:dLbl> element for formulas.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2512
  def write_custom_label_formula(label); end

  # Write parts of the <c:dLbl> element for strings.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2491
  def write_custom_label_str(label); end

  # Write the <c:dLbl> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2454
  def write_custom_labels(parent, labels); end

  # Write the <c:dLblPos> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2614
  def write_d_lbl_pos(val); end

  # Write the <c:dLbls> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2420
  def write_d_lbls(labels); end

  # Write the <c:dPt> elements.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2393
  def write_d_pt(points = T.unsafe(nil)); end

  # Write an individual <c:dPt> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2408
  def write_d_pt_point(index, point); end

  # Write the <c:dTable> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2660
  def write_d_table; end

  # Write the <c:numberFormat> element for data labels.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1542
  def write_data_label_number_format(format_code); end

  # Write the <c:dateAx> element. Usually the X axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1372
  def write_date_axis(params); end

  # Write the <c:delete> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2621
  def write_delete(val); end

  # Write the <c:dispBlanksAs> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#802
  def write_disp_blanks_as; end

  # Write the <c:dispEq> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2225
  def write_disp_eq; end

  # Write the <c:dispRSqr> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2232
  def write_disp_rsqr; end

  # Write the <c:dispUnits> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2825
  def write_disp_units(units, display); end

  # Write the <c:upBars> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2807
  def write_down_bars(format); end

  # Write the <c:dropLines> elent.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2279
  def write_drop_lines; end

  # Write the <c:errBarType> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2721
  def write_err_bar_type(val); end

  # Write the <c:errBars> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2677
  def write_err_bars(direction, error_bars); end

  # Write the <c:errDir> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2714
  def write_err_dir(val); end

  # Write the <c:errValType> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2728
  def write_err_val_type(val); end

  # Write the X and Y error bars.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2667
  def write_error_bars(error_bars); end

  # Write the <c:val> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2742
  def write_error_val(val); end

  # Write the <c:extLst> element for the display N/A as empty cell option.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#998
  def write_ext_lst_display_na; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#970
  def write_ext_lst_inverted_fill(color); end

  # Write the <c:formatCode> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2352
  def write_format_code(data); end

  # Write the <c:forward> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2200
  def write_forward(val); end

  # Write the <c:gapWidth> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2791
  def write_gap_width(val = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1663
  def write_gridlines_base(tag, gridlines); end

  # Write the <c:grouping> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#939
  def write_grouping(val); end

  # Write the <c:headerFooter> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1809
  def write_header_footer; end

  # Write the <c:hiLowLines> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2272
  def write_hi_low_lines; end

  # Write the <c:idx> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1047
  def write_idx(val); end

  # Write the <c:intercept> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2218
  def write_intercept(val); end

  # Write the <c:labelAlign> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1614
  def write_label_align(val); end

  # Write the <c:labelOffset> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1627
  def write_label_offset(val); end

  # Write the <c:lang> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#756
  def write_lang; end

  # Write the <c:layout> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#898
  def write_layout(layout = T.unsafe(nil), type = T.unsafe(nil)); end

  # Write the <c:legend> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1722
  def write_legend; end

  # Write the <c:legendEntry> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1764
  def write_legend_entry(index); end

  # Write the <c:legendPos> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1757
  def write_legend_pos(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2283
  def write_lines_base(lines, tag); end

  # Write the <c:majorGridlines> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1652
  def write_major_gridlines(gridlines); end

  # Write the <c:majorTickMark> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1556
  def write_major_tick_mark(val); end

  # Write the <c:manualLayout> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#911
  def write_manual_layout(layout, type); end

  # Write the <c:marker> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1976
  def write_marker(marker = T.unsafe(nil)); end

  # Write the <c:size> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2005
  def write_marker_size(val); end

  # Write the <c:marker> element without a sub-element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1996
  def write_marker_value; end

  # Write the <c:minorGridlines> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1659
  def write_minor_gridlines(gridlines); end

  # Write the <c:minorTickMark> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1565
  def write_minor_tick_mark(val); end

  # Write the <c:multiLvLStrRef> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1152
  def write_multi_lvl_str_ref(formula, data); end

  # Write the <c:name> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2177
  def write_name(data); end

  # Write the <c:noEndCap> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2735
  def write_no_end_cap; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2309
  def write_num_base(tag, data); end

  # Write the <c:numCache> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2305
  def write_num_cache(data); end

  # Write the <c:numLit> element for literal number list elements.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1177
  def write_num_lit(data); end

  # Write the <c:numRef> or <c:strRef> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1121
  def write_num_or_str_ref(tag, formula, data, type); end

  # Write the <c:numRef> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1138
  def write_num_ref(formula, data, type); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2762
  def write_num_ref_or_lit(values, data); end

  # Write the <c:numberFormat> element. Note: It is assumed that if a user
  # defined number format is supplied (i.e., non-default) then the sourceLinked
  # attribute is 0. The user can override this if required.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1527
  def write_number_format(axis); end

  # Write the <c:order> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1054
  def write_order(val); end

  # Write the <c:orientation> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1489
  def write_orientation(reverse = T.unsafe(nil)); end

  # Write the <c:overlap> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2296
  def write_overlap(val = T.unsafe(nil)); end

  # Write the <c:overlay> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1776
  def write_overlay; end

  # Write the <c:pageMargins> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1816
  def write_page_margins; end

  # Write the <c:pageSetup> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1839
  def write_page_setup; end

  # Write the <c:period> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2193
  def write_period(val = T.unsafe(nil)); end

  # Write the <c:plotArea> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#811
  def write_plot_area; end

  # Write the <c:plotVisOnly> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1783
  def write_plot_vis_only; end

  # Write the <c:printSettings> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1795
  def write_print_settings; end

  # Write the <c:protection> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2384
  def write_protection; end

  # Write the <c:pt> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2366
  def write_pt(idx, value); end

  # Write the <c:ptCount> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2359
  def write_pt_count(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#2345
  def write_pts(data); end

  # Write the <c:rich> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1910
  def write_rich(title, font, is_y_axis, ignore_rich_pr = T.unsafe(nil)); end

  # Write the <c:scaling> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1464
  def write_scaling(reverse, min = T.unsafe(nil), max = T.unsafe(nil), log_base = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1452
  def write_scaling_with_param(param); end

  # Write the <c:separator> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2586
  def write_separator(data); end

  # Write the <c:ser> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#953
  def write_ser(series); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1020
  def write_ser_base(series); end

  # Write the series elements.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#946
  def write_series(series); end

  # Write the <c:f> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1184
  def write_series_formula(formula); end

  # Write the series name.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1061
  def write_series_name(series); end

  # Write the <c:showCatName> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2565
  def write_show_cat_name; end

  # Write the <c:showLeaderLines> element. This is different for Pie/Doughnut
  # charts. Other chart types only supported leader lines after Excel 2015 via
  # an extension element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2593
  def write_show_leader_lines; end

  # Write the <c:showLegendKey> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2551
  def write_show_legend_key; end

  # Write the <c:showPercent> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2579
  def write_show_percent; end

  # Write the <c:showSerName> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2572
  def write_show_ser_name; end

  # Write the <c:showVal> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2558
  def write_show_val; end

  # Write the <c:spPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2029
  def write_sp_pr(series); end

  # Write the <c:strCache> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2338
  def write_str_cache(data); end

  # Write the <c:strRef> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1145
  def write_str_ref(formula, data, type); end

  # Write the <c:style> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#763
  def write_style; end

  # Write the <c:symbol> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2012
  def write_symbol(val); end

  # Write the <c:tickLblPos> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1574
  def write_tick_label_pos(val); end

  # Write the <c:tickLblSkip> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1634
  def write_tick_lbl_skip(val); end

  # Write the <c:tickMarkSkip> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1643
  def write_tick_mark_skip(val); end

  # Write the <c:title> element for a rich string.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1869
  def write_title_formula(title, is_y_axis = T.unsafe(nil), axis = T.unsafe(nil), layout = T.unsafe(nil), overlay = T.unsafe(nil)); end

  # Write the <c:title> element for a rich string.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1855
  def write_title_rich(title, is_y_axis, font, layout, overlay = T.unsafe(nil)); end

  # Write the <c:trendline> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2132
  def write_trendline(trendline); end

  # Write the <c:trendlineLbl> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2239
  def write_trendline_lbl(trendline); end

  # Write the <c:numFmt> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2257
  def write_trendline_num_fmt; end

  # Write the <c:order> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2186
  def write_trendline_order(val = T.unsafe(nil)); end

  # Write the <c:trendlineType> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2170
  def write_trendline_type(val); end

  # Write the <c:tx> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1901
  def write_tx_formula(title, data_id); end

  # Write the <c:tx> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1885
  def write_tx_rich(title, is_y_axis, font); end

  # Write the <c:tx> element with a simple value such as for series names.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1894
  def write_tx_value(title); end

  # Write the <c:upBars> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2800
  def write_up_bars(format); end

  # Write the <c:upDownBars> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2773
  def write_up_down_bars; end

  # Write the <c:v> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#2377
  def write_v(data); end

  # Write the <c:val> element.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#1103
  def write_val(series); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1307
  def write_val_axis_base(x_axis, y_axis, axis_ids_0, axis_ids_1, position); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#1107
  def write_val_base(formula, data_id, tag); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#718
  def x2_axis_defaults; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#704
  def x_axis_defaults; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#727
  def y2_axis_defaults; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#711
  def y_axis_defaults; end

  class << self
    # Factory method for returning chart objects based on their class type.
    #
    # source://write_xlsx//lib/write_xlsx/chart.rb#183
    def factory(current_subclass, subtype = T.unsafe(nil)); end
  end
end

# source://write_xlsx//lib/write_xlsx/chart/axis.rb#10
class Writexlsx::Chart::Axis < ::Writexlsx::Chart::Caption
  # Returns the value of attribute crossing.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#18
  def crossing; end

  # Returns the value of attribute defaults.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#13
  def defaults; end

  # Sets the attribute defaults
  #
  # @param value the value to set the attribute defaults to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#13
  def defaults=(_arg0); end

  # Returns the value of attribute display_units.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#17
  def display_units; end

  # Returns the value of attribute display_units_visible.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#17
  def display_units_visible; end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#21
  def fill; end

  # Returns the value of attribute interval_tick.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#20
  def interval_tick; end

  # Returns the value of attribute interval_unit.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#19
  def interval_unit; end

  # Returns the value of attribute label_align.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#21
  def label_align; end

  # Returns the value of attribute label_position.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#18
  def label_position; end

  # Returns the value of attribute layout.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#19
  def layout; end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#21
  def line; end

  # Returns the value of attribute log_base.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#18
  def log_base; end

  # Returns the value of attribute major_gridlines.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#20
  def major_gridlines; end

  # Returns the value of attribute major_tick_mark.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#15
  def major_tick_mark; end

  # Sets the attribute major_tick_mark
  #
  # @param value the value to set the attribute major_tick_mark to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#15
  def major_tick_mark=(_arg0); end

  # Returns the value of attribute major_unit.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#16
  def major_unit; end

  # Returns the value of attribute major_unit_type.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#16
  def major_unit_type; end

  # Returns the value of attribute max.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def max; end

  # Sets the attribute max
  #
  # @param value the value to set the attribute max to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def max=(_arg0); end

  # Convert user defined axis values into axis instance.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#26
  def merge_with_hash(params); end

  # Returns the value of attribute min.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def min; end

  # Sets the attribute min
  #
  # @param value the value to set the attribute min to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def min=(_arg0); end

  # Returns the value of attribute minor_gridlines.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#20
  def minor_gridlines; end

  # Returns the value of attribute minor_tick_mark.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#15
  def minor_tick_mark; end

  # Sets the attribute minor_tick_mark
  #
  # @param value the value to set the attribute minor_tick_mark to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#15
  def minor_tick_mark=(_arg0); end

  # Returns the value of attribute minor_unit.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#16
  def minor_unit; end

  # Returns the value of attribute minor_unit_type.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#16
  def minor_unit_type; end

  # Returns the value of attribute num_font.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#19
  def num_font; end

  # Returns the value of attribute num_format.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def num_format; end

  # Sets the attribute num_format
  #
  # @param value the value to set the attribute num_format to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def num_format=(_arg0); end

  # Returns the value of attribute num_format_linked.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#19
  def num_format_linked; end

  # Returns the value of attribute position.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def position; end

  # Sets the attribute position
  #
  # @param value the value to set the attribute position to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#14
  def position=(_arg0); end

  # Returns the value of attribute position_axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#18
  def position_axis; end

  # Returns the value of attribute reverse.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#20
  def reverse; end

  # Returns the value of attribute text_axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#21
  def text_axis; end

  # Returns the value of attribute visible.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#18
  def visible; end

  # Write the <c:numFmt> element. Special case handler for category axes which
  # don't always have a number format.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#71
  def write_cat_number_format(writer, cat_has_num_fmt); end

  # Write the <c:numberFormat> element. Note: It is assumed that if a user
  # defined number format is supplied (i.e., non-default) then the sourceLinked
  # attribute is 0. The user can override this if required.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#63
  def write_number_format(writer); end

  private

  # Convert user defined display units to internal units.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#113
  def get_display_units(display_units); end

  # Convert user tick types to internal units.
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#134
  def get_tick_type(tick_type); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#91
  def num_fmt_attributes; end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#188
  def set_axis_fill(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#184
  def set_axis_line(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#180
  def set_axis_name_layout(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#147
  def set_display_units(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#151
  def set_display_units_visible(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#175
  def set_font_properties(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#98
  def set_major_minor_gridlines(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#155
  def set_position(args); end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#161
  def set_position_axis; end

  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#83
  def source_linked; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart/axis.rb#79
  def user_defined_num_fmt_set?; end
end

# source://write_xlsx//lib/write_xlsx/chart/caption.rb#6
class Writexlsx::Chart::Caption
  include ::Writexlsx::Utility

  # @return [Caption] a new instance of Caption
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#12
  def initialize(chart); end

  # Returns the value of attribute data_id.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def data_id; end

  # Sets the attribute data_id
  #
  # @param value the value to set the attribute data_id to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def data_id=(_arg0); end

  # Returns the value of attribute formula.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def formula; end

  # Sets the attribute formula
  #
  # @param value the value to set the attribute formula to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def formula=(_arg0); end

  # Returns the value of attribute layout.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#10
  def layout; end

  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#16
  def merge_with_hash(params); end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def name=(_arg0); end

  # Returns the value of attribute name_font.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def name_font; end

  # Sets the attribute name_font
  #
  # @param value the value to set the attribute name_font to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#9
  def name_font=(_arg0); end

  # Returns the value of attribute none.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#10
  def none; end

  # Returns the value of attribute overlay.
  #
  # source://write_xlsx//lib/write_xlsx/chart/caption.rb#10
  def overlay; end
end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#8
class Writexlsx::Chart::Chartline
  include ::Writexlsx::Utility
  include ::Writexlsx::Gradient

  # @return [Chartline] a new instance of Chartline
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#14
  def initialize(params); end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#12
  def fill; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#42
  def fill_defined?; end

  # Returns the value of attribute gradient.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#12
  def gradient; end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#12
  def line; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#38
  def line_defined?; end

  # Returns the value of attribute pattern.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#12
  def pattern; end

  # Returns the value of attribute type.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#12
  def type; end
end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#178
class Writexlsx::Chart::Errorbars
  include ::Writexlsx::Utility

  # @return [Errorbars] a new instance of Errorbars
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#184
  def initialize(params); end

  # Returns the value of attribute direction.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#181
  def direction; end

  # Returns the value of attribute endcap.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#181
  def endcap; end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#181
  def fill; end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#181
  def line; end

  # Returns the value of attribute minus_data.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#182
  def minus_data; end

  # Returns the value of attribute minus_values.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#182
  def minus_values; end

  # Returns the value of attribute plus_data.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#182
  def plus_data; end

  # Returns the value of attribute plus_values.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#182
  def plus_values; end

  # Returns the value of attribute type.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#181
  def type; end

  # Returns the value of attribute value.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#181
  def value; end

  private

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#215
  def error_bar_direction(direction); end

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#205
  def types; end
end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#50
class Writexlsx::Chart::Gridline < ::Writexlsx::Chart::Chartline
  # @return [Gridline] a new instance of Gridline
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#53
  def initialize(params); end

  # Returns the value of attribute visible.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#51
  def visible; end
end

# source://write_xlsx//lib/write_xlsx/chart/legend.rb#6
class Writexlsx::Chart::Legend
  # @return [Legend] a new instance of Legend
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#10
  def initialize; end

  # Returns the value of attribute delete_series.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def delete_series; end

  # Sets the attribute delete_series
  #
  # @param value the value to set the attribute delete_series to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def delete_series=(_arg0); end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def fill; end

  # Sets the attribute fill
  #
  # @param value the value to set the attribute fill to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def fill=(_arg0); end

  # Returns the value of attribute font.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def font; end

  # Sets the attribute font
  #
  # @param value the value to set the attribute font to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def font=(_arg0); end

  # Returns the value of attribute gradient.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def gradient; end

  # Sets the attribute gradient
  #
  # @param value the value to set the attribute gradient to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def gradient=(_arg0); end

  # Returns the value of attribute layout.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def layout; end

  # Sets the attribute layout
  #
  # @param value the value to set the attribute layout to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def layout=(_arg0); end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def line; end

  # Sets the attribute line
  #
  # @param value the value to set the attribute line to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def line=(_arg0); end

  # Returns the value of attribute pattern.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def pattern; end

  # Sets the attribute pattern
  #
  # @param value the value to set the attribute pattern to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#7
  def pattern=(_arg0); end

  # Returns the value of attribute position.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def position; end

  # Sets the attribute position
  #
  # @param value the value to set the attribute position to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/legend.rb#8
  def position=(_arg0); end
end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#139
class Writexlsx::Chart::Marker < ::Writexlsx::Chart::Chartline
  # @return [Marker] a new instance of Marker
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#142
  def initialize(params); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#152
  def automatic?; end

  # Returns the value of attribute size.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#140
  def size; end

  private

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#158
  def types; end
end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#47
class Writexlsx::Chart::Point < ::Writexlsx::Chart::Chartline; end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#227
class Writexlsx::Chart::Series
  include ::Writexlsx::Utility
  include ::Writexlsx::Gradient

  # @return [Series] a new instance of Series
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#238
  def initialize(chart, params = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#278
  def ==(other); end

  # Returns the value of attribute cat_data_id.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#232
  def cat_data_id; end

  # Returns the value of attribute categories.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#231
  def categories; end

  # Returns the value of attribute error_bars.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#235
  def error_bars; end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#232
  def fill; end

  # Returns the value of attribute gradient.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#232
  def gradient; end

  # Returns the value of attribute invert_if_negative.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#233
  def invert_if_negative; end

  # Returns the value of attribute inverted_color.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#234
  def inverted_color; end

  # Returns the value of attribute labels.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#233
  def labels; end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#236
  def line; end

  # Sets the attribute line
  #
  # @param value the value to set the attribute line to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#236
  def line=(_arg0); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#292
  def line_defined?; end

  # Returns the value of attribute marker.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#236
  def marker; end

  # Sets the attribute marker
  #
  # @param value the value to set the attribute marker to.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#236
  def marker=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#231
  def name; end

  # Returns the value of attribute name_formula.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#231
  def name_formula; end

  # Returns the value of attribute name_id.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#231
  def name_id; end

  # Returns the value of attribute pattern.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#232
  def pattern; end

  # Returns the value of attribute points.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#235
  def points; end

  # Returns the value of attribute smooth.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#233
  def smooth; end

  # Returns the value of attribute trendline.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#233
  def trendline; end

  # Returns the value of attribute val_data_id.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#232
  def val_data_id; end

  # Returns the value of attribute values.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#231
  def values; end

  # Returns the value of attribute x2_axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#235
  def x2_axis; end

  # Returns the value of attribute y2_axis.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#235
  def y2_axis; end

  private

  # Convert and aref of row col values to a range formula.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#301
  def aref_to_formula(data); end

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#314
  def errorbars(x, y); end

  # Convert user defined labels properties to the structure required internally.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#324
  def labels_properties(labels); end

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#308
  def set_data_ids(params); end
end

# source://write_xlsx//lib/write_xlsx/chart/series.rb#59
class Writexlsx::Chart::Trendline < ::Writexlsx::Chart::Chartline
  # @return [Trendline] a new instance of Trendline
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#64
  def initialize(params); end

  # Returns the value of attribute backward.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#60
  def backward; end

  # Returns the value of attribute display_equation.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#61
  def display_equation; end

  # Returns the value of attribute display_r_squared.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#61
  def display_r_squared; end

  # Returns the value of attribute forward.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#60
  def forward; end

  # Returns the value of attribute intercept.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#61
  def intercept; end

  # Returns the value of attribute label.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#62
  def label; end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#60
  def name; end

  # Returns the value of attribute order.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#60
  def order; end

  # Returns the value of attribute period.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#60
  def period; end

  private

  # Convert user defined trendline label properties to the structure required
  # internally.
  #
  # source://write_xlsx//lib/write_xlsx/chart/series.rb#86
  def trendline_label_properties(_label); end

  # source://write_xlsx//lib/write_xlsx/chart/series.rb#127
  def types; end
end

# source://write_xlsx//lib/write_xlsx/chart.rb#51
class Writexlsx::ChartArea
  include ::Writexlsx::Utility
  include ::Writexlsx::Gradient

  # @return [ChartArea] a new instance of ChartArea
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#57
  def initialize(params = T.unsafe(nil)); end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#55
  def fill; end

  # Returns the value of attribute gradient.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#55
  def gradient; end

  # Returns the value of attribute layout.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#55
  def layout; end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#55
  def line; end

  # Returns the value of attribute pattern.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#55
  def pattern; end

  private

  # source://write_xlsx//lib/write_xlsx/chart.rb#160
  def numeric_or_downcase(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#88
  def params_to_border(params); end

  # Get the Spreadsheet::WriteExcel line pattern for backward compatibility.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#113
  def swe_line_pattern(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#117
  def swe_line_pattern_hash; end

  # Get the Spreadsheet::WriteExcel line weight for backward compatibility.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#143
  def swe_line_weight(val); end

  # source://write_xlsx//lib/write_xlsx/chart.rb#147
  def swe_line_weight_hash; end
end

# source://write_xlsx//lib/write_xlsx/chartsheet.rb#17
class Writexlsx::Chartsheet < ::Writexlsx::Worksheet
  # @return [Chartsheet] a new instance of Chartsheet
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#22
  def initialize(workbook, index, name); end

  # Encapsulated Chart methods.
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#106
  def add_series(*args); end

  # Assemble and write the XML file.
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#35
  def assemble_xml_file; end

  # Sets the attribute chart
  #
  # @param value the value to set the attribute chart to.
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#20
  def chart=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#193
  def external_links; end

  # Set up chart/drawings.
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#181
  def prepare_chart(_index, chart_id, drawing_id); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#64
  def protect(password = T.unsafe(nil), user_options = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#138
  def set_chartarea(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#170
  def set_drop_lines(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#174
  def set_high_low_lines(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#130
  def set_legend(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#134
  def set_plotarea(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#158
  def set_size(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#142
  def set_style(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#162
  def set_table(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#126
  def set_title(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#166
  def set_up_down_bars(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#118
  def set_x2_axis(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#110
  def set_x_axis(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#122
  def set_y2_axis(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#114
  def set_y_axis(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#146
  def show_blanks_as(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#154
  def show_hidden_data(*args); end

  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#150
  def show_na_as_empty_cell; end

  private

  # Write the <chartsheet> element. This is the root element of Chartsheet.
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#205
  def write_chartsheet(&block); end

  # Write the <sheetPr> element for Sheet level properties.
  #
  # source://write_xlsx//lib/write_xlsx/chartsheet.rb#221
  def write_sheet_pr; end
end

# source://write_xlsx//lib/write_xlsx/colors.rb#5
class Writexlsx::Colors
  # get_color(colour)
  #
  # Used in conjunction with the set_xxx_color methods to convert a color
  # string into a number. Color range is 0..63 but we will restrict it
  # to 8..63 to comply with Gnumeric. Colors 0..7 are repeated in 8..15.
  #
  # source://write_xlsx//lib/write_xlsx/colors.rb#37
  def color(color_code = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/colors.rb#57
  def inspect; end
end

# source://write_xlsx//lib/write_xlsx/colors.rb#6
Writexlsx::Colors::COLORS = T.let(T.unsafe(nil), Hash)

# source://write_xlsx//lib/write_xlsx/drawing.rb#8
class Writexlsx::Drawing
  # @return [Drawing] a new instance of Drawing
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#12
  def initialize(type, dimensions, width, height, shape, anchor, rel_index = T.unsafe(nil), url_rel_index = T.unsafe(nil), tip = T.unsafe(nil), name = T.unsafe(nil), description = T.unsafe(nil), decorative = T.unsafe(nil)); end

  # Returns the value of attribute anchor.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def anchor; end

  # Sets the attribute anchor
  #
  # @param value the value to set the attribute anchor to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def anchor=(_arg0); end

  # Returns the value of attribute decorative.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#10
  def decorative; end

  # Returns the value of attribute description.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def description=(_arg0); end

  # Returns the value of attribute dimensions.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def dimensions; end

  # Sets the attribute dimensions
  #
  # @param value the value to set the attribute dimensions to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def dimensions=(_arg0); end

  # Returns the value of attribute height.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def height; end

  # Sets the attribute height
  #
  # @param value the value to set the attribute height to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def height=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def name=(_arg0); end

  # Returns the value of attribute rel_index.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def rel_index; end

  # Sets the attribute rel_index
  #
  # @param value the value to set the attribute rel_index to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def rel_index=(_arg0); end

  # Returns the value of attribute shape.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def shape; end

  # Sets the attribute shape
  #
  # @param value the value to set the attribute shape to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def shape=(_arg0); end

  # Returns the value of attribute tip.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#10
  def tip; end

  # Returns the value of attribute type.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def type=(_arg0); end

  # Returns the value of attribute url_rel_index.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def url_rel_index; end

  # Sets the attribute url_rel_index
  #
  # @param value the value to set the attribute url_rel_index to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def url_rel_index=(_arg0); end

  # Returns the value of attribute width.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#9
  def width=(_arg0); end
end

# source://write_xlsx//lib/write_xlsx/drawing.rb#28
class Writexlsx::Drawings
  include ::Writexlsx::Utility

  # @return [Drawings] a new instance of Drawings
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#33
  def initialize; end

  # Add a chart, image or shape sub object to the drawing.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#73
  def add_drawing_object(drawing); end

  # Assemble and write the XML file.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#51
  def assemble_xml_file; end

  # Sets the attribute embedded
  #
  # @param value the value to set the attribute embedded to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#31
  def embedded=(_arg0); end

  # Sets the attribute orientation
  #
  # @param value the value to set the attribute orientation to.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#31
  def orientation=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/drawing.rb#44
  def set_xml_writer(filename); end

  # source://write_xlsx//lib/write_xlsx/drawing.rb#40
  def xml_str; end

  private

  # Write the <a16:creationId> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#395
  def write_a16_creation_id; end

  # Write the <a:avLst> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#799
  def write_a_av_lst(shape = T.unsafe(nil)); end

  # Write the <a:blip> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#671
  def write_a_blip(index); end

  # Write the <a:ext> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#774
  def write_a_ext(cx, cy); end

  # Write the <a:fillRect> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#697
  def write_a_fill_rect; end

  # Write the <a:graphicFrameLocks> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#424
  def write_a_graphic_frame_locks; end

  # Write the <a:hlinkClick> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#336
  def write_a_hlink_click(index, tip); end

  # Write the <a:ln> elements.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#845
  def write_a_ln(shape = T.unsafe(nil)); end

  # Write the <a:off> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#762
  def write_a_off(x, y); end

  # Write the <a:picLocks> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#648
  def write_a_pic_locks; end

  # Write the <a:prstGeom> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#786
  def write_a_prst_geom(shape = T.unsafe(nil)); end

  # Write the <a:solidFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#834
  def write_a_solid_fill(rgb = T.unsafe(nil)); end

  # Write the <a:stretch> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#687
  def write_a_stretch; end

  # Write the <a:ext> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#369
  def write_a_uri_ext(uri); end

  # Write the <a:xfrm> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#741
  def write_a_xfrm(col_absolute, row_absolute, width, height, shape = T.unsafe(nil)); end

  # Write the <xdr:absoluteAnchor> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#156
  def write_absolute_anchor(index); end

  # Write the <adec:decorative> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#380
  def write_adec_decorative; end

  # Write the <a:graphic> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#477
  def write_atag_graphic(index); end

  # Write the <a:graphicData> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#487
  def write_atag_graphic_data(index); end

  # Write the <xdr:blipFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#659
  def write_blip_fill(index); end

  # Write the <c:chart> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#501
  def write_c_chart(id); end

  # Write the <xdr:cNvGraphicFramePr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#410
  def write_c_nv_graphic_frame_pr; end

  # Write the <xdr:cNvPicPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#638
  def write_c_nv_pic_pr; end

  # Write the <xdr:cNvPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#308
  def write_c_nv_pr(index, name, description = T.unsafe(nil), url_rel_index = T.unsafe(nil), tip = T.unsafe(nil), decorative = T.unsafe(nil)); end

  # Write the <xdr:clientData> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#518
  def write_client_data; end

  # Write the <xdr:col> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#217
  def write_col(data); end

  # Write the <xdr:colOff> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#224
  def write_col_off(data); end

  # Write the <adec:decorative> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#354
  def write_decorative; end

  # Write the <xdr:wsDr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#82
  def write_drawing_workspace(&block); end

  # Write the <xdr:from> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#185
  def write_from(col, row, col_offset, row_offset); end

  # Write the <xdr:graphicFrame> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#269
  def write_graphic_frame(index, rel_index, name = T.unsafe(nil), description = T.unsafe(nil), decorative = T.unsafe(nil), macro = T.unsafe(nil)); end

  # Write the <xdr:nvCxnSpPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#557
  def write_nv_cxn_sp_pr(index, shape); end

  # Write the <xdr:nvGraphicFramePr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#290
  def write_nv_graphic_frame_pr(index, name = T.unsafe(nil), description = T.unsafe(nil), decorative = T.unsafe(nil)); end

  # Write the <xdr:nvPicPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#623
  def write_nv_pic_pr(index, _rel_index, description, url_rel_index, tip, decorative); end

  # Write the <xdr:NvSpPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#588
  def write_nv_sp_pr(index, shape); end

  # Write the <xdr:pic> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#604
  def write_pic(index, rel_index, col_absolute, row_absolute, width, height, description, url_rel_index, tip, decorative); end

  # Write the <xdr:pos> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#245
  def write_pos(x, y); end

  # Write the <xdr:row> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#231
  def write_row(data); end

  # Write the <xdr:rowOff> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#238
  def write_row_off(data); end

  # Write the <xdr:sp> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#525
  def write_sp(index, col_absolute, row_absolute, width, height, shape); end

  # Write the <xdr:spPr> element, for charts.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#704
  def write_sp_pr(col_absolute, row_absolute, width, height, shape = T.unsafe(nil)); end

  # Write the <xdr:to> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#201
  def write_to(col, row, col_offset, row_offset); end

  # Write the <xdr:twoCellAnchor> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#95
  def write_two_cell_anchor(*args); end

  # Write the <xdr:txBody> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#877
  def write_tx_body(shape); end

  # Write the <xdr:ext> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#257
  def write_xdr_ext(cx, cy); end

  # Write the <xdr:spPr> element for shapes.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#716
  def write_xdr_sp_pr(col_absolute, row_absolute, width, height, shape); end

  # Write the <xdr:xfrm> element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#435
  def write_xfrm; end

  # Write the <a:ext> xfrm sub-element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#462
  def write_xfrm_extension; end

  # Write the <a:off> xfrm sub-element.
  #
  # source://write_xlsx//lib/write_xlsx/drawing.rb#447
  def write_xfrm_offset; end
end

# source://write_xlsx//lib/write_xlsx/format.rb#7
class Writexlsx::Format
  include ::Writexlsx::Utility

  # @return [Format] a new instance of Format
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#22
  def initialize(formats, params = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/format.rb#570
  def [](attr); end

  # source://write_xlsx//lib/write_xlsx/format.rb#17
  def bg_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#17
  def bg_color=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#20
  def bold; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#498
  def bold?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#625
  def border_attributes; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def border_index; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def border_index=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def bottom; end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def bottom_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#304
  def color(color_code); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#494
  def color?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#12
  def color_indexed; end

  # Copy the attributes of another Format object.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#95
  def copy(other); end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def diag_border; end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def diag_border=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#12
  def diag_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#12
  def diag_type; end

  # source://write_xlsx//lib/write_xlsx/format.rb#19
  def dxf_bg_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#19
  def dxf_bg_color=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#19
  def dxf_fg_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#19
  def dxf_fg_color=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#10
  def dxf_index; end

  # source://write_xlsx//lib/write_xlsx/format.rb#17
  def fg_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#17
  def fg_color=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def fill_index; end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def fill_index=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def font; end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def font_condense; end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def font_condense=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def font_extend; end

  # source://write_xlsx//lib/write_xlsx/format.rb#16
  def font_extend=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def font_family; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def font_index; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def font_index=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#12
  def font_only; end

  # source://write_xlsx//lib/write_xlsx/format.rb#14
  def font_scheme; end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def font_script; end

  # source://write_xlsx//lib/write_xlsx/format.rb#20
  def font_strikeout; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#666
  def force_text_format?; end

  # Return properties for an Style xf <alignment> sub-element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#138
  def get_align_properties; end

  # Returns a unique hash key for alignment formats.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#274
  def get_alignment_key; end

  # Returns a unique hash key for a border style. Used by Workbook.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#244
  def get_border_key; end

  # Returns the index used by Worksheet->_XF()
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#294
  def get_dxf_index; end

  # Returns a unique hash key for a fill style. Used by Workbook.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#263
  def get_fill_key; end

  # Returns a unique hash key for a font. Used by Workbook.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#223
  def get_font_key; end

  # Returns a unique hash key for the Format object.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#216
  def get_format_key; end

  # Return properties for an Excel XML <Protection> element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#196
  def get_protection_properties; end

  # Returns the index used by Worksheet->_XF()
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#281
  def get_xf_index; end

  # source://write_xlsx//lib/write_xlsx/format.rb#522
  def has_border(flag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#526
  def has_border?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#530
  def has_dxf_border(flag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#534
  def has_dxf_border?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#562
  def has_dxf_fill(flag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#566
  def has_dxf_fill?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#546
  def has_dxf_font(flag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#550
  def has_dxf_font?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#554
  def has_fill(flag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#558
  def has_fill?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#538
  def has_font(flag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#542
  def has_font?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def hyperlink; end

  # source://write_xlsx//lib/write_xlsx/format.rb#209
  def inspect; end

  # source://write_xlsx//lib/write_xlsx/format.rb#20
  def italic; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#502
  def italic?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def left; end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def left_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#474
  def method_missing(name, *args); end

  # source://write_xlsx//lib/write_xlsx/format.rb#10
  def num_format; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def num_format_index; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def num_format_index=(_arg0); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#510
  def outline?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#17
  def pattern; end

  # source://write_xlsx//lib/write_xlsx/format.rb#17
  def pattern=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def quote_prefix; end

  # source://write_xlsx//lib/write_xlsx/format.rb#15
  def quote_prefix=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def right; end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def right_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#20
  def rotation; end

  # Set cell alignment.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#343
  def set_align(location); end

  # source://write_xlsx//lib/write_xlsx/format.rb#205
  def set_bold(bold = T.unsafe(nil)); end

  # Set cells borders to the same style
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#399
  def set_border(style); end

  # Set cells border to the same color
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#409
  def set_border_color(color); end

  # source://write_xlsx//lib/write_xlsx/format.rb#459
  def set_border_info(borders); end

  # Implements the Excel5 style "merge".
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#383
  def set_center_across(_flag = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/format.rb#444
  def set_font_info(fonts); end

  # :call-seq:
  #    set_format_properties( :bold => 1 [, :color => 'red'..] )
  #    set_format_properties( font [, shade, ..])
  #    set_format_properties( :bold => 1, font, ...)
  #      *) font  = { :color => 'red', :bold => 1 }
  #         shade = { :bg_color => 'green', :pattern => 1 }
  #
  # Convert hashes of properties to method calls.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#117
  def set_format_properties(*properties); end

  # Set the properties for the hyperlink style. This isn't a public method. To
  # be fixed when styles are supported.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#436
  def set_hyperlink(hyperlink); end

  # This was the way to implement a merge in Excel5. However it should have been
  # called "center_across" and not "merge".
  # This is now deprecated. Use set_center_across() or better merge_range().
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#392
  def set_merge(_merge = T.unsafe(nil)); end

  # Set the rotation angle of the text. An alignment property.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#419
  def set_rotation(rotation); end

  # Set vertical cell alignment. This is required by the set_properties() method
  # to differentiate between the vertical and horizontal properties.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#376
  def set_valign(location); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#514
  def shadow?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def size; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#506
  def strikeout?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def theme; end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def top; end

  # source://write_xlsx//lib/write_xlsx/format.rb#13
  def top_color; end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def underline; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#518
  def underline?; end

  # source://write_xlsx//lib/write_xlsx/format.rb#574
  def write_font(writer, worksheet, dxf_format = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/format.rb#606
  def write_font_rpr(writer, worksheet); end

  # source://write_xlsx//lib/write_xlsx/format.rb#640
  def xf_attributes; end

  # source://write_xlsx//lib/write_xlsx/format.rb#11
  def xf_id; end

  # source://write_xlsx//lib/write_xlsx/format.rb#10
  def xf_index; end

  private

  # Write the <condense> element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#729
  def write_condense(writer); end

  # Write the <extend> element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#736
  def write_extend(writer); end

  # source://write_xlsx//lib/write_xlsx/format.rb#686
  def write_font_family_scheme(writer); end

  # source://write_xlsx//lib/write_xlsx/format.rb#672
  def write_font_shapes(writer); end

  # Write the underline font element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#697
  def write_underline(writer, underline); end

  # Write the underline font element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#704
  def write_underline_attributes(underline); end

  # Write the <vertAlign> font sub-element.
  #
  # source://write_xlsx//lib/write_xlsx/format.rb#722
  def write_vert_align(writer, val); end

  class << self
    # Used in conjunction with the set_xxx_color methods to convert a color
    # string into a number. Color range is 0..63 but we will restrict it
    # to 8..63 to comply with Gnumeric. Colors 0..7 are repeated in 8..15.
    #
    # source://write_xlsx//lib/write_xlsx/format.rb#313
    def color(color_code); end
  end
end

# source://write_xlsx//lib/write_xlsx/formats.rb#7
class Writexlsx::Formats
  include ::Writexlsx::Utility

  # @return [Formats] a new instance of Formats
  #
  # source://write_xlsx//lib/write_xlsx/formats.rb#12
  def initialize; end

  # Returns the value of attribute dxf_format_indices.
  #
  # source://write_xlsx//lib/write_xlsx/formats.rb#10
  def dxf_format_indices; end

  # source://write_xlsx//lib/write_xlsx/formats.rb#26
  def dxf_index_by_key(key); end

  # Returns the value of attribute formats.
  #
  # source://write_xlsx//lib/write_xlsx/formats.rb#10
  def formats; end

  # source://write_xlsx//lib/write_xlsx/formats.rb#30
  def set_dxf_index_by_key(key); end

  # source://write_xlsx//lib/write_xlsx/formats.rb#22
  def set_xf_index_by_key(key); end

  # Returns the value of attribute xf_format_indices.
  #
  # source://write_xlsx//lib/write_xlsx/formats.rb#10
  def xf_format_indices; end

  # source://write_xlsx//lib/write_xlsx/formats.rb#18
  def xf_index_by_key(key); end
end

# source://write_xlsx//lib/write_xlsx/gradient.rb#4
module Writexlsx::Gradient
  # source://write_xlsx//lib/write_xlsx/gradient.rb#5
  def gradient_properties(args); end
end

# source://write_xlsx//lib/write_xlsx/workbook.rb#20
Writexlsx::OFFICE_URL = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#10
module Writexlsx::Package; end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#757
class Writexlsx::Package::AboveAverageFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#758
  def attributes; end
end

# source://write_xlsx//lib/write_xlsx/package/app.rb#9
class Writexlsx::Package::App
  include ::Writexlsx::Utility

  # @return [App] a new instance of App
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#13
  def initialize(workbook); end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#56
  def add_chartsheet_heading_pairs; end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#68
  def add_chartsheet_part_names; end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#88
  def add_heading_pair(heading_pair); end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#78
  def add_named_range_heading_pairs; end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#84
  def add_named_ranges_parts; end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#74
  def add_part_name(part_name); end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#45
  def add_worksheet_heading_pairs; end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#60
  def add_worksheet_part_names; end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#26
  def assemble_xml_file; end

  # Sets the attribute doc_security
  #
  # @param value the value to set the attribute doc_security to.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#11
  def doc_security=(_arg0); end

  # Set the document properties.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#97
  def set_properties(properties); end

  # source://write_xlsx//lib/write_xlsx/package/app.rb#22
  def set_xml_writer(filename); end

  private

  # Write the <AppVersion> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#248
  def write_app_version; end

  # Write the <Application> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#119
  def write_application; end

  # Write the <Company> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#190
  def write_company; end

  # Write the <DocSecurity> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#128
  def write_doc_security; end

  # Write the <HeadingPairs> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#144
  def write_heading_pairs; end

  # Write the <HyperlinkBase> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#228
  def write_hyperlink_base; end

  # Write the <HyperlinksChanged> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#239
  def write_hyperlinks_changed; end

  # Write the <LinksUpToDate> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#210
  def write_links_up_to_date; end

  # Write the <Manager> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#199
  def write_manager; end

  # Write the <Properties> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#106
  def write_properties(&block); end

  # Write the <ScaleCrop> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#135
  def write_scale_crop; end

  # Write the <SharedDoc> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#219
  def write_shared_doc; end

  # Write the <TitlesOfParts> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#153
  def write_titles_of_parts; end

  # Write the <vt:*> elements such as <vt:lpstr> and <vt:if>.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#183
  def write_vt_data(type, data); end

  # Write the <vt:vector> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/app.rb#163
  def write_vt_vector(base_type, data); end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#800
class Writexlsx::Package::BlanksOrErrorsFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#801
  def write_cf_rule; end
end

# source://write_xlsx//lib/write_xlsx/package/button.rb#8
class Writexlsx::Package::Button
  include ::Writexlsx::Utility

  # source://write_xlsx//lib/write_xlsx/package/button.rb#29
  def color; end

  # Returns the value of attribute description.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def description=(_arg0); end

  # attributes for <v:fill> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#55
  def fill_attributes; end

  # Returns the value of attribute font.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def font; end

  # Sets the attribute font
  #
  # @param value the value to set the attribute font to.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def font=(_arg0); end

  # Returns the value of attribute macro.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def macro; end

  # Sets the attribute macro
  #
  # @param value the value to set the attribute macro to.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def macro=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/package/button.rb#33
  def style_addition; end

  # source://write_xlsx//lib/write_xlsx/package/button.rb#25
  def type; end

  # source://write_xlsx//lib/write_xlsx/package/button.rb#13
  def v_shape_attributes(id, z_index); end

  # Returns the value of attribute vertices.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def vertices; end

  # Sets the attribute vertices
  #
  # @param value the value to set the attribute vertices to.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#11
  def vertices=(_arg0); end

  # Write the <x:ClientData> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#91
  def write_client_data; end

  # Write the <x:FmlaMacro> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#120
  def write_fmla_macro; end

  # Write the <x:PrintObject> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#113
  def write_print_object; end

  # Write the <o:lock> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#65
  def write_rotation_lock; end

  # source://write_xlsx//lib/write_xlsx/package/button.rb#37
  def write_shape(writer, id, z_index); end

  # Write the <x:TextHAlign> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#127
  def write_text_halign; end

  # Write the <x:TextVAlign> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#134
  def write_text_valign; end

  # Write the <v:textbox> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/button.rb#76
  def write_textbox; end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#732
class Writexlsx::Package::CellIsFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#733
  def attributes; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#737
  def write_cf_rule; end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#806
class Writexlsx::Package::ColorScaleFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#807
  def write_cf_rule; end

  # Write the <colorScale> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#816
  def write_color_scale; end
end

# source://write_xlsx//lib/write_xlsx/package/comments.rb#10
class Writexlsx::Package::Comment
  include ::Writexlsx::Utility

  # @return [Comment] a new instance of Comment
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#21
  def initialize(workbook, worksheet, row, col, string, options = T.unsafe(nil)); end

  # Returns the value of attribute author.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#19
  def author; end

  # Sets the attribute author
  #
  # @param value the value to set the attribute author to.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#19
  def author=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#44
  def backgrount_color(color); end

  # Returns the value of attribute col.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#17
  def col; end

  # Returns the value of attribute color.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#17
  def color; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#81
  def default_start_col(col); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#66
  def default_start_row(row); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#94
  def default_x_offset(col); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#103
  def default_y_offset(row); end

  # Write the <v:fill> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#158
  def fill_attributes; end

  # Returns the value of attribute font_family.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#18
  def font_family; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#217
  def font_name; end

  # Returns the value of attribute font_size.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#18
  def font_size; end

  # Minor modification to allow comparison testing. Change RGB colors
  # from long format, ffcc00 to short format fc0 used by VML.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#59
  def rgb_color(rgb); end

  # Returns the value of attribute row.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#17
  def row; end

  # Returns the value of attribute string.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#17
  def string; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#128
  def style_addition; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#124
  def type; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#116
  def v_shape_attributes(id, z_index); end

  # Returns the value of attribute vertices.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#17
  def vertices; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#151
  def visibility; end

  # Returns the value of attribute visible.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#19
  def visible; end

  # Sets the attribute visible
  #
  # @param value the value to set the attribute visible to.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#19
  def visible=(_arg0); end

  # Write the <x:ClientData> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#194
  def write_client_data; end

  # Write the <v:shadow> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#167
  def write_shadow; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#132
  def write_shape(writer, id, z_index); end

  # Write the <v:textbox> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#180
  def write_textbox; end

  # Sets the attribute writer
  #
  # @param value the value to set the attribute writer to.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#215
  def writer=(_arg0); end

  private

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#223
  def options_parse(row, col, options); end
end

# what color ?
#
# source://write_xlsx//lib/write_xlsx/package/comments.rb#13
Writexlsx::Package::Comment::DEFAULT_COLOR = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/package/comments.rb#15
Writexlsx::Package::Comment::DEFAULT_HEIGHT = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/package/comments.rb#14
Writexlsx::Package::Comment::DEFAULT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/package/comments.rb#245
class Writexlsx::Package::Comments
  include ::Writexlsx::Utility

  # @return [Comments] a new instance of Comments
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#248
  def initialize(worksheet); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#255
  def [](row); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#259
  def add(workbook, worksheet, row, col, string, options); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#276
  def assemble_xml_file; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#264
  def empty?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#308
  def has_comment_in_row?(row); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#272
  def set_xml_writer(filename); end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#268
  def size; end

  # source://write_xlsx//lib/write_xlsx/package/comments.rb#285
  def sorted_comments; end

  private

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#314
  def comments_visible?; end

  # Write the <author> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#351
  def write_author(data); end

  # Write the <authors> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#330
  def write_authors(comment_data); end

  # Write the <color> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#441
  def write_color; end

  # Write the <comment> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#367
  def write_comment(comment); end

  # Write the <commentList> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#358
  def write_comment_list(comment_data); end

  # Write the <comments> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#321
  def write_comments(&block); end

  # Write the <family> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#457
  def write_family(val); end

  # Write the <rFont> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#448
  def write_r_font(val); end

  # Write the <rPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#416
  def write_r_pr(comment); end

  # Write the <sz> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#432
  def write_sz(val); end

  # Write the <text> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#382
  def write_text(comment); end

  # Write the <r> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#392
  def write_text_r(comment); end

  # Write the text <t> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/comments.rb#404
  def write_text_t(comment); end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#6
class Writexlsx::Package::ConditionalFormat
  include ::Writexlsx::Utility

  # @return [ConditionalFormat] a new instance of ConditionalFormat
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#43
  def initialize(worksheet, range, param); end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#77
  def attributes; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#186
  def bar_axis_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#182
  def bar_axis_position; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#166
  def bar_border_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#162
  def bar_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#170
  def bar_negative_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#174
  def bar_negative_color_same; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#178
  def bar_no_border; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#210
  def bar_only; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#102
  def criteria; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#118
  def direction; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#90
  def format; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#122
  def formula; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#190
  def icon_style; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#198
  def icons; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#202
  def icons_only; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#158
  def max_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#150
  def max_type; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#154
  def max_value; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#106
  def maximum; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#146
  def mid_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#138
  def mid_type; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#142
  def mid_value; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#134
  def min_color; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#126
  def min_type; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#130
  def min_value; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#110
  def minimum; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#94
  def priority; end

  # Returns the value of attribute range.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#41
  def range; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#214
  def range_param_for_conditional_formatting(*args); end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#206
  def reverse_icons; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#98
  def stop_if_true; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#194
  def total_icons; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#86
  def type; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#114
  def value; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#50
  def write_cf_rule; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#54
  def write_cf_rule_formula_tag(tag = T.unsafe(nil)); end

  # Write the <cfvo> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#68
  def write_cfvo(type, value, criteria = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#60
  def write_formula_tag(data); end

  private

  # @raise [WriteXLSXOptionParameterError]
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#469
  def check_conditional_formatting_parameters(param); end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#530
  def convert_date_time_if_required(val); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#727
  def date_1904?; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#284
  def handling_of_blanks_error_types; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#227
  def handling_of_text_criteria; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#250
  def handling_of_time_period_criteria; end

  # List of valid icon styles.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#641
  def icon_set_styles; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#394
  def palette_color(index); end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#447
  def param_for_conditional_formatting(*args); end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#398
  def range_start_cell_for_conditional_formatting(*args); end

  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#410
  def row_col_param_for_conditional_formatting(*args); end

  # Set the sub-properites for icons.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#666
  def set_icon_properties(total_icons, user_props); end

  # List of valid criteria types for conditional_formatting.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#606
  def valid_criteria_type_for_conditional_formatting; end

  # List of valid input parameters for conditional_formatting.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#542
  def valid_parameter_for_conditional_formatting; end

  # List of  valid validation types for conditional_formatting.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#581
  def valid_type_for_conditional_formatting; end

  class << self
    # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#9
    def factory(worksheet, *args); end
  end
end

# source://write_xlsx//lib/write_xlsx/package/content_types.rb#9
class Writexlsx::Package::ContentTypes
  include ::Writexlsx::Utility

  # @return [ContentTypes] a new instance of ContentTypes
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#15
  def initialize(workbook); end

  # Add the calcChain link to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#148
  def add_calc_chain; end

  # Add the name of a chart to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#95
  def add_chart_name(name); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#88
  def add_chart_names; end

  # Add the name of a chartsheet to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#82
  def add_chartsheet_name(name); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#73
  def add_chartsheet_names; end

  # Add the name of a comment to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#132
  def add_comment_name(name); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#123
  def add_comment_names; end

  # Add the name of a table to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#186
  def add_custom_properties; end

  # Add elements to the ContentTypes defaults.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#47
  def add_default(part_name, content_type); end

  # Add the name of a drawing to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#110
  def add_drawing_name(name); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#101
  def add_drawing_names; end

  # Add the image default types.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#155
  def add_image_types; end

  # Add the metadata file to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#195
  def add_metadata; end

  # Add elements to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#54
  def add_override(part_name, content_type); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#202
  def add_richvalue; end

  # Add the sharedStrings link to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#141
  def add_shared_strings; end

  # Add the name of a table to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#168
  def add_table_name(table_name); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#161
  def add_table_names(table_count); end

  # Add a vbaProject to the ContentTypes defaults.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#178
  def add_vba_project; end

  # Add the name of a VML drawing to the ContentTypes defaults.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#119
  def add_vml_name; end

  # Add the name of a worksheet to the ContentTypes overrides.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#67
  def add_worksheet_name(name); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#58
  def add_worksheet_names; end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#35
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#31
  def set_xml_writer(filename); end

  private

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#226
  def change_the_workbook_xml_content_type_from_xlsx_to_xlsm; end

  # Write the <Default> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#274
  def write_default(extension, content_type); end

  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#251
  def write_default_or_override(tag, param0, a); end

  # Write out all of the <Default> types.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#236
  def write_defaults; end

  # Write the <Override> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#286
  def write_override(part_name, content_type); end

  # Write out all of the <Override> types.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#245
  def write_overrides; end

  # Write the <Types> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/content_types.rb#262
  def write_types(&block); end
end

# source://write_xlsx//lib/write_xlsx/package/content_types.rb#13
Writexlsx::Package::ContentTypes::App_document = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/content_types.rb#12
Writexlsx::Package::ContentTypes::App_package = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/core.rb#9
class Writexlsx::Package::Core
  include ::Writexlsx::Utility

  # @return [Core] a new instance of Core
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#15
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#25
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#31
  def set_properties(properties); end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#21
  def set_xml_writer(filename); end

  private

  # Convert a gmtime/localtime() date to a ISO 8601 style
  # "2010-01-01T00:00:00Z" date. Excel always treats this as
  # a utc date/time.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#55
  def datetime_to_iso8601_date(gm_time = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#114
  def dcterms_date; end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#160
  def write_base(key, tag, default = T.unsafe(nil)); end

  # Write the <cp:category> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#149
  def write_cp_category; end

  # Write the <cp:contentStatus> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#156
  def write_cp_content_status; end

  # Write the <cp:coreProperties> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#64
  def write_cp_core_properties(&block); end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#37
  def write_cp_core_properties_base; end

  # Write the <cp:keywords> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#135
  def write_cp_keywords; end

  # Write the <cp:lastModifiedBy> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#92
  def write_cp_last_modified_by; end

  # Write the <dc:creator> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#85
  def write_dc_creator; end

  # Write the <dc:description> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#142
  def write_dc_description; end

  # Write the <dc:subject> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#128
  def write_dc_subject; end

  # Write the <dc:title> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#121
  def write_dc_title; end

  # source://write_xlsx//lib/write_xlsx/package/core.rb#110
  def write_dcterms(tag); end

  # Write the <dcterms:created> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#99
  def write_dcterms_created; end

  # Write the <dcterms:modified> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/core.rb#106
  def write_dcterms_modified; end
end

# source://write_xlsx//lib/write_xlsx/package/core.rb#13
Writexlsx::Package::Core::App_document = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/core.rb#12
Writexlsx::Package::Core::App_package = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/custom.rb#9
class Writexlsx::Package::Custom
  include ::Writexlsx::Utility

  # @return [Custom] a new instance of Custom
  #
  # source://write_xlsx//lib/write_xlsx/package/custom.rb#12
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/custom.rb#22
  def assemble_xml_file; end

  # Set the document properties.
  #
  # source://write_xlsx//lib/write_xlsx/package/custom.rb#31
  def set_properties(properties); end

  # source://write_xlsx//lib/write_xlsx/package/custom.rb#18
  def set_xml_writer(filename); end

  private

  # source://write_xlsx//lib/write_xlsx/package/custom.rb#37
  def write_properties; end

  # source://write_xlsx//lib/write_xlsx/package/custom.rb#55
  def write_property(property); end

  # Write the <vt:bool> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/custom.rb#108
  def write_vt_bool(data); end

  # Write the <vt:filetime> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/custom.rb#121
  def write_vt_filetime(data); end

  # Write the <vt:i4> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/custom.rb#94
  def write_vt_i4(data); end

  # source://write_xlsx//lib/write_xlsx/package/custom.rb#87
  def write_vt_lpwstr(data); end

  # Write the <vt:r8> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/custom.rb#101
  def write_vt_r8(data); end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#828
class Writexlsx::Package::DataBarFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#829
  def write_cf_rule; end

  # Write the <dataBar> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#839
  def write_data_bar; end

  # Write the <extLst> dataBar extension element.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#854
  def write_data_bar_ext(param); end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#876
class Writexlsx::Package::ExpressionFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#877
  def write_cf_rule; end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#882
class Writexlsx::Package::IconSetFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#883
  def write_cf_rule; end

  # Write the <iconSet> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#892
  def write_icon_set; end
end

# Metadata - A class for writing the Excel XLSX metadata.xml file.
#
# source://write_xlsx//lib/write_xlsx/package/metadata.rb#12
class Writexlsx::Package::Metadata
  include ::Writexlsx::Utility

  # @return [Metadata] a new instance of Metadata
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#18
  def initialize(workbook); end

  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#30
  def assemble_xml_file; end

  # Sets the attribute has_dynamic_functions
  #
  # @param value the value to set the attribute has_dynamic_functions to.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#15
  def has_dynamic_functions=(_arg0); end

  # Sets the attribute num_embedded_images
  #
  # @param value the value to set the attribute num_embedded_images to.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#16
  def num_embedded_images=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#26
  def set_xml_writer(filename); end

  private

  # Write the <ext> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#190
  def write_cell_ext; end

  # Write the <futureMetadata> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#144
  def write_cell_future_metadata; end

  # Write the <cellMetadata> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#224
  def write_cell_metadata; end

  # Write the <metadataType> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#99
  def write_cell_metadata_type; end

  # Write the <metadata> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#57
  def write_metadata; end

  # Write the <metadataTypes> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#82
  def write_metadata_types; end

  # Write the <rc> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#260
  def write_rc(type, value); end

  # Write the <ext> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#201
  def write_value_ext(num); end

  # Write the <futureMetadata> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#165
  def write_value_future_metadata; end

  # Write the <valueMetadata> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#240
  def write_value_metadata; end

  # Write the <metadataType> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#122
  def write_value_metadata_type; end

  # Write the <xda:dynamicArrayProperties> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#212
  def write_xda_dynamic_array_properties; end

  # Write the <xlrd:rvb> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/metadata.rb#271
  def write_xlrd_rvb(value); end
end

# source://write_xlsx//lib/write_xlsx/package/packager.rb#25
class Writexlsx::Package::Packager
  include ::Writexlsx::Utility

  # @return [Packager] a new instance of Packager
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#28
  def initialize(workbook); end

  # Write the xml files that make up the XLXS OPC package.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#42
  def create_package; end

  # source://write_xlsx//lib/write_xlsx/package/packager.rb#35
  def set_package_dir(package_dir); end

  private

  # Write the /xl/media/image?.xml files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#481
  def add_image_files; end

  # Write the vbaProject.bin file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#502
  def add_vba_project; end

  # Write the app.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#148
  def write_app_file; end

  # Write the chart files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#96
  def write_chart_files; end

  # source://write_xlsx//lib/write_xlsx/package/packager.rb#107
  def write_chart_or_drawing_files(objects, filename); end

  # source://write_xlsx//lib/write_xlsx/package/packager.rb#89
  def write_chartsheet_files; end

  # Write the chartsheet .rels files for links to drawing files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#440
  def write_chartsheet_rels_files; end

  # Write the comment files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#127
  def write_comment_files; end

  # Write the ContentTypes.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#287
  def write_content_types_file; end

  # Write the core.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#175
  def write_core_file; end

  # Write the custom.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#271
  def write_custom_file; end

  # Write the drawing files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#103
  def write_drawing_files; end

  # Write the drawing .rels files for worksheets that contain charts or
  # drawings.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#448
  def write_drawing_rels_files; end

  # Write the metadata.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#188
  def write_metadata_file; end

  # Write the rdrichvalue.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#221
  def write_rich_value_file; end

  # Write the rdrichvalue(*).xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#205
  def write_rich_value_files; end

  # Write the rdrichvalue.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#258
  def write_rich_value_rel; end

  # Write the richValueRel.xml.rels files for worksheets that contain embedded
  # images.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#456
  def write_rich_value_rels_files; end

  # Write the rdrichvaluestructure.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#234
  def write_rich_value_structure_file; end

  # Write the rdRichValueTypes.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#247
  def write_rich_value_types_file; end

  # Write the _rels/.rels xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#351
  def write_root_rels_file; end

  # Write the sharedStrings.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#134
  def write_shared_strings_file; end

  # Write the style xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#316
  def write_styles_file; end

  # Write the table files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#344
  def write_table_files; end

  # Write the style xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#332
  def write_theme_file; end

  # Write the comment VML files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#120
  def write_vml_files; end

  # Write the workbook.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#75
  def write_workbook_file; end

  # Write the _rels/.rels xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#378
  def write_workbook_rels_file; end

  # Write the worksheet files.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#85
  def write_worksheet_files; end

  # Write the worksheet .rels files for worksheets that contain links to
  # external data such as hyperlinks or drawings.
  #
  # source://write_xlsx//lib/write_xlsx/package/packager.rb#433
  def write_worksheet_rels_files; end
end

# source://write_xlsx//lib/write_xlsx/package/relationships.rb#9
class Writexlsx::Package::Relationships
  include ::Writexlsx::Utility

  # @return [Relationships] a new instance of Relationships
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#16
  def initialize; end

  # Add container relationship to XLSX .rels xml files.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#35
  def add_document_relationship(type, target, target_mode = T.unsafe(nil)); end

  # Add container relationship to XLSX .rels xml files. Uses MS schema.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#49
  def add_ms_package_relationship(type, target); end

  # Add container relationship to XLSX .rels xml files.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#42
  def add_package_relationship(type, target); end

  # Add relationships for RichValue files.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#64
  def add_rich_value_relationships; end

  # Add worksheet relationship to sheet.rels xml files.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#57
  def add_worksheet_relationship(type, target, target_mode = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#26
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#22
  def set_xml_writer(filename); end

  private

  # Write the <Relationship> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#104
  def write_relationship(type, target, target_mode = T.unsafe(nil)); end

  # Write the <Relationships> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/relationships.rb#91
  def write_relationships; end
end

# source://write_xlsx//lib/write_xlsx/package/relationships.rb#14
Writexlsx::Package::Relationships::Document_schema = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/relationships.rb#13
Writexlsx::Package::Relationships::Package_schema = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/relationships.rb#12
Writexlsx::Package::Relationships::Schema_root = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/package/rich_value.rb#9
class Writexlsx::Package::RichValue
  include ::Writexlsx::Utility

  # @return [RichValue] a new instance of RichValue
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#14
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#23
  def assemble_xml_file; end

  # Returns the value of attribute embedded_images.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#12
  def embedded_images; end

  # Sets the attribute embedded_images
  #
  # @param value the value to set the attribute embedded_images to.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#12
  def embedded_images=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#19
  def set_xml_writer(filename); end

  private

  # Write the <rv> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#49
  def write_rv(index, description, decorative); end

  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#31
  def write_rv_data; end

  # Write the <v> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value.rb#65
  def write_v(data); end
end

# source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#18
class Writexlsx::Package::RichValueRel
  include ::Writexlsx::Utility

  # @return [RichValueRel] a new instance of RichValueRel
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#23
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#32
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#28
  def set_xml_writer(filename); end

  # Sets the attribute value_count
  #
  # @param value the value to set the attribute value_count to.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#21
  def value_count=(_arg0); end

  private

  # Write the <rel> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#63
  def write_rel(id); end

  # Write the <richValueRels> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_rel.rb#43
  def write_rich_value_rels; end
end

# source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#19
class Writexlsx::Package::RichValueStructure
  include ::Writexlsx::Utility

  # @return [RichValueStructure] a new instance of RichValueStructure
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#24
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#33
  def assemble_xml_file; end

  # Sets the attribute has_embedded_descriptions
  #
  # @param value the value to set the attribute has_embedded_descriptions to.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#22
  def has_embedded_descriptions=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#29
  def set_xml_writer(filename); end

  private

  # Write the <k> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#73
  def write_k(n, t); end

  # Write the <rvStructures> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#44
  def write_rv_structures; end

  # Write the <s> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_structure.rb#60
  def write_s; end
end

# source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#18
class Writexlsx::Package::RichValueTypes
  include ::Writexlsx::Utility

  # @return [RichValueTypes] a new instance of RichValueTypes
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#21
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#29
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#25
  def set_xml_writer(filename); end

  private

  # Write the <flag> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#93
  def write_flag(name); end

  # Write the <key> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#80
  def write_key(name, flags = T.unsafe(nil)); end

  # Write the <rvTypesInfo> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/rich_value_types.rb#40
  def write_rv_types_info; end
end

# source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#9
class Writexlsx::Package::SharedStrings
  include ::Writexlsx::Utility

  # @return [SharedStrings] a new instance of SharedStrings
  #
  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#16
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#29
  def add(string); end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#51
  def assemble_xml_file; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#43
  def empty?; end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#24
  def index(string, params = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#47
  def set_xml_writer(filename); end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#39
  def string(index); end

  # Returns the value of attribute strings.
  #
  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#14
  def strings; end

  private

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#119
  def add_c2_c3(string); end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#128
  def total_count; end

  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#132
  def unique_count; end

  # Write the <si> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#86
  def write_si(string); end

  # Write the <sst> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#63
  def write_sst(&block); end

  # Write the sst string elements.
  #
  # source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#79
  def write_sst_strings; end
end

# source://write_xlsx//lib/write_xlsx/package/shared_strings.rb#12
Writexlsx::Package::SharedStrings::PRESERVE_SPACE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://write_xlsx//lib/write_xlsx/package/styles.rb#9
class Writexlsx::Package::Styles
  include ::Writexlsx::Utility

  # @return [Styles] a new instance of Styles
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#12
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#31
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#293
  def bg_and_fg_color(format, dxf_format); end

  # Convert from an Excel internal colour index to a XML style #RRGGBB index
  # based on the default or user defined values in the Workbook palette.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#59
  def palette_color(index); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#258
  def pattern_only_case?(format, dxf_format); end

  # Pass in the Format objects and other properties used to set the styles.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#40
  def set_style_properties(xf_formats, palette, font_count, num_formats, border_count, fill_count, custom_colors, dxf_formats, has_comments); end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#27
  def set_xml_writer(filename); end

  # Write the <border> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#331
  def write_border(format, dxf_format = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#338
  def write_border_base(format, dxf_format); end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#354
  def write_border_sub_elements(format); end

  # Write the <borders> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#310
  def write_borders; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#316
  def write_borders_base; end

  # Write the <cellStyleXfs> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#403
  def write_cell_style_xfs; end

  # Write the <cellXfs> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#419
  def write_cell_xfs; end

  # Write the <font> element used for comments.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#182
  def write_comment_font; end

  # Write the <fill> element for the default fills.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#216
  def write_default_fill(pattern_type); end

  # Write the <fill> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#247
  def write_fill(format, dxf_format = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#264
  def write_fill_base(format, dxf_format); end

  # Write the <fills> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#194
  def write_fills; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#202
  def write_fills_base; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#168
  def write_font_base; end

  # Write the <fonts> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#155
  def write_fonts; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#322
  def write_format_elements(elements, count, &block); end

  # Write the <numFmt> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#140
  def write_num_fmt(num_fmt_id, format_code); end

  # Write the <numFmts> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#81
  def write_num_fmts; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#277
  def write_pattern_fill(format, dxf_format); end

  # Write the <styleSheet> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#72
  def write_style_sheet(&block); end

  # Write the style <xf> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#433
  def write_style_xf(has_hyperlink, font_id); end

  # Write the <border> sub elements such as <right>, <top>, etc.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#381
  def write_sub_border(type, style = T.unsafe(nil), color = T.unsafe(nil)); end

  private

  # Write the <cellStyle> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#513
  def write_cell_style(name, xf_id, builtin_id); end

  # Write the <cellStyles> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#498
  def write_cell_styles; end

  # Write the <colors> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#568
  def write_colors; end

  # Write the <condense> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#596
  def write_condense; end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#541
  def write_dxf(format); end

  # Write the <dxfs> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#526
  def write_dxfs; end

  # Write the <extend> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#605
  def write_extend; end

  # Write the <mruColors> element for the most recently used colours.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#579
  def write_mru_colors(custom_colors); end

  # source://write_xlsx//lib/write_xlsx/package/styles.rb#458
  def write_style_sheet_base; end

  # Write the <tableStyles> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#555
  def write_table_styles; end

  # Write the <xf> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/styles.rb#474
  def write_xf(format); end
end

# source://write_xlsx//lib/write_xlsx/package/styles.rb#361
Writexlsx::Package::Styles::BORDER_STYLES = T.let(T.unsafe(nil), Array)

# source://write_xlsx//lib/write_xlsx/package/styles.rb#98
Writexlsx::Package::Styles::FORMAT_CODES = T.let(T.unsafe(nil), Hash)

# source://write_xlsx//lib/write_xlsx/package/styles.rb#222
Writexlsx::Package::Styles::PATTERNS = T.let(T.unsafe(nil), Array)

# source://write_xlsx//lib/write_xlsx/package/table.rb#9
class Writexlsx::Package::Table
  include ::Writexlsx::Utility

  # @return [Table] a new instance of Table
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#32
  def initialize(worksheet, *args); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#77
  def add_the_table_columns; end

  # Assemble and writes the XML file.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#66
  def assemble_xml_file; end

  # Returns the value of attribute id.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#30
  def id; end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#30
  def name; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#94
  def overwrite_the_defaults_with_any_use_defined_values(col_id, col_data, col_num); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#186
  def prepare(id); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#59
  def set_xml_writer(filename); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#178
  def store_filter_cell_positions; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#161
  def write_any_columns_formulas_after_the_user_supplied_table_data; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#143
  def write_the_cell_data_if_supplied; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#135
  def write_the_column_headers_to_the_worksheet(col_num, col_data); end

  private

  # source://write_xlsx//lib/write_xlsx/package/table.rb#193
  def handle_args(row1, col1 = T.unsafe(nil), row2 = T.unsafe(nil), col2 = T.unsafe(nil), param = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#256
  def handle_the_column_formula(col_data, _col_num, formula, _format); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#269
  def handle_the_function_for_the_table_row(row2, col_data, col_num, user_data); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#371
  def set_the_autofilter_range; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#366
  def set_the_table_and_autofilter_ranges; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#349
  def set_the_table_name; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#332
  def set_the_table_options; end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#341
  def set_the_table_style; end

  # Convert a table total function to a worksheet formula.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#301
  def table_function_to_formula(function, col_name); end

  # Total label only (not a function).
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#326
  def total_label_only(row2, col_num, col_data, total_string, format); end

  # List of valid input parameters.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#240
  def valid_table_parameter; end

  # Write the <autoFilter> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#399
  def write_auto_filter; end

  # Write the <calculatedColumnFormula> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#470
  def write_calculated_column_formula(formula); end

  # source://write_xlsx//lib/write_xlsx/package/table.rb#375
  def write_table_attributes; end

  # Write the <tableColumn> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#423
  def write_table_column(col_data); end

  # Write the <tableColumns> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#410
  def write_table_columns; end

  # Write the <tableStyleInfo> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#456
  def write_table_style_info; end

  # _write_totals_row_formula()
  #
  # Write the <totalsRowFormula> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#479
  def write_totals_row_formula(formula); end
end

# source://write_xlsx//lib/write_xlsx/package/table.rb#12
class Writexlsx::Package::Table::ColumnData
  # @return [ColumnData] a new instance of ColumnData
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#17
  def initialize(id, param = T.unsafe(nil)); end

  # Returns the value of attribute custom_total.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#15
  def custom_total; end

  # Sets the attribute custom_total
  #
  # @param value the value to set the attribute custom_total to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#15
  def custom_total=(_arg0); end

  # Returns the value of attribute format.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def format; end

  # Sets the attribute format
  #
  # @param value the value to set the attribute format to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def format=(_arg0); end

  # Returns the value of attribute formula.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def formula; end

  # Sets the attribute formula
  #
  # @param value the value to set the attribute formula to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def formula=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#13
  def id; end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def name=(_arg0); end

  # Returns the value of attribute name_format.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def name_format; end

  # Sets the attribute name_format
  #
  # @param value the value to set the attribute name_format to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#14
  def name_format=(_arg0); end

  # Returns the value of attribute total_function.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#15
  def total_function; end

  # Sets the attribute total_function
  #
  # @param value the value to set the attribute total_function to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#15
  def total_function=(_arg0); end

  # Returns the value of attribute total_string.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#15
  def total_string; end

  # Sets the attribute total_string
  #
  # @param value the value to set the attribute total_string to.
  #
  # source://write_xlsx//lib/write_xlsx/package/table.rb#15
  def total_string=(_arg0); end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#777
class Writexlsx::Package::TextOrWithFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#778
  def attributes; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#785
  def write_cf_rule; end
end

# source://write_xlsx//lib/write_xlsx/package/theme.rb#9
class Writexlsx::Package::Theme
  include ::Writexlsx::Utility

  # @return [Theme] a new instance of Theme
  #
  # source://write_xlsx//lib/write_xlsx/package/theme.rb#12
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/theme.rb#16
  def assemble_xml_file; end

  # Set the filehandle only. This class doesn't use a real XML writer class.
  #
  # source://write_xlsx//lib/write_xlsx/package/theme.rb#27
  def set_xml_writer(filename); end

  private

  # Write a default theme.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/package/theme.rb#38
  def write_theme_file; end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#790
class Writexlsx::Package::TimePeriodFormat < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#791
  def attributes; end

  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#795
  def write_cf_rule; end
end

# source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#767
class Writexlsx::Package::Top10Format < ::Writexlsx::Package::ConditionalFormat
  # source://write_xlsx//lib/write_xlsx/package/conditional_format.rb#768
  def attributes; end
end

# source://write_xlsx//lib/write_xlsx/package/vml.rb#9
class Writexlsx::Package::Vml
  include ::Writexlsx::Utility

  # @return [Vml] a new instance of Vml
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#12
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/vml.rb#20
  def assemble_xml_file(data_id, vml_shape_id, comments_data, buttons_data, header_images_data = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/vml.rb#16
  def set_xml_writer(filename); end

  private

  # Write the <o:lock> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#253
  def write_aspect_ratio_lock; end

  # Write the <v:path> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#200
  def write_button_path; end

  # Write the <v:shapetype> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#142
  def write_button_shapetype; end

  # Write the <v:shapetype> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#123
  def write_comment_shapetype; end

  # Write the <v:f> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#348
  def write_f(eqn); end

  # Write the <v:formulas> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#327
  def write_formulas; end

  # Write the <o:idmap> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#111
  def write_idmap(data_id); end

  # Write the <v:path> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#214
  def write_image_path; end

  # Write the <v:shape> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#268
  def write_image_shape(id, index, image_data); end

  # Write the <v:shapetype> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#163
  def write_image_shapetype; end

  # Write the <v:imagedata> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#315
  def write_imagedata(index, o_title); end

  # Write the <o:lock> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#242
  def write_rotation_lock; end

  # source://write_xlsx//lib/write_xlsx/package/vml.rb#65
  def write_shape_type_and_shape(data, vml_shape_id, z_index); end

  # Write the <o:shapelayout> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#97
  def write_shapelayout(data_id); end

  # Write the <o:lock> element.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#231
  def write_shapetype_lock; end

  # Write the <xml> element. This is the root element of VML.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#80
  def write_xml_namespace(&block); end

  # for <xml> elements.
  #
  # source://write_xlsx//lib/write_xlsx/package/vml.rb#85
  def xml_attributes; end
end

# source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#11
class Writexlsx::Package::XMLWriterSimple
  # @return [XMLWriterSimple] a new instance of XMLWriterSimple
  #
  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#14
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#87
  def characters(data); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#95
  def close; end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#91
  def crlf; end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#69
  def data_element(tag, data, attr = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#64
  def empty_tag(tag, attr = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#56
  def end_tag(tag); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#60
  def end_tag_str(tag); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#104
  def io_write(str); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#23
  def set_xml_writer(filename = T.unsafe(nil)); end

  # Optimised tag writer ?  for shared strings <si> elements.
  #
  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#76
  def si_element(data, attr); end

  # Optimised tag writer for shared strings <si> rich string elements.
  #
  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#83
  def si_rich_element(data); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#44
  def start_tag(tag, attr = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#48
  def start_tag_str(tag, attr = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#100
  def string; end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#32
  def tag_elements(tag, attributes = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#38
  def tag_elements_str(tag, attributes = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#27
  def xml_decl(encoding = T.unsafe(nil), standalone = T.unsafe(nil)); end

  private

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#126
  def escape_attributes(str = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#137
  def escape_data(str = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#111
  def key_vals(attribute); end
end

# source://write_xlsx//lib/write_xlsx/package/xml_writer_simple.rb#12
Writexlsx::Package::XMLWriterSimple::XMLNS = T.let(T.unsafe(nil), String)

# source://write_xlsx//lib/write_xlsx/shape.rb#14
class Writexlsx::Shape
  include ::Writexlsx::Utility

  # @return [Shape] a new instance of Shape
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#28
  def initialize(properties = T.unsafe(nil)); end

  # Returns the value of attribute adjustments.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#19
  def adjustments; end

  # Set the shape adjustments array (as a reference).
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#145
  def adjustments=(args); end

  # Returns the value of attribute align.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#19
  def align; end

  # Returns the value of attribute anchor.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#19
  def anchor; end

  # Re-size connector shapes if they are connected to other shapes.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#204
  def auto_locate_connectors(shapes, shape_hash); end

  # Calculate the vertices that define the position of a shape object within
  # the worksheet in EMUs.  Save the vertices with the object.
  #
  # The vertices are expressed as English Metric Units (EMUs). There are 12,700
  # EMUs per point. Therefore, 12,700 * 3 /4 = 9,525 EMUs per pixel.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#156
  def calc_position_emus(worksheet); end

  # Returns the value of attribute column_end.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def column_end; end

  # Sets the attribute column_end
  #
  # @param value the value to set the attribute column_end to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def column_end=(_arg0); end

  # Returns the value of attribute column_start.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def column_start; end

  # Sets the attribute column_start
  #
  # @param value the value to set the attribute column_start to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def column_start=(_arg0); end

  # Returns the value of attribute connect.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def connect; end

  # Sets the attribute connect
  #
  # @param value the value to set the attribute connect to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def connect=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/shape.rb#290
  def dimensions; end

  # Returns the value of attribute drawing.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#17
  def drawing; end

  # Returns the value of attribute edit_as.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#17
  def edit_as; end

  # Returns the value of attribute element.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def element; end

  # Sets the attribute element
  #
  # @param value the value to set the attribute element to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def element=(_arg0); end

  # Returns the value of attribute end.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def end; end

  # Sets the attribute end
  #
  # @param value the value to set the attribute end to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def end=(_arg0); end

  # Returns the value of attribute end_index.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def end_index; end

  # Sets the attribute end_index
  #
  # @param value the value to set the attribute end_index to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def end_index=(_arg0); end

  # Returns the value of attribute end_side.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#26
  def end_side; end

  # Sets the attribute end_side
  #
  # @param value the value to set the attribute end_side to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#26
  def end_side=(_arg0); end

  # Returns the value of attribute fill.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#18
  def fill; end

  # Returns the value of attribute flip_h.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def flip_h; end

  # Sets the attribute flip_h
  #
  # @param value the value to set the attribute flip_h to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def flip_h=(_arg0); end

  # Returns the value of attribute flip_v.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def flip_v; end

  # Sets the attribute flip_v
  #
  # @param value the value to set the attribute flip_v to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def flip_v=(_arg0); end

  # Returns the value of attribute format.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#18
  def format; end

  # Returns the value of attribute height.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def height; end

  # Sets the attribute height
  #
  # @param value the value to set the attribute height to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def height=(_arg0); end

  # Returns the value of attribute height_emu.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def height_emu; end

  # Sets the attribute height_emu
  #
  # @param value the value to set the attribute height_emu to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def height_emu=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def id=(_arg0); end

  # Returns the value of attribute line.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#18
  def line; end

  # Returns the value of attribute line_type.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def line_type; end

  # Sets the attribute line_type
  #
  # @param value the value to set the attribute line_type to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def line_type=(_arg0); end

  # Returns the value of attribute line_weight.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def line_weight; end

  # Sets the attribute line_weight
  #
  # @param value the value to set the attribute line_weight to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def line_weight=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def name=(_arg0); end

  # Returns the value of attribute palette.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def palette; end

  # Sets the attribute palette
  #
  # @param value the value to set the attribute palette to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def palette=(_arg0); end

  # Returns the value of attribute rotation.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def rotation; end

  # Sets the attribute rotation
  #
  # @param value the value to set the attribute rotation to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def rotation=(_arg0); end

  # Returns the value of attribute row_end.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def row_end; end

  # Sets the attribute row_end
  #
  # @param value the value to set the attribute row_end to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def row_end=(_arg0); end

  # Returns the value of attribute row_start.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def row_start; end

  # Sets the attribute row_start
  #
  # @param value the value to set the attribute row_start to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#22
  def row_start=(_arg0); end

  # Returns the value of attribute scale_x.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def scale_x; end

  # Sets the attribute scale_x
  #
  # @param value the value to set the attribute scale_x to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def scale_x=(_arg0); end

  # Returns the value of attribute scale_y.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def scale_y; end

  # Sets the attribute scale_y
  #
  # @param value the value to set the attribute scale_y to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def scale_y=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/shape.rb#188
  def set_position(row_start, column_start, x_offset, y_offset, x_scale, y_scale, anchor); end

  # source://write_xlsx//lib/write_xlsx/shape.rb#134
  def set_properties(properties); end

  # Returns the value of attribute start.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def start; end

  # Sets the attribute start
  #
  # @param value the value to set the attribute start to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def start=(_arg0); end

  # Returns the value of attribute start_index.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def start_index; end

  # Sets the attribute start_index
  #
  # @param value the value to set the attribute start_index to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def start_index=(_arg0); end

  # Returns the value of attribute start_side.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#26
  def start_side; end

  # Sets the attribute start_side
  #
  # @param value the value to set the attribute start_side to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#26
  def start_side=(_arg0); end

  # Returns the value of attribute stencil.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def stencil; end

  # Sets the attribute stencil
  #
  # @param value the value to set the attribute stencil to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def stencil=(_arg0); end

  # Returns the value of attribute text.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def text; end

  # Sets the attribute text
  #
  # @param value the value to set the attribute text to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#21
  def text=(_arg0); end

  # Returns the value of attribute tx_box.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#18
  def tx_box; end

  # Returns the value of attribute type.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#20
  def type=(_arg0); end

  # Check shape attributes to ensure they are valid.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#284
  def validate(index); end

  # Returns the value of attribute valign.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#19
  def valign; end

  # Returns the value of attribute width.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def width=(_arg0); end

  # Returns the value of attribute width_emu.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def width_emu; end

  # Sets the attribute width_emu
  #
  # @param value the value to set the attribute width_emu to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#25
  def width_emu=(_arg0); end

  # Returns the value of attribute x1.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def x1; end

  # Sets the attribute x1
  #
  # @param value the value to set the attribute x1 to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def x1=(_arg0); end

  # Returns the value of attribute x2.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def x2; end

  # Sets the attribute x2
  #
  # @param value the value to set the attribute x2 to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def x2=(_arg0); end

  # Returns the value of attribute x_abs.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def x_abs; end

  # Sets the attribute x_abs
  #
  # @param value the value to set the attribute x_abs to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def x_abs=(_arg0); end

  # Returns the value of attribute x_offset.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def x_offset; end

  # Sets the attribute x_offset
  #
  # @param value the value to set the attribute x_offset to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def x_offset=(_arg0); end

  # Returns the value of attribute y1.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def y1; end

  # Sets the attribute y1
  #
  # @param value the value to set the attribute y1 to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def y1=(_arg0); end

  # Returns the value of attribute y2.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def y2; end

  # Sets the attribute y2
  #
  # @param value the value to set the attribute y2 to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def y2=(_arg0); end

  # Returns the value of attribute y_abs.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def y_abs; end

  # Sets the attribute y_abs
  #
  # @param value the value to set the attribute y_abs to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#23
  def y_abs=(_arg0); end

  # Returns the value of attribute y_offset.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def y_offset; end

  # Sets the attribute y_offset
  #
  # @param value the value to set the attribute y_offset to.
  #
  # source://write_xlsx//lib/write_xlsx/shape.rb#24
  def y_offset=(_arg0); end
end

# source://write_xlsx//lib/write_xlsx/sheets.rb#8
class Writexlsx::Sheets
  include ::Writexlsx::Utility

  # @return [Sheets] a new instance of Sheets
  #
  # source://write_xlsx//lib/write_xlsx/sheets.rb#13
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#25
  def chartname_count; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#17
  def chartsheet_count; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#201
  def chartsheets; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#192
  def index_by_name(sheetname); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#29
  def make_and_check_sheet_chart_name(type, name); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#21
  def sheetname_count; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#184
  def tables; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#188
  def tables_count; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#205
  def visible_first; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#197
  def worksheets; end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#54
  def write_chartsheet_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#111
  def write_chartsheet_rels_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#91
  def write_comment_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#117
  def write_drawing_rels_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#164
  def write_sheet_rels_files_base(sheets, dir, body); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#37
  def write_sheets(writer); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#100
  def write_table_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#142
  def write_vml_drawing_rels_files(package_dir, worksheet, index); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#61
  def write_vml_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#47
  def write_worksheet_files(package_dir); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#158
  def write_worksheet_rels_files(package_dir); end

  private

  # source://write_xlsx//lib/write_xlsx/sheets.rb#220
  def check_valid_sheetname(name); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/sheets.rb#236
  def is_sheetname_uniq?(name); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#211
  def sheet_chart_count(type); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#249
  def write_sheet(writer, sheet, sheet_id); end

  # source://write_xlsx//lib/write_xlsx/sheets.rb#243
  def write_sheet_files(dir, sheet, index); end
end

# source://write_xlsx//lib/write_xlsx/sheets.rb#11
Writexlsx::Sheets::BASE_NAME = T.let(T.unsafe(nil), Hash)

# source://write_xlsx//lib/write_xlsx/sparkline.rb#16
class Writexlsx::Sparkline
  include ::Writexlsx::Utility

  # @return [Sparkline] a new instance of Sparkline
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#19
  def initialize(ws, param, sheetname); end

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#100
  def count; end

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#104
  def group_attributes; end

  # Write the <x14:sparklineGroup> element.
  #
  # Example for order.
  #
  # <x14:sparklineGroup
  #     manualMax="0"
  #     manualMin="0"
  #     lineWeight="2.25"
  #     type="column"
  #     dateAxis="1"
  #     displayEmptyCellsAs="span"
  #     markers="1"
  #     high="1"
  #     low="1"
  #     first="1"
  #     last="1"
  #     negative="1"
  #     displayXAxis="1"
  #     displayHidden="1"
  #     minAxisType="custom"
  #     maxAxisType="custom"
  #     rightToLeft="1">
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#157
  def write_sparkline_group(writer); end

  private

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#280
  def cust_max_min(max_min); end

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#274
  def set_spark_color(user_color, palette_color); end

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#314
  def spark_styles; end

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#284
  def valid_sparkline_parameter; end

  # source://write_xlsx//lib/write_xlsx/sparkline.rb#167
  def write; end

  # Write the <x14:colorAxis> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#197
  def write_color_axis; end

  # Write the <x14:colorFirst> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#211
  def write_color_first; end

  # Write the <x14:colorHigh> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#225
  def write_color_high; end

  # Write the <x14:colorLast> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#218
  def write_color_last; end

  # Write the <x14:colorLow> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#232
  def write_color_low; end

  # Write the <x14:colorMarkers> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#204
  def write_color_markers; end

  # Write the <x14:colorNegative> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#190
  def write_color_negative; end

  # Write the <x14:colorSeries> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#183
  def write_color_series; end

  # Helper function for the sparkline color functions below.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#264
  def write_spark_color(element, color); end

  # Write the <x14:sparklines> element and <x14:sparkline> subelements.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#246
  def write_sparklines; end

  # Write the <xm:f> element.
  #
  # source://write_xlsx//lib/write_xlsx/sparkline.rb#239
  def write_xmf_date_axis; end
end

# source://write_xlsx//lib/write_xlsx/chart.rb#13
class Writexlsx::Table
  include ::Writexlsx::Utility

  # @return [Table] a new instance of Table
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#18
  def initialize(params = T.unsafe(nil)); end

  # Returns the value of attribute font.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#16
  def font; end

  # Returns the value of attribute horizontal.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#16
  def horizontal; end

  # Returns the value of attribute outline.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#16
  def outline; end

  # Sets the attribute palette
  #
  # @param value the value to set the attribute palette to.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#30
  def palette=(_arg0); end

  # Returns the value of attribute show_keys.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#16
  def show_keys; end

  # Returns the value of attribute vertical.
  #
  # source://write_xlsx//lib/write_xlsx/chart.rb#16
  def vertical; end

  # source://write_xlsx//lib/write_xlsx/chart.rb#32
  def write_d_table(writer); end

  private

  # source://write_xlsx//lib/write_xlsx/chart.rb#46
  def attributes; end
end

# source://write_xlsx//lib/write_xlsx/utility.rb#7
module Writexlsx::Utility
  # source://write_xlsx//lib/write_xlsx/utility.rb#269
  def absolute_char(absolute); end

  # @raise [WriteXLSXDimensionError]
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#139
  def check_dimensions(row, col); end

  # Check that row and col are valid and store max and min values for use in
  # other methods/elements.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#377
  def check_dimensions_and_update_max_min_values(row, col, ignore_row = T.unsafe(nil), ignore_col = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#364
  def check_parameter(params, valid_keys, method); end

  # Convert the user specified colour index or string to a rgb colour.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#955
  def color(color_code); end

  # convert_date_time(date_time_string)
  #
  # The function takes a date and time in ISO8601 "yyyy-mm-ddThh:mm:ss.ss" format
  # and converts it to a decimal number representing a valid Excel date.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#151
  def convert_date_time(date_time_string); end

  # Convert user defined font values into private hash values.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#789
  def convert_font_args(params); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#730
  def dash_types; end

  # source://write_xlsx//lib/write_xlsx/utility.rb#250
  def escape_url(url); end

  # Convert user defined fill properties to the structure required internally.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#632
  def fill_properties(fill); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#395
  def float_to_str(float); end

  # Get the font latin attributes from a font hash.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#912
  def get_font_latin_attributes(font); end

  # Get the font style attributes from a font hash.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#970
  def get_font_style_attributes(font); end

  # Extract information from the image file such as dimension, type, filename,
  # and extension. Also keep track of previously seen images to optimise out
  # any duplicates.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#997
  def get_image_properties(filename); end

  # Convert user defined layout properties to the format required internally.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#460
  def layout_properties(args, is_text = T.unsafe(nil)); end

  # Convert user defined legend properties to the structure required internally.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#408
  def legend_properties(params); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#721
  def line_fill_properties(params); end

  # Convert user defined line properties to the structure required internally.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#623
  def line_properties(line); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#752
  def palette_color(index); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#803
  def params_to_font(params); end

  # Convert user defined pattern properties to the structure required internally.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#639
  def pattern_properties(args); end

  # Convert vertices from pixels to points.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#484
  def pixels_to_points(vertices); end

  # Extract width and height information from a BMP file.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#1141
  def process_bmp(data, filename); end

  # Extract width and height information from a GIF file.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#1127
  def process_gif(data, filename); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#1079
  def process_jpg(data, filename); end

  # Extract width and height information from a PNG file.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#1038
  def process_png(data); end

  # Workbook の生成時のオプションハッシュを解析する
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#763
  def process_workbook_options(*params); end

  # return perl's boolean result
  #
  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#356
  def ptrue?(value); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#290
  def put_deprecate_message(method); end

  # Sheetnames used in references should be quoted if they contain any spaces,
  # special characters or if the look like something that isn't a sheet name.
  # TODO. We need to handle more special cases.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#127
  def quote_sheetname(sheetname); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#609
  def r_id_attributes(id); end

  # Check for a cell reference in A1 notation and substitute row and column
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#295
  def row_col_notation(row_or_a1); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#516
  def shape_style_base(left_str, top_str, width_str, height_str, z_index_str); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#390
  def store_col_max_min_values(col); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#385
  def store_row_max_min_values(row); end

  # Substitute an Excel cell reference in A1 notation for  zero based row and
  # column values in an argument list.
  #
  # Ex: ("A4", "Hello") is converted to (3, 0, "Hello").
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#305
  def substitute_cellref(cell, *args); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#331
  def underline_attributes(underline); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#497
  def v_shape_attributes_base(id); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#504
  def v_shape_style_base(z_index, vertices); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#746
  def value_or_raise(hash, key, msg); end

  # Write the <a:bodyPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#837
  def write_a_body_pr(rot, is_y_axis = T.unsafe(nil)); end

  # Write the <a:defRPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#887
  def write_a_def_rpr(font = T.unsafe(nil)); end

  # Write the <a:endParaRPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#988
  def write_a_end_para_rpr; end

  # Write the <a:lstStyle> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#861
  def write_a_lst_style; end

  # Write the <a:p> element for formula titles.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#868
  def write_a_p_formula(font = T.unsafe(nil)); end

  # Write the <a:pPr> element for formula titles.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#880
  def write_a_p_pr_formula(font); end

  # Write the <a:solidFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#927
  def write_a_solid_fill(fill); end

  # Write the <a:srgbClr> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#939
  def write_a_srgb_clr(color, transparency = T.unsafe(nil)); end

  # Write the <x:Anchor> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#554
  def write_anchor; end

  # Write the <x:AutoFill> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#564
  def write_auto_fill; end

  # Write the <color> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#346
  def write_color(name, value, writer = T.unsafe(nil)); end

  # Write the <v:path> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#542
  def write_comment_path(gradientshapeok, connecttype); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#895
  def write_def_rpr_r_pr_common(font, style_attributes, tag); end

  # Write the <div> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#571
  def write_div(align, font = T.unsafe(nil)); end

  # Write the <v:fill> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#535
  def write_fill; end

  # Write the <font> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#586
  def write_font(font); end

  # Write the <v:stroke> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#603
  def write_stroke; end

  # Write the <c:txPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#821
  def write_tx_pr(font, is_y_axis = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#613
  def write_xml_declaration; end

  # Returns: [row, col, row_absolute, col_absolute]
  #
  # The row_absolute and col_absolute parameters aren't documented because they
  # mainly used internally and aren't very useful to the user.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#48
  def xl_cell_to_rowcol(cell); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#74
  def xl_col_to_name(col, col_absolute); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#84
  def xl_range(row_1, row_2, col_1, col_2, row_abs_1 = T.unsafe(nil), row_abs_2 = T.unsafe(nil), col_abs_1 = T.unsafe(nil), col_abs_2 = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#96
  def xl_range_formula(sheetname, row_1, row_2, col_1, col_2); end

  # xl_rowcol_to_cell($row, col, row_absolute, col_absolute)
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#34
  def xl_rowcol_to_cell(row_or_name, col, row_absolute = T.unsafe(nil), col_absolute = T.unsafe(nil)); end

  # xl_string_pixel_width($string)
  #
  # Get the pixel width of a string based on individual character widths taken
  # from Excel. UTF8 characters are given a default width of 8.
  #
  # Note, Excel adds an additional 7 pixels padding to a cell.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#115
  def xl_string_pixel_width(string); end

  # source://write_xlsx//lib/write_xlsx/utility.rb#273
  def xml_str; end

  class << self
    # source://write_xlsx//lib/write_xlsx/utility.rb#277
    def delete_files(path); end
  end
end

# source://write_xlsx//lib/write_xlsx/utility.rb#12
Writexlsx::Utility::CHAR_WIDTHS = T.let(T.unsafe(nil), Hash)

# source://write_xlsx//lib/write_xlsx/utility.rb#9
Writexlsx::Utility::COL_MAX = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/utility.rb#352
Writexlsx::Utility::PERL_TRUE_VALUES = T.let(T.unsafe(nil), Array)

# source://write_xlsx//lib/write_xlsx/utility.rb#8
Writexlsx::Utility::ROW_MAX = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/utility.rb#11
Writexlsx::Utility::SHEETNAME_MAX = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/utility.rb#10
Writexlsx::Utility::STR_MAX = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/workbook.rb#22
class Writexlsx::Workbook
  include ::Writexlsx::Utility

  # @return [Workbook] a new instance of Workbook
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#42
  def initialize(file, *option_params); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#606
  def activesheet; end

  # Sets the attribute activesheet
  #
  # @param value the value to set the attribute activesheet to.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#534
  def activesheet=(_arg0); end

  # This method is use to create a new chart either as a standalone worksheet
  # (the default) or as an embeddable object that can be inserted into
  # a worksheet via the insert_chart method.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#246
  def add_chart(params = T.unsafe(nil)); end

  # The add_format method can be used to create new Format objects
  # which are used to apply formatting to a cell. You can either define
  # the properties at creation time via a hash of property values
  # or later via method calls.
  #
  #     format1 = workbook.add_format(property_hash) # Set properties at creation
  #     format2 = workbook.add_format                # Set properties later
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#284
  def add_format(property_hash = T.unsafe(nil)); end

  # The +add_shape+ method can be used to create new shapes that may be
  # inserted into a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#300
  def add_shape(properties = T.unsafe(nil)); end

  # The add_vba_project method can be used to add macros or functions to an
  # WriteXLSX file using a binary VBA project file that has been extracted
  # from an existing Excel xlsm file.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#459
  def add_vba_project(vba_project); end

  # At least one worksheet should be added to a new workbook. A worksheet is used to write data into cells:
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#234
  def add_worksheet(name = T.unsafe(nil)); end

  # user must not use. it is internal method.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#195
  def assemble_xml_file; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#27
  def charts; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#564
  def chartsheet_count; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#594
  def chartsheets; end

  # The close method is used to close an Excel file.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#127
  def close; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#30
  def custom_properties; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#538
  def date_1904?; end

  # Get the default url format used when a user defined format isn't specified
  # with write_url(). The format is the hyperlink style defined by Excel for the
  # default theme.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#499
  def default_url_format; end

  # Create a defined name in Excel. We handle global/workbook level names and
  # local/worksheet names.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#313
  def define_name(name, formula); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#29
  def doc_properties; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#27
  def drawings; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#40
  def embedded_descriptions; end

  # :nodec:
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#38
  def embedded_image_indexes; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#39
  def embedded_images; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#34
  def excel2003_style; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#602
  def firstsheet; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#25
  def firstsheet=(_arg0); end

  # return date system. false = 1900, true = 1904
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#170
  def get_1904; end

  # Get the default url format used when a user defined format isn't specified
  # with write_url(). The format is the hyperlink style defined by Excel for the
  # default theme.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#499
  def get_default_url_format; end

  # Return a worksheet object in the workbook using the sheetname.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#153
  def get_worksheet_by_name(sheetname = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#543
  def has_dynamic_functions?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#618
  def has_embedded_descriptions?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#614
  def has_embedded_images?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#610
  def has_metadata?; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#31
  def image_types; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#31
  def images; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#35
  def max_url_length; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#28
  def named_ranges; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#568
  def non_chartsheet_count; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#598
  def non_chartsheets; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#590
  def num_comment_files; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#586
  def num_vml_files; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#26
  def palette; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#37
  def read_only; end

  # Set the Excel "Read-only recommended" save option.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#473
  def read_only_recommended; end

  # Set the date system: false = 1900 (the default), true = 1904
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#161
  def set_1904(mode = T.unsafe(nil)); end

  # set_calc_mode()
  #
  # Set the Excel caclcuation mode for the workbook.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#482
  def set_calc_mode(mode, calc_id = T.unsafe(nil)); end

  # Change the RGB components of the elements in the colour palette.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#505
  def set_custom_color(index, red = T.unsafe(nil), green = T.unsafe(nil), blue = T.unsafe(nil)); end

  # Set a user defined custom document property.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#417
  def set_custom_property(name, value, type = T.unsafe(nil)); end

  # The set_properties method can be used to set the document properties
  # of the Excel file created by WriteXLSX. These properties are visible
  # when you use the Office Button -> Prepare -> Properties option in Excel
  # and are also available to external applications that read or index windows
  # files.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#383
  def set_properties(params); end

  # Set the workbook size.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#347
  def set_size(width = T.unsafe(nil), height = T.unsafe(nil)); end

  # Set the ratio of space for worksheet tabs.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#366
  def set_tab_ratio(tab_ratio = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#174
  def set_tempdir(dir); end

  # Set the VBA name for the workbook.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#466
  def set_vba_name(vba_codename = T.unsafe(nil)); end

  # user must not use. it is internal method.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#181
  def set_xml_writer(filename); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#552
  def shared_string_index(str); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#32
  def shared_strings; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#560
  def shared_strings_empty?; end

  # get array of Worksheet objects
  #
  # :call-seq:
  #   sheets              -> array of all Wordsheet object
  #   sheets(1, 3, 4)     -> array of spcified Worksheet object.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#142
  def sheets(*args); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#556
  def str_unique; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#36
  def strings_to_urls; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#572
  def style_properties; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#33
  def vba_project; end

  # Return a worksheet object in the workbook using the sheetname.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#153
  def worksheet_by_name(sheetname = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#27
  def worksheets; end

  # Returns the value of attribute writer.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#536
  def writer; end

  # user must not use. it is internal method.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#188
  def xml_str; end

  private

  # Add "cached" data to charts to provide the numCache and strCache data for
  # series and title/axis ranges.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1263
  def add_chart_data; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#1310
  def chart_data(worksheet, cells); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#720
  def check_chart_sheetname(name); end

  # Check for valid worksheet names. We check the length, if it contains any
  # invalid characters and if the name is unique in the workbook.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#716
  def check_sheetname(name); end

  # for test
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#876
  def defined_names; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1131
  def eq_0?(val); end

  # Extract the named ranges from the sorted list of defined names. These are
  # used in the App.xml file.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1373
  def extract_named_ranges(defined_names); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#624
  def filename; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#629
  def fileobj; end

  # Convert a range formula such as Sheet1!$B$1:$B$5 into a sheet name and cell
  # range such as ( 'Sheet1', 0, 1, 4, 1 ).
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#728
  def get_chart_range(range); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1135
  def ne_0?(val); end

  # Used in the above sort routine to normalise the defined names. Removes any
  # leading '_xmln.' from internal names and lowercases the strings.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1359
  def normalise_defined_name(name); end

  # Used in the above sort routine to normalise the worksheet names for the
  # secondary sort. Removes leading quote and lowercases the strings.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1365
  def normalise_sheet_name(name); end

  # files
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#941
  def parts; end

  # Iterate through the XF Format objects and give them an index to non-default
  # border elements.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1055
  def prepare_borders; end

  # Iterate through the worksheets and store any defined names in addition to
  # any user defined names. Stores the defined names for the Workbook.xml and
  # the named ranges for App.xml.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1144
  def prepare_defined_names; end

  # Iterate through the worksheets and set up any chart or image drawings.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1404
  def prepare_drawings; end

  # Iterate through the XF Format objects and give them an index to non-default
  # fill elements.
  #
  # The user defined fill properties start from 2 since there are 2 default
  # fills: patternType="none" and patternType="gray125".
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1076
  def prepare_fills; end

  # Iterate through the XF Format objects and give them an index to non-default
  # font elements.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#988
  def prepare_fonts; end

  # Prepare all of the format properties prior to passing them to Styles.rb.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#953
  def prepare_format_properties; end

  # Iterate through the XF Format objects and separate them into XF and DXF
  # formats.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#974
  def prepare_formats; end

  # Set the metadata rel link.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1249
  def prepare_metadata; end

  # Iterate through the XF Format objects and give them an index to non-default
  # number format elements.
  #
  # User defined records start from index 0xA4.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1009
  def prepare_num_formats; end

  # prepare_sst_string_data
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#948
  def prepare_sst_string_data; end

  # Set the table ids for the worksheet tables.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1237
  def prepare_tables; end

  # Iterate through the worksheets and set up the VML objects.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1185
  def prepare_vml_objects; end

  # Sets the colour palette to the Excel defaults.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#651
  def set_color_palette; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#634
  def setup_filename; end

  # Sort internal and user defined names in the same order as used by Excel.
  # This may not be strictly necessary but unsorted elements caused a lot of
  # issues in the the Spreadsheet::WriteExcel binary version. Also makes
  # comparison testing easier.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1337
  def sort_defined_names(names); end

  # Store the image types (PNG/JPEG/etc) used in the workbook to use in these
  # Content_Types file.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#1547
  def store_image_types(type); end

  # Assemble worksheets into a workbook.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#883
  def store_workbook; end

  # Returns the value of attribute tempdir.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#646
  def tempdir; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#803
  def write_book_views; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#820
  def write_calc_pr; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#860
  def write_defined_name(defined_name); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#852
  def write_defined_names; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#840
  def write_ext; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#836
  def write_ext_lst; end

  # Write the <fileSharing> element.
  #
  # source://write_xlsx//lib/write_xlsx/workbook.rb#787
  def write_file_sharing; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#771
  def write_file_version; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#870
  def write_io(str); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#848
  def write_mx_arch_id; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#927
  def write_parts(zip); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#760
  def write_workbook(&block); end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#795
  def write_workbook_pr; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#807
  def write_workbook_view; end

  # source://write_xlsx//lib/write_xlsx/workbook.rb#934
  def zip_entry_for_part(part); end
end

# Add a string to the shared string table, if it isn't already there, and
# return the string index.
#
# source://write_xlsx//lib/write_xlsx/workbook.rb#551
Writexlsx::Workbook::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#5
class Writexlsx::Worksheet
  include ::Writexlsx::Utility

  # @return [Worksheet] a new instance of Worksheet
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#43
  def initialize(workbook, index, name); end

  # Set this worksheet as the active worksheet, i.e. the worksheet that is
  # displayed when the workbook is opened. Also set it as selected.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#225
  def activate; end

  # :call-seq:
  #    add_sparkline(properties)
  #
  # Add sparklines to the worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2294
  def add_sparkline(param); end

  # :call-seq:
  #    add_table(row1, col1, row2, col2, properties)
  #
  # Add an Excel table to a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2281
  def add_table(*args); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#172
  def assemble_xml_file; end

  # :call-seq:
  #   autofilter(first_row, first_col, last_row, last_col)
  #
  # Set the autofilter area in the worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2380
  def autofilter(row1, col1 = T.unsafe(nil), row2 = T.unsafe(nil), col2 = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#34
  def autofilter_area; end

  # autofit()
  #
  # Simulate autofit based on the data, and datatypes in each column. We do this
  # by estimating a pixel width for each cell data.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#419
  def autofit; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#30
  def background_image; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2732
  def buttons_data; end

  # Center the worksheet data horizontally between the margins on the printed page:
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#742
  def center_horizontally; end

  # Center the worksheet data vertically between the margins on the printed page:
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#749
  def center_vertically; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#29
  def charts; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#35
  def col_info; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#37
  def comments; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#37
  def comments_author; end

  # This method is used to set the default author of all cell comments.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2482
  def comments_author=(author); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2671
  def comments_visible?; end

  # :call-seq:
  #   conditional_formatting(cell_or_cell_range, options)
  #
  # Conditional formatting is a feature of Excel which allows you to apply a
  # format to a cell or a range of cells based on a certain criteria.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2269
  def conditional_formatting(*args); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#38
  def data_bars_2010; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#38
  def data_bars_2010=(_arg0); end

  # :call-seq:
  #   data_validation(cell_or_cell_range, options)
  #
  # Data validation is a feature of Excel which allows you to restrict
  # the data that a users enters in a cell and to display help and
  # warning messages. It also allows you to restrict input to values
  # in a drop down list.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2327
  def data_validation(*args); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2712
  def date_1904?; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2751
  def drawing_links; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#29
  def drawings; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#38
  def dxf_priority; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#38
  def dxf_priority=(_arg0); end

  # Embed an image into the worksheet.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1971
  def embed_image(row, col, filename, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2716
  def excel2003_style?; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#40
  def excel_version=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2740
  def external_links; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#41
  def filter_cells; end

  # Set the column filter criteria.
  #
  # The filter_column method can be used to filter columns in a autofilter
  # range based on simple conditions.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2411
  def filter_column(col, expression); end

  # Set the column filter criteria in Excel 2007 list style.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2442
  def filter_column_list(col, *tokens); end

  # The fit_to_pages() method is used to fit the printed area to a specific
  # number of pages both vertically and horizontally. If the printed area
  # exceeds the specified number of pages it will be scaled down to fit.
  # This guarantees that the printed area will always appear on the
  # specified number of pages even if the page size or margins change.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2367
  def fit_to_pages(width = T.unsafe(nil), height = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#30
  def footer_images; end

  # :call-seq:
  #   freeze_panes(row, col [ , top_row, left_col ] )
  #
  # This method can be used to divide a worksheet into horizontal or
  # vertical regions known as panes and to also "freeze" these panes so
  # that the splitter bars are not visible. This is the same as the
  # Window->Freeze Panes menu command in Excel
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#578
  def freeze_panes(*args); end

  # Returns a range of data from the worksheet _table to be used in chart
  # cached data. Strings are returned as SST ids and decoded in the workbook.
  # Return nils for data that doesn't exist since Excel can chart series
  # with data missing.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2567
  def get_range_data(row_start, col_start, row_end, col_end); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2500
  def has_comments?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2867
  def has_dynamic_functions?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2871
  def has_embedded_images?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2496
  def has_header_vml?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2504
  def has_shapes?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2492
  def has_vml?; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#30
  def header_images; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2736
  def header_images_data; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#248
  def hidden?; end

  # Hide this worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#234
  def hide(hidden = T.unsafe(nil)); end

  # Set the option to hide gridlines on the screen and the printed page.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2335
  def hide_gridlines(option = T.unsafe(nil)); end

  # Set the option to hide the row and column headers in Excel.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2356
  def hide_row_col_headers; end

  # Hide cell zero values.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1013
  def hide_zero(flag = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2812
  def horizontal_dpi=(val); end

  # Ignore worksheet errors/warnings in user defined ranges.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2830
  def ignore_errors(ignores); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#29
  def images; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#28
  def index; end

  # :call-seq:
  #   insert_button(row, col, properties)
  #
  # The insert_button() method can be used to insert an Excel form button
  # into a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2305
  def insert_button(row, col, properties = T.unsafe(nil)); end

  # :call-seq:
  #   insert_chart(row, column, chart [ , x, y, x_scale, y_scale ])
  #
  # This method can be used to insert a Chart object into a worksheet.
  # The Chart must be created by the add_chart() Workbook method and
  # it must have the embedded option set.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1869
  def insert_chart(row, col, chart = T.unsafe(nil), *options); end

  # :call-seq:
  #   insert_image(row, column, filename, options)
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1927
  def insert_image(row, col, image = T.unsafe(nil), *options); end

  # :call-seq:
  #   insert_shape(row, col, shape [ , x, y, x_scale, y_scale ])
  #
  # Insert a shape into the worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3392
  def insert_shape(row_start, column_start, shape = T.unsafe(nil), x_offset = T.unsafe(nil), y_offset = T.unsafe(nil), x_scale = T.unsafe(nil), y_scale = T.unsafe(nil), anchor = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2508
  def is_chartsheet?; end

  # Causes the write() method to treat integers with a leading zero as a string.
  # This ensures that any leading zeros such, as in zip codes, are maintained.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#999
  def keep_leading_zeros(flag = T.unsafe(nil)); end

  # Set the bottom margin in inches.
  # See margins=()
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#809
  def margin_bottom=(margin); end

  # Set the left margin in inches.
  # See margins=()
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#785
  def margin_left=(margin); end

  # Set the right margin in inches.
  # See margins=()
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#793
  def margin_right=(margin); end

  # Set the top margin in inches.
  # See margins=()
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#801
  def margin_top=(margin); end

  # Set all the page margins to the same value in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#756
  def margins=(margin); end

  # Set the left and right margins to the same value in inches.
  # See set_margins
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#767
  def margins_left_right=(margin); end

  # Set the top and bottom margins to the same value in inches.
  # See set_margins
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#776
  def margins_top_bottom=(margin); end

  # merge_range(first_row, first_col, last_row, last_col, string, format)
  #
  # Merge a range of cells. The first cell should contain the data and the
  # others should be blank. All cells should contain the same format.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2158
  def merge_range(*args); end

  # Same as merge_range() above except the type of
  # {#write()}[#method-i-write] is specified.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2195
  def merge_range_type(type, *args); end

  # The name method is used to retrieve the name of a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#210
  def name; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2804
  def num_comments_block; end

  # The outline_settings() method is used to control the appearance of
  # outlines in Excel.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1761
  def outline_settings(visible = T.unsafe(nil), symbols_below = T.unsafe(nil), symbols_right = T.unsafe(nil), auto_style = T.unsafe(nil)); end

  # Convert from an Excel internal colour index to a XML style #RRGGBB index
  # based on the default or user defined values in the Workbook palette.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2724
  def palette_color(index); end

  # Set the paper type. Ex. 1 = US Letter, 9 = A4
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#658
  def paper=(paper_size); end

  # Calculate the vertices that define the position of a graphical object within
  # the worksheet in pixels.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2596
  def position_object_pixels(col_start, row_start, x1, y1, width, height, anchor = T.unsafe(nil)); end

  # Set up an image without a drawing object for the background image.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3380
  def prepare_background(image_id, image_type); end

  # Set up chart/drawings.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2525
  def prepare_chart(index, chart_id, drawing_id); end

  # Utility method to strip equal sign and array braces from a formula
  # and also expand out future and dynamic array formulas.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1346
  def prepare_formula(given_formula, expand_future_functions = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3355
  def prepare_header_image(image_id, width, height, name, image_type, position, x_dpi, y_dpi, md5); end

  # Setup external linkage for VML header/footer images.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2776
  def prepare_header_vml_objects(vml_header_id, vml_drawing_id); end

  # Set up image/drawings.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3280
  def prepare_image(index, image_id, drawing_id, width, height, name, image_type, x_dpi = T.unsafe(nil), y_dpi = T.unsafe(nil), md5 = T.unsafe(nil)); end

  # Set up drawing shapes
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3460
  def prepare_shape(index, drawing_id); end

  # Set the table ids for the worksheet tables.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2784
  def prepare_tables(table_id, seen); end

  # Turn the HoH that stores the comments into an array for easier handling
  # and set the external links for comments and buttons.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2759
  def prepare_vml_objects(vml_data_id, vml_shape_id, vml_drawing_id, comment_id); end

  # Set the order in which pages are printed.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1020
  def print_across(across = T.unsafe(nil)); end

  # :call-seq:
  #   print_area(first_row, first_col, last_row, last_col)
  #
  # This method is used to specify the area of the worksheet that will
  # be printed. All four parameters must be specified. You can also use
  # A1 notation.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#926
  def print_area(*args); end

  # Set the option to print the worksheet in black and white.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#990
  def print_black_and_white; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#914
  def print_repeat_cols; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#892
  def print_repeat_rows; end

  # Set the option to print the row and column headers on the printed page.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2343
  def print_row_col_headers(headers = T.unsafe(nil)); end

  # Set the scale factor of the printed page.
  # Scale factors in the range 10 <= scale <= 400 are valid:
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#967
  def print_scale=(scale = T.unsafe(nil)); end

  # Set the worksheet protection flags to prevent modification of worksheet
  # objects.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#270
  def protect(password = T.unsafe(nil), options = T.unsafe(nil)); end

  # :call-seq:
  #   repeat_columns(first_col, last_col = nil)
  #
  # Set the columns to repeat at the left hand side of each printed page.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#902
  def repeat_columns(*args); end

  # :call-seq:
  #   repeat_formula(row, column, formula [ , format ])
  #
  # Deprecated. This is a writeexcel gem's method that is no longer
  # required by WriteXLSX.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2034
  def repeat_formula(row, col, formula, format, *pairs); end

  # Set the number of rows to repeat at the top of each printed page.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#878
  def repeat_rows(row_min, row_max = T.unsafe(nil)); end

  # Display the worksheet right to left for some eastern versions of Excel.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1006
  def right_to_left(flag = T.unsafe(nil)); end

  # Set this worksheet as a selected worksheet, i.e. the worksheet has its tab
  # highlighted.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#216
  def select; end

  # Set the background image for the worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3370
  def set_background(image); end

  # :call-seq:
  #   set_column(firstcol, lastcol, width, format, hidden, level, collapsed)
  #
  # This method can be used to change the default properties of a single
  # column or a range of columns. All parameters apart from +first_col+
  # and +last_col+ are optional.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#330
  def set_column(*args); end

  # Set the width (and properties) of a single column or a range of columns in
  # pixels rather than character units.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#386
  def set_column_pixels(*data); end

  # This method is deprecated. use comments_author=().
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2487
  def set_comments_author(author); end

  # Set the default row properties
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2138
  def set_default_row(height = T.unsafe(nil), zero_height = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2517
  def set_external_comment_links(comment_id); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2512
  def set_external_vml_links(vml_drawing_id); end

  # Set this worksheet as the first visible sheet. This is necessary
  # when there are a large number of worksheets and the activated
  # worksheet is not visible on the screen.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#261
  def set_first_sheet; end

  # Set the page footer caption and optional margin.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#705
  def set_footer(string = T.unsafe(nil), margin = T.unsafe(nil), options = T.unsafe(nil)); end

  # Store the horizontal page breaks on a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2457
  def set_h_pagebreaks(*args); end

  # Set the page header caption and optional margin.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#670
  def set_header(string = T.unsafe(nil), margin = T.unsafe(nil), options = T.unsafe(nil)); end

  # Set the page orientation as landscape.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#621
  def set_landscape; end

  # this method is deprecated. use margin_bottom=()
  # Set the bottom margin in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#870
  def set_margin_bottom(margin = T.unsafe(nil)); end

  # this method is deprecated. use margin_left=()
  # Set the left margin in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#843
  def set_margin_left(margin = T.unsafe(nil)); end

  # this method is deprecated. use margin_right=()
  # Set the right margin in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#852
  def set_margin_right(margin = T.unsafe(nil)); end

  # this method is deprecated. use margin_top=()
  # Set the top margin in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#861
  def set_margin_top(margin = T.unsafe(nil)); end

  # set_margin_* methods are deprecated. use margin_*=().
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#816
  def set_margins(margin); end

  # this method is deprecated. use margin_left_right=().
  # Set the left and right margins to the same value in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#825
  def set_margins_LR(margin); end

  # this method is deprecated. use margin_top_bottom=().
  # Set the top and bottom margins to the same value in inches.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#834
  def set_margins_TB(margin); end

  # This method is used to display the worksheet in "Page View/Layout" mode.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#629
  def set_page_view(flag = T.unsafe(nil)); end

  # set_pagebreak_view
  #
  # Set the page view mode.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#638
  def set_pagebreak_view; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#662
  def set_paper(paper_size); end

  # Set the page orientation as portrait.
  # The default worksheet orientation is portrait, so you won't generally
  # need to call this method.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#613
  def set_portrait; end

  # This method is deprecated. use print_scale=().
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#982
  def set_print_scale(scale = T.unsafe(nil)); end

  # :call-seq:
  #   set_row(row [ , height, format, hidden, level, collapsed ])
  #
  # This method can be used to change the default properties of a row.
  # All parameters apart from +row+ are optional.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2080
  def set_row(*args); end

  # This method is used to set the height (in pixels) and the properties of the
  # row.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2128
  def set_row_pixels(*data); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#35
  def set_rows; end

  # :call-seq:
  #   set_selection(cell_or_cell_range)
  #
  # Set which cell or cells are selected in a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#525
  def set_selection(*args); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1037
  def set_start_page(page_start); end

  # This method is deprecated. use tab_color=().
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#650
  def set_tab_color(color); end

  # set_top_left_cell()
  #
  # Set the first visible cell at the top left of the worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#558
  def set_top_left_cell(row, col = T.unsafe(nil)); end

  # Store the vertical page breaks on a worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2467
  def set_v_pagebreaks(*args); end

  # set the vba name for the worksheet
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2823
  def set_vba_name(vba_codename = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#168
  def set_xml_writer(filename); end

  # This method is deprecated. use zoom=().
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#958
  def set_zoom(scale); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#29
  def shapes; end

  # This method is used to make all cell comments visible when a worksheet
  # is opened.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2475
  def show_comments(visible = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2675
  def sorted_comments; end

  # :call-seq:
  #   split_panes(y, x, top_row, left_col)
  #
  # Set panes and mark them as split.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#603
  def split_panes(*args); end

  # The start_page=() method is used to set the number of the
  # starting page when the worksheet is printed out.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1033
  def start_page=(page_start); end

  # Deprecated. This is a writeexcel method that is no longer required
  # by WriteXLSX. See below.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1774
  def store_formula(string); end

  # Set the colour of the worksheet tab.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#645
  def tab_color=(color); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#29
  def tables; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2808
  def tables_count; end

  # Unprotect ranges within a protected worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#284
  def unprotect_range(range, range_name = T.unsafe(nil), password = T.unsafe(nil)); end

  # :call-seq:
  #   update_format_with_params(row, col, format_params)
  #
  # Update formatting of the cell to the specified row and column (zero indexed).
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1678
  def update_format_with_params(row, col, params = T.unsafe(nil)); end

  # :call-seq:
  #   update_range_format_with_params(row_first, col_first, row_last, col_last, format_params)
  #
  # Update formatting of cells in range to the specified row and column (zero indexed).
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1728
  def update_range_format_with_params(row_first, col_first, row_last = T.unsafe(nil), col_last = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#39
  def vba_codename; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2816
  def vertical_dpi=(val); end

  # Hide this worksheet. This can only be unhidden from VBA.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#244
  def very_hidden; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#252
  def very_hidden?; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#32
  def vml_data_id; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#31
  def vml_drawing_links; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#33
  def vml_header_id; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#36
  def vml_shape_id; end

  # :call-seq:
  #  write(row, column [ , token [ , format ] ])
  #
  # Excel makes a distinction between data types such as strings, numbers,
  # blanks, formulas and hyperlinks. To simplify the process of writing
  # data the {#write()}[#method-i-write] method acts as a general alias for several more
  # specific methods:
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1051
  def write(row, col, token = T.unsafe(nil), format = T.unsafe(nil), value1 = T.unsafe(nil), value2 = T.unsafe(nil)); end

  # write_array_formula(row1, col1, row2, col2, formula, format)
  #
  # Write an array formula to the specified row and column (zero indexed).
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1630
  def write_array_formula(row1, col1, row2 = T.unsafe(nil), col2 = T.unsafe(nil), formula = T.unsafe(nil), format = T.unsafe(nil), value = T.unsafe(nil)); end

  # Internal method shared by the write_array_formula() and
  # write_dynamic_array_formula() methods.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1566
  def write_array_formula_base(type, *args); end

  # :call-seq:
  #   write_blank(row, col, format)
  #
  # Write a blank cell to the specified row and column (zero indexed).
  # A blank cell is used to specify formatting without adding a string
  # or a number.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1308
  def write_blank(row, col, format = T.unsafe(nil)); end

  # write_boolean(row, col, val, format)
  #
  # Write a boolean value to the specified row and column (zero indexed).
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1649
  def write_boolean(row, col, val = T.unsafe(nil), format = T.unsafe(nil)); end

  # Write the cell array formula <f> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2702
  def write_cell_array_formula(formula, range); end

  # Write the cell formula <f> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2695
  def write_cell_formula(formula = T.unsafe(nil)); end

  # Write the cell value <v> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2682
  def write_cell_value(value = T.unsafe(nil)); end

  # :call-seq:
  #   write_col(row, col, array [ , format ])
  #
  # Write a column of data starting from (row, col). Call write_row() if any of
  # the elements of the array are in turn array. This allows the writing
  # of 1D or 2D arrays of data in one go.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1155
  def write_col(row, col, tokens = T.unsafe(nil), *options); end

  # :call-seq:
  #   write_comment(row, column, string, options = {})
  #
  # Write a comment to the specified row and column (zero indexed).
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1180
  def write_comment(row, col, string = T.unsafe(nil), options = T.unsafe(nil)); end

  # :call-seq:
  #   write_date_time (row, col, date_string [ , format ])
  #
  # Write a datetime string in ISO8601 "yyyy-mm-ddThh:mm:ss.ss" format as a
  # number representing an Excel date. format is optional.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1833
  def write_date_time(row, col, str, format = T.unsafe(nil)); end

  # write_dynamic_array_formula(row1, col1, row2, col2, formula, format)
  #
  # Write a dynamic formula to the specified row and column (zero indexed).
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1639
  def write_dynamic_array_formula(row1, col1, row2 = T.unsafe(nil), col2 = T.unsafe(nil), formula = T.unsafe(nil), format = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2849
  def write_ext(url, &block); end

  # :call-seq:
  #   write_formula(row, column, formula [ , format [ , value ] ])
  #
  # Write a formula or function to the cell specified by +row+ and +column+:
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1526
  def write_formula(row, col, formula = T.unsafe(nil), format = T.unsafe(nil), value = T.unsafe(nil)); end

  # :call-seq:
  #   write_number(row, column, number [ , format ])
  #
  # Write an integer or a float to the cell specified by row and column:
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1210
  def write_number(row, col, number, format = T.unsafe(nil)); end

  # :call-seq:
  #    write_rich_string(row, column, (string | format, string)+,  [,cell_format])
  #
  # The write_rich_string() method is used to write strings with multiple formats.
  # The method receives string fragments prefixed by format objects. The final
  # format object is used as the cell format.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1270
  def write_rich_string(row, col, *rich_strings); end

  # :call-seq:
  #   write_row(row, col, array [ , format ])
  #
  # Write a row of data starting from (row, col). Call write_col() if any of
  # the elements of the array are in turn array. This allows the writing
  # of 1D or 2D arrays of data in one go.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1122
  def write_row(row, col, tokens = T.unsafe(nil), *options); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2857
  def write_sparkline_groups; end

  # :call-seq:
  #   write_string(row, column, string [, format ])
  #
  # Write a string to the specified row and column (zero indexed).
  # +format+ is optional.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1238
  def write_string(row, col, string = T.unsafe(nil), format = T.unsafe(nil)); end

  # :call-seq:
  #   write_url(row, column, url [ , format, label, tip ])
  #
  # Write a hyperlink to a URL in the cell specified by +row+ and +column+.
  # The hyperlink is comprised of two elements: the visible label and
  # the invisible link. The visible label is the same as the link unless
  # an alternative label is specified. The label parameter is optional.
  # The label is written using the {#write()}[#method-i-write] method. Therefore it is
  # possible to write strings, numbers or formulas as labels.
  #
  # @raise [WriteXLSXInsufficientArgumentError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1789
  def write_url(row, col, url = T.unsafe(nil), format = T.unsafe(nil), str = T.unsafe(nil), tip = T.unsafe(nil), ignore_write_string = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#35
  def writer; end

  # Set the worksheet zoom factor in the range <tt>10 <= scale <= 400</tt>:
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#947
  def zoom=(scale); end

  private

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4897
  def autofilter_ref?; end

  # This method handles the parameters passed to insert_button as well as
  # calculating the button object position and vertices.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3488
  def button_params(row, col, params); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4796
  def calc_spans(data, row_num, span_min, span_max); end

  # Calculate the "spans" attribute of the <row> tag. This is an XLSX
  # optimisation and isn't strictly required. However, it makes comparing
  # files easier.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4771
  def calculate_spans; end

  # Convert column width from user units to pane split width.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4029
  def calculate_x_split_width(width); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2941
  def cell_format_of_rich_string(rich_strings); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3798
  def col_info_attributes(args); end

  # Compare adjacent column information structures.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2880
  def compare_col_info(col_options, previous_options); end

  # convert_name_area(first_row, first_col, last_row, last_col)
  #
  # Convert zero indexed rows and columns to the format required by worksheet
  # named ranges, eg, "Sheet1!$A$1:$C$13".
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4825
  def convert_name_area(row_num_1, col_num_1, row_num_2, col_num_2); end

  # Get the index used to address a drawing rel link.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2907
  def drawing_rel_index(target = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4901
  def drawings?; end

  # Hash a worksheet password. Based on the algorithm in ECMA-376-4:2016,
  # Office Open XML File Foemats -- Transitional Migration Features,
  # Additional attributes for workbookProtection element (Part 1, §18.2.29).   #
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3551
  def encode_password(password); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#1330
  def expand_formula(formula, function, addition = T.unsafe(nil)); end

  # Extract the tokens from the filter expression. The tokens are mainly non-
  # whitespace groups. The only tricky part is to extract string tokens that
  # contain whitespace and/or quoted double quotes (Excel's escaped quotes).
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3028
  def extract_filter_tokens(expression = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4865
  def filter_on?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4861
  def fit_page?; end

  # Get the index used to address a vml_drawing rel link.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2922
  def get_vml_drawing_rel_index(target); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2931
  def hyperlinks_count; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4510
  def increment_rel_id_and_write_r_id(tag); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3876
  def not_contain_formatting_or_data?(row_num); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4873
  def outline_changed?; end

  # Converts the tokens of a possibly conditional expression into 1 or 2
  # sub expressions for further parsing.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3059
  def parse_filter_expression(expression, tokens); end

  # Parse the 3 tokens of a filter expression and return the operator and token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3084
  def parse_filter_tokens(expression, tokens); end

  # Convert the height of a cell from pixels to character units.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3271
  def pixels_to_height(pixels); end

  # Convert the width of a cell from pixels to character units.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3257
  def pixels_to_width(pixels); end

  # Calculate the vertices that define the position of a graphical object within
  # the worksheet in EMUs.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3191
  def position_object_emus(col_start, row_start, x1, y1, width, height, anchor = T.unsafe(nil)); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4933
  def prepare_filter_column(col); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4893
  def protect?; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#299
  def protect_default_settings; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4905
  def remove_white_space(margin); end

  # Convert the list of format, string tokens to pairs of (format, string)
  # except for the first string fragment which doesn't require a default
  # formatting run. Use the default for strings without a leading format.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2951
  def rich_strings_fragments(rich_strings); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4885
  def right_to_left?; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3904
  def row_attributes(args); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4913
  def set_active_pane_and_cell_selections(row, col, top_row, left_col, active_cell, sqref); end

  # Add a string to the shared string table, if it isn't already there, and
  # return the string index.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4815
  def shared_string_index(str); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4889
  def show_zeros?; end

  # Convert the width of a cell from user's units to pixels. Excel rounds the
  # column width to the nearest pixel. If the width hasn't been set by the user
  # we use the default value. A hidden column is treated as having a width of
  # zero unless it has the special "object_position" of 4 (size with cells).
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3212
  def size_col(col, anchor = T.unsafe(nil)); end

  # Convert the height of a cell from user's units to pixels. If the height
  # hasn't been set by the user we use the default value. A hidden row is
  # treated as having a height of zero unless it has the special
  # "object_position" of 4 (size with cells).
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3238
  def size_row(row, anchor = T.unsafe(nil)); end

  # This is an internal method that is used to filter elements of the array of
  # pagebreaks used in the _store_hbreak() and _store_vbreak() methods. It:
  #   1. Removes duplicate entries from the list.
  #   2. Sorts the list.
  #   3. Removes 0 from the list if present.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3171
  def sort_pagebreaks(*args); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4719
  def sparkline_groups_attributes; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4752
  def store_data_to_table(cell_data, row, col); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2935
  def store_hyperlink(row, col, hyperlink); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4761
  def store_row_col_max_min_values(row, col); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4869
  def tab_color?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3605
  def tab_outline_fit?; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4877
  def vba_codename?; end

  # Write the <autoFilter> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4177
  def write_auto_filter; end

  # Function to iterate through the columns that form part of an autofilter
  # range and write the appropriate filters.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4199
  def write_autofilters; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4136
  def write_breaks(tag); end

  # Write the <brk> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4164
  def write_brk(id, max); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3880
  def write_cell_column_dimension(row_num); end

  # Write the <colBreaks> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4132
  def write_col_breaks; end

  # Write the <col> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3794
  def write_col_info(args); end

  # Write the <cols> element and <col> sub elements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3750
  def write_cols; end

  # Write the Worksheet conditional formats.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4737
  def write_conditional_formats; end

  # Write the <conditionalFormatting> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4746
  def write_conditional_formatting(range, cond_formats); end

  # Write the <x14:conditionalFormatting> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4550
  def write_conditional_formatting_2010(data_bar); end

  # Write the <customFilter> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4285
  def write_custom_filter(operator, val); end

  # Write the <customFilters> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4260
  def write_custom_filters(*tokens); end

  # Write the <dataValidations> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4728
  def write_data_validations; end

  # Write the <dimension> element. This specifies the range of cells in the
  # worksheet. As a special case, empty spreadsheets use 'A1' as a range.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3619
  def write_dimension; end

  # Write the <drawing> elements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4446
  def write_drawings; end

  # Write and empty <row> element, i.e., attributes only, no cell data.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3900
  def write_empty_row(*args); end

  # Write the <extLst> element for data bars and sparklines.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4522
  def write_ext_list; end

  # Write the Excel 2010 data_bar subelements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4534
  def write_ext_list_data_bars; end

  # Write the sparkline subelements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4693
  def write_ext_list_sparklines; end

  # Write the <filter> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4253
  def write_filter(val); end

  # Write the <filterColumn> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4218
  def write_filter_column(col_id, type, *filters); end

  # Write the <filters> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4233
  def write_filters(*filters); end

  # Pad out the rest of the area with formatted blank cells.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3013
  def write_formatted_blank_to_area(row_first, row_last, col_first, col_last, format); end

  # Write the <pane> element for freeze panes.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3942
  def write_freeze_panes(row, col, top_row, left_col, type); end

  # Write the <headerFooter> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4118
  def write_header_footer; end

  # Process any sored hyperlinks in row/col order and write the <hyperlinks>
  # element. The attributes are different for internal and external links.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4315
  def write_hyperlinks; end

  # Write the <ignoredError> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4979
  def write_ignored_error(type, sqref); end

  # Write the <ignoredErrors> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4954
  def write_ignored_errors; end

  # Write the <legacyDrawing> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4453
  def write_legacy_drawing; end

  # Write the <legacyDrawingHF> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4460
  def write_legacy_drawing_hf; end

  # Write the <mergeCell> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4098
  def write_merge_cell(merged_range); end

  # Write the <mergeCells> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4083
  def write_merge_cells; end

  # Write the <outlinePr> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4373
  def write_outline_pr; end

  # Write the <pageMargins> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4069
  def write_page_margins; end

  # Write the <pageSetUpPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3612
  def write_page_set_up_pr; end

  # Write the <pageSetup> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4076
  def write_page_setup; end

  # Write the frozen or split <pane> elements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3929
  def write_panes; end

  # Write the <phoneticPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4057
  def write_phonetic_pr; end

  # Write the <picture> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4473
  def write_picture; end

  # Write the <printOptions> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4111
  def write_print_options; end

  # Write the <protectedRange> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4433
  def write_protected_range(sqref, name, password); end

  # Write the <protectedRanges> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4420
  def write_protected_ranges; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4515
  def write_r_id(tag, id); end

  # Write the <rowBreaks> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4125
  def write_row_breaks; end

  # Write the <row> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3893
  def write_row_element(*args, &block); end

  # Write out the worksheet data as a series of rows and cells.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3853
  def write_rows; end

  # Write the <selection> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3721
  def write_selection(pane, active_cell, sqref); end

  # Write the <selection> elements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3714
  def write_selections; end

  # Write the <sheetCalcPr> element for the worksheet calculation properties.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4050
  def write_sheet_calc_pr; end

  # Write the <sheetData> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3841
  def write_sheet_data; end

  # Write the <sheetFormatPr> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3733
  def write_sheet_format_pr; end

  # Write the <sheetPr> element for Sheet level properties.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3587
  def write_sheet_pr; end

  # Write the <sheetProtection> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4388
  def write_sheet_protection; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3655
  def write_sheet_view; end

  # Write the <sheetViews> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3651
  def write_sheet_views; end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4089
  def write_some_elements(tag, container, &block); end

  # Write the <x14:sparklines> element and <x14:sparkline> subelements.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4704
  def write_sparklines(sparkline); end

  # Write the <pane> element for split panes.
  #
  # See also, implementers note for split_panes().
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3981
  def write_split_panes; end

  # Write the <tabColor> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4359
  def write_tab_color; end

  # Write the <tablePart> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4506
  def write_table_part(id); end

  # Write the <tableParts> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4495
  def write_table_parts; end

  # Write the underline font element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4488
  def write_underline(writer, underline); end

  # Write the <worksheet> element. This is the root element of Worksheet.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#3569
  def write_worksheet_attributes; end

  # Write the <x14:axisColor> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4684
  def write_x14_axis_color(rgb); end

  # Write the <x14:borderColor> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4657
  def write_x14_border_color(rgb); end

  # Write the <'<x14:cfRule> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4610
  def write_x14_cf_rule(data_bar); end

  # Write the <cfvo> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4595
  def write_x14_cfvo(type, value); end

  # Write the <x14:dataBar> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4625
  def write_x14_data_bar(data_bar); end

  # Write the <x14:negativeBorderColor> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4675
  def write_x14_negative_border_color(rgb); end

  # Write the <x14:negativeFillColor> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4666
  def write_x14_negative_fill_color(rgb); end

  # source://write_xlsx//lib/write_xlsx/worksheet.rb#2986
  def xml_str_of_rich_string(fragments); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet.rb#4881
  def zoom_scale_normal?; end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#196
class Writexlsx::Worksheet::BlankCellData < ::Writexlsx::Worksheet::CellData
  # @return [BlankCellData] a new instance of BlankCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#197
  def initialize(xf); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#201
  def data; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#205
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#174
class Writexlsx::Worksheet::BooleanCellData < ::Writexlsx::Worksheet::CellData
  # @return [BooleanCellData] a new instance of BooleanCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#177
  def initialize(val, xf); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#182
  def data; end

  # Returns the value of attribute token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#175
  def token; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#186
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet.rb#26
Writexlsx::Worksheet::COLINFO = Struct

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#6
class Writexlsx::Worksheet::CellData
  include ::Writexlsx::Utility

  # attributes for the <cell> element. This is the innermost loop so efficiency is
  # important where possible.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#15
  def cell_attributes(worksheet, row, row_name, col); end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#34
  def display_url_string?; end

  # Returns the value of attribute xf.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#9
  def xf; end
end

# source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#6
class Writexlsx::Worksheet::DataValidation
  include ::Writexlsx::Utility

  # @raise [WriteXLSXInsufficientArgumentError]
  # @return [DataValidation] a new instance of DataValidation
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#14
  def initialize(*args); end

  # Returns the value of attribute cells.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#10
  def cells; end

  # Returns the value of attribute criteria.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#9
  def criteria; end

  # Returns the value of attribute dropdown.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#11
  def dropdown; end

  # Returns the value of attribute error_message.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#12
  def error_message; end

  # Returns the value of attribute error_title.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#12
  def error_title; end

  # Returns the value of attribute error_type.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#10
  def error_type; end

  # Returns the value of attribute ignore_blank.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#11
  def ignore_blank; end

  # Returns the value of attribute input_message.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#12
  def input_message; end

  # Returns the value of attribute input_title.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#12
  def input_title; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#90
  def keys; end

  # Returns the value of attribute maximum.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#9
  def maximum; end

  # Returns the value of attribute minimum.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#9
  def minimum; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#84
  def options_to_instance_variable(params); end

  # Returns the value of attribute other_cells.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#10
  def other_cells; end

  # Returns the value of attribute show_error.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#11
  def show_error; end

  # Returns the value of attribute show_input.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#11
  def show_input; end

  # Returns the value of attribute source.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#9
  def source; end

  # Returns the value of attribute validate.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#9
  def validate; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#94
  def validate_none?; end

  # Returns the value of attribute value.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#9
  def value; end

  # Write the <dataValidation> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#101
  def write_data_validation(writer); end

  private

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#138
  def attributes; end

  # @raise [WriteXLSXOptionParameterError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#203
  def check_criteria_required; end

  # @raise [WriteXLSXOptionParameterError]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#188
  def check_for_valid_input_params; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#207
  def check_maximum_value_when_criteria_is_between_or_notbetween; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#218
  def check_valid_citeria_types; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#225
  def convert_date_time_value_if_required; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#302
  def date_1904?; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#237
  def error_type_hash; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#177
  def has_key?(key); end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#181
  def set_some_defaults; end

  # List of valid criteria types.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#281
  def valid_criteria_type; end

  # List of valid input parameters.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#259
  def valid_validation_parameter; end

  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#241
  def valid_validation_type; end

  # Write the <formula1> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#120
  def write_formula_1(formula); end

  # Write the <formula2> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/data_validation.rb#132
  def write_formula_2(formula); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#88
class Writexlsx::Worksheet::DateTimeCellData < ::Writexlsx::Worksheet::NumberCellData; end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#148
class Writexlsx::Worksheet::DynamicFormulaArrayCellData < ::Writexlsx::Worksheet::CellData
  # @return [DynamicFormulaArrayCellData] a new instance of DynamicFormulaArrayCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#151
  def initialize(formula, xf, range, result); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#158
  def data; end

  # Returns the value of attribute link_type.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#149
  def link_type; end

  # Returns the value of attribute range.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#149
  def range; end

  # Returns the value of attribute result.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#149
  def result; end

  # Returns the value of attribute token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#149
  def token; end

  # Returns the value of attribute url.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#149
  def url; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#162
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#210
class Writexlsx::Worksheet::EmbedImageCellData < ::Writexlsx::Worksheet::CellData
  # @return [EmbedImageCellData] a new instance of EmbedImageCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#211
  def initialize(image_index, xf); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#216
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#97
class Writexlsx::Worksheet::ExternalHyperlink < ::Writexlsx::Worksheet::Hyperlink
  # @return [ExternalHyperlink] a new instance of ExternalHyperlink
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#98
  def initialize(url, str, tip, max_url_length); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#126
class Writexlsx::Worksheet::FormulaArrayCellData < ::Writexlsx::Worksheet::CellData
  # @return [FormulaArrayCellData] a new instance of FormulaArrayCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#129
  def initialize(formula, xf, range, result); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#136
  def data; end

  # Returns the value of attribute link_type.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#127
  def link_type; end

  # Returns the value of attribute range.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#127
  def range; end

  # Returns the value of attribute result.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#127
  def result; end

  # Returns the value of attribute token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#127
  def token; end

  # Returns the value of attribute url.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#127
  def url; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#140
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#91
class Writexlsx::Worksheet::FormulaCellData < ::Writexlsx::Worksheet::CellData
  # @return [FormulaCellData] a new instance of FormulaCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#94
  def initialize(formula, xf, result); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#100
  def data; end

  # Returns the value of attribute link_type.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#92
  def link_type; end

  # Returns the value of attribute range.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#92
  def range; end

  # Returns the value of attribute result.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#92
  def result; end

  # Returns the value of attribute token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#92
  def token; end

  # Returns the value of attribute url.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#92
  def url; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#104
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#6
class Writexlsx::Worksheet::Hyperlink
  include ::Writexlsx::Utility

  # @return [Hyperlink] a new instance of Hyperlink
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#23
  def initialize(url, str, tip, max_url_length); end

  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#44
  def attributes(row, col, id); end

  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#60
  def display_on; end

  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#56
  def external_hyper_link; end

  # Returns the value of attribute str.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#9
  def str; end

  # Returns the value of attribute tip.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#9
  def tip; end

  class << self
    # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#13
    def factory(url, str = T.unsafe(nil), tip = T.unsafe(nil), max_url_length = T.unsafe(nil)); end
  end
end

# source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#11
Writexlsx::Worksheet::Hyperlink::MAXIMUM_URLS_SIZE = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#66
class Writexlsx::Worksheet::InternalHyperlink < ::Writexlsx::Worksheet::Hyperlink
  # @return [InternalHyperlink] a new instance of InternalHyperlink
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#69
  def initialize(url, str, tip, max_url_length); end

  # source://write_xlsx//lib/write_xlsx/worksheet/hyperlink.rb#86
  def attributes(row, col, _dummy = T.unsafe(nil)); end
end

# source://write_xlsx//lib/write_xlsx/worksheet.rb#24
Writexlsx::Worksheet::MAX_DIGIT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#39
class Writexlsx::Worksheet::NumberCellData < ::Writexlsx::Worksheet::CellData
  # @return [NumberCellData] a new instance of NumberCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#42
  def initialize(num, xf); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#47
  def data; end

  # Returns the value of attribute token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#40
  def token; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#51
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet.rb#25
Writexlsx::Worksheet::PADDING = T.let(T.unsafe(nil), Integer)

# source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#6
class Writexlsx::Worksheet::PageSetup
  include ::Writexlsx::Utility

  # @return [PageSetup] a new instance of PageSetup
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#20
  def initialize; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#14
  def across=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#15
  def black_white; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#15
  def black_white=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#50
  def center_horizontally; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#55
  def center_vertically; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def fit_height; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def fit_height=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def fit_page; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def fit_page=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def fit_width; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def fit_width=(_arg0); end

  # Returns the value of attribute footer.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def footer; end

  # Sets the attribute footer
  #
  # @param value the value to set the attribute footer to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def footer=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#12
  def hbreaks; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#12
  def hbreaks=(_arg0); end

  # Returns the value of attribute header.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header; end

  # Sets the attribute header
  #
  # @param value the value to set the attribute header to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header=(_arg0); end

  # Returns the value of attribute header_footer_aligns.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header_footer_aligns; end

  # Sets the attribute header_footer_aligns
  #
  # @param value the value to set the attribute header_footer_aligns to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header_footer_aligns=(_arg0); end

  # Returns the value of attribute header_footer_changed.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header_footer_changed; end

  # Sets the attribute header_footer_changed
  #
  # @param value the value to set the attribute header_footer_changed to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header_footer_changed=(_arg0); end

  # Returns the value of attribute header_footer_scales.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header_footer_scales; end

  # Sets the attribute header_footer_scales
  #
  # @param value the value to set the attribute header_footer_scales to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#16
  def header_footer_scales=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#69
  def hide_gridlines(option); end

  # Sets the attribute horizontal_dpi
  #
  # @param value the value to set the attribute horizontal_dpi to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#18
  def horizontal_dpi=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_bottom; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_bottom=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#10
  def margin_footer; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#10
  def margin_footer=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#10
  def margin_header; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#10
  def margin_header=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_left; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_left=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_right; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_right=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_top; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#9
  def margin_top=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#15
  def orientation; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#15
  def orientation=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def page_setup_changed; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#13
  def page_setup_changed=(_arg0); end

  # Sets the attribute page_start
  #
  # @param value the value to set the attribute page_start to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#17
  def page_start=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#43
  def paper=(paper_size); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#11
  def print_area; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#11
  def print_area=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#15
  def print_options_changed; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#15
  def print_options_changed=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#60
  def print_row_col_headers(headers); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#11
  def repeat_cols; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#11
  def repeat_cols=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#11
  def repeat_rows; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#11
  def repeat_rows=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#12
  def scale; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#12
  def scale=(_arg0); end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#12
  def vbreaks; end

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#12
  def vbreaks=(_arg0); end

  # Sets the attribute vertical_dpi
  #
  # @param value the value to set the attribute vertical_dpi to.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#18
  def vertical_dpi=(_arg0); end

  # Write the <headerFooter> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#148
  def write_header_footer(writer, excel2003_style); end

  # Write the <pageMargins> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#127
  def write_page_margins(writer); end

  # Write the <pageSetup> element.
  #
  # The following is an example taken from Excel.
  #
  # <pageSetup
  #     paperSize="9"
  #     scale="110"
  #     fitToWidth="2"
  #     fitToHeight="2"
  #     pageOrder="overThenDown"
  #     orientation="portrait"
  #     useFirstPageNumber="1"
  #     blackAndWhite="1"
  #     draft="1"
  #     horizontalDpi="200"
  #     verticalDpi="200"
  #     r:id="rId1"
  # />
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#98
  def write_page_setup(writer); end

  # Write the <printOptions> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#134
  def write_print_options(writer); end

  private

  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#180
  def margin_attributes; end

  # Write the <oddFooter> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#176
  def write_odd_footer(writer); end

  # Write the <oddHeader> element.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/page_setup.rb#169
  def write_odd_header(writer); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#85
class Writexlsx::Worksheet::RichStringCellData < ::Writexlsx::Worksheet::StringCellData; end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#58
class Writexlsx::Worksheet::StringCellData < ::Writexlsx::Worksheet::CellData
  # @return [StringCellData] a new instance of StringCellData
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#61
  def initialize(index, xf, raw_string); end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#67
  def data; end

  # @return [Boolean]
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#80
  def display_url_string?; end

  # Returns the value of attribute raw_string.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#59
  def raw_string; end

  # Returns the value of attribute token.
  #
  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#59
  def token; end

  # source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#72
  def write_cell(worksheet, row, row_name, col); end
end

# source://write_xlsx//lib/write_xlsx/worksheet/cell_data.rb#71
Writexlsx::Worksheet::StringCellData::TYPE_STR_ATTRS = T.let(T.unsafe(nil), Array)

# source://write_xlsx//lib/write_xlsx/utility.rb#1165
module Writexlsx::WriteDPtPoint
  # Write an individual <c:dPt> element. Override the parent method to add
  # markers.
  #
  # source://write_xlsx//lib/write_xlsx/utility.rb#1170
  def write_d_pt_point(index, point); end
end

# source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#11
module ZipFileUtils
  class << self
    # source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#60
    def each_dir_for(dir_path, &block); end

    # @yield [path]
    #
    # source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#64
    def each_file_for(path, &block); end

    # source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#84
    def encode_path(path, encode_s); end

    # source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#80
    def relative(path, base_dir); end

    # src  zip filename
    # dest  destination directory
    # options :fs_encoding=[UTF-8,Shift_JIS,EUC-JP]
    #
    # source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#39
    def unzip(src, dest, options = T.unsafe(nil)); end

    # src  file or directory
    # dest  zip filename
    # options :fs_encoding=[UTF-8,Shift_JIS,EUC-JP]
    #
    # source://write_xlsx//lib/write_xlsx/zip_file_utils.rb#15
    def zip(src, dest, options = T.unsafe(nil)); end
  end
end
