# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activesupport` gem.
# Please instead update this file by running `bin/tapioca gem activesupport`.


# source://activesupport//lib/active_support/deep_mergeable.rb#3
module ActiveSupport
  extend ::ActiveSupport::LazyLoadHooks

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times; end

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times=(val); end

  class << self
    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json=(arg); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder=(arg); end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times; end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times=(val); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision=(arg); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format=(arg); end
  end
end

# source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#7
module ActiveSupport::BigDecimalWithDefaultFormat
  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/deep_mergeable.rb#6
module ActiveSupport::DeepMergeable
  # source://activesupport//lib/active_support/deep_mergeable.rb#29
  def deep_merge(other, &block); end

  # source://activesupport//lib/active_support/deep_mergeable.rb#34
  def deep_merge!(other, &block); end

  # source://activesupport//lib/active_support/deep_mergeable.rb#49
  def deep_merge?(other); end
end

# source://activesupport//lib/active_support/delegation.rb#14
module ActiveSupport::Delegation
  class << self
    # source://activesupport//lib/active_support/delegation.rb#21
    def generate(owner, methods, location: T.unsafe(nil), to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), nilable: T.unsafe(nil), private: T.unsafe(nil), as: T.unsafe(nil), signature: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/delegation.rb#150
    def generate_method_missing(owner, target, allow_nil: T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/delegation.rb#18
ActiveSupport::Delegation::RESERVED_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://activesupport//lib/active_support/delegation.rb#15
ActiveSupport::Delegation::RUBY_RESERVED_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/delegation.rb#6
class ActiveSupport::DelegationError < ::NoMethodError
  class << self
    # source://activesupport//lib/active_support/delegation.rb#8
    def nil_target(method_name, target); end
  end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#7
module ActiveSupport::Inflector
  extend ::ActiveSupport::Inflector

  # source://activesupport//lib/active_support/inflector/methods.rb#70
  def camelize(term, uppercase_first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#218
  def classify(table_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#289
  def constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#226
  def dasherize(underscored_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#256
  def deconstantize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#238
  def demodulize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#175
  def downcase_first(string); end

  # source://activesupport//lib/active_support/inflector/methods.rb#267
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#135
  def humanize(lower_case_and_underscored_word, capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#265
  def inflections(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#334
  def ordinal(number); end

  # source://activesupport//lib/active_support/inflector/methods.rb#347
  def ordinalize(number); end

  # source://activesupport//lib/active_support/inflector/methods.rb#33
  def pluralize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#315
  def safe_constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#50
  def singularize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#204
  def tableize(class_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#192
  def titleize(word, keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#99
  def underscore(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#166
  def upcase_first(string); end

  private

  # source://activesupport//lib/active_support/inflector/methods.rb#376
  def apply_inflections(word, rules, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#357
  def const_regexp(camel_cased_word); end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#30
class ActiveSupport::Inflector::Inflections
  # source://activesupport//lib/active_support/inflector/inflections.rb#80
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#142
  def acronym(word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def acronyms; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def acronyms_camelize_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def acronyms_underscore_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#231
  def clear(scope = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#220
  def human(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def humans; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#174
  def irregular(singular, plural); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#151
  def plural(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def plurals; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#161
  def singular(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def singulars; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#208
  def uncountable(*words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def uncountables; end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#250
  def define_acronym_regex_patterns; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#86
  def initialize_dup(orig); end

  class << self
    # source://activesupport//lib/active_support/inflector/inflections.rb#65
    def instance(locale = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/inflector/inflections.rb#69
    def instance_or_fallback(locale); end
  end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#33
class ActiveSupport::Inflector::Inflections::Uncountables < ::Array
  # source://activesupport//lib/active_support/inflector/inflections.rb#34
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#44
  def <<(*word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#48
  def add(words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#39
  def delete(entry); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#55
  def uncountable?(str); end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#60
  def to_regex(string); end
end

# source://activesupport//lib/active_support/json/decoding.rb#11
module ActiveSupport::JSON
  class << self
    # source://activesupport//lib/active_support/json/decoding.rb#22
    def decode(json); end

    # source://activesupport//lib/active_support/json/encoding.rb#40
    def dump(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/encoding.rb#40
    def encode(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/decoding.rb#22
    def load(json); end

    # source://activesupport//lib/active_support/json/decoding.rb#43
    def parse_error; end

    private

    # source://activesupport//lib/active_support/json/decoding.rb#48
    def convert_dates_from(data); end
  end
end

# source://activesupport//lib/active_support/json/decoding.rb#14
ActiveSupport::JSON::DATETIME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/decoding.rb#13
ActiveSupport::JSON::DATE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/encoding.rb#46
module ActiveSupport::JSON::Encoding
  class << self
    # source://activesupport//lib/active_support/json/encoding.rb#121
    def escape_html_entities_in_json; end

    # source://activesupport//lib/active_support/json/encoding.rb#121
    def escape_html_entities_in_json=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#129
    def json_encoder; end

    # source://activesupport//lib/active_support/json/encoding.rb#129
    def json_encoder=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#125
    def time_precision; end

    # source://activesupport//lib/active_support/json/encoding.rb#125
    def time_precision=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#117
    def use_standard_json_time_format; end

    # source://activesupport//lib/active_support/json/encoding.rb#117
    def use_standard_json_time_format=(_arg0); end
  end
end

# source://activesupport//lib/active_support/json/encoding.rb#47
class ActiveSupport::JSON::Encoding::JSONGemEncoder
  # source://activesupport//lib/active_support/json/encoding.rb#50
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/json/encoding.rb#55
  def encode(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#48
  def options; end

  private

  # source://activesupport//lib/active_support/json/encoding.rb#88
  def jsonify(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#109
  def stringify(jsonified); end
end

# source://activesupport//lib/active_support/lazy_load_hooks.rb#43
module ActiveSupport::LazyLoadHooks
  # source://activesupport//lib/active_support/lazy_load_hooks.rb#60
  def on_load(name, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#75
  def run_load_hooks(name, base = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#91
  def execute_hook(name, base, options, block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#83
  def with_execution_control(name, block, once); end

  class << self
    # source://activesupport//lib/active_support/lazy_load_hooks.rb#44
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/values/time_zone.rb#31
class ActiveSupport::TimeZone
  include ::Comparable

  # source://activesupport//lib/active_support/values/time_zone.rb#309
  def initialize(name, utc_offset = T.unsafe(nil), tzinfo = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#333
  def <=>(zone); end

  # source://activesupport//lib/active_support/values/time_zone.rb#342
  def =~(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#567
  def abbr(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#379
  def at(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#571
  def dst?(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#579
  def encode_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#327
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#575
  def init_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#396
  def iso8601(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#363
  def local(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#551
  def local_to_utc(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#348
  def match?(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#296
  def name; end

  # source://activesupport//lib/active_support/values/time_zone.rb#516
  def now; end

  # source://activesupport//lib/active_support/values/time_zone.rb#453
  def parse(str, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#559
  def period_for_local(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#555
  def period_for_utc(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#563
  def periods_for_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#469
  def rfc3339(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#507
  def strptime(str, format, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#354
  def to_s; end

  # source://activesupport//lib/active_support/values/time_zone.rb#521
  def today; end

  # source://activesupport//lib/active_support/values/time_zone.rb#526
  def tomorrow; end

  # source://activesupport//lib/active_support/values/time_zone.rb#297
  def tzinfo; end

  # source://activesupport//lib/active_support/values/time_zone.rb#317
  def utc_offset; end

  # source://activesupport//lib/active_support/values/time_zone.rb#542
  def utc_to_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#531
  def yesterday; end

  private

  # source://activesupport//lib/active_support/values/time_zone.rb#585
  def parts_to_time(parts, now); end

  # source://activesupport//lib/active_support/values/time_zone.rb#610
  def time_now; end

  class << self
    # source://activesupport//lib/active_support/values/time_zone.rb#232
    def [](arg); end

    # source://activesupport//lib/active_support/values/time_zone.rb#223
    def all; end

    # source://activesupport//lib/active_support/values/time_zone.rb#265
    def clear; end

    # source://activesupport//lib/active_support/values/time_zone.rb#260
    def country_zones(country_code); end

    def create(*_arg0); end

    # source://activesupport//lib/active_support/values/time_zone.rb#207
    def find_tzinfo(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#216
    def new(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#199
    def seconds_to_utc_offset(seconds, colon = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/values/time_zone.rb#254
    def us_zones; end

    private

    # source://activesupport//lib/active_support/values/time_zone.rb#273
    def load_country_zones(code); end

    # source://activesupport//lib/active_support/values/time_zone.rb#287
    def zones_map; end
  end
end

# source://activesupport//lib/active_support/values/time_zone.rb#33
ActiveSupport::TimeZone::MAPPING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/values/time_zone.rb#188
ActiveSupport::TimeZone::UTC_OFFSET_WITHOUT_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/values/time_zone.rb#187
ActiveSupport::TimeZone::UTC_OFFSET_WITH_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#35
module ActiveSupport::ToJsonWithActiveSupportEncoder
  # source://activesupport//lib/active_support/core_ext/object/json.rb#36
  def to_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#163
class Array
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#164
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#124
class BigDecimal < ::Numeric
  include ::ActiveSupport::BigDecimalWithDefaultFormat

  # source://activesupport//lib/active_support/core_ext/object/json.rb#134
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#68
class Data
  # source://activesupport//lib/active_support/core_ext/object/json.rb#69
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/date/zones.rb#6
class Date
  include ::Comparable
  include ::DateAndTime::Zones

  # source://activesupport//lib/active_support/core_ext/object/json.rb#211
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#63
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#63
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#49
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#49
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#83
  def to_time(form = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#95
  def xmlschema; end
end

# source://activesupport//lib/active_support/core_ext/date/conversions.rb#9
Date::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#3
module DateAndTime; end

# source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#4
module DateAndTime::Zones
  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#20
  def in_time_zone(zone = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#32
  def time_with_zone(time, zone); end
end

# source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#5
class DateTime < ::Date
  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#208
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#82
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#109
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#221
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#146
  def at_beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#158
  def at_beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#140
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#152
  def at_end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#164
  def at_end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#146
  def beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#158
  def beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#51
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#140
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#152
  def end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#164
  def end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#51
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def getgm; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#170
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def getutc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def gmtime; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#116
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#170
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#94
  def nsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#20
  def seconds_since_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#29
  def seconds_until_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#116
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#36
  def subsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#79
  def to_f; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#84
  def to_i; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#89
  def usec; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def utc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#197
  def utc?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#202
  def utc_offset; end

  private

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#99
  def offset_in_seconds; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#103
  def seconds_since_unix_epoch; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#69
    def civil_from_format(utc_or_local, year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), min = T.unsafe(nil), sec = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#10
    def current; end
  end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#145
module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder

  # source://activesupport//lib/active_support/core_ext/object/json.rb#146
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#256
class Exception
  # source://activesupport//lib/active_support/core_ext/object/json.rb#257
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#86
class FalseClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#87
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#116
class Float < ::Numeric
  # source://activesupport//lib/active_support/core_ext/object/json.rb#119
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#5
class Hash
  include ::Enumerable
  include ::ActiveSupport::DeepMergeable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#175
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#40
  def deep_merge?(other); end

  # source://activesupport//lib/active_support/core_ext/hash/except.rb#8
  def except!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#24
  def extract!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#10
  def slice!(*keys); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#151
class IO
  include ::Enumerable
  include ::File::Constants

  # source://activesupport//lib/active_support/core_ext/object/json.rb#152
  def as_json(options = T.unsafe(nil)); end
end

class IO::Buffer
  include ::Comparable

  def initialize(*_arg0); end

  def &(_arg0); end
  def <=>(_arg0); end
  def ^(_arg0); end
  def and!(_arg0); end
  def clear(*_arg0); end
  def copy(*_arg0); end
  def each(*_arg0); end
  def each_byte(*_arg0); end
  def empty?; end
  def external?; end
  def free; end
  def get_string(*_arg0); end
  def get_value(_arg0, _arg1); end
  def get_values(_arg0, _arg1); end
  def hexdump; end
  def inspect; end
  def internal?; end
  def locked; end
  def locked?; end
  def mapped?; end
  def not!; end
  def null?; end
  def or!(_arg0); end
  def pread(*_arg0); end
  def pwrite(*_arg0); end
  def read(*_arg0); end
  def readonly?; end
  def resize(_arg0); end
  def set_string(*_arg0); end
  def set_value(_arg0, _arg1, _arg2); end
  def set_values(_arg0, _arg1, _arg2); end
  def shared?; end
  def size; end
  def slice(*_arg0); end
  def to_s; end
  def transfer; end
  def valid?; end
  def values(*_arg0); end
  def write(*_arg0); end
  def xor!(_arg0); end
  def |(_arg0); end
  def ~; end

  private

  def initialize_copy(_arg0); end

  class << self
    def for(_arg0); end
    def map(*_arg0); end
    def size_of(_arg0); end
  end
end

class IO::Buffer::AccessError < ::RuntimeError; end
class IO::Buffer::AllocationError < ::RuntimeError; end
IO::Buffer::BIG_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::EXTERNAL = T.let(T.unsafe(nil), Integer)
IO::Buffer::HOST_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::INTERNAL = T.let(T.unsafe(nil), Integer)
class IO::Buffer::InvalidatedError < ::RuntimeError; end
IO::Buffer::LITTLE_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::LOCKED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::LockedError < ::RuntimeError; end
IO::Buffer::MAPPED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::MaskError < ::ArgumentError; end
IO::Buffer::NETWORK_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::PAGE_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::PRIVATE = T.let(T.unsafe(nil), Integer)
IO::Buffer::READONLY = T.let(T.unsafe(nil), Integer)
IO::Buffer::SHARED = T.let(T.unsafe(nil), Integer)

class IO::ConsoleMode
  def echo=(_arg0); end
  def raw(*_arg0); end
  def raw!(*_arg0); end

  private

  def initialize_copy(_arg0); end
end

class IO::EAGAINWaitReadable < ::Errno::EAGAIN
  include ::IO::WaitReadable
end

class IO::EAGAINWaitWritable < ::Errno::EAGAIN
  include ::IO::WaitWritable
end

class IO::EINPROGRESSWaitReadable < ::Errno::EINPROGRESS
  include ::IO::WaitReadable
end

class IO::EINPROGRESSWaitWritable < ::Errno::EINPROGRESS
  include ::IO::WaitWritable
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable
IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable
IO::PRIORITY = T.let(T.unsafe(nil), Integer)
IO::READABLE = T.let(T.unsafe(nil), Integer)
class IO::TimeoutError < ::IOError; end
IO::WRITABLE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/object/json.rb#243
class IPAddr
  # source://activesupport//lib/active_support/core_ext/object/json.rb#244
  def as_json(options = T.unsafe(nil)); end
end

class Integer < ::Numeric; end

class LoadError < ::ScriptError
  include ::DidYouMean::Correctable
end

# source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#8
class Module
  # source://activesupport//lib/active_support/core_ext/object/json.rb#53
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#208
  def cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#55
  def cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#121
  def cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#160
  def delegate(*methods, to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), private: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#218
  def delegate_missing_to(target, allow_nil: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#208
  def mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#55
  def mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#121
  def mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#30
  def method_visibility(method); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#17
  def redefine_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#26
  def redefine_singleton_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#7
  def silence_redefinition_of_method(method); end
end

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#5
Module::DelegationError = ActiveSupport::DelegationError

class NameError < ::StandardError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#92
class NilClass
  include ::Treetop::Compiler::Metagrammar::LabeledExpressionSequenceBody0

  # source://activesupport//lib/active_support/core_ext/object/json.rb#93
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#110
class Numeric
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#111
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#3
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder

  # source://activesupport//lib/active_support/core_ext/object/json.rb#59
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#14
  def instance_values; end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#29
  def instance_variable_names; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#236
class Pathname
  # source://activesupport//lib/active_support/core_ext/object/json.rb#237
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#250
class Process::Status
  # source://activesupport//lib/active_support/core_ext/object/json.rb#251
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#157
class Range
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#158
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#139
class Regexp
  # source://activesupport//lib/active_support/core_ext/object/json.rb#140
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#98
class String
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#99
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#74
class Struct
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#75
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#104
class Symbol
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#105
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/time/conversions.rb#7
class Time
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#201
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#69
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#55
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#55
  def to_fs(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/time/conversions.rb#8
Time::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/object/json.rb#80
class TrueClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#81
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#230
class URI::Generic
  include ::URI

  # source://activesupport//lib/active_support/core_ext/object/json.rb#231
  def as_json(options = T.unsafe(nil)); end
end
