# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activesupport` gem.
# Please instead update this file by running `bin/tapioca gem activesupport`.


# source://activesupport//lib/active_support/array_inquirer.rb#3
module ActiveSupport
  extend ::ActiveSupport::LazyLoadHooks

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times; end

  # source://activesupport//lib/active_support/json/decoding.rb#9
  def parse_json_times=(val); end

  class << self
    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json=(arg); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def json_encoder=(arg); end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times; end

    # source://activesupport//lib/active_support/json/decoding.rb#9
    def parse_json_times=(val); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def time_precision=(arg); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format(*_arg0, **_arg1, &_arg2); end

    # source://activesupport//lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format=(arg); end
  end
end

# source://activesupport//lib/active_support/array_inquirer.rb#14
class ActiveSupport::ArrayInquirer < ::Array
  # source://activesupport//lib/active_support/array_inquirer.rb#27
  def any?(*candidates); end

  private

  # source://activesupport//lib/active_support/array_inquirer.rb#42
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/array_inquirer.rb#38
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#7
module ActiveSupport::BigDecimalWithDefaultFormat
  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#6
module ActiveSupport::CoreExt; end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#7
module ActiveSupport::CoreExt::ERBUtil
  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def h(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def html_escape(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#10
  def unwrapped_html_escape(s); end
end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#31
module ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil

  private

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def h(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
  def html_escape(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#10
  def unwrapped_html_escape(s); end
end

# source://activesupport//lib/active_support/deep_mergeable.rb#6
module ActiveSupport::DeepMergeable
  # source://activesupport//lib/active_support/deep_mergeable.rb#29
  def deep_merge(other, &block); end

  # source://activesupport//lib/active_support/deep_mergeable.rb#34
  def deep_merge!(other, &block); end

  # source://activesupport//lib/active_support/deep_mergeable.rb#49
  def deep_merge?(other); end
end

# source://activesupport//lib/active_support/delegation.rb#14
module ActiveSupport::Delegation
  class << self
    # source://activesupport//lib/active_support/delegation.rb#21
    def generate(owner, methods, location: T.unsafe(nil), to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), nilable: T.unsafe(nil), private: T.unsafe(nil), as: T.unsafe(nil), signature: T.unsafe(nil)); end

    # source://activesupport//lib/active_support/delegation.rb#150
    def generate_method_missing(owner, target, allow_nil: T.unsafe(nil)); end
  end
end

# source://activesupport//lib/active_support/delegation.rb#18
ActiveSupport::Delegation::RESERVED_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://activesupport//lib/active_support/delegation.rb#15
ActiveSupport::Delegation::RUBY_RESERVED_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/delegation.rb#6
class ActiveSupport::DelegationError < ::NoMethodError
  class << self
    # source://activesupport//lib/active_support/delegation.rb#8
    def nil_target(method_name, target); end
  end
end

# source://activesupport//lib/active_support/duration.rb#14
class ActiveSupport::Duration
  # source://activesupport//lib/active_support/duration.rb#226
  def initialize(value, parts, variable = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#312
  def %(other); end

  # source://activesupport//lib/active_support/duration.rb#287
  def *(other); end

  # source://activesupport//lib/active_support/duration.rb#268
  def +(other); end

  # source://activesupport//lib/active_support/duration.rb#326
  def +@; end

  # source://activesupport//lib/active_support/duration.rb#282
  def -(other); end

  # source://activesupport//lib/active_support/duration.rb#322
  def -@; end

  # source://activesupport//lib/active_support/duration.rb#298
  def /(other); end

  # source://activesupport//lib/active_support/duration.rb#258
  def <=>(other); end

  # source://activesupport//lib/active_support/duration.rb#341
  def ==(other); end

  # source://activesupport//lib/active_support/duration.rb#481
  def _parts; end

  # source://activesupport//lib/active_support/duration.rb#224
  def abs(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#436
  def after(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#444
  def ago(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#459
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#444
  def before(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#245
  def coerce(other); end

  # source://activesupport//lib/active_support/duration.rb#467
  def encode_with(coder); end

  # source://activesupport//lib/active_support/duration.rb#426
  def eql?(other); end

  # source://activesupport//lib/active_support/duration.rb#436
  def from_now(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#430
  def hash; end

  # source://activesupport//lib/active_support/duration.rb#399
  def in_days; end

  # source://activesupport//lib/active_support/duration.rb#392
  def in_hours; end

  # source://activesupport//lib/active_support/duration.rb#385
  def in_minutes; end

  # source://activesupport//lib/active_support/duration.rb#413
  def in_months; end

  # source://activesupport//lib/active_support/duration.rb#377
  def in_seconds; end

  # source://activesupport//lib/active_support/duration.rb#406
  def in_weeks; end

  # source://activesupport//lib/active_support/duration.rb#420
  def in_years; end

  # source://activesupport//lib/active_support/duration.rb#463
  def init_with(coder); end

  # source://activesupport//lib/active_support/duration.rb#450
  def inspect; end

  # source://activesupport//lib/active_support/duration.rb#335
  def instance_of?(klass); end

  # source://activesupport//lib/active_support/duration.rb#330
  def is_a?(klass); end

  # source://activesupport//lib/active_support/duration.rb#473
  def iso8601(precision: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#330
  def kind_of?(klass); end

  # source://activesupport//lib/active_support/duration.rb#224
  def negative?(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#241
  def parts; end

  # source://activesupport//lib/active_support/duration.rb#224
  def positive?(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#436
  def since(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#224
  def to_f(&_arg0); end

  # source://activesupport//lib/active_support/duration.rb#377
  def to_i; end

  # source://activesupport//lib/active_support/duration.rb#353
  def to_s; end

  # source://activesupport//lib/active_support/duration.rb#444
  def until(time = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration.rb#133
  def value; end

  # source://activesupport//lib/active_support/duration.rb#477
  def variable?; end

  # source://activesupport//lib/active_support/duration.rb#224
  def zero?(&_arg0); end

  private

  # source://activesupport//lib/active_support/duration.rb#516
  def method_missing(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#520
  def raise_type_error(other); end

  # source://activesupport//lib/active_support/duration.rb#512
  def respond_to_missing?(method, _); end

  # source://activesupport//lib/active_support/duration.rb#486
  def sum(sign, time = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/duration.rb#149
    def ===(other); end

    # source://activesupport//lib/active_support/duration.rb#189
    def build(value); end

    # source://activesupport//lib/active_support/duration.rb#167
    def days(value); end

    # source://activesupport//lib/active_support/duration.rb#163
    def hours(value); end

    # source://activesupport//lib/active_support/duration.rb#159
    def minutes(value); end

    # source://activesupport//lib/active_support/duration.rb#175
    def months(value); end

    # source://activesupport//lib/active_support/duration.rb#144
    def parse(iso8601duration); end

    # source://activesupport//lib/active_support/duration.rb#155
    def seconds(value); end

    # source://activesupport//lib/active_support/duration.rb#171
    def weeks(value); end

    # source://activesupport//lib/active_support/duration.rb#179
    def years(value); end

    private

    # source://activesupport//lib/active_support/duration.rb#217
    def calculate_total_seconds(parts); end
  end
end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#12
class ActiveSupport::Duration::ISO8601Parser
  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#34
  def initialize(string); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def mode; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def mode=(_arg0); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#41
  def parse!; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#31
  def parts; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#31
  def scanner; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def sign; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#32
  def sign=(_arg0); end

  private

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#83
  def finished?; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#88
  def number; end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#96
  def raise_parsing_error(reason = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#92
  def scan(pattern); end

  # source://activesupport//lib/active_support/duration/iso8601_parser.rb#101
  def validate!; end
end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#17
ActiveSupport::Duration::ISO8601Parser::COMMA = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#22
ActiveSupport::Duration::ISO8601Parser::DATE_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#28
ActiveSupport::Duration::ISO8601Parser::DATE_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#20
ActiveSupport::Duration::ISO8601Parser::DATE_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#25
ActiveSupport::Duration::ISO8601Parser::DATE_TO_PART = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#16
ActiveSupport::Duration::ISO8601Parser::PERIOD = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#15
ActiveSupport::Duration::ISO8601Parser::PERIOD_OR_COMMA = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#13
class ActiveSupport::Duration::ISO8601Parser::ParsingError < ::ArgumentError; end

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#19
ActiveSupport::Duration::ISO8601Parser::SIGN_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#23
ActiveSupport::Duration::ISO8601Parser::TIME_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#29
ActiveSupport::Duration::ISO8601Parser::TIME_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#21
ActiveSupport::Duration::ISO8601Parser::TIME_MARKER = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/duration/iso8601_parser.rb#26
ActiveSupport::Duration::ISO8601Parser::TIME_TO_PART = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration/iso8601_serializer.rb#6
class ActiveSupport::Duration::ISO8601Serializer
  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#9
  def initialize(duration, precision: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#15
  def serialize; end

  private

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#55
  def format_seconds(seconds); end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#38
  def normalize; end

  # source://activesupport//lib/active_support/duration/iso8601_serializer.rb#51
  def week_mixed_with_date?(parts); end
end

# source://activesupport//lib/active_support/duration/iso8601_serializer.rb#7
ActiveSupport::Duration::ISO8601Serializer::DATE_COMPONENTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration.rb#130
ActiveSupport::Duration::PARTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/duration.rb#120
ActiveSupport::Duration::PARTS_IN_SECONDS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/duration.rb#115
ActiveSupport::Duration::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#114
ActiveSupport::Duration::SECONDS_PER_HOUR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#113
ActiveSupport::Duration::SECONDS_PER_MINUTE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#117
ActiveSupport::Duration::SECONDS_PER_MONTH = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#116
ActiveSupport::Duration::SECONDS_PER_WEEK = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#118
ActiveSupport::Duration::SECONDS_PER_YEAR = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/duration.rb#15
class ActiveSupport::Duration::Scalar < ::Numeric
  # source://activesupport//lib/active_support/duration.rb#19
  def initialize(value); end

  # source://activesupport//lib/active_support/duration.rb#85
  def %(other); end

  # source://activesupport//lib/active_support/duration.rb#66
  def *(other); end

  # source://activesupport//lib/active_support/duration.rb#41
  def +(other); end

  # source://activesupport//lib/active_support/duration.rb#53
  def -(other); end

  # source://activesupport//lib/active_support/duration.rb#27
  def -@; end

  # source://activesupport//lib/active_support/duration.rb#77
  def /(other); end

  # source://activesupport//lib/active_support/duration.rb#31
  def <=>(other); end

  # source://activesupport//lib/active_support/duration.rb#23
  def coerce(other); end

  # source://activesupport//lib/active_support/duration.rb#17
  def to_f(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#17
  def to_i(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#17
  def to_s(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/duration.rb#16
  def value; end

  # source://activesupport//lib/active_support/duration.rb#93
  def variable?; end

  private

  # source://activesupport//lib/active_support/duration.rb#98
  def calculate(op, other); end

  # source://activesupport//lib/active_support/duration.rb#108
  def raise_type_error(other); end
end

# source://activesupport//lib/active_support/duration.rb#131
ActiveSupport::Duration::VARIABLE_PARTS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/inflector/inflections.rb#7
module ActiveSupport::Inflector
  extend ::ActiveSupport::Inflector

  # source://activesupport//lib/active_support/inflector/methods.rb#70
  def camelize(term, uppercase_first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#218
  def classify(table_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#289
  def constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#226
  def dasherize(underscored_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#256
  def deconstantize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#238
  def demodulize(path); end

  # source://activesupport//lib/active_support/inflector/methods.rb#175
  def downcase_first(string); end

  # source://activesupport//lib/active_support/inflector/methods.rb#267
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#135
  def humanize(lower_case_and_underscored_word, capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#265
  def inflections(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#334
  def ordinal(number); end

  # source://activesupport//lib/active_support/inflector/methods.rb#347
  def ordinalize(number); end

  # source://activesupport//lib/active_support/inflector/transliterate.rb#123
  def parameterize(string, separator: T.unsafe(nil), preserve_case: T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#33
  def pluralize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#315
  def safe_constantize(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#50
  def singularize(word, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#204
  def tableize(class_name); end

  # source://activesupport//lib/active_support/inflector/methods.rb#192
  def titleize(word, keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/transliterate.rb#64
  def transliterate(string, replacement = T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#99
  def underscore(camel_cased_word); end

  # source://activesupport//lib/active_support/inflector/methods.rb#166
  def upcase_first(string); end

  private

  # source://activesupport//lib/active_support/inflector/methods.rb#376
  def apply_inflections(word, rules, locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/methods.rb#357
  def const_regexp(camel_cased_word); end
end

# source://activesupport//lib/active_support/inflector/transliterate.rb#8
ActiveSupport::Inflector::ALLOWED_ENCODINGS_FOR_TRANSLITERATE = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/inflector/inflections.rb#30
class ActiveSupport::Inflector::Inflections
  # source://activesupport//lib/active_support/inflector/inflections.rb#80
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#142
  def acronym(word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def acronyms; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def acronyms_camelize_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#78
  def acronyms_underscore_regex; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#231
  def clear(scope = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#220
  def human(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def humans; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#174
  def irregular(singular, plural); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#151
  def plural(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def plurals; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#161
  def singular(rule, replacement); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def singulars; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#208
  def uncountable(*words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#76
  def uncountables; end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#250
  def define_acronym_regex_patterns; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#86
  def initialize_dup(orig); end

  class << self
    # source://activesupport//lib/active_support/inflector/inflections.rb#65
    def instance(locale = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/inflector/inflections.rb#69
    def instance_or_fallback(locale); end
  end
end

# source://activesupport//lib/active_support/inflector/inflections.rb#33
class ActiveSupport::Inflector::Inflections::Uncountables < ::Array
  # source://activesupport//lib/active_support/inflector/inflections.rb#34
  def initialize; end

  # source://activesupport//lib/active_support/inflector/inflections.rb#44
  def <<(*word); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#48
  def add(words); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#39
  def delete(entry); end

  # source://activesupport//lib/active_support/inflector/inflections.rb#55
  def uncountable?(str); end

  private

  # source://activesupport//lib/active_support/inflector/inflections.rb#60
  def to_regex(string); end
end

# source://activesupport//lib/active_support/json/decoding.rb#11
module ActiveSupport::JSON
  class << self
    # source://activesupport//lib/active_support/json/decoding.rb#22
    def decode(json); end

    # source://activesupport//lib/active_support/json/encoding.rb#40
    def dump(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/encoding.rb#40
    def encode(value, options = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/json/decoding.rb#22
    def load(json); end

    # source://activesupport//lib/active_support/json/decoding.rb#43
    def parse_error; end

    private

    # source://activesupport//lib/active_support/json/decoding.rb#48
    def convert_dates_from(data); end
  end
end

# source://activesupport//lib/active_support/json/decoding.rb#14
ActiveSupport::JSON::DATETIME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/decoding.rb#13
ActiveSupport::JSON::DATE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/json/encoding.rb#46
module ActiveSupport::JSON::Encoding
  class << self
    # source://activesupport//lib/active_support/json/encoding.rb#121
    def escape_html_entities_in_json; end

    # source://activesupport//lib/active_support/json/encoding.rb#121
    def escape_html_entities_in_json=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#129
    def json_encoder; end

    # source://activesupport//lib/active_support/json/encoding.rb#129
    def json_encoder=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#125
    def time_precision; end

    # source://activesupport//lib/active_support/json/encoding.rb#125
    def time_precision=(_arg0); end

    # source://activesupport//lib/active_support/json/encoding.rb#117
    def use_standard_json_time_format; end

    # source://activesupport//lib/active_support/json/encoding.rb#117
    def use_standard_json_time_format=(_arg0); end
  end
end

# source://activesupport//lib/active_support/json/encoding.rb#47
class ActiveSupport::JSON::Encoding::JSONGemEncoder
  # source://activesupport//lib/active_support/json/encoding.rb#50
  def initialize(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/json/encoding.rb#55
  def encode(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#48
  def options; end

  private

  # source://activesupport//lib/active_support/json/encoding.rb#88
  def jsonify(value); end

  # source://activesupport//lib/active_support/json/encoding.rb#109
  def stringify(jsonified); end
end

# source://activesupport//lib/active_support/lazy_load_hooks.rb#43
module ActiveSupport::LazyLoadHooks
  # source://activesupport//lib/active_support/lazy_load_hooks.rb#60
  def on_load(name, options = T.unsafe(nil), &block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#75
  def run_load_hooks(name, base = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#91
  def execute_hook(name, base, options, block); end

  # source://activesupport//lib/active_support/lazy_load_hooks.rb#83
  def with_execution_control(name, block, once); end

  class << self
    # source://activesupport//lib/active_support/lazy_load_hooks.rb#44
    def extended(base); end
  end
end

# source://activesupport//lib/active_support/multibyte.rb#4
module ActiveSupport::Multibyte
  class << self
    # source://activesupport//lib/active_support/multibyte.rb#19
    def proxy_class; end

    # source://activesupport//lib/active_support/multibyte.rb#14
    def proxy_class=(klass); end
  end
end

# source://activesupport//lib/active_support/multibyte/chars.rb#47
class ActiveSupport::Multibyte::Chars
  include ::Comparable

  # source://activesupport//lib/active_support/multibyte/chars.rb#56
  def initialize(string); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def <=>(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def =~(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def acts_like_string?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#164
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#143
  def compose; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#135
  def decompose; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#151
  def grapheme_length; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#118
  def limit(limit); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#53
  def match?(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#65
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#109
  def reverse; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#169
  def reverse!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#99
  def slice!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#86
  def split(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#160
  def tidy_bytes(force = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#169
  def tidy_bytes!(*args); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#126
  def titlecase; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#126
  def titleize; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#49
  def to_s; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#49
  def to_str; end

  # source://activesupport//lib/active_support/multibyte/chars.rb#49
  def wrapped_string; end

  private

  # source://activesupport//lib/active_support/multibyte/chars.rb#176
  def chars(string); end

  # source://activesupport//lib/active_support/multibyte/chars.rb#77
  def respond_to_missing?(method, include_private); end
end

# source://activesupport//lib/active_support/multibyte/unicode.rb#5
module ActiveSupport::Multibyte::Unicode
  extend ::ActiveSupport::Multibyte::Unicode

  # source://activesupport//lib/active_support/multibyte/unicode.rb#21
  def compose(codepoints); end

  # source://activesupport//lib/active_support/multibyte/unicode.rb#12
  def decompose(type, codepoints); end

  # source://activesupport//lib/active_support/multibyte/unicode.rb#30
  def tidy_bytes(string, force = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/multibyte/unicode.rb#37
  def recode_windows1252_chars(string); end
end

# source://activesupport//lib/active_support/multibyte/unicode.rb#9
ActiveSupport::Multibyte::Unicode::UNICODE_VERSION = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#19
class ActiveSupport::SafeBuffer < ::String
  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#70
  def initialize(str = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#123
  def %(args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#116
  def *(_); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#112
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#80
  def <<(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#38
  def [](*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#104
  def []=(arg1, arg2, arg3 = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#88
  def bytesplice(*args, value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def capitalize(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def capitalize!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def chomp(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def chomp!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def chop(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def chop!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#59
  def chr; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#80
  def concat(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def delete(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def delete!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def delete_prefix(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def delete_prefix!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def delete_suffix(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def delete_suffix!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def downcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def downcase!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#146
  def encode_with(coder); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#167
  def gsub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#178
  def gsub!(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#134
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#92
  def insert(index, value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def lstrip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def lstrip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def next(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def next!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#96
  def prepend(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#100
  def replace(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def reverse(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def reverse!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def rstrip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def rstrip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#65
  def safe_concat(value); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def scrub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def scrub!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#38
  def slice(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#51
  def slice!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def squeeze(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def squeeze!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def strip(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def strip!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#167
  def sub(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#178
  def sub!(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def succ(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def succ!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def swapcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def swapcase!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#142
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#138
  def to_s; end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def tr(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def tr!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def tr_s(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def tr_s!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def unicode_normalize(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def unicode_normalize!(*args); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#153
  def upcase(*args, &block); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#157
  def upcase!(*args); end

  private

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#193
  def explicit_html_escape_interpolated_argument(arg); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#197
  def implicit_html_escape_interpolated_argument(arg); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#75
  def initialize_copy(other); end

  def original_concat(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#205
  def set_block_back_references(block, match_data); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#211
  def string_into_safe_buffer(new_string, is_html_safe); end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#32
class ActiveSupport::SafeBuffer::SafeConcatError < ::StandardError
  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#33
  def initialize; end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#20
ActiveSupport::SafeBuffer::UNSAFE_STRING_METHODS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#26
ActiveSupport::SafeBuffer::UNSAFE_STRING_METHODS_WITH_BACKREF = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/string_inquirer.rb#21
class ActiveSupport::StringInquirer < ::String
  private

  # source://activesupport//lib/active_support/string_inquirer.rb#27
  def method_missing(method_name, *_arg1, **_arg2, &_arg3); end

  # source://activesupport//lib/active_support/string_inquirer.rb#23
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/time_with_zone.rb#44
class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  include ::Comparable

  # source://activesupport//lib/active_support/time_with_zone.rb#51
  def initialize(utc_time, time_zone, local_time = T.unsafe(nil), period = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#298
  def +(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#341
  def -(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#231
  def <=>(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#504
  def acts_like_time?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#430
  def advance(options); end

  def after?(_arg0); end

  # source://activesupport//lib/active_support/time_with_zone.rb#369
  def ago(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#166
  def as_json(options = T.unsafe(nil)); end

  def before?(_arg0); end

  # source://activesupport//lib/active_support/time_with_zone.rb#239
  def between?(min, max); end

  # source://activesupport//lib/active_support/time_with_zone.rb#515
  def blank?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#390
  def change(options); end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def comparable_time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def day; end

  # source://activesupport//lib/active_support/time_with_zone.rb#94
  def dst?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#178
  def encode_with(coder); end

  # source://activesupport//lib/active_support/time_with_zone.rb#274
  def eql?(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#125
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#523
  def freeze; end

  # source://activesupport//lib/active_support/time_with_zone.rb#269
  def future?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def getgm; end

  # source://activesupport//lib/active_support/time_with_zone.rb#83
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def getutc; end

  # source://activesupport//lib/active_support/time_with_zone.rb#105
  def gmt?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#111
  def gmt_offset; end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def gmtime; end

  # source://activesupport//lib/active_support/time_with_zone.rb#111
  def gmtoff; end

  # source://activesupport//lib/active_support/time_with_zone.rb#278
  def hash; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def hour; end

  # source://activesupport//lib/active_support/time_with_zone.rb#186
  def httpdate; end

  # source://activesupport//lib/active_support/time_with_zone.rb#298
  def in(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#77
  def in_time_zone(new_zone = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#174
  def init_with(coder); end

  # source://activesupport//lib/active_support/time_with_zone.rb#140
  def inspect; end

  # source://activesupport//lib/active_support/time_with_zone.rb#509
  def is_a?(klass); end

  # source://activesupport//lib/active_support/time_with_zone.rb#94
  def isdst; end

  # source://activesupport//lib/active_support/time_with_zone.rb#148
  def iso8601(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#509
  def kind_of?(klass); end

  # source://activesupport//lib/active_support/time_with_zone.rb#83
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#529
  def marshal_dump; end

  # source://activesupport//lib/active_support/time_with_zone.rb#533
  def marshal_load(variables); end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def mday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#553
  def method_missing(*_arg0, **_arg1, &_arg2); end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def min; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def mon; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def month; end

  # source://activesupport//lib/active_support/time_with_zone.rb#256
  def next_day?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def nsec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#244
  def past?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#72
  def period; end

  # source://activesupport//lib/active_support/time_with_zone.rb#519
  def present?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#263
  def prev_day?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#539
  def respond_to?(sym, include_priv = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#194
  def rfc2822; end

  # source://activesupport//lib/active_support/time_with_zone.rb#148
  def rfc3339(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#194
  def rfc822; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def sec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#298
  def since(other); end

  # source://activesupport//lib/active_support/time_with_zone.rb#225
  def strftime(format); end

  # source://activesupport//lib/active_support/time_with_zone.rb#58
  def time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#49
  def time_zone; end

  # source://activesupport//lib/active_support/time_with_zone.rb#453
  def to_a; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def to_date; end

  # source://activesupport//lib/active_support/time_with_zone.rb#486
  def to_datetime; end

  # source://activesupport//lib/active_support/time_with_zone.rb#461
  def to_f; end

  # source://activesupport//lib/active_support/time_with_zone.rb#212
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#212
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#469
  def to_i; end

  # source://activesupport//lib/active_support/time_with_zone.rb#478
  def to_r; end

  # source://activesupport//lib/active_support/time_with_zone.rb#200
  def to_s; end

  # source://activesupport//lib/active_support/time_with_zone.rb#493
  def to_time; end

  # source://activesupport//lib/active_support/time_with_zone.rb#250
  def today?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#256
  def tomorrow?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#469
  def tv_sec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def usec; end

  # source://activesupport//lib/active_support/time_with_zone.rb#63
  def utc; end

  # source://activesupport//lib/active_support/time_with_zone.rb#105
  def utc?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#111
  def utc_offset; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def wday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#148
  def xmlschema(fraction_digits = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def yday; end

  # source://activesupport//lib/active_support/time_with_zone.rb#442
  def year; end

  # source://activesupport//lib/active_support/time_with_zone.rb#263
  def yesterday?; end

  # source://activesupport//lib/active_support/time_with_zone.rb#133
  def zone; end

  private

  # source://activesupport//lib/active_support/time_with_zone.rb#589
  def duration_of_variable_length?(obj); end

  # source://activesupport//lib/active_support/time_with_zone.rb#570
  def get_period_and_ensure_valid_local_time(period); end

  # source://activesupport//lib/active_support/time_with_zone.rb#562
  def incorporate_utc_offset(time, offset); end

  # source://activesupport//lib/active_support/time_with_zone.rb#547
  def respond_to_missing?(sym, include_priv); end

  # source://activesupport//lib/active_support/time_with_zone.rb#583
  def transfer_time_values_to_utc_constructor(time); end

  # source://activesupport//lib/active_support/time_with_zone.rb#593
  def wrap_with_time_zone(time); end
end

# source://activesupport//lib/active_support/time_with_zone.rb#45
ActiveSupport::TimeWithZone::PRECISIONS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/time_with_zone.rb#560
ActiveSupport::TimeWithZone::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/values/time_zone.rb#31
class ActiveSupport::TimeZone
  include ::Comparable

  # source://activesupport//lib/active_support/values/time_zone.rb#309
  def initialize(name, utc_offset = T.unsafe(nil), tzinfo = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#333
  def <=>(zone); end

  # source://activesupport//lib/active_support/values/time_zone.rb#342
  def =~(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#567
  def abbr(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#379
  def at(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#571
  def dst?(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#579
  def encode_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#327
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#575
  def init_with(coder); end

  # source://activesupport//lib/active_support/values/time_zone.rb#396
  def iso8601(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#363
  def local(*args); end

  # source://activesupport//lib/active_support/values/time_zone.rb#551
  def local_to_utc(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#348
  def match?(re); end

  # source://activesupport//lib/active_support/values/time_zone.rb#296
  def name; end

  # source://activesupport//lib/active_support/values/time_zone.rb#516
  def now; end

  # source://activesupport//lib/active_support/values/time_zone.rb#453
  def parse(str, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#559
  def period_for_local(time, dst = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#555
  def period_for_utc(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#563
  def periods_for_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#469
  def rfc3339(str); end

  # source://activesupport//lib/active_support/values/time_zone.rb#507
  def strptime(str, format, now = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/values/time_zone.rb#354
  def to_s; end

  # source://activesupport//lib/active_support/values/time_zone.rb#521
  def today; end

  # source://activesupport//lib/active_support/values/time_zone.rb#526
  def tomorrow; end

  # source://activesupport//lib/active_support/values/time_zone.rb#297
  def tzinfo; end

  # source://activesupport//lib/active_support/values/time_zone.rb#317
  def utc_offset; end

  # source://activesupport//lib/active_support/values/time_zone.rb#542
  def utc_to_local(time); end

  # source://activesupport//lib/active_support/values/time_zone.rb#531
  def yesterday; end

  private

  # source://activesupport//lib/active_support/values/time_zone.rb#585
  def parts_to_time(parts, now); end

  # source://activesupport//lib/active_support/values/time_zone.rb#610
  def time_now; end

  class << self
    # source://activesupport//lib/active_support/values/time_zone.rb#232
    def [](arg); end

    # source://activesupport//lib/active_support/values/time_zone.rb#223
    def all; end

    # source://activesupport//lib/active_support/values/time_zone.rb#265
    def clear; end

    # source://activesupport//lib/active_support/values/time_zone.rb#260
    def country_zones(country_code); end

    def create(*_arg0); end

    # source://activesupport//lib/active_support/values/time_zone.rb#207
    def find_tzinfo(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#216
    def new(name); end

    # source://activesupport//lib/active_support/values/time_zone.rb#199
    def seconds_to_utc_offset(seconds, colon = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/values/time_zone.rb#254
    def us_zones; end

    private

    # source://activesupport//lib/active_support/values/time_zone.rb#273
    def load_country_zones(code); end

    # source://activesupport//lib/active_support/values/time_zone.rb#287
    def zones_map; end
  end
end

# source://activesupport//lib/active_support/values/time_zone.rb#33
ActiveSupport::TimeZone::MAPPING = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/values/time_zone.rb#188
ActiveSupport::TimeZone::UTC_OFFSET_WITHOUT_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/values/time_zone.rb#187
ActiveSupport::TimeZone::UTC_OFFSET_WITH_COLON = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#35
module ActiveSupport::ToJsonWithActiveSupportEncoder
  # source://activesupport//lib/active_support/core_ext/object/json.rb#36
  def to_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/try.rb#6
module ActiveSupport::Tryable
  # source://activesupport//lib/active_support/core_ext/object/try.rb#7
  def try(*args, **_arg1, &block); end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#20
  def try!(*args, **_arg1, &block); end
end

# source://activesupport//lib/active_support/core_ext/object/to_query.rb#39
class Array
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#164
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#94
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#94
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#42
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#50
  def to_query(key); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#60
  def to_sentence(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/array/conversions.rb#183
  def to_xml(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#124
class BigDecimal < ::Numeric
  include ::ActiveSupport::BigDecimalWithDefaultFormat

  # source://activesupport//lib/active_support/core_ext/object/json.rb#134
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/big_decimal/conversions.rb#8
  def to_s(format = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#68
class Data
  # source://activesupport//lib/active_support/core_ext/object/json.rb#69
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/date/zones.rb#6
class Date
  include ::Comparable
  include ::DateAndTime::Zones
  include ::DateAndTime::Calculations

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#90
  def +(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#100
  def -(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#152
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#127
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#55
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#211
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#85
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#143
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#152
  def compare_with_coercion(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#85
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#61
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#63
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#67
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#100
  def minus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#75
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#90
  def plus_with_duration(other); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#63
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date/calculations.rb#61
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#49
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#49
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#83
  def to_time(form = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date/conversions.rb#95
  def xmlschema; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#19
    def beginning_of_week; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#27
    def beginning_of_week=(week_start); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#14
    def beginning_of_week_default; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#14
    def beginning_of_week_default=(_arg0); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#48
    def current; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#32
    def find_beginning_of_week!(week_start); end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#43
    def tomorrow; end

    # source://activesupport//lib/active_support/core_ext/date/calculations.rb#38
    def yesterday; end
  end
end

# source://activesupport//lib/active_support/core_ext/date/conversions.rb#9
Date::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#3
module DateAndTime; end

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#7
module DateAndTime::Calculations
  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#72
  def after?(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#310
  def all_day; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#321
  def all_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#326
  def all_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#316
  def all_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#331
  def all_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#125
  def at_beginning_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#139
  def at_beginning_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#267
  def at_beginning_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#179
  def at_beginning_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#296
  def at_end_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#154
  def at_end_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#283
  def at_end_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#304
  def at_end_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#67
  def before?(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#125
  def beginning_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#139
  def beginning_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#267
  def beginning_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#179
  def beginning_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#77
  def days_ago(days); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#82
  def days_since(days); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#258
  def days_to_week_start(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#296
  def end_of_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#154
  def end_of_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#283
  def end_of_week(start_day = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#304
  def end_of_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#52
  def future?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#240
  def last_month; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#245
  def last_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#223
  def last_week(start_day = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#230
  def last_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#251
  def last_year; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#275
  def monday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#97
  def months_ago(months); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#102
  def months_since(months); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#35
  def next_day?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#340
  def next_occurring(day_of_week); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#215
  def next_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#200
  def next_week(given_day_in_next_week = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#206
  def next_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#62
  def on_weekday?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#57
  def on_weekend?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#47
  def past?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#41
  def prev_day?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#351
  def prev_occurring(day_of_week); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#245
  def prev_quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#223
  def prev_week(start_day = T.unsafe(nil), same_time: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#230
  def prev_weekday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#166
  def quarter; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#290
  def sunday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#30
  def today?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#25
  def tomorrow; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#35
  def tomorrow?; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#87
  def weeks_ago(weeks); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#92
  def weeks_since(weeks); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#107
  def years_ago(years); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#112
  def years_since(years); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#20
  def yesterday; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#41
  def yesterday?; end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#370
  def copy_time_to(other); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#366
  def days_span(day); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#358
  def first_hour(date_or_time); end

  # source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#362
  def last_hour(date_or_time); end
end

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#8
DateAndTime::Calculations::DAYS_INTO_WEEK = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/date_and_time/calculations.rb#17
DateAndTime::Calculations::WEEKEND_DAYS = T.let(T.unsafe(nil), Array)

# source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#7
module DateAndTime::Compatibility
  # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#39
  def preserve_timezone; end

  # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#56
  def utc_to_local_returns_utc_offset_times; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#24
    def preserve_timezone; end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#15
    def preserve_timezone=(val); end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#56
    def utc_to_local_returns_utc_offset_times; end

    # source://activesupport//lib/active_support/core_ext/date_and_time/compatibility.rb#56
    def utc_to_local_returns_utc_offset_times=(val); end
  end
end

# source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#4
module DateAndTime::Zones
  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#20
  def in_time_zone(zone = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/date_and_time/zones.rb#32
  def time_with_zone(time, zone); end
end

# source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#5
class DateTime < ::Date
  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#208
  def <=>(other); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#82
  def advance(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#109
  def ago(seconds); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#221
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def at_beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#146
  def at_beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#158
  def at_beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#140
  def at_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#152
  def at_end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#164
  def at_end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def at_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def at_noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def beginning_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#146
  def beginning_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#158
  def beginning_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#51
  def change(options); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#140
  def end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#152
  def end_of_hour; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#164
  def end_of_minute; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#51
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def getgm; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#170
  def getlocal(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def getutc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def gmtime; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#116
  def in(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#170
  def localtime(utc_offset = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def midday; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def middle_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#122
  def midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#130
  def noon; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#94
  def nsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#56
  def readable_inspect; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#20
  def seconds_since_midnight; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#29
  def seconds_until_end_of_day; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#116
  def since(seconds); end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#36
  def subsec; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#79
  def to_f; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#35
  def to_fs(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#84
  def to_i; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#89
  def usec; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#184
  def utc; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#197
  def utc?; end

  # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#202
  def utc_offset; end

  private

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#99
  def offset_in_seconds; end

  # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#103
  def seconds_since_unix_epoch; end

  class << self
    # source://activesupport//lib/active_support/core_ext/date_time/conversions.rb#69
    def civil_from_format(utc_or_local, year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), min = T.unsafe(nil), sec = T.unsafe(nil)); end

    # source://activesupport//lib/active_support/core_ext/date_time/calculations.rb#10
    def current; end
  end
end

# source://activesupport//lib/active_support/core_ext/object/try.rb#117
class Delegator < ::BasicObject
  include ::ActiveSupport::Tryable
end

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#39
module ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  extend ::ActiveSupport::CoreExt::ERBUtil

  private

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#63
  def html_escape_once(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#124
  def json_escape(s); end

  # source://activesupport//lib/active_support/core_ext/erb/util.rb#142
  def xml_name_escape(name); end

  class << self
    # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
    def h(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#25
    def html_escape(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#63
    def html_escape_once(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#124
    def json_escape(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#161
    def tokenize(source); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#10
    def unwrapped_html_escape(s); end

    # source://activesupport//lib/active_support/core_ext/erb/util.rb#142
    def xml_name_escape(name); end
  end
end

# source://activesupport//lib/active_support/core_ext/erb/util.rb#40
ERB::Util::HTML_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#41
ERB::Util::HTML_ESCAPE_ONCE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#49
ERB::Util::INVALID_TAG_NAME_FOLLOWING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#47
ERB::Util::INVALID_TAG_NAME_START_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#50
ERB::Util::SAFE_XML_TAG_NAME_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#48
ERB::Util::TAG_NAME_FOLLOWING_CODEPOINTS = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#51
ERB::Util::TAG_NAME_REPLACEMENT_CHAR = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/erb/util.rb#44
ERB::Util::TAG_NAME_START_CODEPOINTS = T.let(T.unsafe(nil), String)

# source://activesupport//lib/active_support/core_ext/object/json.rb#145
module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder

  # source://activesupport//lib/active_support/core_ext/object/json.rb#146
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#256
class Exception
  # source://activesupport//lib/active_support/core_ext/object/json.rb#257
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/to_query.rb#32
class FalseClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#87
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#34
  def to_param; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#116
class Float < ::Numeric
  # source://activesupport//lib/active_support/core_ext/object/json.rb#119
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/hash/keys.rb#3
class Hash
  include ::Enumerable
  include ::ActiveSupport::DeepMergeable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#175
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#48
  def assert_valid_keys(*valid_keys); end

  # source://activesupport//lib/active_support/core_ext/hash/deep_merge.rb#40
  def deep_merge?(other); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#84
  def deep_stringify_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#91
  def deep_stringify_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#103
  def deep_symbolize_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#110
  def deep_symbolize_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#65
  def deep_transform_keys(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#72
  def deep_transform_keys!(&block); end

  # source://activesupport//lib/active_support/core_ext/hash/except.rb#8
  def except!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#24
  def extract!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/slice.rb#10
  def slice!(*keys); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#10
  def stringify_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#16
  def stringify_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#27
  def symbolize_keys; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#34
  def symbolize_keys!; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#27
  def to_options; end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#34
  def to_options!; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#75
  def to_param(namespace = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#75
  def to_query(namespace = T.unsafe(nil)); end

  private

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#116
  def _deep_transform_keys_in_object(object, &block); end

  # source://activesupport//lib/active_support/core_ext/hash/keys.rb#129
  def _deep_transform_keys_in_object!(object, &block); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#151
class IO
  include ::Enumerable
  include ::File::Constants

  # source://activesupport//lib/active_support/core_ext/object/json.rb#152
  def as_json(options = T.unsafe(nil)); end
end

class IO::Buffer
  include ::Comparable

  def initialize(*_arg0); end

  def &(_arg0); end
  def <=>(_arg0); end
  def ^(_arg0); end
  def and!(_arg0); end
  def clear(*_arg0); end
  def copy(*_arg0); end
  def each(*_arg0); end
  def each_byte(*_arg0); end
  def empty?; end
  def external?; end
  def free; end
  def get_string(*_arg0); end
  def get_value(_arg0, _arg1); end
  def get_values(_arg0, _arg1); end
  def hexdump; end
  def inspect; end
  def internal?; end
  def locked; end
  def locked?; end
  def mapped?; end
  def not!; end
  def null?; end
  def or!(_arg0); end
  def pread(*_arg0); end
  def pwrite(*_arg0); end
  def read(*_arg0); end
  def readonly?; end
  def resize(_arg0); end
  def set_string(*_arg0); end
  def set_value(_arg0, _arg1, _arg2); end
  def set_values(_arg0, _arg1, _arg2); end
  def shared?; end
  def size; end
  def slice(*_arg0); end
  def to_s; end
  def transfer; end
  def valid?; end
  def values(*_arg0); end
  def write(*_arg0); end
  def xor!(_arg0); end
  def |(_arg0); end
  def ~; end

  private

  def initialize_copy(_arg0); end

  class << self
    def for(_arg0); end
    def map(*_arg0); end
    def size_of(_arg0); end
  end
end

class IO::Buffer::AccessError < ::RuntimeError; end
class IO::Buffer::AllocationError < ::RuntimeError; end
IO::Buffer::BIG_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::EXTERNAL = T.let(T.unsafe(nil), Integer)
IO::Buffer::HOST_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::INTERNAL = T.let(T.unsafe(nil), Integer)
class IO::Buffer::InvalidatedError < ::RuntimeError; end
IO::Buffer::LITTLE_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::LOCKED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::LockedError < ::RuntimeError; end
IO::Buffer::MAPPED = T.let(T.unsafe(nil), Integer)
class IO::Buffer::MaskError < ::ArgumentError; end
IO::Buffer::NETWORK_ENDIAN = T.let(T.unsafe(nil), Integer)
IO::Buffer::PAGE_SIZE = T.let(T.unsafe(nil), Integer)
IO::Buffer::PRIVATE = T.let(T.unsafe(nil), Integer)
IO::Buffer::READONLY = T.let(T.unsafe(nil), Integer)
IO::Buffer::SHARED = T.let(T.unsafe(nil), Integer)

class IO::ConsoleMode
  def echo=(_arg0); end
  def raw(*_arg0); end
  def raw!(*_arg0); end

  private

  def initialize_copy(_arg0); end
end

class IO::EAGAINWaitReadable < ::Errno::EAGAIN
  include ::IO::WaitReadable
end

class IO::EAGAINWaitWritable < ::Errno::EAGAIN
  include ::IO::WaitWritable
end

class IO::EINPROGRESSWaitReadable < ::Errno::EINPROGRESS
  include ::IO::WaitReadable
end

class IO::EINPROGRESSWaitWritable < ::Errno::EINPROGRESS
  include ::IO::WaitWritable
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable
IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable
IO::PRIORITY = T.let(T.unsafe(nil), Integer)
IO::READABLE = T.let(T.unsafe(nil), Integer)
class IO::TimeoutError < ::IOError; end
IO::WRITABLE = T.let(T.unsafe(nil), Integer)

# source://activesupport//lib/active_support/core_ext/object/json.rb#243
class IPAddr
  # source://activesupport//lib/active_support/core_ext/object/json.rb#244
  def as_json(options = T.unsafe(nil)); end
end

class Integer < ::Numeric; end

class LoadError < ::ScriptError
  include ::DidYouMean::Correctable
end

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#3
class Module
  # source://activesupport//lib/active_support/core_ext/object/json.rb#53
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#208
  def cattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#55
  def cattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#121
  def cattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#160
  def delegate(*methods, to: T.unsafe(nil), prefix: T.unsafe(nil), allow_nil: T.unsafe(nil), private: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/delegation.rb#218
  def delegate_missing_to(target, allow_nil: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#208
  def mattr_accessor(*syms, instance_reader: T.unsafe(nil), instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), &blk); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#55
  def mattr_reader(*syms, instance_reader: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/attribute_accessors.rb#121
  def mattr_writer(*syms, instance_writer: T.unsafe(nil), instance_accessor: T.unsafe(nil), default: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#30
  def method_visibility(method); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#17
  def redefine_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#26
  def redefine_singleton_method(method, &block); end

  # source://activesupport//lib/active_support/core_ext/module/redefine_method.rb#7
  def silence_redefinition_of_method(method); end
end

# source://activesupport//lib/active_support/core_ext/module/delegation.rb#5
Module::DelegationError = ActiveSupport::DelegationError

class NameError < ::StandardError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable
end

# source://activesupport//lib/active_support/core_ext/object/to_query.rb#18
class NilClass
  include ::Treetop::Compiler::Metagrammar::LabeledExpressionSequenceBody0

  # source://activesupport//lib/active_support/core_ext/object/json.rb#93
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#20
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#148
  def try(*_arg0); end

  # source://activesupport//lib/active_support/core_ext/object/try.rb#155
  def try!(*_arg0); end
end

# source://activesupport//lib/active_support/core_ext/string/output_safety.rb#12
class Numeric
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#111
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#13
  def html_safe?; end
end

# source://activesupport//lib/active_support/core_ext/object/to_query.rb#5
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::ActiveSupport::Tryable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder

  # source://activesupport//lib/active_support/core_ext/object/acts_like.rb#33
  def acts_like?(duck); end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#59
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#7
  def html_safe?; end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#14
  def instance_values; end

  # source://activesupport//lib/active_support/core_ext/object/instance_variables.rb#29
  def instance_variable_names; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#7
  def to_param; end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#13
  def to_query(key); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#236
class Pathname
  # source://activesupport//lib/active_support/core_ext/object/json.rb#237
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#250
class Process::Status
  # source://activesupport//lib/active_support/core_ext/object/json.rb#251
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#157
class Range
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#158
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#139
class Regexp
  # source://activesupport//lib/active_support/core_ext/object/json.rb#140
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/string/multibyte.rb#5
class String
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/string/behavior.rb#5
  def acts_like_string?; end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#99
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#29
  def at(position); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#101
  def camelcase(first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#101
  def camelize(first_letter = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#239
  def classify; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#73
  def constantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#148
  def dasherize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#177
  def deconstantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#162
  def demodulize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#284
  def downcase_first; end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#78
  def first(limit = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#297
  def foreign_key(separate_class_name_and_id_with_underscore = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#46
  def from(position); end

  # source://activesupport//lib/active_support/core_ext/string/output_safety.rb#225
  def html_safe; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#262
  def humanize(capitalize: T.unsafe(nil), keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/multibyte.rb#48
  def is_utf8?; end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#92
  def last(limit = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/multibyte.rb#37
  def mb_chars; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#215
  def parameterize(separator: T.unsafe(nil), preserve_case: T.unsafe(nil), locale: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#35
  def pluralize(count = T.unsafe(nil), locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#86
  def safe_constantize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#60
  def singularize(locale = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#227
  def tableize; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#126
  def titlecase(keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#126
  def titleize(keep_id_suffix: T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/string/access.rb#63
  def to(position); end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#139
  def underscore; end

  # source://activesupport//lib/active_support/core_ext/string/inflections.rb#273
  def upcase_first; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#74
class Struct
  include ::Enumerable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#75
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#104
class Symbol
  include ::Comparable

  # source://activesupport//lib/active_support/core_ext/object/json.rb#105
  def as_json(options = T.unsafe(nil)); end
end

# source://activesupport//lib/active_support/core_ext/time/acts_like.rb#5
class Time
  include ::Comparable
  include ::DateAndTime::Zones

  # source://activesupport//lib/active_support/core_ext/time/acts_like.rb#7
  def acts_like_time?; end

  # source://activesupport//lib/active_support/core_ext/object/json.rb#201
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#69
  def formatted_offset(colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#55
  def to_formatted_s(format = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/time/conversions.rb#55
  def to_fs(format = T.unsafe(nil)); end

  class << self
    # source://activesupport//lib/active_support/core_ext/time/zones.rb#93
    def find_zone(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#81
    def find_zone!(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#61
    def use_zone(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#14
    def zone; end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#41
    def zone=(time_zone); end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#10
    def zone_default; end

    # source://activesupport//lib/active_support/core_ext/time/zones.rb#10
    def zone_default=(_arg0); end
  end
end

# source://activesupport//lib/active_support/core_ext/time/conversions.rb#8
Time::DATE_FORMATS = T.let(T.unsafe(nil), Hash)

# source://activesupport//lib/active_support/core_ext/object/to_query.rb#25
class TrueClass
  # source://activesupport//lib/active_support/core_ext/object/json.rb#81
  def as_json(options = T.unsafe(nil)); end

  # source://activesupport//lib/active_support/core_ext/object/to_query.rb#27
  def to_param; end
end

# source://activesupport//lib/active_support/core_ext/object/json.rb#230
class URI::Generic
  include ::URI

  # source://activesupport//lib/active_support/core_ext/object/json.rb#231
  def as_json(options = T.unsafe(nil)); end
end
