/*
 * generated by Xtext 2.39.0
 */
package org.xtext.example.udb.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.udb.udb.Model

@ExtendWith(InjectionExtension)
@InjectWith(UdbInjectorProvider)
class UdbParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void parsesValidCSR() {
		val result = parseHelper.parse('''
			csr myCsr "status" 0x400 "0x0";
			
			csr aCsr "mode" 0x0 "reset";
			
			
			csr bCsr "mode" 0xb85c_4a "0";
			
			csr cCsr "mode" 0xb8_5_c_4a "0";
			
			
			csr dCsr "mode" 0xb85______c4a "0";
			
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		var case0 = result.getCsrs().get(0);
		Assertions.assertEquals("myCsr", case0.getName());
		Assertions.assertEquals("status", case0.getDescription());
		Assertions.assertEquals("0x400", case0.getAddress());
		Assertions.assertEquals("0x0", case0.getReset_value());
		
		var case1 = result.getCsrs().get(1);
		Assertions.assertEquals("aCsr", case1.getName());
		Assertions.assertEquals("mode", case1.getDescription());
		Assertions.assertEquals("0x0", case1.getAddress());
		Assertions.assertEquals("reset", case1.getReset_value());
		
		var case2 = result.getCsrs().get(2);
		Assertions.assertEquals("bCsr", case2.getName());
		Assertions.assertEquals("mode", case2.getDescription());
		Assertions.assertEquals("0xb85c_4a", case2.getAddress());
		Assertions.assertEquals("0", case2.getReset_value());
		
		var case3 = result.getCsrs().get(3);
		Assertions.assertEquals("cCsr", case3.getName());
		Assertions.assertEquals("mode", case3.getDescription());
		Assertions.assertEquals("0xb8_5_c_4a", case3.getAddress());
		Assertions.assertEquals("0", case3.getReset_value());
		
		var case4 = result.getCsrs().get(4);
		Assertions.assertEquals("dCsr", case4.getName());
		Assertions.assertEquals("mode", case4.getDescription());
		Assertions.assertEquals("0xb85______c4a", case4.getAddress());
		Assertions.assertEquals("0", case4.getReset_value());
		
	}
	

	@Test
	def void rejectsBadHex() throws Exception {
		var a = parseHelper.parse('''
			csr BAD1 "badHex1" 0xG1 "0" ;
			
			
		''');
	    
		var b = parseHelper.parse('''
			
			csr BAD2 "badHex2" 0x_400 "0";
			
		''');
		var c = parseHelper.parse('''
			
			csr BAD3 "badHex3" 0x400_ "0";
			
			
		''');
		var d = parseHelper.parse('''
			csr BAD4 "badHex4" 0x_400_ "0";
			
		''');
	    Assertions.assertFalse(a.eResource().getErrors().isEmpty());
	    Assertions.assertFalse(b.eResource().getErrors().isEmpty());
	    Assertions.assertFalse(c.eResource().getErrors().isEmpty());
	    Assertions.assertFalse(d.eResource().getErrors().isEmpty());
	    
	}
	
	
}
