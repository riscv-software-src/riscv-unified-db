# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: c.slli
long_name: Shift left logical immediate
description: |
  Shift the value in rd left by shamt, and store the result back in rd.
  C.SLLI expands into `slli rd, rd, shamt`.
definedBy:
  anyOf:
    - C
    - Zca
assembly: xd, shamt
encoding:
  RV32:
    match: 0000----------10
    variables:
      - name: shamt
        location: 6-2
        not: 0
      - name: rd
        location: 11-7
  RV64:
    match: 000-----------10
    variables:
      - name: shamt
        location: 12|6-2
        not: 0
      - name: rd
        location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  # shamt is between 0-63
  X[rd] = X[rd] << shamt;

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  {
    let rd_val = X(rd);
    /* the decoder guard should ensure that shamt[5] = 0 for RV32 */
    let result : xlenbits = match op {
      RISCV_SLLI => if   sizeof(xlen) == 32
                    then rd_val << shamt[4..0]
                    else rd_val << shamt,
      RISCV_SRLI => if   sizeof(xlen) == 32
                    then rd_val >> shamt[4..0]
                    else rd_val >> shamt,
      RISCV_SRAI => if   sizeof(xlen) == 32
                    then shift_right_arith32(rd_val, shamt[4..0])
                    else shift_right_arith64(rd_val, shamt)
    };
    X(rd) = result;
    RETIRE_SUCCESS
  }

# SPDX-SnippetEnd
