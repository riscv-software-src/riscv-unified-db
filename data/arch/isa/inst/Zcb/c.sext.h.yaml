# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: c.sext.h
long_name: Sign-extend halfword, 16-bit encoding
description: |
  Takes a single source/destination operand.
  This instruction sign-extends the least-significant halfword of the source to XLEN by copying
  the most-significant bit in the halfword (i.e., bit 15) to all of the more-significant bits.

definedBy:
  allOf:
    - Zcb
    - Zbb
assembly: xd
encoding:
  match: 100111---1101101
  variables:
    - name: rd
      location: 9-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |

  if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {
    raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  if (implemented?(ExtensionName::C) && (CSR[misa].C == 1'b0)) {
    raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  X[creg2reg(rd)] = $signed(X[creg2reg(rd)][15:0]);

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  {
    let rs1_val = X(rsdc);
    let result : xlenbits = match op {
      RISCV_SEXTB => sign_extend(rs1_val[7..0]),
      RISCV_SEXTH => sign_extend(rs1_val[15..0]),
      RISCV_ZEXTB => zero_extend(rs1_val[7..0]),
      RISCV_ZEXTH => zero_extend(rs1_val[15..0]),
      RISCV_ZEXTW => zero_extend(rs1_val[31..0])
    };
    X(rsdc) = result;
    RETIRE_SUCCESS
  }

# SPDX-SnippetEnd
