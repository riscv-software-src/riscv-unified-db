# yaml-language-server: $schema=../../../schemas/csr_schema.json

# WARNING: This file is auto-generated from arch/csr/I/pmpcfgN.layout

$schema: csr_schema.json#
kind: csr
name: pmpcfg8
long_name: PMP Configuration Register 8
address: 0x3A8
priv_mode: M
length: MXLEN
description: PMP entry configuration
definedBy: Smpmp
fields:
  pmp32cfg:
    location: 7-0
    description: |
      *PMP configuration for entry 32*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 7   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 6:5 ! _Reserved_ Writes shall be ignored.
      h! A ! 4:3
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 2 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 1 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 0 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 32) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 32) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((CSR[pmpcfg8].pmp32cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp32cfg & 0x1) == 0) && ((csr_value.pmp32cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp32cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp32cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp32cfg;
  pmp33cfg:
    location: 15-8
    description: |
      *PMP configuration for entry 33*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 15   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 14:13 ! _Reserved_ Writes shall be ignored.
      h! A ! 12:11
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 10 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 9 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 8 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 33) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 33) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((CSR[pmpcfg8].pmp33cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp33cfg & 0x1) == 0) && ((csr_value.pmp33cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp33cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp33cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp33cfg;
  pmp34cfg:
    location: 23-16
    description: |
      *PMP configuration for entry 34*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 23   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 22:21 ! _Reserved_ Writes shall be ignored.
      h! A ! 20:19
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 18 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 17 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 16 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 34) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 34) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((CSR[pmpcfg8].pmp34cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp34cfg & 0x1) == 0) && ((csr_value.pmp34cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp34cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp34cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp34cfg;
  pmp35cfg:
    location: 31-24
    description: |
      *PMP configuration for entry 35*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 31   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 30:29 ! _Reserved_ Writes shall be ignored.
      h! A ! 28:27
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 26 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 25 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 24 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 35) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 35) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((CSR[pmpcfg8].pmp35cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp35cfg & 0x1) == 0) && ((csr_value.pmp35cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp35cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp35cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp35cfg;
  pmp36cfg:
    location: 39-32
    base: 64 # upper half doesn't exist in RV32
    description: |
      *PMP configuration for entry 36*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 39   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 38:37 ! _Reserved_ Writes shall be ignored.
      h! A ! 36:35
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 34 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 33 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 32 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 36) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 36) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((CSR[pmpcfg8].pmp36cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp36cfg & 0x1) == 0) && ((csr_value.pmp36cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp36cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp36cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp36cfg;
  pmp37cfg:
    location: 47-40
    base: 64 # upper half doesn't exist in RV32
    description: |
      *PMP configuration for entry 37*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 47   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 46:45 ! _Reserved_ Writes shall be ignored.
      h! A ! 44:43
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 42 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 41 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 40 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 37) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 37) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((xlen() == 64) && (CSR[pmpcfg8].pmp37cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp37cfg & 0x1) == 0) && ((csr_value.pmp37cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp37cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp37cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp37cfg;
  pmp38cfg:
    location: 55-48
    base: 64 # upper half doesn't exist in RV32
    description: |
      *PMP configuration for entry 38*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 55   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 54:53 ! _Reserved_ Writes shall be ignored.
      h! A ! 52:51
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 50 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 49 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 48 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 38) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 38) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((xlen() == 64) && (CSR[pmpcfg8].pmp38cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp38cfg & 0x1) == 0) && ((csr_value.pmp38cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp38cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp38cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp38cfg;
  pmp39cfg:
    location: 63-56
    base: 64 # upper half doesn't exist in RV32
    description: |
      *PMP configuration for entry 39*

      The bits are as follows:

      [separator="!",%autowidth]
      !===
      ! Name ! Location ! Description

      h! L ! 63   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
      h! - ! 62:61 ! _Reserved_ Writes shall be ignored.
      h! A ! 60:59
      a! Address matching mode. One of:

          [when="PMP_GRANULARITY < 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NA4* (2) - Naturally aligned four-byte region
          * *NAPOT* (3) - Naturally aligned power of two

          [when="PMP_GRANULARITY >= 2"]
          * *OFF* (0) - Null region (disabled)
          * *TOR* (1) - Top of range
          * *NAPOT* (3) - Naturally aligned power of two

      [when="PMP_GRANULARITY >= 2"]
      Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).

      h! X ! 58 ! When clear, instruction fetches cause an `Access Fault` for the matching region and privilege mode.
      h! W ! 57 ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
      h! R ! 56 ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
      !===

      The combination of R = 0, W = 1 is reserved.
    type(): |
      if (NUM_PMP_ENTRIES > 39) {
        return CsrFieldType::RWR;
      } else {
        return CsrFieldType::RO;
      }
    reset_value(): |
      if (NUM_PMP_ENTRIES > 39) {
        return UNDEFINED_LEGAL;
      } else {
        return 0;
      }
    sw_write(csr_value): |
      if ((xlen() == 64) && (CSR[pmpcfg8].pmp39cfg & 0x80) == 0) {
        # entry is not locked
        if (!(((csr_value.pmp39cfg & 0x1) == 0) && ((csr_value.pmp39cfg & 0x2) == 0x2))) {
          # not R = 0, W =1, which is reserved
          if ((PMP_GRANULARITY < 2) ||
              ((csr_value.pmp39cfg & 0x18) != 0x10)) {
            # NA4 is not allowed when PMP granularity is larger than 4 bytes
            return csr_value.pmp39cfg;
          }
        }
      }
      # fall through: keep old value
      return CSR[pmpcfg8].pmp39cfg;
