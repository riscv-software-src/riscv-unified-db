$schema: profile_schema.json#
kind: profile
name: RVA20U64
long_name: U-mode extensions for version 20 of the 64-bit Apps Processor profile
marketing_name: RVA20U64
mode: Unpriv
base: 64
release: { $ref: profile_release/RVA20.yaml# }
introduction: |
  The RVA20U64 profile specifies the ISA features available to user-mode
  execution environments in 64-bit applications processors.  This is the
  most important profile within application processors in
  terms of the amount of software that targets this profile.
extensions:
  $inherits: "profile/RVI20U64.yaml#/extensions"
  $remove: Zifencei # Not allowed as an option for Unpriv ISA (only available in Priv ISA).
  A:
    presence: mandatory
  C:
    presence: mandatory
  D:
    presence: mandatory
  F:
    presence: mandatory
  M:
    presence: mandatory
  U:
    presence: mandatory
    version: "~> 2.0"
    param_constraints:
      U_MODE_ENDIANNESS:
        schema:
          const: little
  Zicntr:
    presence: mandatory
  Ziccif:
    presence: mandatory
    version: "= 1.0"
    note: |
      Ziccif is a profile-defined extension introduced with RVA20.
      The fetch atomicity requirement facilitates runtime patching
      of aligned instructions.
  Ziccrse:
    presence: mandatory
    version: "= 1.0"
    note: Ziccrse is a profile-defined extension introduced with RVA20.
  Ziccamoa:
    presence: mandatory
    version: "= 1.0"
    note: Ziccamo is a profile-defined extension introduced with RVA20.
  Za128rs:
    presence: mandatory
    version: "= 1.0"
    note: |
      Za128rs is a profile-defined extension introduced with RVA20.
      The minimum reservation set size is effectively determined by the
      size of atomic accesses in the `A` extension.
  Zicclsm:
    presence: mandatory
    version: "= 1.0"
    note: |
      Zicclsm is a profile-defined extension introduced with RVA20.
      This requires misaligned support for all regular load and store
      instructions (including scalar and vector) but not AMOs or other
      specialized forms of memory access.  Even though mandated, misaligned
      loads and stores might execute extremely slowly.  Standard software
      distributions should assume their existence only for correctness, not
      for performance.
extra_notes:
  - presence: optional
    text: |
      The rationale to not make Q an optional extension is that
      quad-precision floating-point is unlikely to be implemented in
      hardware, and so we do not require or expect A-profile software to
      expend effort optimizing use of Q instructions in case they are
      present.
  - presence: optional
    text: |
      Zifencei is not classed as a supported option in the user-mode
      profile because it is not sufficient by itself to produce the desired
      effect in a multiprogrammed multiprocessor environment without OS
      support, and so the instruction cache flush should always be performed
      using an OS call rather than using the `fence.i` instruction.
      `fence.i` semantics can be expensive to implement for some hardware
      memory hierarchy designs, and so alternative non-standard
      instruction-cache coherence mechanisms can be used behind the OS
      abstraction.  A separate extension is being developed for more general
      and efficient instruction cache coherence.
  - presence: optional
    text: |
      The execution environment must provide a means to synchronize writes to
      instruction memory with instruction fetches, the implementation of which
      likely relies on the Zifencei extension.
      For example, RISC-V Linux supplies the `__riscv_flush_icache` system call and
      a corresponding vDSO call.
recommendations:
  - text: |
      Implementations are strongly recommended to raise illegal-instruction
      exceptions on attempts to execute unimplemented opcodes.
