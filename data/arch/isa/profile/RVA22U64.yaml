$schema: profile_schema.json#
kind: profile
name: RVA22U64
long_name: U-mode extensions for version 22 of the 64-bit Apps Processor profile
marketing_name: RVA22U64
mode: Unpriv
base: 64
release: { $ref: profile_release/RVA22.yaml# }
introduction: |
  The RVA22U64 profile specifies the ISA features available to user-mode
  execution environments in 64-bit applications processors.  This is the
  most important profile within application processors in
  terms of the amount of software that targets this profile.
extensions:
  $inherits: "profile/RVA20U64.yaml#/extensions"
  Zihpm:
    presence: mandatory
    version: "= 2.0"
  Zihintpause:
    presence: mandatory
    version: "= 2.0"
    note: |
      While the `pause` instruction is a HINT can be implemented as a
      NOP and hence trivially supported by hardware implementers, its
      inclusion in the mandatory extension list signifies that software
      should use the instruction whenever it would make sense and that
      implementers are expected to exploit this information to optimize
      hardware execution.
  Zba:
    presence: mandatory
    version: "~> 1.0"
  Zbb:
    presence: mandatory
    version: "~> 1.0"
  Zbs:
    presence: mandatory
    version: "~> 1.0"
  Zic64b:
    presence: mandatory
    version: "= 1.0"
    note: |
      This is a new extension name for this feature. While the general
      RISC-V specifications are agnostic to cache block size, selecting a
      common cache block size simplifies the specification and use of the
      following cache-block extensions within the application processor
      profile. Software does not have to query a discovery mechanism and/or
      provide dynamic dispatch to the appropriate code. We choose 64 bytes
      at it is effectively an industry standard. Implementations may use
      longer cache blocks to reduce tag cost provided they use 64-byte
      sub-blocks to remain compatible. Implementations may use shorter cache
      blocks provided they sequence cache operations across the multiple
      cache blocks comprising a 64-byte block to remain compatible.
  Zicbom:
    presence: mandatory
    version: "~> 1.0"
  Zicbop:
    presence: mandatory
    version: "~> 1.0"
    note: |
      As with other HINTS, the inclusion of prefetches in the
      mandatory set of extensions indicates that software should generate
      these instructions where they are expected to be useful, and hardware
      is expected to exploit that information.
  Zicboz:
    presence: mandatory
    version: "~> 1.0"
  Zfhmin:
    presence: mandatory
    version: "~> 1.0"
    note: |
      Zfhmin is a small extension that adds support to load/store and convert
      IEEE 754 half-precision numbers to and from the IEEE 754 single-precision
      format.  The hardware cost for this extension is low, and mandating the
      extension avoids adding an option to the profile.
  Zkt:
    presence: mandatory
    version: "~> 1.0"
    note: |
      Zkt requires a certain subset of integer instructions execute
      with data-independent latency.  Mandating this feature enables
      portable libraries for safe basic cryptographic operations. It is
      expected that application processors will naturally have this property
      and so implementation cost is low, if not zero, in most systems that
      would support RVA22.
  Zfh:
    presence: optional
    version: "~> 1.0"
    note: A future profile might mandate V.
  V:
    presence: optional
    version: "~> 1.0"
    note: |
      The smaller vector extensions (Zve32f, Zve32x, Zve64d, Zve64f,
      Zve64x) are not provided as separately supported profile options. The
      full V extension is specified as the only supported profile option.

      A future profile might mandate V.
  Zkn:
    presence: optional
    version: "~> 1.0"
  Zks:
    presence: optional
    version: "~> 1.0"
extra_notes:
  - presence: optional
    text: |
      The scalar crypto extensions are expected to be superseded by
      vector crypto standards in future profiles, and the scalar extensions
      may be removed as supported options once vector crypto is present.
  - presence: optional
    text: |
      The smaller component scalar crypto extensions (Zbc, Zbkb, Zbkc,
      Zbkx, Zknd, Zkne, Zknh, Zksed, Zksh) are not provided as separate
      options in the profile.  Profile implementers should provide all of
      the instructions in a given algorithm suite as part of the Zkn or Zks
      supported options.
  - presence: optional
    text: |
      Access to the entropy source (Zkr) in a system is usually
      carefully controlled.  While the design supports unprivileged access
      to the entropy source, this is unlikely to be commonly used in an
      application processor, and so Zkr was not added as a profile option.
      This also means the roll-up Zk was not added as a profile option.
  - presence: optional
    text: |
      The Zfinx, Zdinx, Zhinx, Zhinxmin extensions are incompatible
      with the profile mandates to support the F and D extensions.
