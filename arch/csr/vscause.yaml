# yaml-language-server: $schema=../../schemas/csr_schema.json

# <%- max_code = [interrupt_codes.keys.max, exception_codes.keys.max].max -%>

vscause:
  long_name: Virtual Supervisor Cause
  address: 0x242
  virtual_address: 0x142
  priv_mode: VS
  length: VSXLEN
  description: Reports the cause of the latest exception taken in VS-mode.
  definedBy: H
  fields:
    INT:
      location: 63
      description: |
        Written by hardware when a trap is taken into VS-mode.
        
        When set, the last exception was caused by an asynchronous Interrupt.

        `vscause.INT` is writeable.
        <%- if TRAP_ON_ILLEGAL_WLRL -%>
        If `vscause` is written with an undefined cause (combination of `vscause.INT` and `vscause.CODE`), an `Illegal Instruction` exception occurs.
        <%- else -%>
        If `vscause` is written with an undefined cause (combination of `vscause.INT` and `vscause.CODE`), neither `vscause.INT` nor `vscause.CODE` are modified.
        <%- end -%>
      type: RW-RH
      sw_write(csr_value): |
        # the write only holds if the INT/CODE combination is valid
        # otherwise, the old value is retained
        if (csr_value.INT == 1) {
          <%- interrupt_codes.each do |num, _name| -%>
          if (csr_value.CODE == <%= num %>) {
            return 1;
          }
          <%- end -%>
          return ILLEGAL_WLRL;
        } else {
          <%- exception_codes.each do |num, _name| -%>
          if (csr_value.CODE == <%= num %>) {
            return 0;
          }
          <%- end -%>
          return ILLEGAL_WLRL;
        }
      reset_value: UNDEFINED_LEGAL
    CODE:
      location_rv32: 30-0
      location_rv64: 62-0
      description: |
        Written by hardware when a trap is taken into VS-mode.

        Holds the interrupt or exception code for the last taken trap.

        `vscause.CODE` is writeable.
        <%- if TRAP_ON_ILLEGAL_WLRL -%>
        If `vscause` is written with an undefined cause (combination of `vscause.INT` and `vscause.CODE`), an `Illegal Instruction` exception occurs.
        <%- else -%>
        If `vscause` is written with an undefined cause (combination of `vscause.INT` and `vscause.CODE`), neither `vscause.INT` nor `vscause.CODE` are modified.
        <%- end -%>

        Valid interrupt codes are:
        !===
        <%- Hash[interrupt_codes.sort_by { |num, _name| num }].each do |num, name| -%>
        ! <%= num %> ! <%= name %>
        <%- end -%>
        !===

        Valid exception codes are:
        !===
        <%- Hash[exception_codes.sort_by { |num, _name| num }].each do |num, name| -%>
        ! <%= num %> ! <%= name %>
        <%- end -%>
        !===
      type: RW-RH
      sw_write(csr_value): |
        # the write only holds if the INT/CODE combination is valid
        # otherwise, the old value is retained
        if (csr_value.INT == 1) {
          <%- interrupt_codes.each do |num, _name| -%>
          if (csr_value.CODE == <%= num %>) {
            return <%= num %>;
          }
          <%- end -%>
          return ILLEGAL_WLRL;
        } else {
          <%- exception_codes.each do |num, _name| -%>
          if (csr_value.CODE == <%= num %>) {
            return <%= num %>;
          }
          <%- end -%>
          return ILLEGAL_WLRL;
        }
      reset_value: UNDEFINED_LEGAL
