# yaml-language-server: $schema=../../../schemas/csr_schema.json

# WARNING: This file is auto-generated from arch/csr/Sscofpmf/scountovf.layout
$schema: csr_schema.json#
kind: csr
name: scountovf
long_name: Supervisor Count Overflow
address: 0xDA0
priv_mode: S
length: 32
definedBy: Sscofpmf
description: |
  A 32-bit read-only
  register that contains shadow copies of the OF bits in the 29 `mhpmevent` CSRs
  (`mhpmevent3` - `mhpmevent31`) â€” where `scountovf` bit X corresponds to `mhpmeventX`.

  This register enables supervisor-level overflow interrupt handler
  software to quickly and easily determine which counter(s) have overflowed
  (without needing to make an execution environment call or series of calls ultimately up to M-mode)

  Read access to bit X is subject to the same `mcounteren` (or `mcounteren` and `hcounteren`)
  CSRs that mediate access to the `hpmcounter` CSRs by S-mode (or VS-mode).
  In M-mode, `scountovf` bit X is always readable. In S/HS-mode, `scountovf` bit X is readable
  when `mcounteren` bit X is set, and otherwise reads as zero. Similarly, in VS mode,
  `scountovf` bit X is readable when `mcounteren` bit X and `hcounteren` bit X are both set, and otherwise reads as zero.

fields:
  OF3:
    alias: mhpmevent3.OF
    location: 3
    description: |
      [when="mhpmevent3.EN == true"]
      Shadow copy of mhpmevent3 overflow (OF) bit.

      [when="mhpmevent3.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent3.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent3.EN ? UNDEFINED_LEGAL : 0;
  OF4:
    alias: mhpmevent4.OF
    location: 4
    description: |
      [when="mhpmevent4.EN == true"]
      Shadow copy of mhpmevent4 overflow (OF) bit.

      [when="mhpmevent4.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent4.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent4.EN ? UNDEFINED_LEGAL : 0;
  OF5:
    alias: mhpmevent5.OF
    location: 5
    description: |
      [when="mhpmevent5.EN == true"]
      Shadow copy of mhpmevent5 overflow (OF) bit.

      [when="mhpmevent5.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent5.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent5.EN ? UNDEFINED_LEGAL : 0;
  OF6:
    alias: mhpmevent6.OF
    location: 6
    description: |
      [when="mhpmevent6.EN == true"]
      Shadow copy of mhpmevent6 overflow (OF) bit.

      [when="mhpmevent6.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent6.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent6.EN ? UNDEFINED_LEGAL : 0;
  OF7:
    alias: mhpmevent7.OF
    location: 7
    description: |
      [when="mhpmevent7.EN == true"]
      Shadow copy of mhpmevent7 overflow (OF) bit.

      [when="mhpmevent7.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent7.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent7.EN ? UNDEFINED_LEGAL : 0;
  OF8:
    alias: mhpmevent8.OF
    location: 8
    description: |
      [when="mhpmevent8.EN == true"]
      Shadow copy of mhpmevent8 overflow (OF) bit.

      [when="mhpmevent8.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent8.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent8.EN ? UNDEFINED_LEGAL : 0;
  OF9:
    alias: mhpmevent9.OF
    location: 9
    description: |
      [when="mhpmevent9.EN == true"]
      Shadow copy of mhpmevent9 overflow (OF) bit.

      [when="mhpmevent9.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent9.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent9.EN ? UNDEFINED_LEGAL : 0;
  OF10:
    alias: mhpmevent10.OF
    location: 10
    description: |
      [when="mhpmevent10.EN == true"]
      Shadow copy of mhpmevent10 overflow (OF) bit.

      [when="mhpmevent10.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent10.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent10.EN ? UNDEFINED_LEGAL : 0;
  OF11:
    alias: mhpmevent11.OF
    location: 11
    description: |
      [when="mhpmevent11.EN == true"]
      Shadow copy of mhpmevent11 overflow (OF) bit.

      [when="mhpmevent11.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent11.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent11.EN ? UNDEFINED_LEGAL : 0;
  OF12:
    alias: mhpmevent12.OF
    location: 12
    description: |
      [when="mhpmevent12.EN == true"]
      Shadow copy of mhpmevent12 overflow (OF) bit.

      [when="mhpmevent12.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent12.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent12.EN ? UNDEFINED_LEGAL : 0;
  OF13:
    alias: mhpmevent13.OF
    location: 13
    description: |
      [when="mhpmevent13.EN == true"]
      Shadow copy of mhpmevent13 overflow (OF) bit.

      [when="mhpmevent13.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent13.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent13.EN ? UNDEFINED_LEGAL : 0;
  OF14:
    alias: mhpmevent14.OF
    location: 14
    description: |
      [when="mhpmevent14.EN == true"]
      Shadow copy of mhpmevent14 overflow (OF) bit.

      [when="mhpmevent14.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent14.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent14.EN ? UNDEFINED_LEGAL : 0;
  OF15:
    alias: mhpmevent15.OF
    location: 15
    description: |
      [when="mhpmevent15.EN == true"]
      Shadow copy of mhpmevent15 overflow (OF) bit.

      [when="mhpmevent15.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent15.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent15.EN ? UNDEFINED_LEGAL : 0;
  OF16:
    alias: mhpmevent16.OF
    location: 16
    description: |
      [when="mhpmevent16.EN == true"]
      Shadow copy of mhpmevent16 overflow (OF) bit.

      [when="mhpmevent16.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent16.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent16.EN ? UNDEFINED_LEGAL : 0;
  OF17:
    alias: mhpmevent17.OF
    location: 17
    description: |
      [when="mhpmevent17.EN == true"]
      Shadow copy of mhpmevent17 overflow (OF) bit.

      [when="mhpmevent17.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent17.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent17.EN ? UNDEFINED_LEGAL : 0;
  OF18:
    alias: mhpmevent18.OF
    location: 18
    description: |
      [when="mhpmevent18.EN == true"]
      Shadow copy of mhpmevent18 overflow (OF) bit.

      [when="mhpmevent18.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent18.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent18.EN ? UNDEFINED_LEGAL : 0;
  OF19:
    alias: mhpmevent19.OF
    location: 19
    description: |
      [when="mhpmevent19.EN == true"]
      Shadow copy of mhpmevent19 overflow (OF) bit.

      [when="mhpmevent19.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent19.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent19.EN ? UNDEFINED_LEGAL : 0;
  OF20:
    alias: mhpmevent20.OF
    location: 20
    description: |
      [when="mhpmevent20.EN == true"]
      Shadow copy of mhpmevent20 overflow (OF) bit.

      [when="mhpmevent20.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent20.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent20.EN ? UNDEFINED_LEGAL : 0;
  OF21:
    alias: mhpmevent21.OF
    location: 21
    description: |
      [when="mhpmevent21.EN == true"]
      Shadow copy of mhpmevent21 overflow (OF) bit.

      [when="mhpmevent21.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent21.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent21.EN ? UNDEFINED_LEGAL : 0;
  OF22:
    alias: mhpmevent22.OF
    location: 22
    description: |
      [when="mhpmevent22.EN == true"]
      Shadow copy of mhpmevent22 overflow (OF) bit.

      [when="mhpmevent22.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent22.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent22.EN ? UNDEFINED_LEGAL : 0;
  OF23:
    alias: mhpmevent23.OF
    location: 23
    description: |
      [when="mhpmevent23.EN == true"]
      Shadow copy of mhpmevent23 overflow (OF) bit.

      [when="mhpmevent23.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent23.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent23.EN ? UNDEFINED_LEGAL : 0;
  OF24:
    alias: mhpmevent24.OF
    location: 24
    description: |
      [when="mhpmevent24.EN == true"]
      Shadow copy of mhpmevent24 overflow (OF) bit.

      [when="mhpmevent24.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent24.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent24.EN ? UNDEFINED_LEGAL : 0;
  OF25:
    alias: mhpmevent25.OF
    location: 25
    description: |
      [when="mhpmevent25.EN == true"]
      Shadow copy of mhpmevent25 overflow (OF) bit.

      [when="mhpmevent25.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent25.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent25.EN ? UNDEFINED_LEGAL : 0;
  OF26:
    alias: mhpmevent26.OF
    location: 26
    description: |
      [when="mhpmevent26.EN == true"]
      Shadow copy of mhpmevent26 overflow (OF) bit.

      [when="mhpmevent26.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent26.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent26.EN ? UNDEFINED_LEGAL : 0;
  OF27:
    alias: mhpmevent27.OF
    location: 27
    description: |
      [when="mhpmevent27.EN == true"]
      Shadow copy of mhpmevent27 overflow (OF) bit.

      [when="mhpmevent27.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent27.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent27.EN ? UNDEFINED_LEGAL : 0;
  OF28:
    alias: mhpmevent28.OF
    location: 28
    description: |
      [when="mhpmevent28.EN == true"]
      Shadow copy of mhpmevent28 overflow (OF) bit.

      [when="mhpmevent28.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent28.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent28.EN ? UNDEFINED_LEGAL : 0;
  OF29:
    alias: mhpmevent29.OF
    location: 29
    description: |
      [when="mhpmevent29.EN == true"]
      Shadow copy of mhpmevent29 overflow (OF) bit.

      [when="mhpmevent29.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent29.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent29.EN ? UNDEFINED_LEGAL : 0;
  OF30:
    alias: mhpmevent30.OF
    location: 30
    description: |
      [when="mhpmevent30.EN == true"]
      Shadow copy of mhpmevent30 overflow (OF) bit.

      [when="mhpmevent30.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent30.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent30.EN ? UNDEFINED_LEGAL : 0;
  OF31:
    alias: mhpmevent31.OF
    location: 31
    description: |
      [when="mhpmevent31.EN == true"]
      Shadow copy of mhpmevent31 overflow (OF) bit.

      [when="mhpmevent31.EN == false"]
      This field is read-only zero because the event is not enabled.
    type(): |
      return mhpmevent31.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
    reset_value(): |
      return mhpmevent31.EN ? UNDEFINED_LEGAL : 0;

sw_read(): |
  Bits<32> mask;
  if (mode() == PrivilegeMode::VS) {
    # in VS-mode, scountovf.OFX access is determined by mcounteren/hcounteren
    mask = $bits(CSR[mcounteren]) & $bits(CSR[hcounteren]);
  } else {
    # in M-mode and S-mode, scountovf.OFX access is determined by mcounteren/scounteren
    mask = $bits(CSR[mcounteren]) & $bits(CSR[scounteren]);
  }

  Bits<32> value =
    (CSR[mhpmevent3].OF << 3) |
    (CSR[mhpmevent4].OF << 4) |
    (CSR[mhpmevent5].OF << 5) |
    (CSR[mhpmevent6].OF << 6) |
    (CSR[mhpmevent7].OF << 7) |
    (CSR[mhpmevent8].OF << 8) |
    (CSR[mhpmevent9].OF << 9) |
    (CSR[mhpmevent10].OF << 10) |
    (CSR[mhpmevent11].OF << 11) |
    (CSR[mhpmevent12].OF << 12) |
    (CSR[mhpmevent13].OF << 13) |
    (CSR[mhpmevent14].OF << 14) |
    (CSR[mhpmevent15].OF << 15) |
    (CSR[mhpmevent16].OF << 16) |
    (CSR[mhpmevent17].OF << 17) |
    (CSR[mhpmevent18].OF << 18) |
    (CSR[mhpmevent19].OF << 19) |
    (CSR[mhpmevent20].OF << 20) |
    (CSR[mhpmevent21].OF << 21) |
    (CSR[mhpmevent22].OF << 22) |
    (CSR[mhpmevent23].OF << 23) |
    (CSR[mhpmevent24].OF << 24) |
    (CSR[mhpmevent25].OF << 25) |
    (CSR[mhpmevent26].OF << 26) |
    (CSR[mhpmevent27].OF << 27) |
    (CSR[mhpmevent28].OF << 28) |
    (CSR[mhpmevent29].OF << 29) |
    (CSR[mhpmevent30].OF << 30) |
    (CSR[mhpmevent31].OF << 31);

  return value & mask;
