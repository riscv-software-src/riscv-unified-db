# yaml-language-server: $schema=../../../schemas/csr_schema.json

$schema: csr_schema.json#
kind: csr
name: scountovf
long_name: Supervisor Count Overflow
address: 0xDA0
priv_mode: S
length: 32
definedBy: Sscofpmf
description: |
  A 32-bit read-only
  register that contains shadow copies of the OF bits in the 29 `mhpmevent` CSRs
  (`mhpmevent3` - `mhpmevent31`) â€” where `scountovf` bit X corresponds to `mhpmeventX`.

  This register enables supervisor-level overflow interrupt handler
  software to quickly and easily determine which counter(s) have overflowed
  (without needing to make an execution environment call or series of calls ultimately up to M-mode)

  Read access to bit X is subject to the same `mcounteren` (or `mcounteren` and `hcounteren`)
  CSRs that mediate access to the `hpmcounter` CSRs by S-mode (or VS-mode).
  In M-mode, `scountovf` bit X is always readable. In S/HS-mode, `scountovf` bit X is readable
  when `mcounteren` bit X is set, and otherwise reads as zero. Similarly, in VS mode,
  `scountovf` bit X is readable when `mcounteren` bit X and `hcounteren` bit X are both set, and otherwise reads as zero.

fields:
  <%- (3..31).each do |of_num| -%>
    OF<%= of_num %>:
      alias: mhpmevent<%= of_num %>.OF
      location: <%= of_num %>
      description: |
        [when="mhpmevent<%= of_num %>.EN == true"]
        Shadow copy of mhpmevent<%= of_num %> overflow (OF) bit.

        [when="mhpmevent<%= of_num %>.EN == false"]
        This field is read-only zero because the event is not enabled.
      type(): |
        return mhpmevent<%= of_num %>.EN ? CsrFieldType::RO : CsrFieldType::RO-H;
      reset_value(): |
        return mhpmevent<%= of_num %>.EN ? UNDEFINED_LEGAL : 0;
  <%- end -%>

sw_read(): |
  Bits<32> mask;
  if (mode() == PrivilegeMode::VS) {
    # in VS-mode, scountovf.OFX access is determined by mcounteren/hcounteren
    mask = $bits(CSR[mcounteren]) & $bits(CSR[hcounteren]);
  } else {
    # in M-mode and S-mode, scountovf.OFX access is determined by mcounteren/scounteren
    mask = $bits(CSR[mcounteren]) & $bits(CSR[scounteren]);
  }

  Bits<32> value =
    (CSR[mhpmevent3].OF << 3) |
    (CSR[mhpmevent4].OF << 4) |
    (CSR[mhpmevent5].OF << 5) |
    (CSR[mhpmevent6].OF << 6) |
    (CSR[mhpmevent7].OF << 7) |
    (CSR[mhpmevent8].OF << 8) |
    (CSR[mhpmevent9].OF << 9) |
    (CSR[mhpmevent10].OF << 10) |
    (CSR[mhpmevent11].OF << 11) |
    (CSR[mhpmevent12].OF << 12) |
    (CSR[mhpmevent13].OF << 13) |
    (CSR[mhpmevent14].OF << 14) |
    (CSR[mhpmevent15].OF << 15) |
    (CSR[mhpmevent16].OF << 16) |
    (CSR[mhpmevent17].OF << 17) |
    (CSR[mhpmevent18].OF << 18) |
    (CSR[mhpmevent19].OF << 19) |
    (CSR[mhpmevent20].OF << 20) |
    (CSR[mhpmevent21].OF << 21) |
    (CSR[mhpmevent22].OF << 22) |
    (CSR[mhpmevent23].OF << 23) |
    (CSR[mhpmevent24].OF << 24) |
    (CSR[mhpmevent25].OF << 25) |
    (CSR[mhpmevent26].OF << 26) |
    (CSR[mhpmevent27].OF << 27) |
    (CSR[mhpmevent28].OF << 28) |
    (CSR[mhpmevent29].OF << 29) |
    (CSR[mhpmevent30].OF << 30) |
    (CSR[mhpmevent31].OF << 31);

  return value & mask;
