# yaml-language-server: $schema=../../schemas/csr_schema.json

scounteren:
  long_name: Supervisor Counter Enable
  address: 0x106
  priv_mode: S
  length: 32
  description: |
    Delegates control of the hardware performance-monitoring counters
    to U-mode
  definedBy: S
  fields:
    CY:
      location: 0
      description: |
        When both `scounteren.CY` and `mcounteren.CY` are set, the `cycle` CSR (an alias of `mcycle`) is accessible to U-mode
        <%% if ext?(:H) %>(delegation to VS/VU mode is further handled by `hcounteren.CY`)<%% end %>.

        This bit is read-only 0 when `mcounteren.CY` is clear.

        Summary:

        !===
        ! `mcounteren.CY` ! `scounteren.CY` behavior

        ! 0 ! read-only 0
        ! 1 ! writeable
        !===
      definedBy: Zicntr
      type: RW-H
      reset_value: UNDEFINED_LEGAL
    IR:
      location: 2
      description: |
        When both `scounteren.IR` and `mcounteren.IR` are set, the `instret` CSR (an alias of memory-mapped `minstret`) is accessible to U-mode
        <%% if ext?(:H) %>(delegation to VS/VU mode is further handled by `hcounteren.IR`)<%% end %>.

        This bit is read-only 0 when `mcounteren.IR` is clear.

        Summary:

        !===
        ! `mcounteren.IR` ! `scounteren.IR` behavior

        ! 0 ! read-only 0
        ! 1 ! writeable
        !===


      type: RW-H
      reset_value: UNDEFINED_LEGAL
    <%- (3..31).each do |hpm_num| -%>
    HPM<%= hpm_num %>:
      location: <%= hpm_num %>
      description: |
        When both `scounteren.HPM<%= hpm_num %>` and `mcounteren.HPM<%= hpm_num %>` are set, the `hpmcounter<%= hpm_num %>` CSR (an alias of `mhpmcounter<%= hpm_num %>`)
        is accessible to U-mode
        <%% if ext?(:H) %>(delegation to VS/VU mode is further handled by `hcounteren.HPM<%= hpm_num %>`)<%% end %>.

        This bit is read-only 0 when `mcounteren.HPM<%= hpm_num  %>` is clear.

        Summary:

        !===
        ! `mcounteren.HPM<%= hpm_num %>` ! `scounteren.HPM<%= hpm_num %>` behavior

        ! 0 ! read-only 0
        ! 1 ! writeable
        !===

      type: RW
      reset_value: UNDEFINED_LEGAL
    <%- end -%>
  sw_read(): |
    if (!implemented?(ExtensionName::Zicntr) && !implemented?(ExtensionName::Zihpm)) {
      # this CSR isn't supposed to exist when Zicntr and Zihpm are not implemented
      raise(ExceptionCode::IllegalInstruction, $encoding);
    }

    # any bit of mcounteren that is zero forces that same bit of scounteren to 0
    return $bits(CSR[scounteren]) & $bits(CSR[mcounteren]);