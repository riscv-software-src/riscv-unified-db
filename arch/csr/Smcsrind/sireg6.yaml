# yaml-language-server: $schema=../../../schemas/csr_schema.json
$schema: csr_schema.json#
kind: csr
name: sireg6
long_name: Supervisor Indirect Register Alias 6
address: 0x157
priv_mode: S
length: SXLEN
definedBy: Sscsrind
description: |
  Access to `sireg6` from M-mode or S-mode while `siselect` holds a number in a
  standard-defined and implemented range results in specific behavior that, for each combination of
  `siselect` and `sireg6`, is defined by the extension to which the `siselect` value is allocated.

  [Note]
  Ordinarily, `sireg6` will access register state, access read-only 0 state, or, unless
  executing in a virtual machine (covered in the next section), raise an illegal instruction
  exception.

  Note that the widths of `siselect` and `sireg6` are always the current XLEN rather than SXLEN. Hence,
  for example, if MXLEN = 64 and SXLEN = 32, then this register is 64 bits when the current
  privilege mode is M (running RV64 code) but 32 bits when the privilege mode is S (RV32 code).

  The behavior upon accessing `sireg6` from M-mode or S-mode, while `siselect` holds a value that is
  not implemented at supervisor level, is UNSPECIFIED.

  [Note]
  It is recommended that implementations raise an illegal instruction exception for such
  accesses, to facilitate possible emulation (by M-mode) of these accesses.

  [Note]
  An extension is considered not to be implemented at supervisor level if machine level has
  disabled the extension for S-mode, such as by the settings of certain fields in CSR
  `menvcfg`, for example.

fields:
  VALUE:
    location_rv32: 31-0
    location_rv64: 63-0
    type: RW
    description: |
      The data read from or written to the register selected by the current `siselect` value.
    reset_value: UNDEFINED_LEGAL
sw_read(): |
