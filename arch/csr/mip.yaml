# yaml-language-server: $schema=../../schemas/csr_schema.json

mip:
  long_name: Machine Interrupt Pending
  address: 0x344
  priv_mode: M
  description: Machine Interrupt Pending bits
  length: MXLEN
  definedBy: Sm
  fields:
    SSIP:
      location: 1
      alias:
        - sip.SSIP
        - mvip.SSIP
      description: |
        *Supervisor Software Interrupt Pending*

        Reports the current pending state of an (H)S-mode software interrupt, which is generated by writing to this field.

        <%- if ext?(:Smaia) -%>
        When using AIA/IMSIC, IPIs are expected to be delivered as external interrupts
        and SSIP is not backed by any hardware update (aside from any aliasing effects).
        However, SSIP is still writable by M-mode software and, when written, can be used to
        generate an S-mode Software Interrupt.
        <%- end -%>

        <% if ext?(:Smaia) %>_Aliases_<% else %>_Alias_<% end %>:

        * `sip.SSIP` when `mideleg.SSI` is set
        <%- if ext?(:Smaia) -%>
        * `mvip.SSIP`
        <%- end -%>
      type: RW
      reset_value: 0
      definedBy: S
      affectedBy: Smaia
    VSSIP:
      location: 2
      alias:
        - hip.VSSIP
        - hvip.VSSIP
        - vsip.SSIP
        - sip.SSIP
      description: |
        *Virtual Supervisor Software Interrupt Pending*

        Reports the current pending state of a VS-mode software interrupt, which is generated by writing to this field.

        <%- if ext?(:Smaia) -%>
        When using AIA/IMSIC, IPIs are expected to be delivered as external interrupts and VSSIP is not backed by any hardware update (aside from any aliased writes).
        However, VSSIP is still writable by M-mode software and, when written, can be used to
        generate a VS-mode Software Interrupt.
        <%- end -%>

        _Aliases_:

        * `hip.VSSIP`
        * `hvip.VSSIP`
        * `vsip.SSIP` when `hideleg.VSSI` is set
      type: RW
      reset_value: 0
      definedBy: H
      affectedBy: Smaia
    MSIP:
      location: 3
      description: |
        *Machine Software Interrupt Pending*

        Unused field.

        <%- if ext?(:Smaia) -%>
        With AIA/IMSIC, IPIs are delievered as external interrupts. As a result, this bit is
        unused and hardwired to 0.
        <%- end -%>
      type: RO
      reset_value: 0
    STIP:
      location: 5
      alias:
        - sip.STIP
        - mvip.STIP
      description: |
        *Supervisor Timer Interrupt Pending*

        Reports the current pending state of an (H)S-mode timer interrupt
        <%- if ext?(:Sstc) -%>
        , which is normally controlled by the `stimecmp` CSR.
        <%- else -%>
        , which is generated by software by writing to `mip.STIP`<% if ext?(:Smaia) %>or its alias `mvip.STIP`<% end %>.
        <%- end -%>

        <%-if ext?(:Sstc) -%>
        When `menvcfg.STCE` is set, `mip.STIP` is RO-H, and is completely controlled by the timer interrupt device (using `stimecmp`).

        When `menvcfg.STCE` is clear, `mip.STIP` is RW, and M-mode software may write the bit to inject a Supervisor Timer Interrupt.
        <%- end -%>

        <% if ext?(:Smaia) %>_Aliases_<% else %>_Alias_<% end %>:

        * `sip.STIP` when `mideleg.STI` is set (though `sip.STIP` is a read-only view)
        <%- if ext?(:Smaia) -%>
        * `mvip.STIP` when when `menvcfg.STCE` is clear
        <%- end -%>

      type: RW
      reset_value: 0
      definedBy: S
      affectedBy: Sstc
    VSTIP:
      location: 6
      alias:
        - hip.VSTIP
      description: |
        *Virtual Supervisor Timer Interrupt Pending*
        
        Reports the current pending state of a VS-mode timer interrupt
        <%- if ext?(:Sstc) -%>
        , which is normally controlled by the `vstimecmp` CSR, but can also be injected by the hypervisor through `hvip.VSTIP`.
        <%- else -%>
        , which is generated by M-mode and/or HS-mode software by writing to `hvip.VSTIP`.
        <%- end -%>

        <%-if ext?(:Sstc) -%>
        When `menvcfg.STCE` is set (enabling the `Sstc` extension), `mip.VSTIP` is the logical OR of `hvip.VSTIP` and the VS-level interrupt signal generated by the timer device (controlled by the value of `vstimecmp`).

        When `menvcfg.STCE` is clear (disabling the `Sstc` extension), `mip.VSTIP` is exactly the value of `hvip.VSTIP`.
        <%- end -%>

        `mip.VSTIP` is never writable. If VS-mode software wants to clear the bit, it must do so
        <%- if ext?(:Sstc) -%>
        by writing the `vstimecmp` register or
        <%- end -%>
        by calling into the hypervisor (which can then clear `hvip.VSTIP`).

        _Aliases_:

        * `hip.VSTIP`
        * `vsip.STIP` when `hideleg.VSTI` is set
        * `hvip.VSTIP` <% if ext?(:Sstc) %>when `menvcfg.STCE` is clear<% end %> (though `hvip.VSTIP` is writeable)
      type: RO-H
      reset_value: 0
      definedBy: H
      affectedBy: Sstc
    MTIP:
      location: 7
      description: |
        *Machine Timer Interrupt Pending*
        
        Reports the current pending state of an M-mode timer interrupt.

        Bit is controlled by the timer device (using `mtimecmp`), and is not writeable.
      type: RO-H
      reset_value: 0
    SEIP:
      location: 9
      alias:
        - sip.SEIP
      description: |
        *Supervisor External Interrupt Pending*

        Reports the current pending state of an (H)S-mode external interrupt.

        This field has two parts: a software-writeable shadow value and a wire from the interrupt controller.
        The value presented to software in the bit on a CSR read is the logical OR of the software-writeable value and the interrupt controller value.
        When software writes this bit, only the shadow value is updated (the interrupt controller is not notified of the write).

        <%- if ext?(:Smaia) -%>
        The software-writeable shadow value is aliased in `mvip.SEIP` (`Smaia` extension).
        <%- end -%>

        _Alias_:

        * `sip.SEIP` when `mideleg.SEI` is set (though `sip.SEIP` is read-only)
      type: RW-H
      definedBy: S
      affectedBy: Smaia
      reset_value: 0
    VSEIP:
      location: 10
      alias:
        - hip.VSEIP
        - vsip.SEIP
        - sip.SEIP
      description: |
        *Virtual Supervisor External Interrupt Pending*

        Reports the current pending state of a VS-mode external interrupt.

        This field is the logical OR of `hvip.VSEIP` and the wire coming from the interrupt controller.

        The field is not writable by software
        <%- if ext?(:Smaia) -%>
        (_i.e._, unlike the behavior of `mip.SEIP`/`mvip.SEIP`, attempted writes to `mip.VSEIP` do not propagate to `hvip.VSEIP`)
        <%- end -%>
        .

        _Aliases_:

        * `hip.VSEIP`
        * `vsip.SEIP` when `hideleg.VSEI` is set
      type: RO-H
      reset_value: 0
      definedBy: H
      affectedBy: Smaia
    MEIP:
      location: 11
      description: |
        *Machine External Interrupt Pending*

        Reports the current pending state of an M-mode external interrupt.
        
        MEIP is controlled by the external interrupt controller <% if ext?(:Smaia) %>(AIA) <% end %>.
        It is not writable by software.
      type: RO-H
      reset_value: 0
    SGEIP:
      location: 12
      alias: hip.SGEIP
      description: |
        *Supervisor Guest External Interrupt Pending*

        Read-only summary of any pending Supervisor Guest External Interrupt Pending, i.e.:
        the logical-OR reduction of the `hgeip` register.

        _Alias_:

        * `hip.SGEIP`
      type: RO-H
      reset_value: 0
      definedBy: H
    LCOFIP:
      location: 13
      alias:
        - sip.LCOFIP
        - vsip.LCOFIP
      description: |
        *Local Counter Overflow Interrupt pending*

        <%- if ext?(:H) -%>
        When `hideleg.LCOFI` is set,
        `vsip.LCOFIP`, `sip.LCOFIP`, and `mip.LCOFIP` are all aliases.
        <%- end -%>

        When a counter overflow interrupt occurs, a hidden sticky bit is set.

        Software writes 0 to `mip.LCOFIP` to clear the pending interrupt.

        <% if ext?(:H) %>_Aliases_<% else %>_Alias_<% end %>:

        * `sip.LCOFIP` when `mideleg.LCOFI` is set
        <%- if ext?(:H) -%>
        * `vsip.LCOFIP` when `hideleg.LCOFI` is set
        <%- end -%>
      type: RW-H
      reset_value: 0
      definedBy: Sscofpmf
