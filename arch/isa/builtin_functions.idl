%version: 1.0

generated function implemented? {
  returns Boolean
  arguments ExtensionName extension
  description {
    Return true if the implementation supports `extension`.
  }
}

generated function implemented_version? {
  returns Boolean
  arguments ExtensionName extension, String version_requirement
  description {
    Return true if the implementation supports `extension` meeting 'version_requirement'.
  }
}

generated function implemented_csr? {
  returns Boolean
  arguments Bits<12> csr_addr
  description {
    Return true if csr_addr is an implemented CSR
  }
}

builtin function unpredictable {
  arguments String why
  description {
    Indicate that the hart has reached a state that is unpredictable because the
    RISC-V spec allows multiple behaviors. Generally, this will be a fatal condition
    to any emulation, since it is unclear what to do next.

    The single argument _why_ is a string describing why the hart entered an
    unpredictable state.
  }
}

builtin function read_hpm_counter {
  returns Bits<64>
  arguments Bits<5> n
  description {
    Returns the value of hpmcounterN.

    N must be between 3..31.

    hpmcounterN must be implemented.
  }
}

builtin function hartid {
  returns XReg   # hart id
  description {
    Returns the value for `mhartid` as seen by this hart.

    Must obey the rules of the priv spec:

    [quote]
    ____
    The `mhartid` CSR is an MXLEN-bit read-only register containing the integer ID of the hardware
    thread running the code.
    This register must be readable in any implementation.
    Hart IDs might not necessarily be numbered contiguously in a multiprocessor system, but at
    least one hart must have a hart ID of zero.
    Hart IDs must be unique within the execution environment.
    ____
  }
}

builtin function read_mcycle {
  returns Bits<64>
  description {
    Return the current value of the cycle counter.
  }
}

builtin function read_mtime {
  returns Bits<64>
  description {
    Return the current value of the real time device.
  }
}

builtin function sw_write_mcycle {
  returns Bits<64>
  arguments Bits<64> value
  description {
    Given a _value_ that software is trying to write into mcycle,
    perform the write and
    return the value that will actually be written.
  }
}

builtin function cache_block_zero {
  arguments
    XReg cache_block_physical_address
  description {
    Zero the cache block at the given physical address.

    The cache block may be zeroed using 1 or more writes.

    A cache-block-sized region is zeroed regardless of whether
    or not the memory is in a cacheable PMA region.
  }
}

builtin function eei_ecall_from_m {
  description {
    When TRAP_ON_ECALL_FROM_M is false, this function will be called to
    emulate the EEI handling of ECALL-from-M.

    If TRAP_ON_ECALL_FROM_M is true, this function will never be called,
    and does not need to be provided (if pruning is applied to IDL).
  }
}

builtin function eei_ecall_from_s {
  description {
    When TRAP_ON_ECALL_FROM_S is false, this function will be called to
    emulate the EEI handling of ECALL-from-S.

    If TRAP_ON_ECALL_FROM_S is true, this function will never be called,
    and does not need to be provided (if pruning is applied to IDL).
  }
}

builtin function eei_ecall_from_u {
  description {
    When TRAP_ON_ECALL_FROM_U is false, this function will be called to
    emulate the EEI handling of ECALL-from-U.

    If TRAP_ON_ECALL_FROM_U is true, this function will never be called,
    and does not need to be provided (if pruning is applied to IDL).
  }
}

builtin function eei_ecall_from_vs {
  description {
    When TRAP_ON_ECALL_FROM_VS is false, this function will be called to
    emulate the EEI handling of ECALL-from-VS.

    If TRAP_ON_ECALL_FROM_VS is true, this function will never be called,
    and does not need to be provided (if pruning is applied to IDL).
  }
}

builtin function eei_ebreak {
  description {
    When TRAP_ON_EBREAK is false, this function will be called to
    emulate the EEI handling of EBREAK

    If TRAP_ON_EBREAK is true, this function will never be called,
    and does not need to be provided (if pruning is applied to IDL).
  }
}

builtin function memory_model_acquire {
  description {
    Perform an acquire; that is, ensure that no subsequent
    operation in program order appears to an external observer
    to occur after the operation calling this function.
  }
}

builtin function memory_model_release {
  description {
    Perform a release; that is, ensure that no prior store
    in program order can be observed external to this hart
    after this function returns.
  }
}

builtin function assert {
  arguments
    Boolean test,   # the result of a test
    String message  # a helpful message explaining what was expected
  description {
    Assert that a condition is true. Failure represents an error in the IDL model.
  }
}

builtin function notify_mode_change {
  arguments PrivilegeMode new_mode, PrivilegeMode old_mode
  description {
    Called whenever the privilege mode changes. Downstream tools can use this to hook events.
  }
}

builtin function abort_current_instruction {
  description {
    Abort the current instruction, and start refetching from $pc.
  }
}

builtin function ebreak {
  description {
    Raise an `Environment Break` exception, returning control to the debug environment.
  }
}

builtin function prefetch_instruction {
  arguments
    XReg virtual_address     # virtual cache block address
  description {
    Hint to prefetch a block containing +virtual_address+ for an upcoming fetch.
  }
}

builtin function prefetch_read {
  arguments
    XReg virtual_address     # virtual cache block address
  description {
    Hint to prefetch a block containing +virtual_address+ for an upcoming load.
  }
}

builtin function prefetch_write {
  arguments
    XReg virtual_address     # virtual cache block address
  description {
    Hint to prefetch a block containing +virtual_address+ for an upcoming store.
  }
}

builtin function fence {
  arguments
    Boolean pi, Boolean pr, Boolean po, Boolean pw,
    Boolean si, Boolean sr, Boolean so, Boolean sw
  description {
    Execute a memory ordering fence.(according to the FENCE instruction).
  }
}

builtin function fence_tso {
  description {
    Execute a TSO memory ordering fence.(according to the FENCE instruction).
  }
}

builtin function ifence {
  description {
    Execute a memory ordering instruction fence (according to FENCE.I).
  }
}

builtin function pause {
  description {
    Pause hart retirement for a implementation-defined period of time, which may be zero.

    See `Zihintpause` for more.
  }
}

generated function pow {
  returns XReg
  arguments XReg value, XReg exponent
  description {
    Return `value` to the power `exponent`.
  }
}

generated function maybe_cache_translation {
  arguments
    XReg vaddr,
    MemoryOperation op,
    TranslationResult result
  description {
    Given a translation result, potentially cache the result for later use. This function models
    a TLB fill operation. A valid implementation does nothing.
  }
}

generated function cached_translation {
  returns
    CachedTranslationResult            # cached result
  arguments
    XReg vaddr,         # virtual address
    MemoryOperation op  # operation
  description {
    Possibly returns a cached translation result matching +vaddr+.

    CachedTranslationResult contains a Boolean 'valid' field. If valid,
    'result' is a usable translation. Otherwise, the cache lookup failed.
  }
}

builtin function order_pgtbl_writes_before_vmafence {
  arguments
    VmaOrderType order_type
  description {
    Orders all writes prior to this call in global memory order that affect a page table in the set
    identified by +order_type+ before any subsequent
    sfence.vma/hfence.vma/sinval.vma/hinval.gvma/hinval.vvma in program order.

    Performs the ordering function of SFENCE.VMA/HFENCE.[GV]VMA/SFENCE.W.INVAL.

    A valid implementation does nothing if address caching is not used.
  }
}

builtin function order_pgtbl_reads_after_vmafence {
  arguments
    VmaOrderType order_type
  description {
    Orders all reads after to this call in global memory order to a page table in the set
    identified by +order_type+ after any prior
    sfence.vma/hfence.vma/sinval.vma/hinval.gvma/hinval.vvma in program order.

    Performs the ordering function of SFENCE.VMA/HFENCE.[GV]VMA/SFENCE.INVAL.IR.

    A valid implementation does nothing if address caching is not used.
  }
}

generated function invalidate_translations {
  arguments
    VmaOrderType inval_type
  description {
    Locally invalidate the cached S-mode/VS-mode/G-stage address translations
    contained in the set identified by +inval_type+.

    A valid implementation does nothing if address caching is not used.
  }
}

function read_physical_memory {
  template U32 len
  returns Bits<len>
  arguments XReg paddr
  description {
    Read from physical memory.
  }
  body {
    if (len == 8) {
      return read_physical_memory_8(paddr);
    } else if (len == 16) {
      return read_physical_memory_16(paddr);
    } else if (len == 32) {
      return read_physical_memory_32(paddr);
    } else if (len == 64) {
      return read_physical_memory_64(paddr);
    } else {
      assert(false, "Invalid len");
    }
  }
}

builtin function read_physical_memory_8 {
  returns Bits<8>
  arguments XReg paddr
  description {
    Read a byte from physical memory.
  }
}

builtin function read_physical_memory_16 {
  returns Bits<16>
  arguments XReg paddr
  description {
    Read two bytes from physical memory.
  }
}

builtin function read_physical_memory_32 {
  returns Bits<32>
  arguments XReg paddr
  description {
    Read four bytes from physical memory.
  }
}

builtin function read_physical_memory_64 {
  returns Bits<64>
  arguments XReg paddr
  description {
    Read eight bytes from physical memory.
  }
}

function write_physical_memory {
  template U32 len
  arguments XReg paddr, Bits<len> value
  description {
    Write to physical memory.
  }
  body {
    if (len == 8) {
      write_physical_memory_8(paddr, value);
    } else if (len == 16) {
      write_physical_memory_16(paddr, value);
    } else if (len == 32) {
      write_physical_memory_32(paddr, value);
    } else if (len == 64) {
      write_physical_memory_64(paddr, value);
    } else {
      assert(false, "Invalid len");
    }
  }
}

builtin function write_physical_memory_8 {
  arguments XReg paddr, Bits<8> value
  description {
    Write a byte to physical memory.
  }
}

builtin function write_physical_memory_16 {
  arguments XReg paddr, Bits<16> value
  description {
    Write two bytes to physical memory.
  }
}

builtin function write_physical_memory_32 {
  arguments XReg paddr, Bits<32> value
  description {
    Write four bytes to physical memory.
  }
}

builtin function write_physical_memory_64 {
  arguments XReg paddr, Bits<64> value
  description {
    Write eight bytes to physical memory.
  }
}

builtin function wfi {
  description {
    Wait-for-interrupt: hint that the processor
    should enter a low power state until the next interrupt.

    A valid implementation is a no-op.

    The model will advance the PC; this function does not need to.
  }
}

builtin function pma_applies? {
  returns Boolean
  arguments
    PmaAttribute          attr,   #< PMA attribute to check
    Bits<PHYS_ADDR_WIDTH> paddr,  #< Start of the region
    U32                   len     #< Size of the region, in bits
  description {
    Checks if _attr_ is applied to the entire physical address region
    between [paddr, paddr + len) based on static PMA attributes.
  }
}

builtin function atomic_check_then_write_32 {
  returns Boolean
  arguments
    Bits<PHYS_ADDR_WIDTH> paddr,          # the physical address
    Bits<32>              compare_value,  # the comparison value
    Bits<32>              write_value     # the value to be written if the value in memory matches compare_value
  description {
    Atomically:

     * Reads 32-bits from paddr
     * Compares the read value to compare_value
     * Writes write_value to paddr **if** the comparison was bitwise-equal

    returns true if the write occurs, and false otherwise

    Preconditions:

     * paddr will be aligned to 32-bits

  }
}

builtin function atomic_check_then_write_64 {
  returns Boolean
  arguments
    Bits<PHYS_ADDR_WIDTH> paddr,          # the physical address
    Bits<64>              compare_value,  # the comparison value
    Bits<64>              write_value     # the value to be written if the value in memory matches compare_value
  description {
    Atomically:

     * Reads 64-bits from paddr
     * Compares the read value to compare_value
     * Writes write_value to paddr **if** the comparison was bitwise-equal

    returns true if the write occurs, and false otherwise

    Preconditions:

     * paddr will be aligned to 64-bits
  }
}

builtin function atomically_set_pte_a {
  returns Boolean
  arguments
    Bits<PHYS_ADDR_WIDTH> pte_addr,
    Bits<XLEN>            pte_value,
    U32                   pte_len
  description {
    Atomically:

      * Reads the _pte_len_ value at _pte_addr_
      ** If the read value does not exactly equal pte_value, returns false
      * Sets the 'A' bit and writes the result to _pte_addr_
      * return true

    Preconditions:

      * pte_addr will be aligned to 64-bits
  }
}

builtin function atomically_set_pte_a_d {
  returns Boolean
  arguments
    Bits<PHYS_ADDR_WIDTH> pte_addr,
    Bits<XLEN>            pte_value,
    U32                   pte_len
  description {
    Atomically:

      * Reads the _pte_len_ value at _pte_addr_
      ** If the read value does not exactly equal pte_value, returns false
      * Sets the 'A' and 'D' bits and writes the result to _pte_addr_
      * return true

    Preconditions:

      * pte_addr will be aligned to 64-bits
  }
}

builtin function atomic_read_modify_write_32 {
  returns Bits<32>
  arguments
    Bits<PHYS_ADDR_WIDTH>  phys_addr,
    Bits<32>               value,
    AmoOperation           op
  description {
    Atomically read-modify-write 32-bits starting at phys_address using +value+ and +op+.

    Return the original (unmodified) read value.

    All access checks/alignment checks/etc. should be done before calling this function;
    it's assumed the RMW is OK to proceed.
  }
}

builtin function atomic_read_modify_write_64 {
  returns Bits<64>
  arguments
    Bits<PHYS_ADDR_WIDTH>  phys_addr,
    Bits<64>               value,
    AmoOperation           op
  description {
    Atomically read-modify-write 64-bits starting at phys_address using +value+ and +op+.

    Return the original (unmodified) read value.

    All access checks/alignment checks/etc. should be done before calling this function;
    it's assumed the RMW is OK to proceed.
  }
}
