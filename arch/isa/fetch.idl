%version: 1.0

function fetch_memory_aligned_16 {
  returns Bits<16>
  arguments
    XReg virtual_address
  description {
    Fetch 16 bits from virtual memory using a known aligned address.
  }
  body {
    TranslationResult result;

    if (CSR[misa].S == 1) {
      result = translate(virtual_address, MemoryOperation::Fetch, mode(), virtual_address);
    } else {
      result.paddr = virtual_address;
    }

    # may raise an exception
    access_check(result.paddr, 16, virtual_address, MemoryOperation::Fetch, ExceptionCode::InstructionAccessFault, mode());

    return read_physical_memory<16>(result.paddr);
  }
}

function fetch_memory_aligned_32 {
  returns Bits<32>
  arguments
    XReg virtual_address
  description {
    Fetch 32 bits from virtual memory using a known aligned address.
  }
  body {
    TranslationResult result;

    if (CSR[misa].S == 1) {
      result = translate(virtual_address, MemoryOperation::Fetch, mode(), virtual_address);
    } else {
      result.paddr = virtual_address;
    }

    # may raise an exception
    access_check(result.paddr, 32, virtual_address, MemoryOperation::Fetch, ExceptionCode::InstructionAccessFault, mode());

    return read_physical_memory<32>(result.paddr);
  }
}

fetch {
  Bits<INSTR_ENC_SIZE> enc = 0;

  if (pending_and_enabled_interrupts != 0) {
    # this will adjust CSRs and set the PC to the interrupt handler
    take_interrupt();
  }

  if (ialign() == 16) {
    # must fetch 16 bits at a time
    enc = fetch_memory_aligned_16($pc);
    if (enc[1:0] == 2'b11) {
      Bits<32> upper = fetch_memory_aligned_16($pc + 2);
      enc = (upper << 16) | enc;
    }
  } else if (ialign() == 32) {
    enc = fetch_memory_aligned_32($pc);
  } else {
    assert(ialign() == 16 || ialign() == 32, "Unsupported IALIGN");
  }

  return enc;
}
