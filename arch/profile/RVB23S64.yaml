$schema: profile_schema.json#
kind: profile
name: RVB23S64
marketing_name: RVB23S64
mode: S
base: 64
release: { $ref: profile_release/RVB23.yaml# }
introduction: |
  The RVB23S64 profile specifies the ISA features available to supervisor-mode
  execution environments in 64-bit applications processors.
  An ECALL in user mode causes a contained trap to supervisor mode.
  An ECALL in supervisor mode causes a requested trap to the execution environment.
extensions:
  #########################################################################
  # imported from RVA22S64
  #########################################################################
  $inherits:
    - "profile/RVA22S64.yaml#/extensions"
    - "profile/RVB23U64.yaml#/extensions"

  #########################################################################
  # MANDATORY extensions in RVB23 (and RVA23)
  #########################################################################
  Zifencei:
    presence: mandatory
    version: "~>1.0"
    note: |
      Instruction-Fetch fence instruction.

      Zifencei is mandated as it is the only standard way to support
      instruction-cache coherence in RVB23 application processors.
      A new instruction-cache coherence mechanism is under development
      (tentatively named Zjid), which might be added as an option in the future.

  S:
    presence: mandatory
    version: "~>1.13"
    note: |
      Supervisor version 1.13

  Svnapot:
    presence: mandatory
    version: "~>1.0"
    note: |
      NAPOT translation contiguity.
      Svnapot is very low cost to provide, so is made mandatory even in RVB.

  Svbare:
    presence: mandatory
    version: "~>1.0"
    note: |
      The *satp* mode Bare must be supported

  Sv39:
    presence: mandatory
    version: "~>1.0"
    note: |
      Page-Based 39-bit Virtual-Memory System

  Svade:
    presence: mandatory
    version: "~>1.0"
    note: |
      A page-fault exception is raised when a page is accessed when A bit = 0 ,
      or when a page is written when D bit = 0

  Ssccptr:
    presence: mandatory
    version: "~>1.0"
    note: |
      Main memory regions with both the cacheability and coherence PMAs must
      support hardware page-table reads

  Sstvecd:
    presence: mandatory
    version: "~>1.0"
    note: |
      *stvec*.MODE must be capable of holding the value 0 (Direct).
      When *stvec*.MODE=Direct,
      *stvec*.BASE must be capable of holding any valid four-byte-aligned address

  Sstvala:
    presence: mandatory
    version: "~>1.0"
    note: |
      *stval* must be written with the faulting virtual address for load, store,
      and instruction page-fault, access-fault, and misaligned exceptions,
      and for breakpoint exceptions other than those caused by execution of
      the EBREAK or C.EBREAK instructions.
      For virtual-instruction and illegal instruction exceptions,
      *stval* must be written with the faulting instruction .

  Sscounterenw:
    presence: mandatory
    version: "~>1.0"
    note: |
      For any *hpmcounter* that is not read-only zero,
      the corresponding bit in *scounteren* must be writable.

  Svpbmt:
    presence: mandatory
    version: "~>1.0"
    note: |
      Page-based memory types

  Svinval:
    presence: mandatory
    version: "~>1.0"
    note: |
      Fine-grained address-translation cache invalidation

  Sstc:
    presence: mandatory
    version: "~>1.0"
    note: |
      Supervisor-mode timer interrupts.

      NOTE: Sstc was not made mandatory in RVB23S64 as it is a more
      disruptive change affecting system-level architecture, and will take
      longer for implementations to adopt.  It is expected to be made
      mandatory in the next profile release.

  Sscofpmf:
    presence: mandatory
    version: "~>1.0"
    note: |
      Count overflow and mode-based filtering.
      Platforms may choose to mandate the presence of Sscofpmf.

  Ssu64xl:
    presence: mandatory
    version: "~>1.0"
    note: |
      *sstatus*.UXL must be capable of holding the value 2
      (that is, UXLEN=64 must be supported)

  #########################################################################
  # OPTIONAL LOCALIZED extensions in RVB23S64
  #########################################################################

  # there are no Optional Localized extensions in RVB23S64

  #########################################################################
  # OPTIONAL DEVELOPMENT extensions in RVB23S64
  #########################################################################

  # there are no Optional Development extensions in RVB23S64

  #########################################################################
  # OPTIONAL EXPANSION extensions in RVB23S64 (mandatory in RVA23S64)
  #########################################################################

  Ssnpm:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Pointer masking, with *senvcfg*.PME supporting, at minimum,
      settings PMLEN=0 and PMLEN=7

  Sha:
    presence:
      optional: expansion
    note: |
      The set of augmented hypervisor extensions: H, Ssstateen,
      Shcounterenw, Shvstvala, Shtvala, Shvstvecd, Shvsatpa, Shgatpa

  # TODO: See https://github.com/riscv-software-src/riscv-unified-db/issues/373
  #  __NEED_AN_EXTENSION_NAME_HERE__:
  #    presence:
  #      optional: expansion
  #    version: "~>1.0"
  #    when:
  #      allOf:
  #        - implemented: H
  #        - implemented: Ssnpm
  #    note: |
  #      If the hypervisor extension is implemented
  #      and pointer masking (Ssnpm) is supported
  #      then *henvcfg*.PME must support at minimum, settings PMLEN=0 and PMLEN=7

  #########################################################################
  # OPTIONAL EXPANSION extensions in both RVB23S64 and RVA23S64
  #########################################################################

  Sv48:
    presence:
      optional: expansion
    version: "~>1.13"
    note: |
      Page-based 48-bit virtual-memory system

  Sv57:
    presence:
      optional: expansion
    version: "~>1.13"
    note: |
      Page-based 57-bit virtual-memory system

  Svadu:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Hardware A/D bit updates

  Zkr:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Entropy CSR

      NOTE: Technically, Zk is also a privileged-mode option, capturing that
      Zkr, Zkn, and Zkt are all implemented.  However, the Zk rollup is less
      descriptive than specifying the individual extensions explicitly.

  Sdtrig:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Debug triggers

  Ssstrict:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      No non-conforming extensions are present.
      Attempts to execute unimplemented opcodes or access unimplemented CSRs in the
      standard or reserved encoding spaces raises an illegal instruction exception
      that results in a contained trap to the supervisor-mode trap handler

      NOTE: Ssstrict does not prescribe behavior for the custom encoding spaces or CSRs.

      NOTE: Ssstrict definition applies to the execution environment claiming to be
      RVB23-compatible, which must have the hypervisor extension.
      That execution environment will take a contained trap to supervisor-mode
      (however that trap is implemented, including, but not limited to,
      emulation/delegation in the outer execution environment).
      Ssstrict (and all the other RVB23 mandates and options) do not apply to
      any guest VMs run by a hypervisor.
      An RVB23 hypervisor can provide guest VMs that are also RVB23-compatible
      but with an expanded set of emulated standard instructions.
      An RVB23 hypervisor can also choose to implement guest VMs that are not
      RVB23 compatible (for example, only RVA20 or only RVA22)
    # that last parenthesized phrase for the RVA23 Profile would change to:
    #     (for example, lacking H, or only RVA20)

  Svvptc:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Transitions from invalid to valid PTEs will be visible in bounded time
      without an explicit memory-management fence.

  Sspm:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Supervisor-mode pointer masking, with the supervisor execution environment
      providing a means to select PMLEN=0 and PMLEN=7 (at minimum).

recommendations:
  - text: |
      Implementations are strongly recommended to raise illegal-instruction
      exceptions on attempts to execute unimplemented opcodes.
