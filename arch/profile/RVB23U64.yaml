$schema: profile_schema.json#
kind: profile
name: RVB23U64
marketing_name: RVB23U64
mode: Unpriv
base: 64
release: { $ref: profile_release/RVB23.yaml# }
introduction: |
  The RVB23U64 profile specifies the ISA features available to user-mode
  execution environments in 64-bit applications processors.  This is the
  most important profile within application processors in
  terms of the amount of software that targets this profile.
extensions:
  #########################################################################
  # imported from RVA22U64
  #########################################################################
  $inherits: "profile/RVA22U64.yaml#/extensions"
  $remove: Za128rs

  #########################################################################
  # MANDATORY extensions in RVB23 (and RVA23)
  #########################################################################
  Zihintntl:
    presence: mandatory
    version: "~>1.0"
    note: |
      Non-temporal memory-access locality hints
  Zicond:
    presence: mandatory
    version: "~>1.0"
    note: |
      Integer conditional operations
  Zimop:
    presence: mandatory
    version: "~>1.0"
    note: |
      May-be operations
  Zcmop:
    presence: mandatory
    version: "~>1.0"
    note: |
      Compressed (16-bit) may-be operations
  Zcb:
    presence: mandatory
    version: "~>1.0"
    note: |
      Additional compressed (16-bit) instructions
  Zfa:
    presence: mandatory
    version: "~>1.0"
    note: |
      Additional floating-point instructions
  Zawrs:
    presence: mandatory
    version: "~>1.0"
    note: |
      Wait-on-reservation-set (WRS) instructions
  Za64rs:
    presence: mandatory
    version: "~>1.0"
    note: |
      Reservation sets are contiguous, naturally aligned, and a maximum of 64 bytes

  #########################################################################
  # OPTIONAL LOCALIZED extensions
  #########################################################################

  #---------------------------------
  # In RVB23 (and RVA23)
  #---------------------------------
  Zvkng:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Vector crypto NIST Algorithms with GCM
  Zvksg:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Vector crypto Shang-Mi Algorithms with GCM

  #---------------------------------
  # In RVB23 (but not in RVA23)
  #---------------------------------
  Zvkg:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Vector GCM/GMAC instructions

  Zvknc:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Vector crypto NIST algorithms with carryless multiply.
      To reduce implementation cost, RVB profiles allow this carryless multiply option to
      implement GCM efficiently, with GHASH available as a separate option.
    # RVA23 does not include Zvknc because it mandates the higher-performing
    # but more expensive GHASH options when adding vector crypto.
  Zvksc:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Vector crypto Shang-Mi algorithms with carryless multiply.
      To reduce implementation cost, RVB profiles allow this carryless multiply option to
      implement GCM efficiently, with GHASH available as a separate option.
    # RVA23 does not include Zvksc because it mandates the higher-performing
    # but more expensive GHASH options when adding vector crypto.

  Zkn:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Scalar crypto NIST algorithms
  Zks:
    presence:
      optional: localized
    version: "~>1.0"
    note: |
      Scalar crypto Shang-Mi algorithms
  # RVA23 profiles drop support for the above scalar crypto as an option, as the vector
  # extension is now mandatory in RVA23.
  # RVB23 profiles do support scalar crypto as an option, as the vector extension is optional in RVB23.

  #########################################################################
  # OPTIONAL DEVELOPMENT extensions in RVB23
  #########################################################################
  # The following are new development options, intended to become mandatory in a later RVB profile:
  Zabha:
    presence:
      optional: development
    version: "~>1.0"
    note: |
      Byte and halfword atomic memory operations
  Zacas:
    presence:
      optional: development
    version: "~>1.0"
    note: |
      Compare-and-Swap instructions
  Ziccamoc:
    presence:
      optional: development
    version: "~>1.0"
    note: |
      Main memory regions with both the cacheability and coherence PMAs
      must provide AMOCASQ-level PMA support
  Zama16b:
    presence:
      optional: development
    version: "~>1.0"
    note: |
      Misaligned loads, stores, and AMOs to main memory regions that do not cross
      Daaaa naturally aligned 16-byte boundary are atomic

  #########################################################################
  # OPTIONAL EXPANSION extensions in RVB23
  #########################################################################

  #---------------------------------
  # Optional in RVB23U64 (but Mandatory in RVA23U64)
  #---------------------------------
  Zfhmin:
    presence:
      optional: expansion
    version: "~> 1.0"
    note: |
      Zfhmin is a small extension that adds support to load/store and convert
      IEEE 754 half-precision numbers to and from the IEEE 754 single-precision
      format.  The hardware cost for this extension is low, and mandating the
      extension avoids adding an option to the profile.
  V:
    presence:
      optional: expansion
    version: "~> 1.0"
    note: |
      The Vector extension
  # Note: it is unclear if other Zve* extensions should also be supported in RVB
  Zvfhmin:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Vector minimal half-precision floating-point
  Zvbb:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Vector basic bit-manipulation instructions
  Zvkt:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Vector basic bit-manipulation instructions
  Supm:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      Pointer masking, with the execution environment providing
      a means to select PMLEN=0 and PMLEN=7 at minimum

  #--------------------------------------------
  # Expansion options in RVB23 (and also RVA23)
  #--------------------------------------------
  Zfh:
    presence:
      optional: expansion
    version: "~>1.0"
    note: A future RVB profile might mandate V.
  Zbc:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Scalar carryless multiplication
  Zicfilp:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Landing Pads
  Zicfiss:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Shadow Stack
  Zvfh:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Vector half-precision floating-point
  Zfbfmin:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Scalar BF16 conversion instructions
  Zvfbfmin:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Vector BF16 conversion instructions
  Zvfbfwma:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Vector BF16 widening mul-add instruction

  #--------------------------------------------
  # Zvbc is an expansion option in RVB23U64
  # (but is not intended to be made mandatory in future RVB Profiles)
  # It will be listed in RVA23U64 as a *development* option,
  # as it is intended to become mandatory in future RVA Profiles.
  #--------------------------------------------
  Zvbc:
    presence:
      optional: expansion
    version: "~>1.0"
    note: Vector carryless multiplication

  #--------------------------------------------
  # Ssstrict is an expansion option in RVB2U64 and RVA23U64
  # (but is not intended to be made mandatory in future RVB or RVA Profiles)
  #--------------------------------------------
  Ssstrict:
    presence:
      optional: expansion
    version: "~>1.0"
    note: |
      all opcodes in the Standard and Reserved opcode spaces (SROS),
      other than those identified in a Profile as Mandatory or Optional,
      cause a trap.
    # should the above say "current or subsequent Profile" rather than just "Profile"?
    # (where is the official definition of Ssstrict?)

  #########################################################################
  # TRANSITORY EXPANSION extensions in RVB23
  #########################################################################

  #--------------------------------------------
  # (there are no Transitory expansion options in RVB23)
  #--------------------------------------------
