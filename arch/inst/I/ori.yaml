# yaml-language-server: $schema=../../../schemas/inst_schema.json

ori:
  long_name: Or immediate
  description: Or an immediate to the value in rs1, and store the result in rd
  definedBy: I
  assembly: xd, xs1, imm
  encoding:
    match: -----------------110-----0010011
    variables:
    - name: imm
      location: 31-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: true
  operation(): |
    if (implemented?(ExtensionName::Zicbop)) {
      if (rd == 0) {
        if (imm[4:0] == 0) {
          # prefetch.i instruction
          Bits<12> offset = {imm[11:5], rd};
          prefetch_instruction(offset);
        } else if (imm[4:0] == 1) {
          # prefetch.r instruction
          Bits<12> offset = {imm[11:5], rd};
          prefetch_read(offset);        
        } else if (imm[4:0] == 3) {
          # prefetch.r instruction
          Bits<12> offset = {imm[11:5], rd};
          prefetch_write(offset);        
        }
      }
    }
    X[rd] = X[rs1] | imm;
  pseudoinstructions:
    - when: (rd == 0) && (imm[4:0] == 0)
      to: prefetch.i offset
    - when: (rd == 0) && (imm[4:0] == 1)
      to: prefetch.r offset
    - when: (rd == 0) && (imm[4:0] == 3)
      to: prefetch.w offset



  sail(): |
    {
      let rs1_val = X(rs1);
      let immext : xlenbits = sign_extend(imm);
      let result : xlenbits = match op {
        RISCV_ADDI  => rs1_val + immext,
        RISCV_SLTI  => zero_extend(bool_to_bits(rs1_val <_s immext)),
        RISCV_SLTIU => zero_extend(bool_to_bits(rs1_val <_u immext)),
        RISCV_ANDI  => rs1_val & immext,
        RISCV_ORI   => rs1_val | immext,
        RISCV_XORI  => rs1_val ^ immext
      };
      X(rd) = result;
      RETIRE_SUCCESS
    }
  
  


