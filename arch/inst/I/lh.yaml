# yaml-language-server: $schema=../../../schemas/inst_schema.json

lh:
  long_name: Load halfword
  description: |
    Load 16 bits of data into register `rd` from an
    address formed by adding `rs1` to a signed offset.
    Sign extend the result.
  definedBy: I
  assembly: xd, imm(rs1)
  encoding:
    match: -----------------001-----0000111
    variables:
    - name: imm
      location: 31-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    XReg virtual_address = X[rs1] + imm;

    X[rd] = sext(read_memory<16>(virtual_address, $encoding), 16);



  sail(): |
    {
      let offset : xlenbits = sign_extend(imm);
      /* Get the address, X(rs1) + offset.
         Some extensions perform additional checks on address validity. */
      match ext_data_get_addr(rs1, offset, Read(Data), width) {
        Ext_DataAddr_Error(e)  => { ext_handle_data_check_error(e); RETIRE_FAIL },
        Ext_DataAddr_OK(vaddr) =>
          if   check_misaligned(vaddr, width)
          then { handle_mem_exception(vaddr, E_Load_Addr_Align()); RETIRE_FAIL }
          else match translateAddr(vaddr, Read(Data)) {
            TR_Failure(e, _) => { handle_mem_exception(vaddr, e); RETIRE_FAIL },
            TR_Address(paddr, _) =>
              match (width) {
                BYTE =>
                  process_load(rd, vaddr, mem_read(Read(Data), paddr, 1, aq, rl, false), is_unsigned),
                HALF =>
                  process_load(rd, vaddr, mem_read(Read(Data), paddr, 2, aq, rl, false), is_unsigned),
                WORD =>
                  process_load(rd, vaddr, mem_read(Read(Data), paddr, 4, aq, rl, false), is_unsigned),
                DOUBLE if sizeof(xlen) >= 64 =>
                  process_load(rd, vaddr, mem_read(Read(Data), paddr, 8, aq, rl, false), is_unsigned),
                _ => report_invalid_width(__FILE__, __LINE__, width, "load")
              }
          }
      }
    }
  
  


