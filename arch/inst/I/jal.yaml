# yaml-language-server: $schema=../../../schemas/inst_schema.json

jal:
  long_name: Jump and link
  description: |
    Jump to a PC-relative offset and store the return
    address in rd.
  definedBy: I
  assembly: xd, imm
  encoding:
    match: -------------------------1101111
    variables:
    - name: imm
      location: 31|19-12|20|30-21
      left_shift: 1
      sign_extend: true
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    XReg retrun_addr = $pc + 4;

    jump_halfword($pc + imm);
    X[rd] = retrun_addr;



  sail(): |
    {
      let t : xlenbits = PC + sign_extend(imm);
      /* Extensions get the first checks on the prospective target address. */
      match ext_control_check_pc(t) {
        Ext_ControlAddr_Error(e) => {
          ext_handle_control_check_error(e);
          RETIRE_FAIL
        },
        Ext_ControlAddr_OK(target) => {
          /* Perform standard alignment check */
          if bit_to_bool(target[1]) & not(extension("C"))
          then {
            handle_mem_exception(target, E_Fetch_Addr_Align());
            RETIRE_FAIL
          } else {
            X(rd) = get_next_pc();
            set_next_pc(target);
            RETIRE_SUCCESS
          }
        }
      }
    }
  
  


