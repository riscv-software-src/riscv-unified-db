# yaml-language-server: $schema=../../../schemas/inst_schema.json

sra:
  long_name: Shift right arithmetic
  description: |
    Arithmetic shift the value in `rs1` right by the value in the lower 5 bits of `rs2`, and store the result in `rd`.
  definedBy: I
  assembly: xd, xs1, xs2
  encoding:
    match: 0100000----------101-----0110011
    variables:
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: true
  operation(): |
    if (xlen() == 64) {
      X[rd] = X[rs1] >>> X[rs2][5:0];
    } else {
      X[rd] = X[rs1] >>> X[rs2][4:0];
    }



  sail(): |
    {
      let rs1_val = X(rs1);
      let rs2_val = X(rs2);
      let result : xlenbits = match op {
        RISCV_ADD  => rs1_val + rs2_val,
        RISCV_SLT  => zero_extend(bool_to_bits(rs1_val <_s rs2_val)),
        RISCV_SLTU => zero_extend(bool_to_bits(rs1_val <_u rs2_val)),
        RISCV_AND  => rs1_val & rs2_val,
        RISCV_OR   => rs1_val | rs2_val,
        RISCV_XOR  => rs1_val ^ rs2_val,
        RISCV_SLL  => if   sizeof(xlen) == 32
                      then rs1_val << (rs2_val[4..0])
                      else rs1_val << (rs2_val[5..0]),
        RISCV_SRL  => if   sizeof(xlen) == 32
                      then rs1_val >> (rs2_val[4..0])
                      else rs1_val >> (rs2_val[5..0]),
        RISCV_SUB  => rs1_val - rs2_val,
        RISCV_SRA  => if   sizeof(xlen) == 32
                      then shift_right_arith32(rs1_val, rs2_val[4..0])
                      else shift_right_arith64(rs1_val, rs2_val[5..0])
      };
      X(rd) = result;
      RETIRE_SUCCESS
    }
  
  


