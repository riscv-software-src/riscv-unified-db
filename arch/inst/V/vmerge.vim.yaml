# yaml-language-server: $schema=../../../schemas/inst_schema.json

vmerge.vim:
  long_name: No synopsis available.
  description: |
      No description available.
  definedBy: V
  assembly: vs2, vd, imm
  encoding:
    match: 0101110----------011-----1010111
    variables:
    - name: vs2
      location: 24-20
    - name: simm5
      location: 19-15
    - name: vd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: false
  operation(): |
      



  sail(): |
    {
      let start_element = get_start_element();
      let end_element   = get_end_element();
      let SEW           = get_sew();
      let LMUL_pow      = get_lmul_pow();
      let num_elem      = get_num_elem(LMUL_pow, SEW); /* max(VLMAX,VLEN/SEW)) */
      let real_num_elem = if LMUL_pow >= 0 then num_elem else num_elem / (0 - LMUL_pow); /* VLMAX */
    
      if illegal_vd_masked(vd) then { handle_illegal(); return RETIRE_FAIL };
    
      let 'n = num_elem;
      let 'm = SEW;
    
      let vm_val  : vector('n, dec, bool)     = read_vmask(num_elem, 0b0, 0b00000);
      let imm_val : bits('m)                  = sign_extend(simm);
      let vs2_val : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vs2);
      let vd_val  : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vd);
      result      : vector('n, dec, bits('m)) = undefined;
    
      let tail_ag : agtype = get_vtype_vta();
      foreach (i from 0 to (num_elem - 1)) {
        if i < start_element then {
          result[i] = vd_val[i]
        } else if i > end_element | i >= real_num_elem then {
          result[i] = match tail_ag {
            UNDISTURBED => vd_val[i],
            AGNOSTIC    => vd_val[i] /* TODO: configuration support */
          }
        } else {
          /* the merge operates on all body elements */
          result[i] = if vm_val[i] then imm_val else vs2_val[i]
        }
      };
    
      write_vreg(num_elem, SEW, LMUL_pow, vd, result);
      vstart = zeros();
      RETIRE_SUCCESS
    }
  
  