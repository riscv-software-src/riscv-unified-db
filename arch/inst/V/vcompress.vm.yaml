# yaml-language-server: $schema=../../../schemas/inst_schema.json

vcompress.vm:
  long_name: No synopsis available.
  description: |
      No description available.
  definedBy: V
  assembly: vs2, vs1, vd
  encoding:
    match: 0101111----------010-----1010111
    variables:
    - name: vs2
      location: 24-20
    - name: vs1
      location: 19-15
    - name: vd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: false
  operation(): |
      



  sail(): |
    {
      let start_element = get_start_element();
      let end_element = get_end_element();
      let SEW = get_sew();
      let LMUL_pow = get_lmul_pow();
      let num_elem = get_num_elem(LMUL_pow, SEW);
    
      /* vcompress should always be executed with a vstart of 0 */
      if start_element != 0 | vs1 == vd | vs2 == vd | illegal_vd_unmasked()
      then { handle_illegal(); return RETIRE_FAIL };
    
      let 'n = num_elem;
      let 'm = SEW;
    
      let vs1_val : vector('n, dec, bool)     = read_vmask(num_elem, 0b0, vs1);
      let vs2_val : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vs2);
      let vd_val  : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vd);
      result      : vector('n, dec, bits('m)) = undefined;
    
      /* body elements */
      vd_idx : nat = 0;
      foreach (i from 0 to (num_elem - 1)) {
        if i <= end_element then {
          if vs1_val[i] then {
            let 'p = vd_idx;
            assert('p < 'n);
            result['p] = vs2_val[i];
            vd_idx = vd_idx + 1;
          }
        }
      };
      /* tail elements */
      if vd_idx < num_elem then {
        let tail_ag : agtype = get_vtype_vta();
        let 'p = vd_idx;
        foreach (i from 'p to (num_elem - 1)) {
          result[i] = match tail_ag {
            UNDISTURBED => vd_val[i],
            AGNOSTIC    => vd_val[i] /* TODO: configuration support */
          }
        }
      };
    
      write_vreg(num_elem, SEW, LMUL_pow, vd, result);
      vstart = zeros();
      RETIRE_SUCCESS
    }
  
  