# yaml-language-server: $schema=../../../schemas/inst_schema.json

vmor.mm:
  long_name: No synopsis available.
  description: |
      No description available.
  definedBy: V
  assembly: vs2, vs1, vd
  encoding:
    match: 0110101----------010-----1010111
    variables:
    - name: vs2
      location: 24-20
    - name: vs1
      location: 19-15
    - name: vd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: false
  operation(): |
      



  sail(): |
    {
      let SEW      = get_sew();
      let LMUL_pow = get_lmul_pow();
      let num_elem = unsigned(vlenb) * 8;
    
      if illegal_vd_unmasked() then { handle_illegal(); return RETIRE_FAIL };
    
      let 'n = num_elem;
      let 'm = SEW;
    
      let vs1_val : vector('n, dec, bool) = read_vmask(num_elem, 0b0, vs1);
      let vs2_val : vector('n, dec, bool) = read_vmask(num_elem, 0b0, vs2);
      let vd_val  : vector('n, dec, bool) = read_vmask(num_elem, 0b0, vd);
      result      : vector('n, dec, bool) = undefined;
      mask        : vector('n, dec, bool) = undefined;
    
      (result, mask) = init_masked_result_carry(num_elem, SEW, 0, vd_val);
    
      foreach (i from 0 to (num_elem - 1)) {
        if mask[i] then {
          result[i] = match funct6 {
            MM_VMAND     => vs2_val[i] & vs1_val[i],
            MM_VMNAND    => not(vs2_val[i] & vs1_val[i]),
            MM_VMANDNOT  => vs2_val[i] & not(vs1_val[i]),
            MM_VMXOR     => vs2_val[i] != vs1_val[i],
            MM_VMOR      => vs2_val[i] | vs1_val[i],
            MM_VMNOR     => not(vs2_val[i] | vs1_val[i]),
            MM_VMORNOT   => vs2_val[i] | not(vs1_val[i]),
            MM_VMXNOR    => vs2_val[i] == vs1_val[i]
          }
        }
      };
    
      write_vmask(num_elem, vd, result);
      vstart = zeros();
      RETIRE_SUCCESS
    }
  
  