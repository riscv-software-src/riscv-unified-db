# yaml-language-server: $schema=../../../schemas/inst_schema.json

vmsof.m:
  long_name: No synopsis available.
  description: |
      No description available.
  definedBy: V
  assembly: vm, vs2, vd
  encoding:
    match: 010100------00010010-----1010111
    variables:
    - name: vm
      location: 25-25
    - name: vs2
      location: 24-20
    - name: vd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: false
  operation(): |
      



  sail(): |
    {
      let SEW      = get_sew();
      let LMUL_pow = get_lmul_pow();
      let num_elem = unsigned(vlenb) * 8;
    
      if illegal_normal(vd, vm) | not(assert_vstart(0)) | vd == vs2
      then { handle_illegal(); return RETIRE_FAIL };
    
      let 'n = num_elem;
      let 'm = SEW;
    
      let vm_val  : vector('n, dec, bool) = read_vmask(num_elem, vm, 0b00000);
      let vs2_val : vector('n, dec, bool) = read_vmask(num_elem, 0b0, vs2);
      let vd_val  : vector('n, dec, bool) = read_vmask(num_elem, 0b0, vd);
      result      : vector('n, dec, bool) = undefined;
      mask        : vector('n, dec, bool) = undefined;
    
      (result, mask) = init_masked_result_cmp(num_elem, SEW, 0, vd_val, vm_val);
    
      found_elem : bool = false;
      foreach (i from 0 to (num_elem - 1)) {
        if mask[i] then {
          if vs2_val[i] & not(found_elem) then {
            result[i] = true;
            found_elem = true
          } else {
            result[i] = false
          }
        }
      };
    
      write_vmask(num_elem, vd, result);
      vstart = zeros();
      RETIRE_SUCCESS
    }
  
  