# yaml-language-server: $schema=../../../schemas/inst_schema.json

vmsne.vx:
  long_name: No synopsis available.
  description: |
      No description available.
  definedBy: V
  assembly: vm, vs2, xs1, vd
  encoding:
    match: 011001-----------100-----1010111
    variables:
    - name: vm
      location: 25-25
    - name: vs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: vd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: false
  operation(): |
      



  sail(): |
    {
      let SEW      = get_sew();
      let LMUL_pow = get_lmul_pow();
      let num_elem = get_num_elem(LMUL_pow, SEW);
    
      if illegal_vd_unmasked() then { handle_illegal(); return RETIRE_FAIL };
    
      let 'n = num_elem;
      let 'm = SEW;
    
      let vm_val  : vector('n, dec, bool)     = read_vmask(num_elem, vm, 0b00000);
      let rs1_val : bits('m)                  = get_scalar(rs1, SEW);
      let vs2_val : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vs2);
      let vd_val  : vector('n, dec, bool)     = read_vmask(num_elem, 0b0, vd);
      result      : vector('n, dec, bool)     = undefined;
      mask        : vector('n, dec, bool)     = undefined;
    
      (result, mask) = init_masked_result_cmp(num_elem, SEW, LMUL_pow, vd_val, vm_val);
    
      foreach (i from 0 to (num_elem - 1)) {
        if mask[i] then {
          let res : bool = match funct6 {
            VXCMP_VMSEQ    => vs2_val[i] == rs1_val,
            VXCMP_VMSNE    => vs2_val[i] != rs1_val,
            VXCMP_VMSLTU   => unsigned(vs2_val[i]) < unsigned(rs1_val),
            VXCMP_VMSLT    => signed(vs2_val[i]) < signed(rs1_val),
            VXCMP_VMSLEU   => unsigned(vs2_val[i]) <= unsigned(rs1_val),
            VXCMP_VMSLE    => signed(vs2_val[i]) <= signed(rs1_val),
            VXCMP_VMSGTU   => unsigned(vs2_val[i]) > unsigned(rs1_val),
            VXCMP_VMSGT    => signed(vs2_val[i]) > signed(rs1_val)
          };
          result[i] = res
        }
      };
    
      write_vmask(num_elem, vd, result);
      vstart = zeros();
      RETIRE_SUCCESS
    }
  
  