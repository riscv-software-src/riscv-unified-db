# yaml-language-server: $schema=../../../schemas/inst_schema.json

flh:
  long_name: Half-precision floating-point load
  description: |
    The `flh` instruction loads a single-precision floating-point value from memory at address _rs1_ + _imm_ into floating-point register _rd_.

    `flh` does not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved.

    `flh` is only guaranteed to execute atomically if the effective address is naturally aligned.

  definedBy:
    anyOf: [Zfh, Zfhmin]
  assembly: fd, imm(xs1)
  encoding:
    match: -----------------001-----0000111
    variables:
    - name: imm
      location: 31-20
    - name: rs1
      location: 19-15
    - name: fd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    check_f_ok($encoding);

    XReg virtual_address = X[rs1] + $signed(imm);

    Bits<16> hp_value = read_memory<16>(virtual_address, $encoding);

    f[fd] = nan_box<16, FLEN>(hp_value);

    mark_f_state_dirty();



  sail(): |
    {
      let offset : xlenbits = sign_extend(imm);
      /* Get the address, X(rs1) + offset.
         Some extensions perform additional checks on address validity. */
      match ext_data_get_addr(rs1, offset, Read(Data), width) {
        Ext_DataAddr_Error(e)  => { ext_handle_data_check_error(e); RETIRE_FAIL },
        Ext_DataAddr_OK(vaddr) =>
          if   check_misaligned(vaddr, width)
          then { handle_mem_exception(vaddr, E_Load_Addr_Align()); RETIRE_FAIL }
          else match translateAddr(vaddr, Read(Data)) {
            TR_Failure(e, _) => { handle_mem_exception(vaddr, e); RETIRE_FAIL },
            TR_Address(addr, _) => {
              let (aq, rl, res) = (false, false, false);
              match (width) {
                BYTE => { handle_illegal(); RETIRE_FAIL },
                HALF =>
                   process_fload16(rd, vaddr, mem_read(Read(Data), addr, 2, aq, rl, res)),
                WORD =>
                   process_fload32(rd, vaddr, mem_read(Read(Data), addr, 4, aq, rl, res)),
                DOUBLE if sizeof(flen) >= 64 =>
                   process_fload64(rd, vaddr, mem_read(Read(Data), addr, 8, aq, rl, res)),
                _ => report_invalid_width(__FILE__, __LINE__, width, "floating point load"),
              }
            }
          }
      }
    }
  
  


