# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: clz
long_name: Count leading zero bits
description: |
  Counts the number of 0's before the first 1,
  starting at the most-significant bit (i.e., XLEN-1) and progressing to bit 0.
  Accordingly, if the input is 0, the output is XLEN, and if the most-significant
  bit of the input is a 1, the output is 0.
definedBy: Zbb
assembly: xd, xs1
encoding:
  match: 011000000000-----001-----0010011
  variables:
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {
    raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  X[rd] = (xlen() - 1) - $signed(highest_set_bit(X[rs1]));

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  {
    let rs1_val = X(rs1);
    result : nat = 0;
    done : bool = false;
    foreach (i from (sizeof(xlen) - 1) downto 0)
      if not(done) then if rs1_val[i] == bitzero
                      then result = result + 1
                      else done = true;
    X(rd) = to_bits(sizeof(xlen), result);
    RETIRE_SUCCESS
  }

# SPDX-SnippetEnd
