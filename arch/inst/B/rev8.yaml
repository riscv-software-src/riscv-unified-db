# yaml-language-server: $schema=../../../schemas/inst_schema.json

rev8:
  long_name: Byte-reverse register (RV64 encoding)
  description: |
    This instruction reverses the order of the bytes in rs1.

    [NOTE]
    The rev8 mnemonic corresponds to different instruction encodings in RV32 and RV64.

    [NOTE]
    The byte-reverse operation is only available for the full register width. To emulate word-sized
    and halfword-sized byte-reversal, perform a `rev8 rd,rs` followed by a `srai rd,rd,K`, where K
    is XLEN-32 and XLEN-16, respectively.
  definedBy:
    anyOf: [B, Zbb, Zbkb]
  assembly: xd, xs1
  encoding:
    RV32:
      match: 011010011000-----101-----0010011
      variables:
      - name: rs1
        location: 19-15
      - name: rd
        location: 11-7
    RV64:
      match: 011010111000-----101-----0010011
      variables:
      - name: rs1
        location: 19-15
      - name: rd
        location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: true
  operation(): |
    if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {
      raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
    }

    XReg input = X[rs1];
    XReg output = 0;

    XReg j = xlen() - 1;

    for (U32 i=0; i<(xlen()-8); i = i+8) {
      output[(i+7):i] = input[j:(j-7)];
      j = j - 8;
    }

    X[rd] = output;



  sail(): |
    {
      let rs1_val = X(rs1);
      result : xlenbits = zeros();
      foreach (i from 0 to (sizeof(xlen) - 8) by 8)
        result[(i + 7) .. i] = rs1_val[(sizeof(xlen) - i - 1) .. (sizeof(xlen) - i - 8)];
      X(rd) = result;
      RETIRE_SUCCESS
    }
  
  


