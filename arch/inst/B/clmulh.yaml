# yaml-language-server: $schema=../../../schemas/inst_schema.json

clmulh:
  long_name: Carry-less multiply (high-part)
  description: |
    `clmulh` produces the upper half of the 2*XLEN carry-less product
  definedBy:
    anyOf: [B, Zbc]
  assembly: xd, xs1, xs2
  encoding:
    match: 0000101----------011-----0110011
    variables:
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: true
  operation(): |
    if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {
      raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
    }

    XReg rs1_val = X[rs1];
    XReg rs2_val = X[rs2];
    XReg output = 0;

    for (U32 i=1; i <= xlen(); i++) {
      output = (((rs2_val >> i) & 1) == 1)
        ? output ^ (rs1_val >> (xlen() - i))
        : output;
    }

    X[rd] = output;



  sail(): |
    {
      let rs1_val = X(rs1);
      let rs2_val = X(rs2);
      result : xlenbits = zeros();
      foreach (i from 0 to (xlen_val - 1))
        if rs2_val[i] == bitone then result = result ^ (rs1_val >> (xlen_val - i));
      X(rd) = result;
      RETIRE_SUCCESS
    }
  
  


