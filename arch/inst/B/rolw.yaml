# yaml-language-server: $schema=../../../schemas/inst_schema.json

rolw:
  long_name: Rotate left word (Register)
  description: |
    This instruction performs a rotate left of the least-significant word of rs1 by the amount in least-significant 5 bits of rs2.
    The resulting word value is sign-extended by copying bit 31 to all of the more-significant bits.
  definedBy:
    anyOf: [B, Zbb, Zbkb]
  assembly: xd, xs1, xs2
  base: 64
  encoding:
    match: 0110000----------001-----0111011
    variables:
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  data_independent_timing: true
  operation(): |
    if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {
      raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
    }

    XReg rs1_word = X[rs1][31:0];
    XReg shamt = X[rs2][4:0];

    XReg unextended_result = (rs1_word << shamt) | (rs1_word >> (32 - shamt));

    X[rd] = {{32{unextended_result[31]}}, unextended_result};



  sail(): |
    {
      let rs1_val = (X(rs1))[31..0];
      let shamt = (X(rs2))[4..0];
      let result : bits(32) = match op {
        RISCV_ROLW => rs1_val <<< shamt,
        RISCV_RORW => rs1_val >>> shamt
      };
      X(rd) = sign_extend(result);
      RETIRE_SUCCESS
    }
  
  


