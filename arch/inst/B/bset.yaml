# yaml-language-server: $schema=../../../schemas/inst_schema.json

bset:
  long_name: Single-Bit set (Register)
  description: |
    This instruction returns rs1 with a single bit set at the index specified in rs2.
    The index is read from the lower log2(XLEN) bits of rs2.
  definedBy:
    anyOf: [B, Zbs]
  assembly: xd, xs1, xs2
  encoding:
    match: 0010100----------001-----0110011
    variables:
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    if (implemented?(ExtensionName::B) && (CSR[misa].B == 1'b0)) {
      raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
    }

    XReg index = X[rs2] & (xlen() - 1);
    X[rd] = X[rs1] | (1 << index);



  sail(): |
    {
      let rs1_val = X(rs1);
      let rs2_val = X(rs2);
      let mask : xlenbits = if sizeof(xlen) == 32
                            then zero_extend(0b1) << rs2_val[4..0]
                            else zero_extend(0b1) << rs2_val[5..0];
      let result : xlenbits = match op {
        RISCV_BCLR => rs1_val & ~(mask),
        RISCV_BEXT => zero_extend(bool_to_bits((rs1_val & mask) != zeros())),
        RISCV_BINV => rs1_val ^ mask,
        RISCV_BSET => rs1_val | mask
      };
      X(rd) = result;
      RETIRE_SUCCESS
    }
  
  


