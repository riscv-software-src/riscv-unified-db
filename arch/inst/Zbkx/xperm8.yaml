# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: inst_schema.json#
kind: instruction
name: xperm8
long_name: Crossbar permutation (bytes)
description: |
  The xperm8 instruction operates on bytes. The rs1 register contains a vector of XLEN/8 8-bit
  elements. The rs2 register contains a vector of XLEN/8 8-bit indexes. The result is each element in
  rs2 replaced by the indexed element in rs1, or zero if the index into rs2 is out of bounds.
definedBy: Zbkx
assembly: xd, xs1, xs2
encoding:
  match: 0010100----------100-----0110011
  variables:
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: false
operation(): |
  XReg input1 = X[rs1];
  XReg input2 = X[rs2];
  XReg output = 0;

  for(U32 i=0; i<(xlen()-8); i = i+8) {
    XReg index = input2[i+7:i];
    if(8*index < xlen()) {
      output[i+7:i] = input1[8*index+7:8*index];
    }
  }

  X[rd] = output;

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  val xperm8_lookup : (bits(8), xlenbits) -> bits(8)
  function xperm8_lookup (idx, lut) = {
    (lut >> (idx @ 0b00))[7..0]
  }
  function clause execute ( XPERM_8 (rs2,rs1,rd)) = {
    result : xlenbits = EXTZ(0b0);
    foreach(i from 0 to xlen by 8) {
      result[i+7..i] = xperm8_lookup(X(rs2)[i+7..i], X(rs1));
    };
    X(rd) = result;
    RETIRE_SUCCESS
  }

# SPDX-SnippetEnd
