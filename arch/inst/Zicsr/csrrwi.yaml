# yaml-language-server: $schema=../../../schemas/inst_schema.json

csrrwi:
  long_name: Atomic Read/Write CSR Immediate
  description: |
    Atomically write CSR using a 5-bit immediate, and load the previous value into 'rd'.

    Read the old value of the CSR, zero-extends the value to `XLEN` bits,
    and then write it to integer register rd.
    The 5-bit uimm field is zero-extended and written to the CSR.
    If `rd=x0`, then the instruction shall not read the CSR and shall not
    cause any of the side effects that might occur on a CSR read.
  definedBy: Zicsr
  assembly: xd, zimm, csr
  encoding:
    match: -----------------101-----1110011
    variables:
    - name: csr
      location: 31-20
    - name: imm
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    if (rd != 0) {
      X[rd] = CSR[csr].sw_read();
    } 

    # writes the zero-extended immediate to the CSR,
    # performing any WARL transformations first
    CSR[csr].sw_write({{XLEN-5{1'b0}}, imm});



  sail(): |
    {
      let rs1_val : xlenbits = if is_imm then zero_extend(rs1) else X(rs1);
      let isWrite : bool = match op {
        CSRRW  => true,
        _      => if is_imm then unsigned(rs1_val) != 0 else unsigned(rs1) != 0
      };
      if not(check_CSR(csr, cur_privilege, isWrite))
      then { handle_illegal(); RETIRE_FAIL }
      else if not(ext_check_CSR(csr, cur_privilege, isWrite))
      then { ext_check_CSR_fail(); RETIRE_FAIL }
      else {
        let csr_val = readCSR(csr); /* could have side-effects, so technically shouldn't perform for CSRW[I] with rd == 0 */
        if isWrite then {
          let new_val : xlenbits = match op {
            CSRRW => rs1_val,
            CSRRS => csr_val | rs1_val,
            CSRRC => csr_val & ~(rs1_val)
          };
          writeCSR(csr, new_val)
        };
        X(rd) = csr_val;
        RETIRE_SUCCESS
      }
    }
  
  


