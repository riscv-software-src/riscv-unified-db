# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: csrrs
long_name: Atomic Read and Set Bits in CSR
description: |
  Atomically read and set bits in a CSR.

  Reads the value of the CSR, zero-extends the value to `XLEN` bits,
  and writes it to integer register `rd`. The initial value in integer
  register `rs1` is treated as a bit mask that specifies bit positions
  to be set in the CSR. Any bit that is high in `rs1` will cause the
  corresponding bit to be set in the CSR, if that CSR bit is writable.
  Other bits in the CSR are not explicitly written.
definedBy: Zicsr
assembly: xd, imm, xs1
encoding:
  match: -----------------010-----1110011
  variables:
    - name: csr
      location: 31-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  Boolean will_write = rs1 != 0;
  check_csr(csr, will_write, $encoding);

  XReg initial_csr_value = CSR[csr].sw_read();

  if (will_write) {
    # set bits using the mask
    # performing any WARL transformations first
    XReg mask = X[rs1];
    CSR[csr].sw_write(initial_csr_value | mask);
  }

  X[rd] = initial_csr_value;

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  {
    let rs1_val : xlenbits = if is_imm then zero_extend(rs1) else X(rs1);
    let isWrite : bool = match op {
      CSRRW  => true,
      _      => if is_imm then unsigned(rs1_val) != 0 else unsigned(rs1) != 0
    };
    if not(check_CSR(csr, cur_privilege, isWrite))
    then { handle_illegal(); RETIRE_FAIL }
    else if not(ext_check_CSR(csr, cur_privilege, isWrite))
    then { ext_check_CSR_fail(); RETIRE_FAIL }
    else {
      let csr_val = readCSR(csr); /* could have side-effects, so technically shouldn't perform for CSRW[I] with rd == 0 */
      if isWrite then {
        let new_val : xlenbits = match op {
          CSRRW => rs1_val,
          CSRRS => csr_val | rs1_val,
          CSRRC => csr_val & ~(rs1_val)
        };
        writeCSR(csr, new_val)
      };
      X(rd) = csr_val;
      RETIRE_SUCCESS
    }
  }

# SPDX-SnippetEnd
