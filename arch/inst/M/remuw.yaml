# yaml-language-server: $schema=../../../schemas/inst_schema.json

remuw:
  long_name: Unsigned 32-bit remainder
  description: |
    Calculate the remainder of unsigned division of the 32-bit values in rs1 by rs2,
    and store the sign-extended result in rd.

    If the value in rs2 is zero, rd gets the sign-extended value in rs1.
  definedBy: M
  assembly: xd, xs1, xs2
  encoding:
    match: 0000001----------111-----0111011
    variables:
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    if (implemented?(ExtensionName::M) && (CSR[misa].M == 1'b0)) {
      raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
    }

    Bits<32> src1 = X[rs1][31:0];
    Bits<32> src2 = X[rs2][31:0];

    if (src2 == 0) {
      # division by zero. Since RISC-V does not have arithmetic exceptions, the result is defined
      # to be the dividend
      Bits<1> sign_bit = src1[31];
      X[rd] = {{32{sign_bit}}, src1};

    } else {
      # no special case

      Bits<32> result = src1 % src2;

      Bits<1> sign_bit = result[31];

      X[rd] = {{32{sign_bit}}, result};
    }



  sail(): |
    {
      if extension("M") then {
        let rs1_val = X(rs1)[31..0];
        let rs2_val = X(rs2)[31..0];
        let rs1_int : int = if s then signed(rs1_val) else unsigned(rs1_val);
        let rs2_int : int = if s then signed(rs2_val) else unsigned(rs2_val);
        let r : int = if rs2_int == 0 then rs1_int else rem_round_zero(rs1_int, rs2_int);
        /* signed overflow case returns zero naturally as required due to -1 divisor */
        X(rd) = sign_extend(to_bits(32, r));
        RETIRE_SUCCESS
      } else {
        handle_illegal();
        RETIRE_FAIL
      }
    }
  
  


