---
# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: amocas.d
long_name: Atomic Compare-and-Swap Doubleword
description: |
  Atomically loads a 64-bit value from memory, compares it with a 64-bit
  register value, and swaps if equal.

  **RV32 Operation:**
  - Atomically loads a 64-bit value from the memory address in rs1 (split
    into rd and rd+1).
  - Compares the loaded value with the 64-bit value stored in the register
    pair rd and rd+1.
  - If the comparison is bitwise equal, stores the 64-bit value from the
    register pair rs2 and rs2+1 back to rs1.
  - Updates rd and rd+1 with the loaded value.

  **RV64 Operation:**
  - Atomically loads a 64-bit value from the memory address in rs1.
  - Compares the loaded value with the 64-bit value stored in rd.
  - If the comparison is bitwise equal, stores the 64-bit value from rs2
    back to rs1.
  - Updates rd with the loaded value.

  **Additional Considerations:**
  - The first register in a pair must be even-numbered; encodings with
    odd-numbered registers in rd or rs2 are reserved.
  - If the first register in a source register pair is x0, both halves
    of the pair read as zero.
  - If the first register in a destination register pair is x0, the result
    is discarded, and neither register in the pair is updated.
  - A FENCE instruction may be used to enforce ordering between the memory
    read and, if produced, the memory write performed by AMOCAS.D.
  - If AMOCAS.D fails, it may either not perform a memory write or write
    back the old value loaded from memory.
  - The memory write, if performed, does not have release semantics,
    regardless of the rl bit.
  - Execution requires write permissions on the memory location.

  **Alignment Requirement:** 8-byte aligned.
  **Memory Semantics:** Supports acquire (aq) and release (rl) consistency.

definedBy: Zacas
assembly: xd, xs1, xs2, aq, rl
encoding:
  match: 00101------------011-----0101111
  variables:
    - name: aq
      location: 26-26
    - name: rl
      location: 25-25
    - name: rs2
      location: 24-20
      not: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
      not: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: false
operation(): |
