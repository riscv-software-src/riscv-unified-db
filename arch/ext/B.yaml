# yaml-language-server: $schema=../../schemas/ext_schema_1.0.json

$schema: ext_schema_1.0.json#
kind: extension
name: B
type: unprivileged
long_name: Bitmanipulation instructions
company:
  name: RISC-V International
  url: https://riscv.org
doc_license:
  name: Creative Commons Attribution 4.0 International License
  url: https://creativecommons.org/licenses/by/4.0/
versions:
  - version: "1.0.0"
    state: ratified
    ratification_date: 2024-04
    contributors:
      - name: Ved Shanbhogue
        email: ved@rivosinc.com
        company: Rivos, Inc.
    url: https://drive.google.com/file/d/1SgLoasaBjs5WboQMaU3wpHkjUwV71UZn/view
    implies:
      - name: Zba
        version: "1.0.0"
      - name: Zbb
        version: "1.0.0"
      - name: Zbs
        version: "1.0.0"

synposis: |
  The B (bitmanip) standard extension is an umbrella extension that

  . implies the `Zba`, `Zbb`, and `Zbs` extensions, and
  . defines the `misa.B` field, which provides an optional way to detect the presence of `Zba`,
    `Zbb`, and `Zbs` and/or dynamically disable the instructions from those implied extensions.

prose:
  - section_name: Overview
    paragraphs:
      - type: motivational
        text: |
          The B extension is intended to provide some combination of code size reduction, performance
          improvement, and energy reduction compared to the standard base RISC-V instructions alone.

      - type: informative
        text: Bit 1 of the `misa` register encodes the presence of the B standard extension.

      - type: intentional
        text: |
          Most of the instructions are expected to be forward compatible with RV128.
          While the shift-immediate instructions are defined to have at most a 6-bit immediate field,
          a 7th bit is available in the encoding space should this be needed for RV128.

  - section_name: Word Instructions
    paragraphs:
      - type: informative
        text: |
          The bitmanip extension follows the convention in RV64 that _w_-suffixed instructions
          (without a dot before the _w_) ignore the upper 32 bits of their inputs, operate on the
          least-significant 32-bits as signed values and produce a 32-bit signed result that is
          sign-extended to XLEN.

      - type: informative
        text: |
          Bitmanip instructions with the suffix _.uw_ have one operand that is an unsigned 32-bit
          value that is extracted from the least significant 32 bits of the specified register.
          Other than that, these perform full XLEN operations.

      - type: informative
        text: |
          Bitmanip instructions with the suffix _.b_, _.h_ and _.w_ only look at the least
          significant 8-bits, 16-bits and 32-bits of the input (respectively) and produce an XLEN-wide
          result that is sign-extended or zero-extended, based on the specific instruction.

rules:
  - type: must
    id: ext-b-implemented
    text: |
      When all of `Zba`, `Zbb`, and `Zbs` are implemented, the B extension must be also be
      implemented.

  - type: must
    id: ext-b-not-implemented
    text: |
      When at least one of `Zba`, `Zbb`, or `Zbs` is not implemented, the B extension cannot be
      implemented and `misa.B` must be read-only-0.

params:
  MUTABLE_MISA_B:
    description: |
      When true, the `misa.B` bit is writable by software.
      When false, the `misa.B` bit read-only-1.
    schema:
      type: boolean
    when:
      param(): return MISA_CSR_IMPLEMENTED;
