%version: 1.0

include "../../../../arch/isa/globals.isa"

builtin function delay {
  arguments XReg cycles
  description {
    Delay the processor by +cycles+ cycles.
  }
}

builtin function iss_syscall {
  arguments XReg id, XReg arg
  description {
    Instruction set simulator system call.
  }
}

builtin function read_device {
  template U32 len
  returns Bits<len>
  arguments XReg dev_addr
  description {
    Read from non-memory-mapped device.
	Such devices have own addresses not related to memory map.
  }
}

builtin function write_device {
  template U32 len
  arguments XReg dev_addr, Bits<len> value
  description {
    Write to non-memory-mapped device.
	Such devices have own addresses not related to memory map.
  }
}

builtin function sync_read_after_write_device {
  arguments Boolean completed, Bits<5> device_bitmask
  description {
    Synchronize non-memory-mapped device read-after-write.
	Such devices have own addresses not related to memory map.
	Devices specified by device bitmask (up to 5 devices).
	Stalls processor till condtions met.
	Conditions are that last device output started or completed (depends on argument).
  }
}

builtin function sync_write_after_read_device {
  arguments Boolean completed, Bits<5> device_bitmask
  description {
    Synchronize non-memory-mapped device write-after-read.
	Such devices have own addresses not related to memory map.
	Devices specified by device bitmask (up to 5 devices).
	Stalls processor till condtions met.
	Conditions are that last device input started or completed (depends on argument).
  }
}

function get_and_validate_stack_pointer {
  returns XReg
  arguments Bits<INSTR_ENC_SIZE> encoding
  description {
    Validate and return stack pointer.
	Stack pointer is validated to fit in range, defined by qc.mstktopaddr and qc.mstkbottomaddr CSRs.
	In case when stack pointer is out-of-range, raising exception SpOutOfRange.
	Stack pointer is also validated to be 16-byte aligned.
	In case when stack pointer is not 16-bytes aligned, raising exception IllegalStackPointer.
  }
  body {
    XReg sp = X[2];
    if (sp < CSR[qc.mstkbottomaddr]) {
      raise(ExceptionCode::SpOutOfRange, mode(), encoding);
    }
    else if (sp > CSR[qc.mstktopaddr]) {
      raise(ExceptionCode::SpOutOfRange, mode(), encoding);
    }
    else if (sp & 0xf != 0) {
      raise(ExceptionCode::IllegalStackPointer, mode(), encoding);
    }
    return sp;
  }
}
