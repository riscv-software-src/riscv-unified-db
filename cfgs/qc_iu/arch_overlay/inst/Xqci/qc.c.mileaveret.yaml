# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: inst_schema.json#
kind: instruction
name: qc.c.mileaveret
long_name: Machine mode interrupt exit
description: |
  Machine mode interrupt exit.
  Interrupt frame is restored from the stack.
  Instruction encoded in CI instruction format.
assembly: ""
definedBy:
  anyOf:
    - Xqci
    - Xqciint
access:
  s: never
  u: never
  vs: never
  vu: never
base: 32
encoding:
  match: "0001101000010010"
operation(): |
  XReg virtual_address = X[2] + 96;
  XReg prev_retpc = read_memory<32>(virtual_address -  4, $encoding);
  XReg curr_retpc = (CSR[mcause].NMI == 1) ? CSR[qc.mnepc].sw_read() : CSR[mepc].sw_read();
  if (CSR[mcause].NMI != 1'b1) {
    CSR[mepc].sw_write(prev_retpc);
  } else {
    CSR[qc.mnepc].sw_write(prev_retpc);
  }
  X[ 8] = read_memory<32>(virtual_address -  8, $encoding);
  CSR[mcause].sw_write(read_memory<32>(virtual_address - 12, $encoding));
  X[ 1] = read_memory<32>(virtual_address - 16, $encoding);
  X[ 5] = read_memory<32>(virtual_address - 24, $encoding);
  X[ 6] = read_memory<32>(virtual_address - 28, $encoding);
  X[ 7] = read_memory<32>(virtual_address - 32, $encoding);
  X[10] = read_memory<32>(virtual_address - 36, $encoding);
  X[11] = read_memory<32>(virtual_address - 40, $encoding);
  X[12] = read_memory<32>(virtual_address - 44, $encoding);
  X[13] = read_memory<32>(virtual_address - 48, $encoding);
  X[14] = read_memory<32>(virtual_address - 52, $encoding);
  X[15] = read_memory<32>(virtual_address - 56, $encoding);
  X[16] = read_memory<32>(virtual_address - 60, $encoding);
  X[17] = read_memory<32>(virtual_address - 64, $encoding);
  X[28] = read_memory<32>(virtual_address - 68, $encoding);
  X[29] = read_memory<32>(virtual_address - 72, $encoding);
  X[30] = read_memory<32>(virtual_address - 76, $encoding);
  X[31] = read_memory<32>(virtual_address - 80, $encoding);
  X[2] = X[2] + 96;
  $pc = curr_retpc;
