[csr:#<%= csr.name %>-def]
= <%= csr.name %>

*<%= csr.long_name %>*

<%= csr.description %>

== Attributes
[%autowidth]
|===
h| CSR Address    | <%= "0x#{csr.address.to_s(16)}" %>
<%- if csr.priv_mode == 'VS' -%>
h| Virtual CSR Address    | <%= "0x#{csr.virtual_address.to_s(16)}" %>
<%- end -%>
<%- if csr.dynamic_length? -%>
h| Length         | <%= csr.length_pretty %>
<%- else -%>
h| Length         | <%= csr.length %>-bit
<%- end -%>
h| Privilege Mode | <%= csr.priv_mode %>
|===

== Format
<%- unless csr.dynamic_length? || csr.fields.any? { |f| f.dynamic_location? } -%>
<%# CSR has a known static length, so there is only one format to display -%>
.<%= csr.name %> format
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(csr.arch_def.config_params["XLEN"]) %>
....
<%- else -%>
<%# CSR has a dynamic length, or a field has a dynamic location,
    so there is more than one format to display -%>
<%- puts "CSR #{csr.name} changes dynamically" -%>
This CSR format changes dynamically.

.<%= csr.name %> Format when <%= csr.length_cond32 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(32) %>
....

.<%= csr.name %> Format when <%= csr.length_cond64 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(64) %>
....


<%- end -%>

== Fields

<%- if csr.fields.empty? -%>
This CSR has no fields. However, it must still exist (not cause an `Illegal Instruction` trap) and always return zero on a read.
<%- else -%>
[%autowidth,float="center",align="center",cols="^,<,<,<,<",options="header",role="stretch"]
|====
|Name | Location | Type | Reset Value | Description

<%- csr.implemented_fields.each do |field| -%>
m| anchor:<%=csr.name%>-<%=field.name%>-def[] <%= field.name %>
| <%= field.location_pretty %>
| <%= field.type %>
| <%= field.reset_value %>
a| <%= arch_def.find_replace_links(field.description) %>
<%- end -%>
|====
<%- end -%>

<%- if csr.fields.map(&:has_custom_write?).any? -%>
== Software write

This CSR may store a value that is different from what software attempts to write.

When a software write occurs (_e.g._, through %%LINK%inst;cssrw;csrrw%%), the following determines the
written value:

[idl]
----
<%- csr.fields.each do |field| -%>
<%- if field.has_custom_write? -%>
<%= field.name %> = <%= field["write(value)"] %>
<%- else -%>
<%= field.name %> = value.<%= field.name %>
<%- end -%>
<%- end -%>
----
<%- end -%>

<%- if csr.has_custom_sw_read? -%>
== Software read

This CSR may return a value that is different from what is stored in hardware.

[subs="specialchars,macros"]
----
<%= csr.sw_read_source %>
----

<%- end -%>

<%- -%>
